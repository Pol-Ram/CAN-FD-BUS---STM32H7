
FDCAN_Simple_Rx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000092e0  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000484  08009580  08009580  0000a580  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08009a04  08009a04  0000aa04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08009a0c  08009a0c  0000aa0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08009a10  08009a10  0000aa10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000001d8  24000000  08009a14  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000004bc  240001d8  08009bec  0000b1d8  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24000694  08009bec  0000b694  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000b1d8  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001427e  00000000  00000000  0000b206  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000022c6  00000000  00000000  0001f484  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000e38  00000000  00000000  00021750  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000af7  00000000  00000000  00022588  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000382eb  00000000  00000000  0002307f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000115fe  00000000  00000000  0005b36a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001657a0  00000000  00000000  0006c968  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001d2108  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004bbc  00000000  00000000  001d214c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000006d  00000000  00000000  001d6d08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001d8 	.word	0x240001d8
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08009568 	.word	0x08009568

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001dc 	.word	0x240001dc
 80002dc:	08009568 	.word	0x08009568

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b988 	b.w	80006b8 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	468e      	mov	lr, r1
 80003c8:	4604      	mov	r4, r0
 80003ca:	4688      	mov	r8, r1
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d14a      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d962      	bls.n	800049c <__udivmoddi4+0xdc>
 80003d6:	fab2 f682 	clz	r6, r2
 80003da:	b14e      	cbz	r6, 80003f0 <__udivmoddi4+0x30>
 80003dc:	f1c6 0320 	rsb	r3, r6, #32
 80003e0:	fa01 f806 	lsl.w	r8, r1, r6
 80003e4:	fa20 f303 	lsr.w	r3, r0, r3
 80003e8:	40b7      	lsls	r7, r6
 80003ea:	ea43 0808 	orr.w	r8, r3, r8
 80003ee:	40b4      	lsls	r4, r6
 80003f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003f4:	fa1f fc87 	uxth.w	ip, r7
 80003f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80003fc:	0c23      	lsrs	r3, r4, #16
 80003fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000402:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000406:	fb01 f20c 	mul.w	r2, r1, ip
 800040a:	429a      	cmp	r2, r3
 800040c:	d909      	bls.n	8000422 <__udivmoddi4+0x62>
 800040e:	18fb      	adds	r3, r7, r3
 8000410:	f101 30ff 	add.w	r0, r1, #4294967295
 8000414:	f080 80ea 	bcs.w	80005ec <__udivmoddi4+0x22c>
 8000418:	429a      	cmp	r2, r3
 800041a:	f240 80e7 	bls.w	80005ec <__udivmoddi4+0x22c>
 800041e:	3902      	subs	r1, #2
 8000420:	443b      	add	r3, r7
 8000422:	1a9a      	subs	r2, r3, r2
 8000424:	b2a3      	uxth	r3, r4
 8000426:	fbb2 f0fe 	udiv	r0, r2, lr
 800042a:	fb0e 2210 	mls	r2, lr, r0, r2
 800042e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000432:	fb00 fc0c 	mul.w	ip, r0, ip
 8000436:	459c      	cmp	ip, r3
 8000438:	d909      	bls.n	800044e <__udivmoddi4+0x8e>
 800043a:	18fb      	adds	r3, r7, r3
 800043c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000440:	f080 80d6 	bcs.w	80005f0 <__udivmoddi4+0x230>
 8000444:	459c      	cmp	ip, r3
 8000446:	f240 80d3 	bls.w	80005f0 <__udivmoddi4+0x230>
 800044a:	443b      	add	r3, r7
 800044c:	3802      	subs	r0, #2
 800044e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000452:	eba3 030c 	sub.w	r3, r3, ip
 8000456:	2100      	movs	r1, #0
 8000458:	b11d      	cbz	r5, 8000462 <__udivmoddi4+0xa2>
 800045a:	40f3      	lsrs	r3, r6
 800045c:	2200      	movs	r2, #0
 800045e:	e9c5 3200 	strd	r3, r2, [r5]
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d905      	bls.n	8000476 <__udivmoddi4+0xb6>
 800046a:	b10d      	cbz	r5, 8000470 <__udivmoddi4+0xb0>
 800046c:	e9c5 0100 	strd	r0, r1, [r5]
 8000470:	2100      	movs	r1, #0
 8000472:	4608      	mov	r0, r1
 8000474:	e7f5      	b.n	8000462 <__udivmoddi4+0xa2>
 8000476:	fab3 f183 	clz	r1, r3
 800047a:	2900      	cmp	r1, #0
 800047c:	d146      	bne.n	800050c <__udivmoddi4+0x14c>
 800047e:	4573      	cmp	r3, lr
 8000480:	d302      	bcc.n	8000488 <__udivmoddi4+0xc8>
 8000482:	4282      	cmp	r2, r0
 8000484:	f200 8105 	bhi.w	8000692 <__udivmoddi4+0x2d2>
 8000488:	1a84      	subs	r4, r0, r2
 800048a:	eb6e 0203 	sbc.w	r2, lr, r3
 800048e:	2001      	movs	r0, #1
 8000490:	4690      	mov	r8, r2
 8000492:	2d00      	cmp	r5, #0
 8000494:	d0e5      	beq.n	8000462 <__udivmoddi4+0xa2>
 8000496:	e9c5 4800 	strd	r4, r8, [r5]
 800049a:	e7e2      	b.n	8000462 <__udivmoddi4+0xa2>
 800049c:	2a00      	cmp	r2, #0
 800049e:	f000 8090 	beq.w	80005c2 <__udivmoddi4+0x202>
 80004a2:	fab2 f682 	clz	r6, r2
 80004a6:	2e00      	cmp	r6, #0
 80004a8:	f040 80a4 	bne.w	80005f4 <__udivmoddi4+0x234>
 80004ac:	1a8a      	subs	r2, r1, r2
 80004ae:	0c03      	lsrs	r3, r0, #16
 80004b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004b4:	b280      	uxth	r0, r0
 80004b6:	b2bc      	uxth	r4, r7
 80004b8:	2101      	movs	r1, #1
 80004ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80004be:	fb0e 221c 	mls	r2, lr, ip, r2
 80004c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004c6:	fb04 f20c 	mul.w	r2, r4, ip
 80004ca:	429a      	cmp	r2, r3
 80004cc:	d907      	bls.n	80004de <__udivmoddi4+0x11e>
 80004ce:	18fb      	adds	r3, r7, r3
 80004d0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80004d4:	d202      	bcs.n	80004dc <__udivmoddi4+0x11c>
 80004d6:	429a      	cmp	r2, r3
 80004d8:	f200 80e0 	bhi.w	800069c <__udivmoddi4+0x2dc>
 80004dc:	46c4      	mov	ip, r8
 80004de:	1a9b      	subs	r3, r3, r2
 80004e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80004e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80004e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80004ec:	fb02 f404 	mul.w	r4, r2, r4
 80004f0:	429c      	cmp	r4, r3
 80004f2:	d907      	bls.n	8000504 <__udivmoddi4+0x144>
 80004f4:	18fb      	adds	r3, r7, r3
 80004f6:	f102 30ff 	add.w	r0, r2, #4294967295
 80004fa:	d202      	bcs.n	8000502 <__udivmoddi4+0x142>
 80004fc:	429c      	cmp	r4, r3
 80004fe:	f200 80ca 	bhi.w	8000696 <__udivmoddi4+0x2d6>
 8000502:	4602      	mov	r2, r0
 8000504:	1b1b      	subs	r3, r3, r4
 8000506:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800050a:	e7a5      	b.n	8000458 <__udivmoddi4+0x98>
 800050c:	f1c1 0620 	rsb	r6, r1, #32
 8000510:	408b      	lsls	r3, r1
 8000512:	fa22 f706 	lsr.w	r7, r2, r6
 8000516:	431f      	orrs	r7, r3
 8000518:	fa0e f401 	lsl.w	r4, lr, r1
 800051c:	fa20 f306 	lsr.w	r3, r0, r6
 8000520:	fa2e fe06 	lsr.w	lr, lr, r6
 8000524:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000528:	4323      	orrs	r3, r4
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	fa1f fc87 	uxth.w	ip, r7
 8000532:	fbbe f0f9 	udiv	r0, lr, r9
 8000536:	0c1c      	lsrs	r4, r3, #16
 8000538:	fb09 ee10 	mls	lr, r9, r0, lr
 800053c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000540:	fb00 fe0c 	mul.w	lr, r0, ip
 8000544:	45a6      	cmp	lr, r4
 8000546:	fa02 f201 	lsl.w	r2, r2, r1
 800054a:	d909      	bls.n	8000560 <__udivmoddi4+0x1a0>
 800054c:	193c      	adds	r4, r7, r4
 800054e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000552:	f080 809c 	bcs.w	800068e <__udivmoddi4+0x2ce>
 8000556:	45a6      	cmp	lr, r4
 8000558:	f240 8099 	bls.w	800068e <__udivmoddi4+0x2ce>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	eba4 040e 	sub.w	r4, r4, lr
 8000564:	fa1f fe83 	uxth.w	lr, r3
 8000568:	fbb4 f3f9 	udiv	r3, r4, r9
 800056c:	fb09 4413 	mls	r4, r9, r3, r4
 8000570:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000574:	fb03 fc0c 	mul.w	ip, r3, ip
 8000578:	45a4      	cmp	ip, r4
 800057a:	d908      	bls.n	800058e <__udivmoddi4+0x1ce>
 800057c:	193c      	adds	r4, r7, r4
 800057e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000582:	f080 8082 	bcs.w	800068a <__udivmoddi4+0x2ca>
 8000586:	45a4      	cmp	ip, r4
 8000588:	d97f      	bls.n	800068a <__udivmoddi4+0x2ca>
 800058a:	3b02      	subs	r3, #2
 800058c:	443c      	add	r4, r7
 800058e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000592:	eba4 040c 	sub.w	r4, r4, ip
 8000596:	fba0 ec02 	umull	lr, ip, r0, r2
 800059a:	4564      	cmp	r4, ip
 800059c:	4673      	mov	r3, lr
 800059e:	46e1      	mov	r9, ip
 80005a0:	d362      	bcc.n	8000668 <__udivmoddi4+0x2a8>
 80005a2:	d05f      	beq.n	8000664 <__udivmoddi4+0x2a4>
 80005a4:	b15d      	cbz	r5, 80005be <__udivmoddi4+0x1fe>
 80005a6:	ebb8 0203 	subs.w	r2, r8, r3
 80005aa:	eb64 0409 	sbc.w	r4, r4, r9
 80005ae:	fa04 f606 	lsl.w	r6, r4, r6
 80005b2:	fa22 f301 	lsr.w	r3, r2, r1
 80005b6:	431e      	orrs	r6, r3
 80005b8:	40cc      	lsrs	r4, r1
 80005ba:	e9c5 6400 	strd	r6, r4, [r5]
 80005be:	2100      	movs	r1, #0
 80005c0:	e74f      	b.n	8000462 <__udivmoddi4+0xa2>
 80005c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005c6:	0c01      	lsrs	r1, r0, #16
 80005c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005cc:	b280      	uxth	r0, r0
 80005ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005d2:	463b      	mov	r3, r7
 80005d4:	4638      	mov	r0, r7
 80005d6:	463c      	mov	r4, r7
 80005d8:	46b8      	mov	r8, r7
 80005da:	46be      	mov	lr, r7
 80005dc:	2620      	movs	r6, #32
 80005de:	fbb1 f1f7 	udiv	r1, r1, r7
 80005e2:	eba2 0208 	sub.w	r2, r2, r8
 80005e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005ea:	e766      	b.n	80004ba <__udivmoddi4+0xfa>
 80005ec:	4601      	mov	r1, r0
 80005ee:	e718      	b.n	8000422 <__udivmoddi4+0x62>
 80005f0:	4610      	mov	r0, r2
 80005f2:	e72c      	b.n	800044e <__udivmoddi4+0x8e>
 80005f4:	f1c6 0220 	rsb	r2, r6, #32
 80005f8:	fa2e f302 	lsr.w	r3, lr, r2
 80005fc:	40b7      	lsls	r7, r6
 80005fe:	40b1      	lsls	r1, r6
 8000600:	fa20 f202 	lsr.w	r2, r0, r2
 8000604:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000608:	430a      	orrs	r2, r1
 800060a:	fbb3 f8fe 	udiv	r8, r3, lr
 800060e:	b2bc      	uxth	r4, r7
 8000610:	fb0e 3318 	mls	r3, lr, r8, r3
 8000614:	0c11      	lsrs	r1, r2, #16
 8000616:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800061a:	fb08 f904 	mul.w	r9, r8, r4
 800061e:	40b0      	lsls	r0, r6
 8000620:	4589      	cmp	r9, r1
 8000622:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000626:	b280      	uxth	r0, r0
 8000628:	d93e      	bls.n	80006a8 <__udivmoddi4+0x2e8>
 800062a:	1879      	adds	r1, r7, r1
 800062c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000630:	d201      	bcs.n	8000636 <__udivmoddi4+0x276>
 8000632:	4589      	cmp	r9, r1
 8000634:	d81f      	bhi.n	8000676 <__udivmoddi4+0x2b6>
 8000636:	eba1 0109 	sub.w	r1, r1, r9
 800063a:	fbb1 f9fe 	udiv	r9, r1, lr
 800063e:	fb09 f804 	mul.w	r8, r9, r4
 8000642:	fb0e 1119 	mls	r1, lr, r9, r1
 8000646:	b292      	uxth	r2, r2
 8000648:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800064c:	4542      	cmp	r2, r8
 800064e:	d229      	bcs.n	80006a4 <__udivmoddi4+0x2e4>
 8000650:	18ba      	adds	r2, r7, r2
 8000652:	f109 31ff 	add.w	r1, r9, #4294967295
 8000656:	d2c4      	bcs.n	80005e2 <__udivmoddi4+0x222>
 8000658:	4542      	cmp	r2, r8
 800065a:	d2c2      	bcs.n	80005e2 <__udivmoddi4+0x222>
 800065c:	f1a9 0102 	sub.w	r1, r9, #2
 8000660:	443a      	add	r2, r7
 8000662:	e7be      	b.n	80005e2 <__udivmoddi4+0x222>
 8000664:	45f0      	cmp	r8, lr
 8000666:	d29d      	bcs.n	80005a4 <__udivmoddi4+0x1e4>
 8000668:	ebbe 0302 	subs.w	r3, lr, r2
 800066c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000670:	3801      	subs	r0, #1
 8000672:	46e1      	mov	r9, ip
 8000674:	e796      	b.n	80005a4 <__udivmoddi4+0x1e4>
 8000676:	eba7 0909 	sub.w	r9, r7, r9
 800067a:	4449      	add	r1, r9
 800067c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000680:	fbb1 f9fe 	udiv	r9, r1, lr
 8000684:	fb09 f804 	mul.w	r8, r9, r4
 8000688:	e7db      	b.n	8000642 <__udivmoddi4+0x282>
 800068a:	4673      	mov	r3, lr
 800068c:	e77f      	b.n	800058e <__udivmoddi4+0x1ce>
 800068e:	4650      	mov	r0, sl
 8000690:	e766      	b.n	8000560 <__udivmoddi4+0x1a0>
 8000692:	4608      	mov	r0, r1
 8000694:	e6fd      	b.n	8000492 <__udivmoddi4+0xd2>
 8000696:	443b      	add	r3, r7
 8000698:	3a02      	subs	r2, #2
 800069a:	e733      	b.n	8000504 <__udivmoddi4+0x144>
 800069c:	f1ac 0c02 	sub.w	ip, ip, #2
 80006a0:	443b      	add	r3, r7
 80006a2:	e71c      	b.n	80004de <__udivmoddi4+0x11e>
 80006a4:	4649      	mov	r1, r9
 80006a6:	e79c      	b.n	80005e2 <__udivmoddi4+0x222>
 80006a8:	eba1 0109 	sub.w	r1, r1, r9
 80006ac:	46c4      	mov	ip, r8
 80006ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80006b2:	fb09 f804 	mul.w	r8, r9, r4
 80006b6:	e7c4      	b.n	8000642 <__udivmoddi4+0x282>

080006b8 <__aeabi_idiv0>:
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop

080006bc <HAL_FDCAN_RxFifo0Callback>:
//char msg[50]; // Buffer para el mensaje con el valor del botón



void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b094      	sub	sp, #80	@ 0x50
 80006c0:	af10      	add	r7, sp, #64	@ 0x40
 80006c2:	6078      	str	r0, [r7, #4]
 80006c4:	6039      	str	r1, [r7, #0]
  if ((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != 0)
 80006c6:	683b      	ldr	r3, [r7, #0]
 80006c8:	f003 0301 	and.w	r3, r3, #1
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d06c      	beq.n	80007aa <HAL_FDCAN_RxFifo0Callback+0xee>
  {


	    HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader, RxData);
 80006d0:	4b38      	ldr	r3, [pc, #224]	@ (80007b4 <HAL_FDCAN_RxFifo0Callback+0xf8>)
 80006d2:	4a39      	ldr	r2, [pc, #228]	@ (80007b8 <HAL_FDCAN_RxFifo0Callback+0xfc>)
 80006d4:	2140      	movs	r1, #64	@ 0x40
 80006d6:	6878      	ldr	r0, [r7, #4]
 80006d8:	f001 f986 	bl	80019e8 <HAL_FDCAN_GetRxMessage>

	    memcpy(&received_float_1, &RxData[0], sizeof(float));
 80006dc:	4b35      	ldr	r3, [pc, #212]	@ (80007b4 <HAL_FDCAN_RxFifo0Callback+0xf8>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	4a36      	ldr	r2, [pc, #216]	@ (80007bc <HAL_FDCAN_RxFifo0Callback+0x100>)
 80006e2:	6013      	str	r3, [r2, #0]
	    memcpy(&received_float_2, &RxData[4], sizeof(float));
 80006e4:	4b33      	ldr	r3, [pc, #204]	@ (80007b4 <HAL_FDCAN_RxFifo0Callback+0xf8>)
 80006e6:	685b      	ldr	r3, [r3, #4]
 80006e8:	4a35      	ldr	r2, [pc, #212]	@ (80007c0 <HAL_FDCAN_RxFifo0Callback+0x104>)
 80006ea:	6013      	str	r3, [r2, #0]
	    memcpy(&received_float_3, &RxData[8], sizeof(float));
 80006ec:	4b31      	ldr	r3, [pc, #196]	@ (80007b4 <HAL_FDCAN_RxFifo0Callback+0xf8>)
 80006ee:	689b      	ldr	r3, [r3, #8]
 80006f0:	4a34      	ldr	r2, [pc, #208]	@ (80007c4 <HAL_FDCAN_RxFifo0Callback+0x108>)
 80006f2:	6013      	str	r3, [r2, #0]
	    memcpy(&received_float_4, &RxData[12], sizeof(float));
 80006f4:	4b2f      	ldr	r3, [pc, #188]	@ (80007b4 <HAL_FDCAN_RxFifo0Callback+0xf8>)
 80006f6:	68db      	ldr	r3, [r3, #12]
 80006f8:	4a33      	ldr	r2, [pc, #204]	@ (80007c8 <HAL_FDCAN_RxFifo0Callback+0x10c>)
 80006fa:	6013      	str	r3, [r2, #0]
	    memcpy(&received_float_5, &RxData[16], sizeof(float));
 80006fc:	4b2d      	ldr	r3, [pc, #180]	@ (80007b4 <HAL_FDCAN_RxFifo0Callback+0xf8>)
 80006fe:	691b      	ldr	r3, [r3, #16]
 8000700:	4a32      	ldr	r2, [pc, #200]	@ (80007cc <HAL_FDCAN_RxFifo0Callback+0x110>)
 8000702:	6013      	str	r3, [r2, #0]
	    memcpy(&received_float_6, &RxData[20], sizeof(float));
 8000704:	4b2b      	ldr	r3, [pc, #172]	@ (80007b4 <HAL_FDCAN_RxFifo0Callback+0xf8>)
 8000706:	695b      	ldr	r3, [r3, #20]
 8000708:	4a31      	ldr	r2, [pc, #196]	@ (80007d0 <HAL_FDCAN_RxFifo0Callback+0x114>)
 800070a:	6013      	str	r3, [r2, #0]
	    memcpy(&received_float_7, &RxData[24], sizeof(float));
 800070c:	4b29      	ldr	r3, [pc, #164]	@ (80007b4 <HAL_FDCAN_RxFifo0Callback+0xf8>)
 800070e:	699b      	ldr	r3, [r3, #24]
 8000710:	4a30      	ldr	r2, [pc, #192]	@ (80007d4 <HAL_FDCAN_RxFifo0Callback+0x118>)
 8000712:	6013      	str	r3, [r2, #0]
	    memcpy(&received_float_8, &RxData[28], sizeof(float));
 8000714:	4b27      	ldr	r3, [pc, #156]	@ (80007b4 <HAL_FDCAN_RxFifo0Callback+0xf8>)
 8000716:	69db      	ldr	r3, [r3, #28]
 8000718:	4a2f      	ldr	r2, [pc, #188]	@ (80007d8 <HAL_FDCAN_RxFifo0Callback+0x11c>)
 800071a:	6013      	str	r3, [r2, #0]
	    /*
	    received_int_1 = (RxData[8] << 24) | (RxData[9] << 16) |
	                     (RxData[10] << 8) | RxData[11];
		*/

	    int len = snprintf(msg, sizeof(msg), "Received: Temperature: %.2f, Humidity: %.2f \r\n Angle: %.2f \r\n Ax: %.2f, Ay: %.2f Az: %.2f \r\n Float1: %.2f Float2: %.2f  \r\n", received_float_1, received_float_2, received_float_3, received_float_4, received_float_5, received_float_6, received_float_7,received_float_8);
 800071c:	4b27      	ldr	r3, [pc, #156]	@ (80007bc <HAL_FDCAN_RxFifo0Callback+0x100>)
 800071e:	edd3 7a00 	vldr	s15, [r3]
 8000722:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000726:	4b26      	ldr	r3, [pc, #152]	@ (80007c0 <HAL_FDCAN_RxFifo0Callback+0x104>)
 8000728:	edd3 6a00 	vldr	s13, [r3]
 800072c:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8000730:	4b24      	ldr	r3, [pc, #144]	@ (80007c4 <HAL_FDCAN_RxFifo0Callback+0x108>)
 8000732:	edd3 5a00 	vldr	s11, [r3]
 8000736:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
 800073a:	4b23      	ldr	r3, [pc, #140]	@ (80007c8 <HAL_FDCAN_RxFifo0Callback+0x10c>)
 800073c:	edd3 4a00 	vldr	s9, [r3]
 8000740:	eeb7 4ae4 	vcvt.f64.f32	d4, s9
 8000744:	4b21      	ldr	r3, [pc, #132]	@ (80007cc <HAL_FDCAN_RxFifo0Callback+0x110>)
 8000746:	edd3 3a00 	vldr	s7, [r3]
 800074a:	eeb7 3ae3 	vcvt.f64.f32	d3, s7
 800074e:	4b20      	ldr	r3, [pc, #128]	@ (80007d0 <HAL_FDCAN_RxFifo0Callback+0x114>)
 8000750:	edd3 2a00 	vldr	s5, [r3]
 8000754:	eeb7 2ae2 	vcvt.f64.f32	d2, s5
 8000758:	4b1e      	ldr	r3, [pc, #120]	@ (80007d4 <HAL_FDCAN_RxFifo0Callback+0x118>)
 800075a:	edd3 1a00 	vldr	s3, [r3]
 800075e:	eeb7 1ae1 	vcvt.f64.f32	d1, s3
 8000762:	4b1d      	ldr	r3, [pc, #116]	@ (80007d8 <HAL_FDCAN_RxFifo0Callback+0x11c>)
 8000764:	edd3 0a00 	vldr	s1, [r3]
 8000768:	eeb7 0ae0 	vcvt.f64.f32	d0, s1
 800076c:	ed8d 0b0e 	vstr	d0, [sp, #56]	@ 0x38
 8000770:	ed8d 1b0c 	vstr	d1, [sp, #48]	@ 0x30
 8000774:	ed8d 2b0a 	vstr	d2, [sp, #40]	@ 0x28
 8000778:	ed8d 3b08 	vstr	d3, [sp, #32]
 800077c:	ed8d 4b06 	vstr	d4, [sp, #24]
 8000780:	ed8d 5b04 	vstr	d5, [sp, #16]
 8000784:	ed8d 6b02 	vstr	d6, [sp, #8]
 8000788:	ed8d 7b00 	vstr	d7, [sp]
 800078c:	4a13      	ldr	r2, [pc, #76]	@ (80007dc <HAL_FDCAN_RxFifo0Callback+0x120>)
 800078e:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8000792:	4813      	ldr	r0, [pc, #76]	@ (80007e0 <HAL_FDCAN_RxFifo0Callback+0x124>)
 8000794:	f006 fe14 	bl	80073c0 <sniprintf>
 8000798:	60f8      	str	r0, [r7, #12]
	    HAL_UART_Transmit(&huart3, (uint8_t *)msg, len, HAL_MAX_DELAY);
 800079a:	68fb      	ldr	r3, [r7, #12]
 800079c:	b29a      	uxth	r2, r3
 800079e:	f04f 33ff 	mov.w	r3, #4294967295
 80007a2:	490f      	ldr	r1, [pc, #60]	@ (80007e0 <HAL_FDCAN_RxFifo0Callback+0x124>)
 80007a4:	480f      	ldr	r0, [pc, #60]	@ (80007e4 <HAL_FDCAN_RxFifo0Callback+0x128>)
 80007a6:	f004 fffb 	bl	80057a0 <HAL_UART_Transmit>
	    sprintf(msg, "Float recibido: %.4f\r\n", received_float);
	    HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY)
	    */

  }
}
 80007aa:	bf00      	nop
 80007ac:	3710      	adds	r7, #16
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	24000350 	.word	0x24000350
 80007b8:	24000328 	.word	0x24000328
 80007bc:	24000390 	.word	0x24000390
 80007c0:	24000394 	.word	0x24000394
 80007c4:	24000398 	.word	0x24000398
 80007c8:	2400039c 	.word	0x2400039c
 80007cc:	240003a0 	.word	0x240003a0
 80007d0:	240003a4 	.word	0x240003a4
 80007d4:	240003a8 	.word	0x240003a8
 80007d8:	240003ac 	.word	0x240003ac
 80007dc:	08009580 	.word	0x08009580
 80007e0:	240003b0 	.word	0x240003b0
 80007e4:	24000294 	.word	0x24000294

080007e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b088      	sub	sp, #32
 80007ec:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007ee:	f000 fccd 	bl	800118c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007f2:	f000 f825 	bl	8000840 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007f6:	f000 f951 	bl	8000a9c <MX_GPIO_Init>
  MX_FDCAN1_Init();
 80007fa:	f000 f89d 	bl	8000938 <MX_FDCAN1_Init>
  MX_USART3_UART_Init();
 80007fe:	f000 f901 	bl	8000a04 <MX_USART3_UART_Init>
  // Filtro: aceptar solo mensajes con ID del otro nodo


  // Configurar el filtro para recibir solo del otro nodo
  FDCAN_FilterTypeDef sFilterConfig;
  sFilterConfig.IdType = FDCAN_STANDARD_ID;
 8000802:	2300      	movs	r3, #0
 8000804:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIndex = 0;
 8000806:	2300      	movs	r3, #0
 8000808:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 800080a:	2302      	movs	r3, #2
 800080c:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 800080e:	2301      	movs	r3, #1
 8000810:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterID1 = ID_NODE_B_RX;
 8000812:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000816:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterID2 = 0x7FF;
 8000818:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 800081c:	617b      	str	r3, [r7, #20]
  HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig);
 800081e:	463b      	mov	r3, r7
 8000820:	4619      	mov	r1, r3
 8000822:	4806      	ldr	r0, [pc, #24]	@ (800083c <main+0x54>)
 8000824:	f001 f83e 	bl	80018a4 <HAL_FDCAN_ConfigFilter>

  HAL_FDCAN_Start(&hfdcan1);
 8000828:	4804      	ldr	r0, [pc, #16]	@ (800083c <main+0x54>)
 800082a:	f001 f8b1 	bl	8001990 <HAL_FDCAN_Start>
  HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0);
 800082e:	2200      	movs	r2, #0
 8000830:	2101      	movs	r1, #1
 8000832:	4802      	ldr	r0, [pc, #8]	@ (800083c <main+0x54>)
 8000834:	f001 fa44 	bl	8001cc0 <HAL_FDCAN_ActivateNotification>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000838:	bf00      	nop
 800083a:	e7fd      	b.n	8000838 <main+0x50>
 800083c:	240001f4 	.word	0x240001f4

08000840 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b09c      	sub	sp, #112	@ 0x70
 8000844:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000846:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800084a:	224c      	movs	r2, #76	@ 0x4c
 800084c:	2100      	movs	r1, #0
 800084e:	4618      	mov	r0, r3
 8000850:	f006 fe2f 	bl	80074b2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000854:	1d3b      	adds	r3, r7, #4
 8000856:	2220      	movs	r2, #32
 8000858:	2100      	movs	r1, #0
 800085a:	4618      	mov	r0, r3
 800085c:	f006 fe29 	bl	80074b2 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000860:	2002      	movs	r0, #2
 8000862:	f002 f901 	bl	8002a68 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000866:	2300      	movs	r3, #0
 8000868:	603b      	str	r3, [r7, #0]
 800086a:	4b31      	ldr	r3, [pc, #196]	@ (8000930 <SystemClock_Config+0xf0>)
 800086c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800086e:	4a30      	ldr	r2, [pc, #192]	@ (8000930 <SystemClock_Config+0xf0>)
 8000870:	f023 0301 	bic.w	r3, r3, #1
 8000874:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000876:	4b2e      	ldr	r3, [pc, #184]	@ (8000930 <SystemClock_Config+0xf0>)
 8000878:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800087a:	f003 0301 	and.w	r3, r3, #1
 800087e:	603b      	str	r3, [r7, #0]
 8000880:	4b2c      	ldr	r3, [pc, #176]	@ (8000934 <SystemClock_Config+0xf4>)
 8000882:	699b      	ldr	r3, [r3, #24]
 8000884:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000888:	4a2a      	ldr	r2, [pc, #168]	@ (8000934 <SystemClock_Config+0xf4>)
 800088a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800088e:	6193      	str	r3, [r2, #24]
 8000890:	4b28      	ldr	r3, [pc, #160]	@ (8000934 <SystemClock_Config+0xf4>)
 8000892:	699b      	ldr	r3, [r3, #24]
 8000894:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000898:	603b      	str	r3, [r7, #0]
 800089a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800089c:	bf00      	nop
 800089e:	4b25      	ldr	r3, [pc, #148]	@ (8000934 <SystemClock_Config+0xf4>)
 80008a0:	699b      	ldr	r3, [r3, #24]
 80008a2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80008a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80008aa:	d1f8      	bne.n	800089e <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008ac:	2302      	movs	r3, #2
 80008ae:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80008b0:	2301      	movs	r3, #1
 80008b2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008b4:	2340      	movs	r3, #64	@ 0x40
 80008b6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008b8:	2302      	movs	r3, #2
 80008ba:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008bc:	2300      	movs	r3, #0
 80008be:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80008c0:	2304      	movs	r3, #4
 80008c2:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 10;
 80008c4:	230a      	movs	r3, #10
 80008c6:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80008c8:	2302      	movs	r3, #2
 80008ca:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80008cc:	2304      	movs	r3, #4
 80008ce:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80008d0:	2302      	movs	r3, #2
 80008d2:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80008d4:	230c      	movs	r3, #12
 80008d6:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 80008d8:	2302      	movs	r3, #2
 80008da:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80008dc:	2300      	movs	r3, #0
 80008de:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008e0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008e4:	4618      	mov	r0, r3
 80008e6:	f002 f8f9 	bl	8002adc <HAL_RCC_OscConfig>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d001      	beq.n	80008f4 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80008f0:	f000 f96c 	bl	8000bcc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008f4:	233f      	movs	r3, #63	@ 0x3f
 80008f6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80008f8:	2300      	movs	r3, #0
 80008fa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80008fc:	2300      	movs	r3, #0
 80008fe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000900:	2300      	movs	r3, #0
 8000902:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000904:	2300      	movs	r3, #0
 8000906:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000908:	2300      	movs	r3, #0
 800090a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 800090c:	2300      	movs	r3, #0
 800090e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000910:	2300      	movs	r3, #0
 8000912:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000914:	1d3b      	adds	r3, r7, #4
 8000916:	2101      	movs	r1, #1
 8000918:	4618      	mov	r0, r3
 800091a:	f002 fd39 	bl	8003390 <HAL_RCC_ClockConfig>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d001      	beq.n	8000928 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8000924:	f000 f952 	bl	8000bcc <Error_Handler>
  }
}
 8000928:	bf00      	nop
 800092a:	3770      	adds	r7, #112	@ 0x70
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}
 8000930:	58000400 	.word	0x58000400
 8000934:	58024800 	.word	0x58024800

08000938 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 800093c:	4b2f      	ldr	r3, [pc, #188]	@ (80009fc <MX_FDCAN1_Init+0xc4>)
 800093e:	4a30      	ldr	r2, [pc, #192]	@ (8000a00 <MX_FDCAN1_Init+0xc8>)
 8000940:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_NO_BRS;
 8000942:	4b2e      	ldr	r3, [pc, #184]	@ (80009fc <MX_FDCAN1_Init+0xc4>)
 8000944:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000948:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 800094a:	4b2c      	ldr	r3, [pc, #176]	@ (80009fc <MX_FDCAN1_Init+0xc4>)
 800094c:	2200      	movs	r2, #0
 800094e:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 8000950:	4b2a      	ldr	r3, [pc, #168]	@ (80009fc <MX_FDCAN1_Init+0xc4>)
 8000952:	2201      	movs	r2, #1
 8000954:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000956:	4b29      	ldr	r3, [pc, #164]	@ (80009fc <MX_FDCAN1_Init+0xc4>)
 8000958:	2200      	movs	r2, #0
 800095a:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 800095c:	4b27      	ldr	r3, [pc, #156]	@ (80009fc <MX_FDCAN1_Init+0xc4>)
 800095e:	2200      	movs	r2, #0
 8000960:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8000962:	4b26      	ldr	r3, [pc, #152]	@ (80009fc <MX_FDCAN1_Init+0xc4>)
 8000964:	2201      	movs	r2, #1
 8000966:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 11;
 8000968:	4b24      	ldr	r3, [pc, #144]	@ (80009fc <MX_FDCAN1_Init+0xc4>)
 800096a:	220b      	movs	r2, #11
 800096c:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 68;
 800096e:	4b23      	ldr	r3, [pc, #140]	@ (80009fc <MX_FDCAN1_Init+0xc4>)
 8000970:	2244      	movs	r2, #68	@ 0x44
 8000972:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 11;
 8000974:	4b21      	ldr	r3, [pc, #132]	@ (80009fc <MX_FDCAN1_Init+0xc4>)
 8000976:	220b      	movs	r2, #11
 8000978:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 16;
 800097a:	4b20      	ldr	r3, [pc, #128]	@ (80009fc <MX_FDCAN1_Init+0xc4>)
 800097c:	2210      	movs	r2, #16
 800097e:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 2;
 8000980:	4b1e      	ldr	r3, [pc, #120]	@ (80009fc <MX_FDCAN1_Init+0xc4>)
 8000982:	2202      	movs	r2, #2
 8000984:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 2;
 8000986:	4b1d      	ldr	r3, [pc, #116]	@ (80009fc <MX_FDCAN1_Init+0xc4>)
 8000988:	2202      	movs	r2, #2
 800098a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 2;
 800098c:	4b1b      	ldr	r3, [pc, #108]	@ (80009fc <MX_FDCAN1_Init+0xc4>)
 800098e:	2202      	movs	r2, #2
 8000990:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.MessageRAMOffset = 1;
 8000992:	4b1a      	ldr	r3, [pc, #104]	@ (80009fc <MX_FDCAN1_Init+0xc4>)
 8000994:	2201      	movs	r2, #1
 8000996:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 8000998:	4b18      	ldr	r3, [pc, #96]	@ (80009fc <MX_FDCAN1_Init+0xc4>)
 800099a:	2200      	movs	r2, #0
 800099c:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 800099e:	4b17      	ldr	r3, [pc, #92]	@ (80009fc <MX_FDCAN1_Init+0xc4>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 1;
 80009a4:	4b15      	ldr	r3, [pc, #84]	@ (80009fc <MX_FDCAN1_Init+0xc4>)
 80009a6:	2201      	movs	r2, #1
 80009a8:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_32;
 80009aa:	4b14      	ldr	r3, [pc, #80]	@ (80009fc <MX_FDCAN1_Init+0xc4>)
 80009ac:	220a      	movs	r2, #10
 80009ae:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 80009b0:	4b12      	ldr	r3, [pc, #72]	@ (80009fc <MX_FDCAN1_Init+0xc4>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_32;
 80009b6:	4b11      	ldr	r3, [pc, #68]	@ (80009fc <MX_FDCAN1_Init+0xc4>)
 80009b8:	220a      	movs	r2, #10
 80009ba:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 80009bc:	4b0f      	ldr	r3, [pc, #60]	@ (80009fc <MX_FDCAN1_Init+0xc4>)
 80009be:	2200      	movs	r2, #0
 80009c0:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_32;
 80009c2:	4b0e      	ldr	r3, [pc, #56]	@ (80009fc <MX_FDCAN1_Init+0xc4>)
 80009c4:	220a      	movs	r2, #10
 80009c6:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 80009c8:	4b0c      	ldr	r3, [pc, #48]	@ (80009fc <MX_FDCAN1_Init+0xc4>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 80009ce:	4b0b      	ldr	r3, [pc, #44]	@ (80009fc <MX_FDCAN1_Init+0xc4>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 80009d4:	4b09      	ldr	r3, [pc, #36]	@ (80009fc <MX_FDCAN1_Init+0xc4>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80009da:	4b08      	ldr	r3, [pc, #32]	@ (80009fc <MX_FDCAN1_Init+0xc4>)
 80009dc:	2200      	movs	r2, #0
 80009de:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_32;
 80009e0:	4b06      	ldr	r3, [pc, #24]	@ (80009fc <MX_FDCAN1_Init+0xc4>)
 80009e2:	220a      	movs	r2, #10
 80009e4:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80009e6:	4805      	ldr	r0, [pc, #20]	@ (80009fc <MX_FDCAN1_Init+0xc4>)
 80009e8:	f000 fd7e 	bl	80014e8 <HAL_FDCAN_Init>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d001      	beq.n	80009f6 <MX_FDCAN1_Init+0xbe>
  {
    Error_Handler();
 80009f2:	f000 f8eb 	bl	8000bcc <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 80009f6:	bf00      	nop
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	240001f4 	.word	0x240001f4
 8000a00:	4000a000 	.word	0x4000a000

08000a04 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a08:	4b22      	ldr	r3, [pc, #136]	@ (8000a94 <MX_USART3_UART_Init+0x90>)
 8000a0a:	4a23      	ldr	r2, [pc, #140]	@ (8000a98 <MX_USART3_UART_Init+0x94>)
 8000a0c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000a0e:	4b21      	ldr	r3, [pc, #132]	@ (8000a94 <MX_USART3_UART_Init+0x90>)
 8000a10:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a14:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a16:	4b1f      	ldr	r3, [pc, #124]	@ (8000a94 <MX_USART3_UART_Init+0x90>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a1c:	4b1d      	ldr	r3, [pc, #116]	@ (8000a94 <MX_USART3_UART_Init+0x90>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a22:	4b1c      	ldr	r3, [pc, #112]	@ (8000a94 <MX_USART3_UART_Init+0x90>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a28:	4b1a      	ldr	r3, [pc, #104]	@ (8000a94 <MX_USART3_UART_Init+0x90>)
 8000a2a:	220c      	movs	r2, #12
 8000a2c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a2e:	4b19      	ldr	r3, [pc, #100]	@ (8000a94 <MX_USART3_UART_Init+0x90>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a34:	4b17      	ldr	r3, [pc, #92]	@ (8000a94 <MX_USART3_UART_Init+0x90>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a3a:	4b16      	ldr	r3, [pc, #88]	@ (8000a94 <MX_USART3_UART_Init+0x90>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a40:	4b14      	ldr	r3, [pc, #80]	@ (8000a94 <MX_USART3_UART_Init+0x90>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a46:	4b13      	ldr	r3, [pc, #76]	@ (8000a94 <MX_USART3_UART_Init+0x90>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a4c:	4811      	ldr	r0, [pc, #68]	@ (8000a94 <MX_USART3_UART_Init+0x90>)
 8000a4e:	f004 fe57 	bl	8005700 <HAL_UART_Init>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d001      	beq.n	8000a5c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000a58:	f000 f8b8 	bl	8000bcc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a5c:	2100      	movs	r1, #0
 8000a5e:	480d      	ldr	r0, [pc, #52]	@ (8000a94 <MX_USART3_UART_Init+0x90>)
 8000a60:	f005 feed 	bl	800683e <HAL_UARTEx_SetTxFifoThreshold>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d001      	beq.n	8000a6e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000a6a:	f000 f8af 	bl	8000bcc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a6e:	2100      	movs	r1, #0
 8000a70:	4808      	ldr	r0, [pc, #32]	@ (8000a94 <MX_USART3_UART_Init+0x90>)
 8000a72:	f005 ff22 	bl	80068ba <HAL_UARTEx_SetRxFifoThreshold>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d001      	beq.n	8000a80 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000a7c:	f000 f8a6 	bl	8000bcc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000a80:	4804      	ldr	r0, [pc, #16]	@ (8000a94 <MX_USART3_UART_Init+0x90>)
 8000a82:	f005 fea3 	bl	80067cc <HAL_UARTEx_DisableFifoMode>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d001      	beq.n	8000a90 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000a8c:	f000 f89e 	bl	8000bcc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a90:	bf00      	nop
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	24000294 	.word	0x24000294
 8000a98:	40004800 	.word	0x40004800

08000a9c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b08a      	sub	sp, #40	@ 0x28
 8000aa0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa2:	f107 0314 	add.w	r3, r7, #20
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	601a      	str	r2, [r3, #0]
 8000aaa:	605a      	str	r2, [r3, #4]
 8000aac:	609a      	str	r2, [r3, #8]
 8000aae:	60da      	str	r2, [r3, #12]
 8000ab0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ab2:	4b42      	ldr	r3, [pc, #264]	@ (8000bbc <MX_GPIO_Init+0x120>)
 8000ab4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ab8:	4a40      	ldr	r2, [pc, #256]	@ (8000bbc <MX_GPIO_Init+0x120>)
 8000aba:	f043 0304 	orr.w	r3, r3, #4
 8000abe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ac2:	4b3e      	ldr	r3, [pc, #248]	@ (8000bbc <MX_GPIO_Init+0x120>)
 8000ac4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ac8:	f003 0304 	and.w	r3, r3, #4
 8000acc:	613b      	str	r3, [r7, #16]
 8000ace:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ad0:	4b3a      	ldr	r3, [pc, #232]	@ (8000bbc <MX_GPIO_Init+0x120>)
 8000ad2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ad6:	4a39      	ldr	r2, [pc, #228]	@ (8000bbc <MX_GPIO_Init+0x120>)
 8000ad8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000adc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ae0:	4b36      	ldr	r3, [pc, #216]	@ (8000bbc <MX_GPIO_Init+0x120>)
 8000ae2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ae6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000aea:	60fb      	str	r3, [r7, #12]
 8000aec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aee:	4b33      	ldr	r3, [pc, #204]	@ (8000bbc <MX_GPIO_Init+0x120>)
 8000af0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000af4:	4a31      	ldr	r2, [pc, #196]	@ (8000bbc <MX_GPIO_Init+0x120>)
 8000af6:	f043 0302 	orr.w	r3, r3, #2
 8000afa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000afe:	4b2f      	ldr	r3, [pc, #188]	@ (8000bbc <MX_GPIO_Init+0x120>)
 8000b00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b04:	f003 0302 	and.w	r3, r3, #2
 8000b08:	60bb      	str	r3, [r7, #8]
 8000b0a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b0c:	4b2b      	ldr	r3, [pc, #172]	@ (8000bbc <MX_GPIO_Init+0x120>)
 8000b0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b12:	4a2a      	ldr	r2, [pc, #168]	@ (8000bbc <MX_GPIO_Init+0x120>)
 8000b14:	f043 0308 	orr.w	r3, r3, #8
 8000b18:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b1c:	4b27      	ldr	r3, [pc, #156]	@ (8000bbc <MX_GPIO_Init+0x120>)
 8000b1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b22:	f003 0308 	and.w	r3, r3, #8
 8000b26:	607b      	str	r3, [r7, #4]
 8000b28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b2a:	4b24      	ldr	r3, [pc, #144]	@ (8000bbc <MX_GPIO_Init+0x120>)
 8000b2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b30:	4a22      	ldr	r2, [pc, #136]	@ (8000bbc <MX_GPIO_Init+0x120>)
 8000b32:	f043 0310 	orr.w	r3, r3, #16
 8000b36:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b3a:	4b20      	ldr	r3, [pc, #128]	@ (8000bbc <MX_GPIO_Init+0x120>)
 8000b3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b40:	f003 0310 	and.w	r3, r3, #16
 8000b44:	603b      	str	r3, [r7, #0]
 8000b46:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000b48:	2200      	movs	r2, #0
 8000b4a:	f244 0101 	movw	r1, #16385	@ 0x4001
 8000b4e:	481c      	ldr	r0, [pc, #112]	@ (8000bc0 <MX_GPIO_Init+0x124>)
 8000b50:	f001 ff70 	bl	8002a34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000b54:	2200      	movs	r2, #0
 8000b56:	2102      	movs	r1, #2
 8000b58:	481a      	ldr	r0, [pc, #104]	@ (8000bc4 <MX_GPIO_Init+0x128>)
 8000b5a:	f001 ff6b 	bl	8002a34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b5e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b64:	2300      	movs	r3, #0
 8000b66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b6c:	f107 0314 	add.w	r3, r7, #20
 8000b70:	4619      	mov	r1, r3
 8000b72:	4815      	ldr	r0, [pc, #84]	@ (8000bc8 <MX_GPIO_Init+0x12c>)
 8000b74:	f001 fdae 	bl	80026d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000b78:	f244 0301 	movw	r3, #16385	@ 0x4001
 8000b7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b7e:	2301      	movs	r3, #1
 8000b80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b82:	2300      	movs	r3, #0
 8000b84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b86:	2300      	movs	r3, #0
 8000b88:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b8a:	f107 0314 	add.w	r3, r7, #20
 8000b8e:	4619      	mov	r1, r3
 8000b90:	480b      	ldr	r0, [pc, #44]	@ (8000bc0 <MX_GPIO_Init+0x124>)
 8000b92:	f001 fd9f 	bl	80026d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000b96:	2302      	movs	r3, #2
 8000b98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000ba6:	f107 0314 	add.w	r3, r7, #20
 8000baa:	4619      	mov	r1, r3
 8000bac:	4805      	ldr	r0, [pc, #20]	@ (8000bc4 <MX_GPIO_Init+0x128>)
 8000bae:	f001 fd91 	bl	80026d4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000bb2:	bf00      	nop
 8000bb4:	3728      	adds	r7, #40	@ 0x28
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	58024400 	.word	0x58024400
 8000bc0:	58020400 	.word	0x58020400
 8000bc4:	58021000 	.word	0x58021000
 8000bc8:	58020800 	.word	0x58020800

08000bcc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bd0:	b672      	cpsid	i
}
 8000bd2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bd4:	bf00      	nop
 8000bd6:	e7fd      	b.n	8000bd4 <Error_Handler+0x8>

08000bd8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	b083      	sub	sp, #12
 8000bdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bde:	4b0a      	ldr	r3, [pc, #40]	@ (8000c08 <HAL_MspInit+0x30>)
 8000be0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000be4:	4a08      	ldr	r2, [pc, #32]	@ (8000c08 <HAL_MspInit+0x30>)
 8000be6:	f043 0302 	orr.w	r3, r3, #2
 8000bea:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000bee:	4b06      	ldr	r3, [pc, #24]	@ (8000c08 <HAL_MspInit+0x30>)
 8000bf0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000bf4:	f003 0302 	and.w	r3, r3, #2
 8000bf8:	607b      	str	r3, [r7, #4]
 8000bfa:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bfc:	bf00      	nop
 8000bfe:	370c      	adds	r7, #12
 8000c00:	46bd      	mov	sp, r7
 8000c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c06:	4770      	bx	lr
 8000c08:	58024400 	.word	0x58024400

08000c0c <HAL_FDCAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hfdcan: FDCAN handle pointer
  * @retval None
  */
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b0ba      	sub	sp, #232	@ 0xe8
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c14:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000c18:	2200      	movs	r2, #0
 8000c1a:	601a      	str	r2, [r3, #0]
 8000c1c:	605a      	str	r2, [r3, #4]
 8000c1e:	609a      	str	r2, [r3, #8]
 8000c20:	60da      	str	r2, [r3, #12]
 8000c22:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c24:	f107 0310 	add.w	r3, r7, #16
 8000c28:	22c0      	movs	r2, #192	@ 0xc0
 8000c2a:	2100      	movs	r1, #0
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f006 fc40 	bl	80074b2 <memset>
  if(hfdcan->Instance==FDCAN1)
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	4a2b      	ldr	r2, [pc, #172]	@ (8000ce4 <HAL_FDCAN_MspInit+0xd8>)
 8000c38:	4293      	cmp	r3, r2
 8000c3a:	d14e      	bne.n	8000cda <HAL_FDCAN_MspInit+0xce>

    /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000c3c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000c40:	f04f 0300 	mov.w	r3, #0
 8000c44:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8000c48:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000c4c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c50:	f107 0310 	add.w	r3, r7, #16
 8000c54:	4618      	mov	r0, r3
 8000c56:	f002 ff27 	bl	8003aa8 <HAL_RCCEx_PeriphCLKConfig>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d001      	beq.n	8000c64 <HAL_FDCAN_MspInit+0x58>
    {
      Error_Handler();
 8000c60:	f7ff ffb4 	bl	8000bcc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000c64:	4b20      	ldr	r3, [pc, #128]	@ (8000ce8 <HAL_FDCAN_MspInit+0xdc>)
 8000c66:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8000c6a:	4a1f      	ldr	r2, [pc, #124]	@ (8000ce8 <HAL_FDCAN_MspInit+0xdc>)
 8000c6c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c70:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 8000c74:	4b1c      	ldr	r3, [pc, #112]	@ (8000ce8 <HAL_FDCAN_MspInit+0xdc>)
 8000c76:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8000c7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000c7e:	60fb      	str	r3, [r7, #12]
 8000c80:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c82:	4b19      	ldr	r3, [pc, #100]	@ (8000ce8 <HAL_FDCAN_MspInit+0xdc>)
 8000c84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c88:	4a17      	ldr	r2, [pc, #92]	@ (8000ce8 <HAL_FDCAN_MspInit+0xdc>)
 8000c8a:	f043 0308 	orr.w	r3, r3, #8
 8000c8e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c92:	4b15      	ldr	r3, [pc, #84]	@ (8000ce8 <HAL_FDCAN_MspInit+0xdc>)
 8000c94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c98:	f003 0308 	and.w	r3, r3, #8
 8000c9c:	60bb      	str	r3, [r7, #8]
 8000c9e:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000ca0:	2303      	movs	r3, #3
 8000ca2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca6:	2302      	movs	r3, #2
 8000ca8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cac:	2300      	movs	r3, #0
 8000cae:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000cb8:	2309      	movs	r3, #9
 8000cba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cbe:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	4809      	ldr	r0, [pc, #36]	@ (8000cec <HAL_FDCAN_MspInit+0xe0>)
 8000cc6:	f001 fd05 	bl	80026d4 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2100      	movs	r1, #0
 8000cce:	2013      	movs	r0, #19
 8000cd0:	f000 fbd5 	bl	800147e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8000cd4:	2013      	movs	r0, #19
 8000cd6:	f000 fbec 	bl	80014b2 <HAL_NVIC_EnableIRQ>

    /* USER CODE END FDCAN1_MspInit 1 */

  }

}
 8000cda:	bf00      	nop
 8000cdc:	37e8      	adds	r7, #232	@ 0xe8
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	4000a000 	.word	0x4000a000
 8000ce8:	58024400 	.word	0x58024400
 8000cec:	58020c00 	.word	0x58020c00

08000cf0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b0ba      	sub	sp, #232	@ 0xe8
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	601a      	str	r2, [r3, #0]
 8000d00:	605a      	str	r2, [r3, #4]
 8000d02:	609a      	str	r2, [r3, #8]
 8000d04:	60da      	str	r2, [r3, #12]
 8000d06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d08:	f107 0310 	add.w	r3, r7, #16
 8000d0c:	22c0      	movs	r2, #192	@ 0xc0
 8000d0e:	2100      	movs	r1, #0
 8000d10:	4618      	mov	r0, r3
 8000d12:	f006 fbce 	bl	80074b2 <memset>
  if(huart->Instance==USART3)
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	4a27      	ldr	r2, [pc, #156]	@ (8000db8 <HAL_UART_MspInit+0xc8>)
 8000d1c:	4293      	cmp	r3, r2
 8000d1e:	d146      	bne.n	8000dae <HAL_UART_MspInit+0xbe>

    /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000d20:	f04f 0202 	mov.w	r2, #2
 8000d24:	f04f 0300 	mov.w	r3, #0
 8000d28:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d32:	f107 0310 	add.w	r3, r7, #16
 8000d36:	4618      	mov	r0, r3
 8000d38:	f002 feb6 	bl	8003aa8 <HAL_RCCEx_PeriphCLKConfig>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d001      	beq.n	8000d46 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000d42:	f7ff ff43 	bl	8000bcc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d46:	4b1d      	ldr	r3, [pc, #116]	@ (8000dbc <HAL_UART_MspInit+0xcc>)
 8000d48:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000d4c:	4a1b      	ldr	r2, [pc, #108]	@ (8000dbc <HAL_UART_MspInit+0xcc>)
 8000d4e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000d52:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000d56:	4b19      	ldr	r3, [pc, #100]	@ (8000dbc <HAL_UART_MspInit+0xcc>)
 8000d58:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000d5c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000d60:	60fb      	str	r3, [r7, #12]
 8000d62:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d64:	4b15      	ldr	r3, [pc, #84]	@ (8000dbc <HAL_UART_MspInit+0xcc>)
 8000d66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d6a:	4a14      	ldr	r2, [pc, #80]	@ (8000dbc <HAL_UART_MspInit+0xcc>)
 8000d6c:	f043 0308 	orr.w	r3, r3, #8
 8000d70:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d74:	4b11      	ldr	r3, [pc, #68]	@ (8000dbc <HAL_UART_MspInit+0xcc>)
 8000d76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d7a:	f003 0308 	and.w	r3, r3, #8
 8000d7e:	60bb      	str	r3, [r7, #8]
 8000d80:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000d82:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000d86:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d8a:	2302      	movs	r3, #2
 8000d8c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d90:	2300      	movs	r3, #0
 8000d92:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d96:	2300      	movs	r3, #0
 8000d98:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d9c:	2307      	movs	r3, #7
 8000d9e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000da2:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000da6:	4619      	mov	r1, r3
 8000da8:	4805      	ldr	r0, [pc, #20]	@ (8000dc0 <HAL_UART_MspInit+0xd0>)
 8000daa:	f001 fc93 	bl	80026d4 <HAL_GPIO_Init>

    /* USER CODE END USART3_MspInit 1 */

  }

}
 8000dae:	bf00      	nop
 8000db0:	37e8      	adds	r7, #232	@ 0xe8
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	40004800 	.word	0x40004800
 8000dbc:	58024400 	.word	0x58024400
 8000dc0:	58020c00 	.word	0x58020c00

08000dc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000dc8:	bf00      	nop
 8000dca:	e7fd      	b.n	8000dc8 <NMI_Handler+0x4>

08000dcc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dd0:	bf00      	nop
 8000dd2:	e7fd      	b.n	8000dd0 <HardFault_Handler+0x4>

08000dd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dd8:	bf00      	nop
 8000dda:	e7fd      	b.n	8000dd8 <MemManage_Handler+0x4>

08000ddc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000de0:	bf00      	nop
 8000de2:	e7fd      	b.n	8000de0 <BusFault_Handler+0x4>

08000de4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000de8:	bf00      	nop
 8000dea:	e7fd      	b.n	8000de8 <UsageFault_Handler+0x4>

08000dec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000df0:	bf00      	nop
 8000df2:	46bd      	mov	sp, r7
 8000df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df8:	4770      	bx	lr

08000dfa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dfa:	b480      	push	{r7}
 8000dfc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dfe:	bf00      	nop
 8000e00:	46bd      	mov	sp, r7
 8000e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e06:	4770      	bx	lr

08000e08 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e0c:	bf00      	nop
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr

08000e16 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e16:	b580      	push	{r7, lr}
 8000e18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e1a:	f000 fa29 	bl	8001270 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e1e:	bf00      	nop
 8000e20:	bd80      	pop	{r7, pc}
	...

08000e24 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8000e28:	4802      	ldr	r0, [pc, #8]	@ (8000e34 <FDCAN1_IT0_IRQHandler+0x10>)
 8000e2a:	f000 ffc3 	bl	8001db4 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8000e2e:	bf00      	nop
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	240001f4 	.word	0x240001f4

08000e38 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
  return 1;
 8000e3c:	2301      	movs	r3, #1
}
 8000e3e:	4618      	mov	r0, r3
 8000e40:	46bd      	mov	sp, r7
 8000e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e46:	4770      	bx	lr

08000e48 <_kill>:

int _kill(int pid, int sig)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
 8000e50:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000e52:	f006 fb81 	bl	8007558 <__errno>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2216      	movs	r2, #22
 8000e5a:	601a      	str	r2, [r3, #0]
  return -1;
 8000e5c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e60:	4618      	mov	r0, r3
 8000e62:	3708      	adds	r7, #8
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}

08000e68 <_exit>:

void _exit (int status)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b082      	sub	sp, #8
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000e70:	f04f 31ff 	mov.w	r1, #4294967295
 8000e74:	6878      	ldr	r0, [r7, #4]
 8000e76:	f7ff ffe7 	bl	8000e48 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000e7a:	bf00      	nop
 8000e7c:	e7fd      	b.n	8000e7a <_exit+0x12>

08000e7e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e7e:	b580      	push	{r7, lr}
 8000e80:	b086      	sub	sp, #24
 8000e82:	af00      	add	r7, sp, #0
 8000e84:	60f8      	str	r0, [r7, #12]
 8000e86:	60b9      	str	r1, [r7, #8]
 8000e88:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	617b      	str	r3, [r7, #20]
 8000e8e:	e00a      	b.n	8000ea6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000e90:	f3af 8000 	nop.w
 8000e94:	4601      	mov	r1, r0
 8000e96:	68bb      	ldr	r3, [r7, #8]
 8000e98:	1c5a      	adds	r2, r3, #1
 8000e9a:	60ba      	str	r2, [r7, #8]
 8000e9c:	b2ca      	uxtb	r2, r1
 8000e9e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ea0:	697b      	ldr	r3, [r7, #20]
 8000ea2:	3301      	adds	r3, #1
 8000ea4:	617b      	str	r3, [r7, #20]
 8000ea6:	697a      	ldr	r2, [r7, #20]
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	429a      	cmp	r2, r3
 8000eac:	dbf0      	blt.n	8000e90 <_read+0x12>
  }

  return len;
 8000eae:	687b      	ldr	r3, [r7, #4]
}
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	3718      	adds	r7, #24
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}

08000eb8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b086      	sub	sp, #24
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	60f8      	str	r0, [r7, #12]
 8000ec0:	60b9      	str	r1, [r7, #8]
 8000ec2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	617b      	str	r3, [r7, #20]
 8000ec8:	e009      	b.n	8000ede <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000eca:	68bb      	ldr	r3, [r7, #8]
 8000ecc:	1c5a      	adds	r2, r3, #1
 8000ece:	60ba      	str	r2, [r7, #8]
 8000ed0:	781b      	ldrb	r3, [r3, #0]
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ed8:	697b      	ldr	r3, [r7, #20]
 8000eda:	3301      	adds	r3, #1
 8000edc:	617b      	str	r3, [r7, #20]
 8000ede:	697a      	ldr	r2, [r7, #20]
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	429a      	cmp	r2, r3
 8000ee4:	dbf1      	blt.n	8000eca <_write+0x12>
  }
  return len;
 8000ee6:	687b      	ldr	r3, [r7, #4]
}
 8000ee8:	4618      	mov	r0, r3
 8000eea:	3718      	adds	r7, #24
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}

08000ef0 <_close>:

int _close(int file)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b083      	sub	sp, #12
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000ef8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000efc:	4618      	mov	r0, r3
 8000efe:	370c      	adds	r7, #12
 8000f00:	46bd      	mov	sp, r7
 8000f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f06:	4770      	bx	lr

08000f08 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b083      	sub	sp, #12
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
 8000f10:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000f18:	605a      	str	r2, [r3, #4]
  return 0;
 8000f1a:	2300      	movs	r3, #0
}
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	370c      	adds	r7, #12
 8000f20:	46bd      	mov	sp, r7
 8000f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f26:	4770      	bx	lr

08000f28 <_isatty>:

int _isatty(int file)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b083      	sub	sp, #12
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000f30:	2301      	movs	r3, #1
}
 8000f32:	4618      	mov	r0, r3
 8000f34:	370c      	adds	r7, #12
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr

08000f3e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f3e:	b480      	push	{r7}
 8000f40:	b085      	sub	sp, #20
 8000f42:	af00      	add	r7, sp, #0
 8000f44:	60f8      	str	r0, [r7, #12]
 8000f46:	60b9      	str	r1, [r7, #8]
 8000f48:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000f4a:	2300      	movs	r3, #0
}
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	3714      	adds	r7, #20
 8000f50:	46bd      	mov	sp, r7
 8000f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f56:	4770      	bx	lr

08000f58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b086      	sub	sp, #24
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f60:	4a14      	ldr	r2, [pc, #80]	@ (8000fb4 <_sbrk+0x5c>)
 8000f62:	4b15      	ldr	r3, [pc, #84]	@ (8000fb8 <_sbrk+0x60>)
 8000f64:	1ad3      	subs	r3, r2, r3
 8000f66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f6c:	4b13      	ldr	r3, [pc, #76]	@ (8000fbc <_sbrk+0x64>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d102      	bne.n	8000f7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f74:	4b11      	ldr	r3, [pc, #68]	@ (8000fbc <_sbrk+0x64>)
 8000f76:	4a12      	ldr	r2, [pc, #72]	@ (8000fc0 <_sbrk+0x68>)
 8000f78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f7a:	4b10      	ldr	r3, [pc, #64]	@ (8000fbc <_sbrk+0x64>)
 8000f7c:	681a      	ldr	r2, [r3, #0]
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	4413      	add	r3, r2
 8000f82:	693a      	ldr	r2, [r7, #16]
 8000f84:	429a      	cmp	r2, r3
 8000f86:	d207      	bcs.n	8000f98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f88:	f006 fae6 	bl	8007558 <__errno>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	220c      	movs	r2, #12
 8000f90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f92:	f04f 33ff 	mov.w	r3, #4294967295
 8000f96:	e009      	b.n	8000fac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f98:	4b08      	ldr	r3, [pc, #32]	@ (8000fbc <_sbrk+0x64>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f9e:	4b07      	ldr	r3, [pc, #28]	@ (8000fbc <_sbrk+0x64>)
 8000fa0:	681a      	ldr	r2, [r3, #0]
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	4413      	add	r3, r2
 8000fa6:	4a05      	ldr	r2, [pc, #20]	@ (8000fbc <_sbrk+0x64>)
 8000fa8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000faa:	68fb      	ldr	r3, [r7, #12]
}
 8000fac:	4618      	mov	r0, r3
 8000fae:	3718      	adds	r7, #24
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	24080000 	.word	0x24080000
 8000fb8:	00000400 	.word	0x00000400
 8000fbc:	24000540 	.word	0x24000540
 8000fc0:	24000698 	.word	0x24000698

08000fc4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000fc8:	4b43      	ldr	r3, [pc, #268]	@ (80010d8 <SystemInit+0x114>)
 8000fca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000fce:	4a42      	ldr	r2, [pc, #264]	@ (80010d8 <SystemInit+0x114>)
 8000fd0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000fd4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000fd8:	4b40      	ldr	r3, [pc, #256]	@ (80010dc <SystemInit+0x118>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	f003 030f 	and.w	r3, r3, #15
 8000fe0:	2b06      	cmp	r3, #6
 8000fe2:	d807      	bhi.n	8000ff4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000fe4:	4b3d      	ldr	r3, [pc, #244]	@ (80010dc <SystemInit+0x118>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	f023 030f 	bic.w	r3, r3, #15
 8000fec:	4a3b      	ldr	r2, [pc, #236]	@ (80010dc <SystemInit+0x118>)
 8000fee:	f043 0307 	orr.w	r3, r3, #7
 8000ff2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000ff4:	4b3a      	ldr	r3, [pc, #232]	@ (80010e0 <SystemInit+0x11c>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4a39      	ldr	r2, [pc, #228]	@ (80010e0 <SystemInit+0x11c>)
 8000ffa:	f043 0301 	orr.w	r3, r3, #1
 8000ffe:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001000:	4b37      	ldr	r3, [pc, #220]	@ (80010e0 <SystemInit+0x11c>)
 8001002:	2200      	movs	r2, #0
 8001004:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001006:	4b36      	ldr	r3, [pc, #216]	@ (80010e0 <SystemInit+0x11c>)
 8001008:	681a      	ldr	r2, [r3, #0]
 800100a:	4935      	ldr	r1, [pc, #212]	@ (80010e0 <SystemInit+0x11c>)
 800100c:	4b35      	ldr	r3, [pc, #212]	@ (80010e4 <SystemInit+0x120>)
 800100e:	4013      	ands	r3, r2
 8001010:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001012:	4b32      	ldr	r3, [pc, #200]	@ (80010dc <SystemInit+0x118>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	f003 0308 	and.w	r3, r3, #8
 800101a:	2b00      	cmp	r3, #0
 800101c:	d007      	beq.n	800102e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800101e:	4b2f      	ldr	r3, [pc, #188]	@ (80010dc <SystemInit+0x118>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	f023 030f 	bic.w	r3, r3, #15
 8001026:	4a2d      	ldr	r2, [pc, #180]	@ (80010dc <SystemInit+0x118>)
 8001028:	f043 0307 	orr.w	r3, r3, #7
 800102c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800102e:	4b2c      	ldr	r3, [pc, #176]	@ (80010e0 <SystemInit+0x11c>)
 8001030:	2200      	movs	r2, #0
 8001032:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001034:	4b2a      	ldr	r3, [pc, #168]	@ (80010e0 <SystemInit+0x11c>)
 8001036:	2200      	movs	r2, #0
 8001038:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800103a:	4b29      	ldr	r3, [pc, #164]	@ (80010e0 <SystemInit+0x11c>)
 800103c:	2200      	movs	r2, #0
 800103e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001040:	4b27      	ldr	r3, [pc, #156]	@ (80010e0 <SystemInit+0x11c>)
 8001042:	4a29      	ldr	r2, [pc, #164]	@ (80010e8 <SystemInit+0x124>)
 8001044:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001046:	4b26      	ldr	r3, [pc, #152]	@ (80010e0 <SystemInit+0x11c>)
 8001048:	4a28      	ldr	r2, [pc, #160]	@ (80010ec <SystemInit+0x128>)
 800104a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800104c:	4b24      	ldr	r3, [pc, #144]	@ (80010e0 <SystemInit+0x11c>)
 800104e:	4a28      	ldr	r2, [pc, #160]	@ (80010f0 <SystemInit+0x12c>)
 8001050:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001052:	4b23      	ldr	r3, [pc, #140]	@ (80010e0 <SystemInit+0x11c>)
 8001054:	2200      	movs	r2, #0
 8001056:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001058:	4b21      	ldr	r3, [pc, #132]	@ (80010e0 <SystemInit+0x11c>)
 800105a:	4a25      	ldr	r2, [pc, #148]	@ (80010f0 <SystemInit+0x12c>)
 800105c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800105e:	4b20      	ldr	r3, [pc, #128]	@ (80010e0 <SystemInit+0x11c>)
 8001060:	2200      	movs	r2, #0
 8001062:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001064:	4b1e      	ldr	r3, [pc, #120]	@ (80010e0 <SystemInit+0x11c>)
 8001066:	4a22      	ldr	r2, [pc, #136]	@ (80010f0 <SystemInit+0x12c>)
 8001068:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800106a:	4b1d      	ldr	r3, [pc, #116]	@ (80010e0 <SystemInit+0x11c>)
 800106c:	2200      	movs	r2, #0
 800106e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001070:	4b1b      	ldr	r3, [pc, #108]	@ (80010e0 <SystemInit+0x11c>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	4a1a      	ldr	r2, [pc, #104]	@ (80010e0 <SystemInit+0x11c>)
 8001076:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800107a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800107c:	4b18      	ldr	r3, [pc, #96]	@ (80010e0 <SystemInit+0x11c>)
 800107e:	2200      	movs	r2, #0
 8001080:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001082:	4b1c      	ldr	r3, [pc, #112]	@ (80010f4 <SystemInit+0x130>)
 8001084:	681a      	ldr	r2, [r3, #0]
 8001086:	4b1c      	ldr	r3, [pc, #112]	@ (80010f8 <SystemInit+0x134>)
 8001088:	4013      	ands	r3, r2
 800108a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800108e:	d202      	bcs.n	8001096 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001090:	4b1a      	ldr	r3, [pc, #104]	@ (80010fc <SystemInit+0x138>)
 8001092:	2201      	movs	r2, #1
 8001094:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8001096:	4b12      	ldr	r3, [pc, #72]	@ (80010e0 <SystemInit+0x11c>)
 8001098:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800109c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d113      	bne.n	80010cc <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80010a4:	4b0e      	ldr	r3, [pc, #56]	@ (80010e0 <SystemInit+0x11c>)
 80010a6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80010aa:	4a0d      	ldr	r2, [pc, #52]	@ (80010e0 <SystemInit+0x11c>)
 80010ac:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80010b0:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80010b4:	4b12      	ldr	r3, [pc, #72]	@ (8001100 <SystemInit+0x13c>)
 80010b6:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80010ba:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80010bc:	4b08      	ldr	r3, [pc, #32]	@ (80010e0 <SystemInit+0x11c>)
 80010be:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80010c2:	4a07      	ldr	r2, [pc, #28]	@ (80010e0 <SystemInit+0x11c>)
 80010c4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80010c8:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80010cc:	bf00      	nop
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr
 80010d6:	bf00      	nop
 80010d8:	e000ed00 	.word	0xe000ed00
 80010dc:	52002000 	.word	0x52002000
 80010e0:	58024400 	.word	0x58024400
 80010e4:	eaf6ed7f 	.word	0xeaf6ed7f
 80010e8:	02020200 	.word	0x02020200
 80010ec:	01ff0000 	.word	0x01ff0000
 80010f0:	01010280 	.word	0x01010280
 80010f4:	5c001000 	.word	0x5c001000
 80010f8:	ffff0000 	.word	0xffff0000
 80010fc:	51008108 	.word	0x51008108
 8001100:	52004000 	.word	0x52004000

08001104 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8001108:	4b09      	ldr	r3, [pc, #36]	@ (8001130 <ExitRun0Mode+0x2c>)
 800110a:	68db      	ldr	r3, [r3, #12]
 800110c:	4a08      	ldr	r2, [pc, #32]	@ (8001130 <ExitRun0Mode+0x2c>)
 800110e:	f043 0302 	orr.w	r3, r3, #2
 8001112:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8001114:	bf00      	nop
 8001116:	4b06      	ldr	r3, [pc, #24]	@ (8001130 <ExitRun0Mode+0x2c>)
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800111e:	2b00      	cmp	r3, #0
 8001120:	d0f9      	beq.n	8001116 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8001122:	bf00      	nop
 8001124:	bf00      	nop
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop
 8001130:	58024800 	.word	0x58024800

08001134 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001134:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8001170 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8001138:	f7ff ffe4 	bl	8001104 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 800113c:	f7ff ff42 	bl	8000fc4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001140:	480c      	ldr	r0, [pc, #48]	@ (8001174 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001142:	490d      	ldr	r1, [pc, #52]	@ (8001178 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001144:	4a0d      	ldr	r2, [pc, #52]	@ (800117c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001146:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001148:	e002      	b.n	8001150 <LoopCopyDataInit>

0800114a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800114a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800114c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800114e:	3304      	adds	r3, #4

08001150 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001150:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001152:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001154:	d3f9      	bcc.n	800114a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001156:	4a0a      	ldr	r2, [pc, #40]	@ (8001180 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001158:	4c0a      	ldr	r4, [pc, #40]	@ (8001184 <LoopFillZerobss+0x22>)
  movs r3, #0
 800115a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800115c:	e001      	b.n	8001162 <LoopFillZerobss>

0800115e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800115e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001160:	3204      	adds	r2, #4

08001162 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001162:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001164:	d3fb      	bcc.n	800115e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001166:	f006 f9fd 	bl	8007564 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800116a:	f7ff fb3d 	bl	80007e8 <main>
  bx  lr
 800116e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001170:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001174:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001178:	240001d8 	.word	0x240001d8
  ldr r2, =_sidata
 800117c:	08009a14 	.word	0x08009a14
  ldr r2, =_sbss
 8001180:	240001d8 	.word	0x240001d8
  ldr r4, =_ebss
 8001184:	24000694 	.word	0x24000694

08001188 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001188:	e7fe      	b.n	8001188 <ADC3_IRQHandler>
	...

0800118c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b082      	sub	sp, #8
 8001190:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001192:	2003      	movs	r0, #3
 8001194:	f000 f968 	bl	8001468 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001198:	f002 fab0 	bl	80036fc <HAL_RCC_GetSysClockFreq>
 800119c:	4602      	mov	r2, r0
 800119e:	4b15      	ldr	r3, [pc, #84]	@ (80011f4 <HAL_Init+0x68>)
 80011a0:	699b      	ldr	r3, [r3, #24]
 80011a2:	0a1b      	lsrs	r3, r3, #8
 80011a4:	f003 030f 	and.w	r3, r3, #15
 80011a8:	4913      	ldr	r1, [pc, #76]	@ (80011f8 <HAL_Init+0x6c>)
 80011aa:	5ccb      	ldrb	r3, [r1, r3]
 80011ac:	f003 031f 	and.w	r3, r3, #31
 80011b0:	fa22 f303 	lsr.w	r3, r2, r3
 80011b4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80011b6:	4b0f      	ldr	r3, [pc, #60]	@ (80011f4 <HAL_Init+0x68>)
 80011b8:	699b      	ldr	r3, [r3, #24]
 80011ba:	f003 030f 	and.w	r3, r3, #15
 80011be:	4a0e      	ldr	r2, [pc, #56]	@ (80011f8 <HAL_Init+0x6c>)
 80011c0:	5cd3      	ldrb	r3, [r2, r3]
 80011c2:	f003 031f 	and.w	r3, r3, #31
 80011c6:	687a      	ldr	r2, [r7, #4]
 80011c8:	fa22 f303 	lsr.w	r3, r2, r3
 80011cc:	4a0b      	ldr	r2, [pc, #44]	@ (80011fc <HAL_Init+0x70>)
 80011ce:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80011d0:	4a0b      	ldr	r2, [pc, #44]	@ (8001200 <HAL_Init+0x74>)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80011d6:	2000      	movs	r0, #0
 80011d8:	f000 f814 	bl	8001204 <HAL_InitTick>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80011e2:	2301      	movs	r3, #1
 80011e4:	e002      	b.n	80011ec <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80011e6:	f7ff fcf7 	bl	8000bd8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011ea:	2300      	movs	r3, #0
}
 80011ec:	4618      	mov	r0, r3
 80011ee:	3708      	adds	r7, #8
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	58024400 	.word	0x58024400
 80011f8:	08009648 	.word	0x08009648
 80011fc:	24000004 	.word	0x24000004
 8001200:	24000000 	.word	0x24000000

08001204 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800120c:	4b15      	ldr	r3, [pc, #84]	@ (8001264 <HAL_InitTick+0x60>)
 800120e:	781b      	ldrb	r3, [r3, #0]
 8001210:	2b00      	cmp	r3, #0
 8001212:	d101      	bne.n	8001218 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001214:	2301      	movs	r3, #1
 8001216:	e021      	b.n	800125c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001218:	4b13      	ldr	r3, [pc, #76]	@ (8001268 <HAL_InitTick+0x64>)
 800121a:	681a      	ldr	r2, [r3, #0]
 800121c:	4b11      	ldr	r3, [pc, #68]	@ (8001264 <HAL_InitTick+0x60>)
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	4619      	mov	r1, r3
 8001222:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001226:	fbb3 f3f1 	udiv	r3, r3, r1
 800122a:	fbb2 f3f3 	udiv	r3, r2, r3
 800122e:	4618      	mov	r0, r3
 8001230:	f000 f94d 	bl	80014ce <HAL_SYSTICK_Config>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d001      	beq.n	800123e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800123a:	2301      	movs	r3, #1
 800123c:	e00e      	b.n	800125c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	2b0f      	cmp	r3, #15
 8001242:	d80a      	bhi.n	800125a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001244:	2200      	movs	r2, #0
 8001246:	6879      	ldr	r1, [r7, #4]
 8001248:	f04f 30ff 	mov.w	r0, #4294967295
 800124c:	f000 f917 	bl	800147e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001250:	4a06      	ldr	r2, [pc, #24]	@ (800126c <HAL_InitTick+0x68>)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001256:	2300      	movs	r3, #0
 8001258:	e000      	b.n	800125c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800125a:	2301      	movs	r3, #1
}
 800125c:	4618      	mov	r0, r3
 800125e:	3708      	adds	r7, #8
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}
 8001264:	2400000c 	.word	0x2400000c
 8001268:	24000000 	.word	0x24000000
 800126c:	24000008 	.word	0x24000008

08001270 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001274:	4b06      	ldr	r3, [pc, #24]	@ (8001290 <HAL_IncTick+0x20>)
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	461a      	mov	r2, r3
 800127a:	4b06      	ldr	r3, [pc, #24]	@ (8001294 <HAL_IncTick+0x24>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4413      	add	r3, r2
 8001280:	4a04      	ldr	r2, [pc, #16]	@ (8001294 <HAL_IncTick+0x24>)
 8001282:	6013      	str	r3, [r2, #0]
}
 8001284:	bf00      	nop
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr
 800128e:	bf00      	nop
 8001290:	2400000c 	.word	0x2400000c
 8001294:	24000544 	.word	0x24000544

08001298 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
  return uwTick;
 800129c:	4b03      	ldr	r3, [pc, #12]	@ (80012ac <HAL_GetTick+0x14>)
 800129e:	681b      	ldr	r3, [r3, #0]
}
 80012a0:	4618      	mov	r0, r3
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr
 80012aa:	bf00      	nop
 80012ac:	24000544 	.word	0x24000544

080012b0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80012b4:	4b03      	ldr	r3, [pc, #12]	@ (80012c4 <HAL_GetREVID+0x14>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	0c1b      	lsrs	r3, r3, #16
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	46bd      	mov	sp, r7
 80012be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c2:	4770      	bx	lr
 80012c4:	5c001000 	.word	0x5c001000

080012c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b085      	sub	sp, #20
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	f003 0307 	and.w	r3, r3, #7
 80012d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012d8:	4b0b      	ldr	r3, [pc, #44]	@ (8001308 <__NVIC_SetPriorityGrouping+0x40>)
 80012da:	68db      	ldr	r3, [r3, #12]
 80012dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012de:	68ba      	ldr	r2, [r7, #8]
 80012e0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80012e4:	4013      	ands	r3, r2
 80012e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012ec:	68bb      	ldr	r3, [r7, #8]
 80012ee:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80012f0:	4b06      	ldr	r3, [pc, #24]	@ (800130c <__NVIC_SetPriorityGrouping+0x44>)
 80012f2:	4313      	orrs	r3, r2
 80012f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012f6:	4a04      	ldr	r2, [pc, #16]	@ (8001308 <__NVIC_SetPriorityGrouping+0x40>)
 80012f8:	68bb      	ldr	r3, [r7, #8]
 80012fa:	60d3      	str	r3, [r2, #12]
}
 80012fc:	bf00      	nop
 80012fe:	3714      	adds	r7, #20
 8001300:	46bd      	mov	sp, r7
 8001302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001306:	4770      	bx	lr
 8001308:	e000ed00 	.word	0xe000ed00
 800130c:	05fa0000 	.word	0x05fa0000

08001310 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001310:	b480      	push	{r7}
 8001312:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001314:	4b04      	ldr	r3, [pc, #16]	@ (8001328 <__NVIC_GetPriorityGrouping+0x18>)
 8001316:	68db      	ldr	r3, [r3, #12]
 8001318:	0a1b      	lsrs	r3, r3, #8
 800131a:	f003 0307 	and.w	r3, r3, #7
}
 800131e:	4618      	mov	r0, r3
 8001320:	46bd      	mov	sp, r7
 8001322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001326:	4770      	bx	lr
 8001328:	e000ed00 	.word	0xe000ed00

0800132c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800132c:	b480      	push	{r7}
 800132e:	b083      	sub	sp, #12
 8001330:	af00      	add	r7, sp, #0
 8001332:	4603      	mov	r3, r0
 8001334:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001336:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800133a:	2b00      	cmp	r3, #0
 800133c:	db0b      	blt.n	8001356 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800133e:	88fb      	ldrh	r3, [r7, #6]
 8001340:	f003 021f 	and.w	r2, r3, #31
 8001344:	4907      	ldr	r1, [pc, #28]	@ (8001364 <__NVIC_EnableIRQ+0x38>)
 8001346:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800134a:	095b      	lsrs	r3, r3, #5
 800134c:	2001      	movs	r0, #1
 800134e:	fa00 f202 	lsl.w	r2, r0, r2
 8001352:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001356:	bf00      	nop
 8001358:	370c      	adds	r7, #12
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr
 8001362:	bf00      	nop
 8001364:	e000e100 	.word	0xe000e100

08001368 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001368:	b480      	push	{r7}
 800136a:	b083      	sub	sp, #12
 800136c:	af00      	add	r7, sp, #0
 800136e:	4603      	mov	r3, r0
 8001370:	6039      	str	r1, [r7, #0]
 8001372:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001374:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001378:	2b00      	cmp	r3, #0
 800137a:	db0a      	blt.n	8001392 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	b2da      	uxtb	r2, r3
 8001380:	490c      	ldr	r1, [pc, #48]	@ (80013b4 <__NVIC_SetPriority+0x4c>)
 8001382:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001386:	0112      	lsls	r2, r2, #4
 8001388:	b2d2      	uxtb	r2, r2
 800138a:	440b      	add	r3, r1
 800138c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001390:	e00a      	b.n	80013a8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	b2da      	uxtb	r2, r3
 8001396:	4908      	ldr	r1, [pc, #32]	@ (80013b8 <__NVIC_SetPriority+0x50>)
 8001398:	88fb      	ldrh	r3, [r7, #6]
 800139a:	f003 030f 	and.w	r3, r3, #15
 800139e:	3b04      	subs	r3, #4
 80013a0:	0112      	lsls	r2, r2, #4
 80013a2:	b2d2      	uxtb	r2, r2
 80013a4:	440b      	add	r3, r1
 80013a6:	761a      	strb	r2, [r3, #24]
}
 80013a8:	bf00      	nop
 80013aa:	370c      	adds	r7, #12
 80013ac:	46bd      	mov	sp, r7
 80013ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b2:	4770      	bx	lr
 80013b4:	e000e100 	.word	0xe000e100
 80013b8:	e000ed00 	.word	0xe000ed00

080013bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013bc:	b480      	push	{r7}
 80013be:	b089      	sub	sp, #36	@ 0x24
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	60f8      	str	r0, [r7, #12]
 80013c4:	60b9      	str	r1, [r7, #8]
 80013c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	f003 0307 	and.w	r3, r3, #7
 80013ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013d0:	69fb      	ldr	r3, [r7, #28]
 80013d2:	f1c3 0307 	rsb	r3, r3, #7
 80013d6:	2b04      	cmp	r3, #4
 80013d8:	bf28      	it	cs
 80013da:	2304      	movcs	r3, #4
 80013dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013de:	69fb      	ldr	r3, [r7, #28]
 80013e0:	3304      	adds	r3, #4
 80013e2:	2b06      	cmp	r3, #6
 80013e4:	d902      	bls.n	80013ec <NVIC_EncodePriority+0x30>
 80013e6:	69fb      	ldr	r3, [r7, #28]
 80013e8:	3b03      	subs	r3, #3
 80013ea:	e000      	b.n	80013ee <NVIC_EncodePriority+0x32>
 80013ec:	2300      	movs	r3, #0
 80013ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013f0:	f04f 32ff 	mov.w	r2, #4294967295
 80013f4:	69bb      	ldr	r3, [r7, #24]
 80013f6:	fa02 f303 	lsl.w	r3, r2, r3
 80013fa:	43da      	mvns	r2, r3
 80013fc:	68bb      	ldr	r3, [r7, #8]
 80013fe:	401a      	ands	r2, r3
 8001400:	697b      	ldr	r3, [r7, #20]
 8001402:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001404:	f04f 31ff 	mov.w	r1, #4294967295
 8001408:	697b      	ldr	r3, [r7, #20]
 800140a:	fa01 f303 	lsl.w	r3, r1, r3
 800140e:	43d9      	mvns	r1, r3
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001414:	4313      	orrs	r3, r2
         );
}
 8001416:	4618      	mov	r0, r3
 8001418:	3724      	adds	r7, #36	@ 0x24
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr
	...

08001424 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	3b01      	subs	r3, #1
 8001430:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001434:	d301      	bcc.n	800143a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001436:	2301      	movs	r3, #1
 8001438:	e00f      	b.n	800145a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800143a:	4a0a      	ldr	r2, [pc, #40]	@ (8001464 <SysTick_Config+0x40>)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	3b01      	subs	r3, #1
 8001440:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001442:	210f      	movs	r1, #15
 8001444:	f04f 30ff 	mov.w	r0, #4294967295
 8001448:	f7ff ff8e 	bl	8001368 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800144c:	4b05      	ldr	r3, [pc, #20]	@ (8001464 <SysTick_Config+0x40>)
 800144e:	2200      	movs	r2, #0
 8001450:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001452:	4b04      	ldr	r3, [pc, #16]	@ (8001464 <SysTick_Config+0x40>)
 8001454:	2207      	movs	r2, #7
 8001456:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001458:	2300      	movs	r3, #0
}
 800145a:	4618      	mov	r0, r3
 800145c:	3708      	adds	r7, #8
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	e000e010 	.word	0xe000e010

08001468 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b082      	sub	sp, #8
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001470:	6878      	ldr	r0, [r7, #4]
 8001472:	f7ff ff29 	bl	80012c8 <__NVIC_SetPriorityGrouping>
}
 8001476:	bf00      	nop
 8001478:	3708      	adds	r7, #8
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}

0800147e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800147e:	b580      	push	{r7, lr}
 8001480:	b086      	sub	sp, #24
 8001482:	af00      	add	r7, sp, #0
 8001484:	4603      	mov	r3, r0
 8001486:	60b9      	str	r1, [r7, #8]
 8001488:	607a      	str	r2, [r7, #4]
 800148a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800148c:	f7ff ff40 	bl	8001310 <__NVIC_GetPriorityGrouping>
 8001490:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001492:	687a      	ldr	r2, [r7, #4]
 8001494:	68b9      	ldr	r1, [r7, #8]
 8001496:	6978      	ldr	r0, [r7, #20]
 8001498:	f7ff ff90 	bl	80013bc <NVIC_EncodePriority>
 800149c:	4602      	mov	r2, r0
 800149e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80014a2:	4611      	mov	r1, r2
 80014a4:	4618      	mov	r0, r3
 80014a6:	f7ff ff5f 	bl	8001368 <__NVIC_SetPriority>
}
 80014aa:	bf00      	nop
 80014ac:	3718      	adds	r7, #24
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}

080014b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014b2:	b580      	push	{r7, lr}
 80014b4:	b082      	sub	sp, #8
 80014b6:	af00      	add	r7, sp, #0
 80014b8:	4603      	mov	r3, r0
 80014ba:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014bc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014c0:	4618      	mov	r0, r3
 80014c2:	f7ff ff33 	bl	800132c <__NVIC_EnableIRQ>
}
 80014c6:	bf00      	nop
 80014c8:	3708      	adds	r7, #8
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}

080014ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014ce:	b580      	push	{r7, lr}
 80014d0:	b082      	sub	sp, #8
 80014d2:	af00      	add	r7, sp, #0
 80014d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014d6:	6878      	ldr	r0, [r7, #4]
 80014d8:	f7ff ffa4 	bl	8001424 <SysTick_Config>
 80014dc:	4603      	mov	r3, r0
}
 80014de:	4618      	mov	r0, r3
 80014e0:	3708      	adds	r7, #8
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
	...

080014e8 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b098      	sub	sp, #96	@ 0x60
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 80014f0:	4a84      	ldr	r2, [pc, #528]	@ (8001704 <HAL_FDCAN_Init+0x21c>)
 80014f2:	f107 030c 	add.w	r3, r7, #12
 80014f6:	4611      	mov	r1, r2
 80014f8:	224c      	movs	r2, #76	@ 0x4c
 80014fa:	4618      	mov	r0, r3
 80014fc:	f006 f859 	bl	80075b2 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d101      	bne.n	800150a <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8001506:	2301      	movs	r3, #1
 8001508:	e1c6      	b.n	8001898 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4a7e      	ldr	r2, [pc, #504]	@ (8001708 <HAL_FDCAN_Init+0x220>)
 8001510:	4293      	cmp	r3, r2
 8001512:	d106      	bne.n	8001522 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800151c:	461a      	mov	r2, r3
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8001528:	b2db      	uxtb	r3, r3
 800152a:	2b00      	cmp	r3, #0
 800152c:	d106      	bne.n	800153c <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	2200      	movs	r2, #0
 8001532:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8001536:	6878      	ldr	r0, [r7, #4]
 8001538:	f7ff fb68 	bl	8000c0c <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	699a      	ldr	r2, [r3, #24]
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f022 0210 	bic.w	r2, r2, #16
 800154a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800154c:	f7ff fea4 	bl	8001298 <HAL_GetTick>
 8001550:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001552:	e014      	b.n	800157e <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001554:	f7ff fea0 	bl	8001298 <HAL_GetTick>
 8001558:	4602      	mov	r2, r0
 800155a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800155c:	1ad3      	subs	r3, r2, r3
 800155e:	2b0a      	cmp	r3, #10
 8001560:	d90d      	bls.n	800157e <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001568:	f043 0201 	orr.w	r2, r3, #1
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	2203      	movs	r2, #3
 8001576:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 800157a:	2301      	movs	r3, #1
 800157c:	e18c      	b.n	8001898 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	699b      	ldr	r3, [r3, #24]
 8001584:	f003 0308 	and.w	r3, r3, #8
 8001588:	2b08      	cmp	r3, #8
 800158a:	d0e3      	beq.n	8001554 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	699a      	ldr	r2, [r3, #24]
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f042 0201 	orr.w	r2, r2, #1
 800159a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800159c:	f7ff fe7c 	bl	8001298 <HAL_GetTick>
 80015a0:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80015a2:	e014      	b.n	80015ce <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80015a4:	f7ff fe78 	bl	8001298 <HAL_GetTick>
 80015a8:	4602      	mov	r2, r0
 80015aa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80015ac:	1ad3      	subs	r3, r2, r3
 80015ae:	2b0a      	cmp	r3, #10
 80015b0:	d90d      	bls.n	80015ce <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80015b8:	f043 0201 	orr.w	r2, r3, #1
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	2203      	movs	r2, #3
 80015c6:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 80015ca:	2301      	movs	r3, #1
 80015cc:	e164      	b.n	8001898 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	699b      	ldr	r3, [r3, #24]
 80015d4:	f003 0301 	and.w	r3, r3, #1
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d0e3      	beq.n	80015a4 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	699a      	ldr	r2, [r3, #24]
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f042 0202 	orr.w	r2, r2, #2
 80015ea:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	7c1b      	ldrb	r3, [r3, #16]
 80015f0:	2b01      	cmp	r3, #1
 80015f2:	d108      	bne.n	8001606 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	699a      	ldr	r2, [r3, #24]
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001602:	619a      	str	r2, [r3, #24]
 8001604:	e007      	b.n	8001616 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	699a      	ldr	r2, [r3, #24]
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001614:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	7c5b      	ldrb	r3, [r3, #17]
 800161a:	2b01      	cmp	r3, #1
 800161c:	d108      	bne.n	8001630 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	699a      	ldr	r2, [r3, #24]
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800162c:	619a      	str	r2, [r3, #24]
 800162e:	e007      	b.n	8001640 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	699a      	ldr	r2, [r3, #24]
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800163e:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	7c9b      	ldrb	r3, [r3, #18]
 8001644:	2b01      	cmp	r3, #1
 8001646:	d108      	bne.n	800165a <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	699a      	ldr	r2, [r3, #24]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001656:	619a      	str	r2, [r3, #24]
 8001658:	e007      	b.n	800166a <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	699a      	ldr	r2, [r3, #24]
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8001668:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	699b      	ldr	r3, [r3, #24]
 8001670:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	689a      	ldr	r2, [r3, #8]
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	430a      	orrs	r2, r1
 800167e:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	699a      	ldr	r2, [r3, #24]
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 800168e:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	691a      	ldr	r2, [r3, #16]
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f022 0210 	bic.w	r2, r2, #16
 800169e:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	68db      	ldr	r3, [r3, #12]
 80016a4:	2b01      	cmp	r3, #1
 80016a6:	d108      	bne.n	80016ba <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	699a      	ldr	r2, [r3, #24]
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f042 0204 	orr.w	r2, r2, #4
 80016b6:	619a      	str	r2, [r3, #24]
 80016b8:	e030      	b.n	800171c <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	68db      	ldr	r3, [r3, #12]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d02c      	beq.n	800171c <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	68db      	ldr	r3, [r3, #12]
 80016c6:	2b02      	cmp	r3, #2
 80016c8:	d020      	beq.n	800170c <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	699a      	ldr	r2, [r3, #24]
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80016d8:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	691a      	ldr	r2, [r3, #16]
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f042 0210 	orr.w	r2, r2, #16
 80016e8:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	68db      	ldr	r3, [r3, #12]
 80016ee:	2b03      	cmp	r3, #3
 80016f0:	d114      	bne.n	800171c <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	699a      	ldr	r2, [r3, #24]
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f042 0220 	orr.w	r2, r2, #32
 8001700:	619a      	str	r2, [r3, #24]
 8001702:	e00b      	b.n	800171c <HAL_FDCAN_Init+0x234>
 8001704:	080095fc 	.word	0x080095fc
 8001708:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	699a      	ldr	r2, [r3, #24]
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f042 0220 	orr.w	r2, r2, #32
 800171a:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	699b      	ldr	r3, [r3, #24]
 8001720:	3b01      	subs	r3, #1
 8001722:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	69db      	ldr	r3, [r3, #28]
 8001728:	3b01      	subs	r3, #1
 800172a:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800172c:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6a1b      	ldr	r3, [r3, #32]
 8001732:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001734:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	695b      	ldr	r3, [r3, #20]
 800173c:	3b01      	subs	r3, #1
 800173e:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001744:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001746:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	689b      	ldr	r3, [r3, #8]
 800174c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8001750:	d115      	bne.n	800177e <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001756:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800175c:	3b01      	subs	r3, #1
 800175e:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001760:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001766:	3b01      	subs	r3, #1
 8001768:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800176a:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001772:	3b01      	subs	r3, #1
 8001774:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800177a:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800177c:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001782:	2b00      	cmp	r3, #0
 8001784:	d00a      	beq.n	800179c <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	430a      	orrs	r2, r1
 8001798:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017a4:	4413      	add	r3, r2
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d011      	beq.n	80017ce <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80017b2:	f023 0107 	bic.w	r1, r3, #7
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80017ba:	009b      	lsls	r3, r3, #2
 80017bc:	3360      	adds	r3, #96	@ 0x60
 80017be:	443b      	add	r3, r7
 80017c0:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	430a      	orrs	r2, r1
 80017ca:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d011      	beq.n	80017fa <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS,
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80017de:	f023 0107 	bic.w	r1, r3, #7
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017e6:	009b      	lsls	r3, r3, #2
 80017e8:	3360      	adds	r3, #96	@ 0x60
 80017ea:	443b      	add	r3, r7
 80017ec:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	430a      	orrs	r2, r1
 80017f6:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d012      	beq.n	8001828 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS,
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800180a:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001812:	009b      	lsls	r3, r3, #2
 8001814:	3360      	adds	r3, #96	@ 0x60
 8001816:	443b      	add	r3, r7
 8001818:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800181c:	011a      	lsls	r2, r3, #4
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	430a      	orrs	r2, r1
 8001824:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800182c:	2b00      	cmp	r3, #0
 800182e:	d012      	beq.n	8001856 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS,
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8001838:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001840:	009b      	lsls	r3, r3, #2
 8001842:	3360      	adds	r3, #96	@ 0x60
 8001844:	443b      	add	r3, r7
 8001846:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800184a:	021a      	lsls	r2, r3, #8
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	430a      	orrs	r2, r1
 8001852:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4a11      	ldr	r2, [pc, #68]	@ (80018a0 <HAL_FDCAN_Init+0x3b8>)
 800185c:	4293      	cmp	r3, r2
 800185e:	d107      	bne.n	8001870 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	689a      	ldr	r2, [r3, #8]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	f022 0203 	bic.w	r2, r2, #3
 800186e:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2200      	movs	r2, #0
 8001874:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2200      	movs	r2, #0
 800187c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2201      	movs	r2, #1
 8001884:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8001888:	6878      	ldr	r0, [r7, #4]
 800188a:	f000 fd9d 	bl	80023c8 <FDCAN_CalcultateRamBlockAddresses>
 800188e:	4603      	mov	r3, r0
 8001890:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

  /* Return function status */
  return status;
 8001894:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
}
 8001898:	4618      	mov	r0, r3
 800189a:	3760      	adds	r7, #96	@ 0x60
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	4000a000 	.word	0x4000a000

080018a4 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b087      	sub	sp, #28
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
 80018ac:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80018b4:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80018b6:	7bfb      	ldrb	r3, [r7, #15]
 80018b8:	2b01      	cmp	r3, #1
 80018ba:	d002      	beq.n	80018c2 <HAL_FDCAN_ConfigFilter+0x1e>
 80018bc:	7bfb      	ldrb	r3, [r7, #15]
 80018be:	2b02      	cmp	r3, #2
 80018c0:	d157      	bne.n	8001972 <HAL_FDCAN_ConfigFilter+0xce>
    {
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->RxBufferIndex, 63U));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->IsCalibrationMsg, 1U));
    }

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d12b      	bne.n	8001922 <HAL_FDCAN_ConfigFilter+0x7e>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
        assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	68db      	ldr	r3, [r3, #12]
 80018ce:	2b07      	cmp	r3, #7
 80018d0:	d10d      	bne.n	80018ee <HAL_FDCAN_ConfigFilter+0x4a>
      {
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
                           (sFilterConfig->FilterID1 << 16U)       |
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	691b      	ldr	r3, [r3, #16]
 80018d6:	041a      	lsls	r2, r3, #16
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	69db      	ldr	r3, [r3, #28]
 80018dc:	021b      	lsls	r3, r3, #8
                           (sFilterConfig->FilterID1 << 16U)       |
 80018de:	431a      	orrs	r2, r3
                           sFilterConfig->RxBufferIndex);
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	699b      	ldr	r3, [r3, #24]
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 80018e4:	4313      	orrs	r3, r2
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
 80018e6:	f043 5360 	orr.w	r3, r3, #939524096	@ 0x38000000
 80018ea:	617b      	str	r3, [r7, #20]
 80018ec:	e00e      	b.n	800190c <HAL_FDCAN_ConfigFilter+0x68>
      }
      else
      {
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	689b      	ldr	r3, [r3, #8]
 80018f2:	079a      	lsls	r2, r3, #30
                           (sFilterConfig->FilterConfig << 27U) |
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	68db      	ldr	r3, [r3, #12]
 80018f8:	06db      	lsls	r3, r3, #27
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80018fa:	431a      	orrs	r2, r3
                           (sFilterConfig->FilterID1 << 16U)    |
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	691b      	ldr	r3, [r3, #16]
 8001900:	041b      	lsls	r3, r3, #16
                           (sFilterConfig->FilterConfig << 27U) |
 8001902:	431a      	orrs	r2, r3
                           sFilterConfig->FilterID2);
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	695b      	ldr	r3, [r3, #20]
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8001908:	4313      	orrs	r3, r2
 800190a:	617b      	str	r3, [r7, #20]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * 4U));
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	009b      	lsls	r3, r3, #2
 8001916:	4413      	add	r3, r2
 8001918:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 800191a:	68bb      	ldr	r3, [r7, #8]
 800191c:	697a      	ldr	r2, [r7, #20]
 800191e:	601a      	str	r2, [r3, #0]
 8001920:	e025      	b.n	800196e <HAL_FDCAN_ConfigFilter+0xca>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
        assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	68db      	ldr	r3, [r3, #12]
 8001926:	075a      	lsls	r2, r3, #29
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	691b      	ldr	r3, [r3, #16]
 800192c:	4313      	orrs	r3, r2
 800192e:	617b      	str	r3, [r7, #20]

      /* Build second word of filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	68db      	ldr	r3, [r3, #12]
 8001934:	2b07      	cmp	r3, #7
 8001936:	d103      	bne.n	8001940 <HAL_FDCAN_ConfigFilter+0x9c>
      {
        FilterElementW2 = sFilterConfig->RxBufferIndex;
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	699b      	ldr	r3, [r3, #24]
 800193c:	613b      	str	r3, [r7, #16]
 800193e:	e006      	b.n	800194e <HAL_FDCAN_ConfigFilter+0xaa>
      }
      else
      {
        FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	689b      	ldr	r3, [r3, #8]
 8001944:	079a      	lsls	r2, r3, #30
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	695b      	ldr	r3, [r3, #20]
 800194a:	4313      	orrs	r3, r2
 800194c:	613b      	str	r3, [r7, #16]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * 4U * 2U));
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	00db      	lsls	r3, r3, #3
 8001958:	4413      	add	r3, r2
 800195a:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 800195c:	68bb      	ldr	r3, [r7, #8]
 800195e:	697a      	ldr	r2, [r7, #20]
 8001960:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8001962:	68bb      	ldr	r3, [r7, #8]
 8001964:	3304      	adds	r3, #4
 8001966:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8001968:	68bb      	ldr	r3, [r7, #8]
 800196a:	693a      	ldr	r2, [r7, #16]
 800196c:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 800196e:	2300      	movs	r3, #0
 8001970:	e008      	b.n	8001984 <HAL_FDCAN_ConfigFilter+0xe0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001978:	f043 0202 	orr.w	r2, r3, #2
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8001982:	2301      	movs	r3, #1
  }
}
 8001984:	4618      	mov	r0, r3
 8001986:	371c      	adds	r7, #28
 8001988:	46bd      	mov	sp, r7
 800198a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198e:	4770      	bx	lr

08001990 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8001990:	b480      	push	{r7}
 8001992:	b083      	sub	sp, #12
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800199e:	b2db      	uxtb	r3, r3
 80019a0:	2b01      	cmp	r3, #1
 80019a2:	d111      	bne.n	80019c8 <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2202      	movs	r2, #2
 80019a8:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	699a      	ldr	r2, [r3, #24]
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f022 0201 	bic.w	r2, r2, #1
 80019ba:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2200      	movs	r2, #0
 80019c0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Return function status */
    return HAL_OK;
 80019c4:	2300      	movs	r3, #0
 80019c6:	e008      	b.n	80019da <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80019ce:	f043 0204 	orr.w	r2, r3, #4
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 80019d8:	2301      	movs	r3, #1
  }
}
 80019da:	4618      	mov	r0, r3
 80019dc:	370c      	adds	r7, #12
 80019de:	46bd      	mov	sp, r7
 80019e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e4:	4770      	bx	lr
	...

080019e8 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b08b      	sub	sp, #44	@ 0x2c
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	60f8      	str	r0, [r7, #12]
 80019f0:	60b9      	str	r1, [r7, #8]
 80019f2:	607a      	str	r2, [r7, #4]
 80019f4:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 80019f6:	2300      	movs	r3, #0
 80019f8:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8001a00:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 8001a02:	7efb      	ldrb	r3, [r7, #27]
 8001a04:	2b02      	cmp	r3, #2
 8001a06:	f040 8149 	bne.w	8001c9c <HAL_FDCAN_GetRxMessage+0x2b4>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8001a0a:	68bb      	ldr	r3, [r7, #8]
 8001a0c:	2b40      	cmp	r3, #64	@ 0x40
 8001a0e:	d14c      	bne.n	8001aaa <HAL_FDCAN_GetRxMessage+0xc2>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8001a18:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d109      	bne.n	8001a34 <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001a26:	f043 0220 	orr.w	r2, r3, #32
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8001a30:	2301      	movs	r3, #1
 8001a32:	e13c      	b.n	8001cae <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001a3c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d109      	bne.n	8001a58 <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001a4a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8001a54:	2301      	movs	r3, #1
 8001a56:	e12a      	b.n	8001cae <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001a60:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001a64:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001a68:	d10a      	bne.n	8001a80 <HAL_FDCAN_GetRxMessage+0x98>
        {
          if (((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8001a72:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8001a76:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001a7a:	d101      	bne.n	8001a80 <HAL_FDCAN_GetRxMessage+0x98>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001a88:	0a1b      	lsrs	r3, r3, #8
 8001a8a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001a8e:	69fa      	ldr	r2, [r7, #28]
 8001a90:	4413      	add	r3, r2
 8001a92:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a9c:	69f9      	ldr	r1, [r7, #28]
 8001a9e:	fb01 f303 	mul.w	r3, r1, r3
 8001aa2:	009b      	lsls	r3, r3, #2
 8001aa4:	4413      	add	r3, r2
 8001aa6:	627b      	str	r3, [r7, #36]	@ 0x24
 8001aa8:	e068      	b.n	8001b7c <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8001aaa:	68bb      	ldr	r3, [r7, #8]
 8001aac:	2b41      	cmp	r3, #65	@ 0x41
 8001aae:	d14c      	bne.n	8001b4a <HAL_FDCAN_GetRxMessage+0x162>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8001ab8:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d109      	bne.n	8001ad4 <HAL_FDCAN_GetRxMessage+0xec>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001ac6:	f043 0220 	orr.w	r2, r3, #32
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	e0ec      	b.n	8001cae <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8001adc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d109      	bne.n	8001af8 <HAL_FDCAN_GetRxMessage+0x110>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001aea:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8001af4:	2301      	movs	r3, #1
 8001af6:	e0da      	b.n	8001cae <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8001b00:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001b04:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001b08:	d10a      	bne.n	8001b20 <HAL_FDCAN_GetRxMessage+0x138>
        {
          if (((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8001b12:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8001b16:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001b1a:	d101      	bne.n	8001b20 <HAL_FDCAN_GetRxMessage+0x138>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8001b28:	0a1b      	lsrs	r3, r3, #8
 8001b2a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001b2e:	69fa      	ldr	r2, [r7, #28]
 8001b30:	4413      	add	r3, r2
 8001b32:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b3c:	69f9      	ldr	r1, [r7, #28]
 8001b3e:	fb01 f303 	mul.w	r3, r1, r3
 8001b42:	009b      	lsls	r3, r3, #2
 8001b44:	4413      	add	r3, r2
 8001b46:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b48:	e018      	b.n	8001b7c <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001b4e:	68ba      	ldr	r2, [r7, #8]
 8001b50:	429a      	cmp	r2, r3
 8001b52:	d309      	bcc.n	8001b68 <HAL_FDCAN_GetRxMessage+0x180>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001b5a:	f043 0220 	orr.w	r2, r3, #32
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8001b64:	2301      	movs	r3, #1
 8001b66:	e0a2      	b.n	8001cae <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b70:	68b9      	ldr	r1, [r7, #8]
 8001b72:	fb01 f303 	mul.w	r3, r1, r3
 8001b76:	009b      	lsls	r3, r3, #2
 8001b78:	4413      	add	r3, r2
 8001b7a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8001b7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d107      	bne.n	8001ba0 <HAL_FDCAN_GetRxMessage+0x1b8>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8001b90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	0c9b      	lsrs	r3, r3, #18
 8001b96:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	601a      	str	r2, [r3, #0]
 8001b9e:	e005      	b.n	8001bac <HAL_FDCAN_GetRxMessage+0x1c4>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8001ba0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8001bac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8001bb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8001bc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bc6:	3304      	adds	r3, #4
 8001bc8:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8001bca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	b29a      	uxth	r2, r3
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 8001bd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	0c1b      	lsrs	r3, r3, #16
 8001bda:	f003 020f 	and.w	r2, r3, #15
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8001be2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8001bee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8001bfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	0e1b      	lsrs	r3, r3, #24
 8001c00:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8001c08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	0fda      	lsrs	r2, r3, #31
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8001c12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c14:	3304      	adds	r3, #4
 8001c16:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8001c18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c1a:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	623b      	str	r3, [r7, #32]
 8001c20:	e00a      	b.n	8001c38 <HAL_FDCAN_GetRxMessage+0x250>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8001c22:	697a      	ldr	r2, [r7, #20]
 8001c24:	6a3b      	ldr	r3, [r7, #32]
 8001c26:	441a      	add	r2, r3
 8001c28:	6839      	ldr	r1, [r7, #0]
 8001c2a:	6a3b      	ldr	r3, [r7, #32]
 8001c2c:	440b      	add	r3, r1
 8001c2e:	7812      	ldrb	r2, [r2, #0]
 8001c30:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8001c32:	6a3b      	ldr	r3, [r7, #32]
 8001c34:	3301      	adds	r3, #1
 8001c36:	623b      	str	r3, [r7, #32]
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	68db      	ldr	r3, [r3, #12]
 8001c3c:	4a1f      	ldr	r2, [pc, #124]	@ (8001cbc <HAL_FDCAN_GetRxMessage+0x2d4>)
 8001c3e:	5cd3      	ldrb	r3, [r2, r3]
 8001c40:	461a      	mov	r2, r3
 8001c42:	6a3b      	ldr	r3, [r7, #32]
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d3ec      	bcc.n	8001c22 <HAL_FDCAN_GetRxMessage+0x23a>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8001c48:	68bb      	ldr	r3, [r7, #8]
 8001c4a:	2b40      	cmp	r3, #64	@ 0x40
 8001c4c:	d105      	bne.n	8001c5a <HAL_FDCAN_GetRxMessage+0x272>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	69fa      	ldr	r2, [r7, #28]
 8001c54:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
 8001c58:	e01e      	b.n	8001c98 <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8001c5a:	68bb      	ldr	r3, [r7, #8]
 8001c5c:	2b41      	cmp	r3, #65	@ 0x41
 8001c5e:	d105      	bne.n	8001c6c <HAL_FDCAN_GetRxMessage+0x284>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	69fa      	ldr	r2, [r7, #28]
 8001c66:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
 8001c6a:	e015      	b.n	8001c98 <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 8001c6c:	68bb      	ldr	r3, [r7, #8]
 8001c6e:	2b1f      	cmp	r3, #31
 8001c70:	d808      	bhi.n	8001c84 <HAL_FDCAN_GetRxMessage+0x29c>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1U << RxLocation);
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	2101      	movs	r1, #1
 8001c78:	68ba      	ldr	r2, [r7, #8]
 8001c7a:	fa01 f202 	lsl.w	r2, r1, r2
 8001c7e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 8001c82:	e009      	b.n	8001c98 <HAL_FDCAN_GetRxMessage+0x2b0>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1U << (RxLocation & 0x1FU));
 8001c84:	68bb      	ldr	r3, [r7, #8]
 8001c86:	f003 021f 	and.w	r2, r3, #31
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	2101      	movs	r1, #1
 8001c90:	fa01 f202 	lsl.w	r2, r1, r2
 8001c94:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	e008      	b.n	8001cae <HAL_FDCAN_GetRxMessage+0x2c6>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001ca2:	f043 0208 	orr.w	r2, r3, #8
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8001cac:	2301      	movs	r3, #1
  }
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	372c      	adds	r7, #44	@ 0x2c
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb8:	4770      	bx	lr
 8001cba:	bf00      	nop
 8001cbc:	08009658 	.word	0x08009658

08001cc0 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b087      	sub	sp, #28
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	60f8      	str	r0, [r7, #12]
 8001cc8:	60b9      	str	r1, [r7, #8]
 8001cca:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8001cd2:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8001cd4:	7dfb      	ldrb	r3, [r7, #23]
 8001cd6:	2b01      	cmp	r3, #1
 8001cd8:	d002      	beq.n	8001ce0 <HAL_FDCAN_ActivateNotification+0x20>
 8001cda:	7dfb      	ldrb	r3, [r7, #23]
 8001cdc:	2b02      	cmp	r3, #2
 8001cde:	d155      	bne.n	8001d8c <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001ce6:	68bb      	ldr	r3, [r7, #8]
 8001ce8:	4013      	ands	r3, r2
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d108      	bne.n	8001d00 <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f042 0201 	orr.w	r2, r2, #1
 8001cfc:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001cfe:	e014      	b.n	8001d2a <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001d06:	68bb      	ldr	r3, [r7, #8]
 8001d08:	4013      	ands	r3, r2
 8001d0a:	68ba      	ldr	r2, [r7, #8]
 8001d0c:	429a      	cmp	r2, r3
 8001d0e:	d108      	bne.n	8001d22 <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f042 0202 	orr.w	r2, r2, #2
 8001d1e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001d20:	e003      	b.n	8001d2a <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	2203      	movs	r2, #3
 8001d28:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8001d2a:	68bb      	ldr	r3, [r7, #8]
 8001d2c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d009      	beq.n	8001d48 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	687a      	ldr	r2, [r7, #4]
 8001d42:	430a      	orrs	r2, r1
 8001d44:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8001d48:	68bb      	ldr	r3, [r7, #8]
 8001d4a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d009      	beq.n	8001d66 <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f8d3 10e4 	ldr.w	r1, [r3, #228]	@ 0xe4
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	687a      	ldr	r2, [r7, #4]
 8001d60:	430a      	orrs	r2, r1
 8001d62:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8001d6c:	68ba      	ldr	r2, [r7, #8]
 8001d6e:	4b0f      	ldr	r3, [pc, #60]	@ (8001dac <HAL_FDCAN_ActivateNotification+0xec>)
 8001d70:	4013      	ands	r3, r2
 8001d72:	68fa      	ldr	r2, [r7, #12]
 8001d74:	6812      	ldr	r2, [r2, #0]
 8001d76:	430b      	orrs	r3, r1
 8001d78:	6553      	str	r3, [r2, #84]	@ 0x54
 8001d7a:	4b0d      	ldr	r3, [pc, #52]	@ (8001db0 <HAL_FDCAN_ActivateNotification+0xf0>)
 8001d7c:	695a      	ldr	r2, [r3, #20]
 8001d7e:	68bb      	ldr	r3, [r7, #8]
 8001d80:	0f9b      	lsrs	r3, r3, #30
 8001d82:	490b      	ldr	r1, [pc, #44]	@ (8001db0 <HAL_FDCAN_ActivateNotification+0xf0>)
 8001d84:	4313      	orrs	r3, r2
 8001d86:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	e008      	b.n	8001d9e <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001d92:	f043 0202 	orr.w	r2, r3, #2
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8001d9c:	2301      	movs	r3, #1
  }
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	371c      	adds	r7, #28
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr
 8001daa:	bf00      	nop
 8001dac:	3fcfffff 	.word	0x3fcfffff
 8001db0:	4000a800 	.word	0x4000a800

08001db4 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b096      	sub	sp, #88	@ 0x58
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  uint32_t itsourceIE;
  uint32_t itsourceTTIE;
  uint32_t itflagIR;
  uint32_t itflagTTIR;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 8001dbc:	4b9a      	ldr	r3, [pc, #616]	@ (8002028 <HAL_FDCAN_IRQHandler+0x274>)
 8001dbe:	691b      	ldr	r3, [r3, #16]
 8001dc0:	079b      	lsls	r3, r3, #30
 8001dc2:	657b      	str	r3, [r7, #84]	@ 0x54
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 8001dc4:	4b98      	ldr	r3, [pc, #608]	@ (8002028 <HAL_FDCAN_IRQHandler+0x274>)
 8001dc6:	695b      	ldr	r3, [r3, #20]
 8001dc8:	079b      	lsls	r3, r3, #30
 8001dca:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001dcc:	4013      	ands	r3, r2
 8001dce:	657b      	str	r3, [r7, #84]	@ 0x54
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001dd6:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8001dda:	653b      	str	r3, [r7, #80]	@ 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001de2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8001de4:	4013      	ands	r3, r2
 8001de6:	653b      	str	r3, [r7, #80]	@ 0x50
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001dee:	f003 030f 	and.w	r3, r3, #15
 8001df2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo0ITs &= hfdcan->Instance->IE;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001dfa:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001e06:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001e0a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RxFifo1ITs &= hfdcan->Instance->IE;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e12:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001e14:	4013      	ands	r3, r2
 8001e16:	64bb      	str	r3, [r7, #72]	@ 0x48
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001e1e:	f003 5371 	and.w	r3, r3, #1010827264	@ 0x3c400000
 8001e22:	647b      	str	r3, [r7, #68]	@ 0x44
  Errors &= hfdcan->Instance->IE;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e2a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	647b      	str	r3, [r7, #68]	@ 0x44
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001e36:	f003 7360 	and.w	r3, r3, #58720256	@ 0x3800000
 8001e3a:	643b      	str	r3, [r7, #64]	@ 0x40
  ErrorStatusITs &= hfdcan->Instance->IE;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e42:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001e44:	4013      	ands	r3, r2
 8001e46:	643b      	str	r3, [r7, #64]	@ 0x40
  itsourceIE = hfdcan->Instance->IE;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  itflagIR = hfdcan->Instance->IR;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001e56:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8001e58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001e5a:	0a1b      	lsrs	r3, r3, #8
 8001e5c:	f003 0301 	and.w	r3, r3, #1
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d010      	beq.n	8001e86 <HAL_FDCAN_IRQHandler+0xd2>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8001e64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001e66:	0a1b      	lsrs	r3, r3, #8
 8001e68:	f003 0301 	and.w	r3, r3, #1
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d00a      	beq.n	8001e86 <HAL_FDCAN_IRQHandler+0xd2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001e78:	651a      	str	r2, [r3, #80]	@ 0x50
 8001e7a:	4b6b      	ldr	r3, [pc, #428]	@ (8002028 <HAL_FDCAN_IRQHandler+0x274>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8001e80:	6878      	ldr	r0, [r7, #4]
 8001e82:	f000 fa54 	bl	800232e <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8001e86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001e88:	0a9b      	lsrs	r3, r3, #10
 8001e8a:	f003 0301 	and.w	r3, r3, #1
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d01d      	beq.n	8001ece <HAL_FDCAN_IRQHandler+0x11a>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8001e92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001e94:	0a9b      	lsrs	r3, r3, #10
 8001e96:	f003 0301 	and.w	r3, r3, #1
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d017      	beq.n	8001ece <HAL_FDCAN_IRQHandler+0x11a>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8001ea6:	637b      	str	r3, [r7, #52]	@ 0x34
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8001eb0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001eb2:	4013      	ands	r3, r2
 8001eb4:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001ebe:	651a      	str	r2, [r3, #80]	@ 0x50
 8001ec0:	4b59      	ldr	r3, [pc, #356]	@ (8002028 <HAL_FDCAN_IRQHandler+0x274>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8001ec6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8001ec8:	6878      	ldr	r0, [r7, #4]
 8001eca:	f000 fa07 	bl	80022dc <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 8001ece:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d00d      	beq.n	8001ef0 <HAL_FDCAN_IRQHandler+0x13c>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681a      	ldr	r2, [r3, #0]
 8001ed8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001eda:	4b54      	ldr	r3, [pc, #336]	@ (800202c <HAL_FDCAN_IRQHandler+0x278>)
 8001edc:	400b      	ands	r3, r1
 8001ede:	6513      	str	r3, [r2, #80]	@ 0x50
 8001ee0:	4a51      	ldr	r2, [pc, #324]	@ (8002028 <HAL_FDCAN_IRQHandler+0x274>)
 8001ee2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ee4:	0f9b      	lsrs	r3, r3, #30
 8001ee6:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 8001ee8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001eea:	6878      	ldr	r0, [r7, #4]
 8001eec:	f000 f9c0 	bl	8002270 <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8001ef0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d00d      	beq.n	8001f12 <HAL_FDCAN_IRQHandler+0x15e>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681a      	ldr	r2, [r3, #0]
 8001efa:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8001efc:	4b4b      	ldr	r3, [pc, #300]	@ (800202c <HAL_FDCAN_IRQHandler+0x278>)
 8001efe:	400b      	ands	r3, r1
 8001f00:	6513      	str	r3, [r2, #80]	@ 0x50
 8001f02:	4a49      	ldr	r2, [pc, #292]	@ (8002028 <HAL_FDCAN_IRQHandler+0x274>)
 8001f04:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001f06:	0f9b      	lsrs	r3, r3, #30
 8001f08:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8001f0a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8001f0c:	6878      	ldr	r0, [r7, #4]
 8001f0e:	f000 f9ba 	bl	8002286 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8001f12:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d00d      	beq.n	8001f34 <HAL_FDCAN_IRQHandler+0x180>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681a      	ldr	r2, [r3, #0]
 8001f1c:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8001f1e:	4b43      	ldr	r3, [pc, #268]	@ (800202c <HAL_FDCAN_IRQHandler+0x278>)
 8001f20:	400b      	ands	r3, r1
 8001f22:	6513      	str	r3, [r2, #80]	@ 0x50
 8001f24:	4a40      	ldr	r2, [pc, #256]	@ (8002028 <HAL_FDCAN_IRQHandler+0x274>)
 8001f26:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001f28:	0f9b      	lsrs	r3, r3, #30
 8001f2a:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8001f2c:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8001f2e:	6878      	ldr	r0, [r7, #4]
 8001f30:	f7fe fbc4 	bl	80006bc <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8001f34:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d00d      	beq.n	8001f56 <HAL_FDCAN_IRQHandler+0x1a2>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681a      	ldr	r2, [r3, #0]
 8001f3e:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8001f40:	4b3a      	ldr	r3, [pc, #232]	@ (800202c <HAL_FDCAN_IRQHandler+0x278>)
 8001f42:	400b      	ands	r3, r1
 8001f44:	6513      	str	r3, [r2, #80]	@ 0x50
 8001f46:	4a38      	ldr	r2, [pc, #224]	@ (8002028 <HAL_FDCAN_IRQHandler+0x274>)
 8001f48:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001f4a:	0f9b      	lsrs	r3, r3, #30
 8001f4c:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8001f4e:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8001f50:	6878      	ldr	r0, [r7, #4]
 8001f52:	f000 f9a3 	bl	800229c <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8001f56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001f58:	0adb      	lsrs	r3, r3, #11
 8001f5a:	f003 0301 	and.w	r3, r3, #1
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d010      	beq.n	8001f84 <HAL_FDCAN_IRQHandler+0x1d0>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8001f62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001f64:	0adb      	lsrs	r3, r3, #11
 8001f66:	f003 0301 	and.w	r3, r3, #1
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d00a      	beq.n	8001f84 <HAL_FDCAN_IRQHandler+0x1d0>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001f76:	651a      	str	r2, [r3, #80]	@ 0x50
 8001f78:	4b2b      	ldr	r3, [pc, #172]	@ (8002028 <HAL_FDCAN_IRQHandler+0x274>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8001f7e:	6878      	ldr	r0, [r7, #4]
 8001f80:	f000 f997 	bl	80022b2 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_COMPLETE) != RESET)
 8001f84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001f86:	0a5b      	lsrs	r3, r3, #9
 8001f88:	f003 0301 	and.w	r3, r3, #1
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d01d      	beq.n	8001fcc <HAL_FDCAN_IRQHandler+0x218>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8001f90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001f92:	0a5b      	lsrs	r3, r3, #9
 8001f94:	f003 0301 	and.w	r3, r3, #1
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d017      	beq.n	8001fcc <HAL_FDCAN_IRQHandler+0x218>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001fa4:	633b      	str	r3, [r7, #48]	@ 0x30
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001fae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001fbc:	651a      	str	r2, [r3, #80]	@ 0x50
 8001fbe:	4b1a      	ldr	r3, [pc, #104]	@ (8002028 <HAL_FDCAN_IRQHandler+0x274>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8001fc4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001fc6:	6878      	ldr	r0, [r7, #4]
 8001fc8:	f000 f97d 	bl	80022c6 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != RESET)
 8001fcc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001fce:	0cdb      	lsrs	r3, r3, #19
 8001fd0:	f003 0301 	and.w	r3, r3, #1
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d010      	beq.n	8001ffa <HAL_FDCAN_IRQHandler+0x246>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != RESET)
 8001fd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001fda:	0cdb      	lsrs	r3, r3, #19
 8001fdc:	f003 0301 	and.w	r3, r3, #1
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d00a      	beq.n	8001ffa <HAL_FDCAN_IRQHandler+0x246>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001fec:	651a      	str	r2, [r3, #80]	@ 0x50
 8001fee:	4b0e      	ldr	r3, [pc, #56]	@ (8002028 <HAL_FDCAN_IRQHandler+0x274>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 8001ff4:	6878      	ldr	r0, [r7, #4]
 8001ff6:	f000 f97c 	bl	80022f2 <HAL_FDCAN_RxBufferNewMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8001ffa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001ffc:	0c1b      	lsrs	r3, r3, #16
 8001ffe:	f003 0301 	and.w	r3, r3, #1
 8002002:	2b00      	cmp	r3, #0
 8002004:	d016      	beq.n	8002034 <HAL_FDCAN_IRQHandler+0x280>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8002006:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002008:	0c1b      	lsrs	r3, r3, #16
 800200a:	f003 0301 	and.w	r3, r3, #1
 800200e:	2b00      	cmp	r3, #0
 8002010:	d010      	beq.n	8002034 <HAL_FDCAN_IRQHandler+0x280>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800201a:	651a      	str	r2, [r3, #80]	@ 0x50
 800201c:	4b02      	ldr	r3, [pc, #8]	@ (8002028 <HAL_FDCAN_IRQHandler+0x274>)
 800201e:	2200      	movs	r2, #0
 8002020:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8002022:	6878      	ldr	r0, [r7, #4]
 8002024:	e004      	b.n	8002030 <HAL_FDCAN_IRQHandler+0x27c>
 8002026:	bf00      	nop
 8002028:	4000a800 	.word	0x4000a800
 800202c:	3fcfffff 	.word	0x3fcfffff
 8002030:	f000 f969 	bl	8002306 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8002034:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002036:	0c9b      	lsrs	r3, r3, #18
 8002038:	f003 0301 	and.w	r3, r3, #1
 800203c:	2b00      	cmp	r3, #0
 800203e:	d010      	beq.n	8002062 <HAL_FDCAN_IRQHandler+0x2ae>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8002040:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002042:	0c9b      	lsrs	r3, r3, #18
 8002044:	f003 0301 	and.w	r3, r3, #1
 8002048:	2b00      	cmp	r3, #0
 800204a:	d00a      	beq.n	8002062 <HAL_FDCAN_IRQHandler+0x2ae>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8002054:	651a      	str	r2, [r3, #80]	@ 0x50
 8002056:	4b83      	ldr	r3, [pc, #524]	@ (8002264 <HAL_FDCAN_IRQHandler+0x4b0>)
 8002058:	2200      	movs	r2, #0
 800205a:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 800205c:	6878      	ldr	r0, [r7, #4]
 800205e:	f000 f95c 	bl	800231a <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8002062:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002064:	0c5b      	lsrs	r3, r3, #17
 8002066:	f003 0301 	and.w	r3, r3, #1
 800206a:	2b00      	cmp	r3, #0
 800206c:	d015      	beq.n	800209a <HAL_FDCAN_IRQHandler+0x2e6>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 800206e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002070:	0c5b      	lsrs	r3, r3, #17
 8002072:	f003 0301 	and.w	r3, r3, #1
 8002076:	2b00      	cmp	r3, #0
 8002078:	d00f      	beq.n	800209a <HAL_FDCAN_IRQHandler+0x2e6>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002082:	651a      	str	r2, [r3, #80]	@ 0x50
 8002084:	4b77      	ldr	r3, [pc, #476]	@ (8002264 <HAL_FDCAN_IRQHandler+0x4b0>)
 8002086:	2200      	movs	r2, #0
 8002088:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002090:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 800209a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800209c:	2b00      	cmp	r3, #0
 800209e:	d00d      	beq.n	80020bc <HAL_FDCAN_IRQHandler+0x308>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681a      	ldr	r2, [r3, #0]
 80020a4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80020a6:	4b70      	ldr	r3, [pc, #448]	@ (8002268 <HAL_FDCAN_IRQHandler+0x4b4>)
 80020a8:	400b      	ands	r3, r1
 80020aa:	6513      	str	r3, [r2, #80]	@ 0x50
 80020ac:	4a6d      	ldr	r2, [pc, #436]	@ (8002264 <HAL_FDCAN_IRQHandler+0x4b0>)
 80020ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80020b0:	0f9b      	lsrs	r3, r3, #30
 80020b2:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 80020b4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80020b6:	6878      	ldr	r0, [r7, #4]
 80020b8:	f000 f94d 	bl	8002356 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 80020bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d011      	beq.n	80020e6 <HAL_FDCAN_IRQHandler+0x332>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681a      	ldr	r2, [r3, #0]
 80020c6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80020c8:	4b67      	ldr	r3, [pc, #412]	@ (8002268 <HAL_FDCAN_IRQHandler+0x4b4>)
 80020ca:	400b      	ands	r3, r1
 80020cc:	6513      	str	r3, [r2, #80]	@ 0x50
 80020ce:	4a65      	ldr	r2, [pc, #404]	@ (8002264 <HAL_FDCAN_IRQHandler+0x4b0>)
 80020d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80020d2:	0f9b      	lsrs	r3, r3, #30
 80020d4:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 80020dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80020de:	431a      	orrs	r2, r3
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4a60      	ldr	r2, [pc, #384]	@ (800226c <HAL_FDCAN_IRQHandler+0x4b8>)
 80020ec:	4293      	cmp	r3, r2
 80020ee:	f040 80ac 	bne.w	800224a <HAL_FDCAN_IRQHandler+0x496>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	689b      	ldr	r3, [r3, #8]
 80020f8:	f003 0303 	and.w	r3, r3, #3
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	f000 80a4 	beq.w	800224a <HAL_FDCAN_IRQHandler+0x496>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	6a1b      	ldr	r3, [r3, #32]
 8002108:	f003 030f 	and.w	r3, r3, #15
 800210c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002114:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002116:	4013      	ands	r3, r2
 8002118:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	6a1b      	ldr	r3, [r3, #32]
 8002120:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8002124:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800212c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800212e:	4013      	ands	r3, r2
 8002130:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	6a1b      	ldr	r3, [r3, #32]
 8002138:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 800213c:	627b      	str	r3, [r7, #36]	@ 0x24
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002144:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002146:	4013      	ands	r3, r2
 8002148:	627b      	str	r3, [r7, #36]	@ 0x24
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	6a1b      	ldr	r3, [r3, #32]
 8002150:	f403 43fc 	and.w	r3, r3, #32256	@ 0x7e00
 8002154:	623b      	str	r3, [r7, #32]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800215c:	6a3a      	ldr	r2, [r7, #32]
 800215e:	4013      	ands	r3, r2
 8002160:	623b      	str	r3, [r7, #32]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	6a1b      	ldr	r3, [r3, #32]
 8002168:	f403 23f0 	and.w	r3, r3, #491520	@ 0x78000
 800216c:	61fb      	str	r3, [r7, #28]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002174:	69fa      	ldr	r2, [r7, #28]
 8002176:	4013      	ands	r3, r2
 8002178:	61fb      	str	r3, [r7, #28]
      itsourceTTIE = hfdcan->ttcan->TTIE;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002180:	61bb      	str	r3, [r7, #24]
      itflagTTIR = hfdcan->ttcan->TTIR;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	6a1b      	ldr	r3, [r3, #32]
 8002188:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 800218a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800218c:	2b00      	cmp	r3, #0
 800218e:	d007      	beq.n	80021a0 <HAL_FDCAN_IRQHandler+0x3ec>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002196:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 8002198:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800219a:	6878      	ldr	r0, [r7, #4]
 800219c:	f000 f8e6 	bl	800236c <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 80021a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d007      	beq.n	80021b6 <HAL_FDCAN_IRQHandler+0x402>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80021ac:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 80021ae:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80021b0:	6878      	ldr	r0, [r7, #4]
 80021b2:	f000 f8e6 	bl	8002382 <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (FDCAN_CHECK_IT_SOURCE(itsourceTTIE, FDCAN_TT_IT_STOP_WATCH) != RESET)
 80021b6:	69bb      	ldr	r3, [r7, #24]
 80021b8:	099b      	lsrs	r3, r3, #6
 80021ba:	f003 0301 	and.w	r3, r3, #1
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d01a      	beq.n	80021f8 <HAL_FDCAN_IRQHandler+0x444>
      {
        if (FDCAN_CHECK_FLAG(itflagTTIR, FDCAN_TT_FLAG_STOP_WATCH) != RESET)
 80021c2:	697b      	ldr	r3, [r7, #20]
 80021c4:	099b      	lsrs	r3, r3, #6
 80021c6:	f003 0301 	and.w	r3, r3, #1
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d014      	beq.n	80021f8 <HAL_FDCAN_IRQHandler+0x444>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021d4:	0c1b      	lsrs	r3, r3, #16
 80021d6:	b29b      	uxth	r3, r3
 80021d8:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021e0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80021e4:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	2240      	movs	r2, #64	@ 0x40
 80021ec:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 80021ee:	68fa      	ldr	r2, [r7, #12]
 80021f0:	6939      	ldr	r1, [r7, #16]
 80021f2:	6878      	ldr	r0, [r7, #4]
 80021f4:	f000 f8d0 	bl	8002398 <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 80021f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d007      	beq.n	800220e <HAL_FDCAN_IRQHandler+0x45a>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002204:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 8002206:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002208:	6878      	ldr	r0, [r7, #4]
 800220a:	f000 f8d1 	bl	80023b0 <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 800220e:	6a3b      	ldr	r3, [r7, #32]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d00b      	beq.n	800222c <HAL_FDCAN_IRQHandler+0x478>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	6a3a      	ldr	r2, [r7, #32]
 800221a:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8002222:	6a3b      	ldr	r3, [r7, #32]
 8002224:	431a      	orrs	r2, r3
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 800222c:	69fb      	ldr	r3, [r7, #28]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d00b      	beq.n	800224a <HAL_FDCAN_IRQHandler+0x496>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	69fa      	ldr	r2, [r7, #28]
 8002238:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8002240:	69fb      	ldr	r3, [r7, #28]
 8002242:	431a      	orrs	r2, r3
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002250:	2b00      	cmp	r3, #0
 8002252:	d002      	beq.n	800225a <HAL_FDCAN_IRQHandler+0x4a6>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8002254:	6878      	ldr	r0, [r7, #4]
 8002256:	f000 f874 	bl	8002342 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 800225a:	bf00      	nop
 800225c:	3758      	adds	r7, #88	@ 0x58
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}
 8002262:	bf00      	nop
 8002264:	4000a800 	.word	0x4000a800
 8002268:	3fcfffff 	.word	0x3fcfffff
 800226c:	4000a000 	.word	0x4000a000

08002270 <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 8002270:	b480      	push	{r7}
 8002272:	b083      	sub	sp, #12
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
 8002278:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 800227a:	bf00      	nop
 800227c:	370c      	adds	r7, #12
 800227e:	46bd      	mov	sp, r7
 8002280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002284:	4770      	bx	lr

08002286 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8002286:	b480      	push	{r7}
 8002288:	b083      	sub	sp, #12
 800228a:	af00      	add	r7, sp, #0
 800228c:	6078      	str	r0, [r7, #4]
 800228e:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8002290:	bf00      	nop
 8002292:	370c      	adds	r7, #12
 8002294:	46bd      	mov	sp, r7
 8002296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229a:	4770      	bx	lr

0800229c <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 800229c:	b480      	push	{r7}
 800229e:	b083      	sub	sp, #12
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
 80022a4:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 80022a6:	bf00      	nop
 80022a8:	370c      	adds	r7, #12
 80022aa:	46bd      	mov	sp, r7
 80022ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b0:	4770      	bx	lr

080022b2 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80022b2:	b480      	push	{r7}
 80022b4:	b083      	sub	sp, #12
 80022b6:	af00      	add	r7, sp, #0
 80022b8:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 80022ba:	bf00      	nop
 80022bc:	370c      	adds	r7, #12
 80022be:	46bd      	mov	sp, r7
 80022c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c4:	4770      	bx	lr

080022c6 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80022c6:	b480      	push	{r7}
 80022c8:	b083      	sub	sp, #12
 80022ca:	af00      	add	r7, sp, #0
 80022cc:	6078      	str	r0, [r7, #4]
 80022ce:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 80022d0:	bf00      	nop
 80022d2:	370c      	adds	r7, #12
 80022d4:	46bd      	mov	sp, r7
 80022d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022da:	4770      	bx	lr

080022dc <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80022dc:	b480      	push	{r7}
 80022de:	b083      	sub	sp, #12
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
 80022e4:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 80022e6:	bf00      	nop
 80022e8:	370c      	adds	r7, #12
 80022ea:	46bd      	mov	sp, r7
 80022ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f0:	4770      	bx	lr

080022f2 <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80022f2:	b480      	push	{r7}
 80022f4:	b083      	sub	sp, #12
 80022f6:	af00      	add	r7, sp, #0
 80022f8:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 80022fa:	bf00      	nop
 80022fc:	370c      	adds	r7, #12
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr

08002306 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002306:	b480      	push	{r7}
 8002308:	b083      	sub	sp, #12
 800230a:	af00      	add	r7, sp, #0
 800230c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 800230e:	bf00      	nop
 8002310:	370c      	adds	r7, #12
 8002312:	46bd      	mov	sp, r7
 8002314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002318:	4770      	bx	lr

0800231a <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800231a:	b480      	push	{r7}
 800231c:	b083      	sub	sp, #12
 800231e:	af00      	add	r7, sp, #0
 8002320:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8002322:	bf00      	nop
 8002324:	370c      	adds	r7, #12
 8002326:	46bd      	mov	sp, r7
 8002328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232c:	4770      	bx	lr

0800232e <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800232e:	b480      	push	{r7}
 8002330:	b083      	sub	sp, #12
 8002332:	af00      	add	r7, sp, #0
 8002334:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8002336:	bf00      	nop
 8002338:	370c      	adds	r7, #12
 800233a:	46bd      	mov	sp, r7
 800233c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002340:	4770      	bx	lr

08002342 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002342:	b480      	push	{r7}
 8002344:	b083      	sub	sp, #12
 8002346:	af00      	add	r7, sp, #0
 8002348:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 800234a:	bf00      	nop
 800234c:	370c      	adds	r7, #12
 800234e:	46bd      	mov	sp, r7
 8002350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002354:	4770      	bx	lr

08002356 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8002356:	b480      	push	{r7}
 8002358:	b083      	sub	sp, #12
 800235a:	af00      	add	r7, sp, #0
 800235c:	6078      	str	r0, [r7, #4]
 800235e:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8002360:	bf00      	nop
 8002362:	370c      	adds	r7, #12
 8002364:	46bd      	mov	sp, r7
 8002366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236a:	4770      	bx	lr

0800236c <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 800236c:	b480      	push	{r7}
 800236e:	b083      	sub	sp, #12
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
 8002374:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 8002376:	bf00      	nop
 8002378:	370c      	adds	r7, #12
 800237a:	46bd      	mov	sp, r7
 800237c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002380:	4770      	bx	lr

08002382 <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 8002382:	b480      	push	{r7}
 8002384:	b083      	sub	sp, #12
 8002386:	af00      	add	r7, sp, #0
 8002388:	6078      	str	r0, [r7, #4]
 800238a:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 800238c:	bf00      	nop
 800238e:	370c      	adds	r7, #12
 8002390:	46bd      	mov	sp, r7
 8002392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002396:	4770      	bx	lr

08002398 <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 8002398:	b480      	push	{r7}
 800239a:	b085      	sub	sp, #20
 800239c:	af00      	add	r7, sp, #0
 800239e:	60f8      	str	r0, [r7, #12]
 80023a0:	60b9      	str	r1, [r7, #8]
 80023a2:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 80023a4:	bf00      	nop
 80023a6:	3714      	adds	r7, #20
 80023a8:	46bd      	mov	sp, r7
 80023aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ae:	4770      	bx	lr

080023b0 <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b083      	sub	sp, #12
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
 80023b8:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 80023ba:	bf00      	nop
 80023bc:	370c      	adds	r7, #12
 80023be:	46bd      	mov	sp, r7
 80023c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c4:	4770      	bx	lr
	...

080023c8 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80023c8:	b480      	push	{r7}
 80023ca:	b085      	sub	sp, #20
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80023d4:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 80023de:	4ba7      	ldr	r3, [pc, #668]	@ (800267c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80023e0:	4013      	ands	r3, r2
 80023e2:	68ba      	ldr	r2, [r7, #8]
 80023e4:	0091      	lsls	r1, r2, #2
 80023e6:	687a      	ldr	r2, [r7, #4]
 80023e8:	6812      	ldr	r2, [r2, #0]
 80023ea:	430b      	orrs	r3, r1
 80023ec:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80023f8:	f423 017f 	bic.w	r1, r3, #16711680	@ 0xff0000
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002400:	041a      	lsls	r2, r3, #16
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	430a      	orrs	r2, r1
 8002408:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002410:	68ba      	ldr	r2, [r7, #8]
 8002412:	4413      	add	r3, r2
 8002414:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800241e:	4b97      	ldr	r3, [pc, #604]	@ (800267c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8002420:	4013      	ands	r3, r2
 8002422:	68ba      	ldr	r2, [r7, #8]
 8002424:	0091      	lsls	r1, r2, #2
 8002426:	687a      	ldr	r2, [r7, #4]
 8002428:	6812      	ldr	r2, [r2, #0]
 800242a:	430b      	orrs	r3, r1
 800242c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002438:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002440:	041a      	lsls	r2, r3, #16
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	430a      	orrs	r2, r1
 8002448:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002450:	005b      	lsls	r3, r3, #1
 8002452:	68ba      	ldr	r2, [r7, #8]
 8002454:	4413      	add	r3, r2
 8002456:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8002460:	4b86      	ldr	r3, [pc, #536]	@ (800267c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8002462:	4013      	ands	r3, r2
 8002464:	68ba      	ldr	r2, [r7, #8]
 8002466:	0091      	lsls	r1, r2, #2
 8002468:	687a      	ldr	r2, [r7, #4]
 800246a:	6812      	ldr	r2, [r2, #0]
 800246c:	430b      	orrs	r3, r1
 800246e:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800247a:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002482:	041a      	lsls	r2, r3, #16
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	430a      	orrs	r2, r1
 800248a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002492:	687a      	ldr	r2, [r7, #4]
 8002494:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002496:	fb02 f303 	mul.w	r3, r2, r3
 800249a:	68ba      	ldr	r2, [r7, #8]
 800249c:	4413      	add	r3, r2
 800249e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80024a8:	4b74      	ldr	r3, [pc, #464]	@ (800267c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80024aa:	4013      	ands	r3, r2
 80024ac:	68ba      	ldr	r2, [r7, #8]
 80024ae:	0091      	lsls	r1, r2, #2
 80024b0:	687a      	ldr	r2, [r7, #4]
 80024b2:	6812      	ldr	r2, [r2, #0]
 80024b4:	430b      	orrs	r3, r1
 80024b6:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80024c2:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80024ca:	041a      	lsls	r2, r3, #16
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	430a      	orrs	r2, r1
 80024d2:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80024da:	687a      	ldr	r2, [r7, #4]
 80024dc:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80024de:	fb02 f303 	mul.w	r3, r2, r3
 80024e2:	68ba      	ldr	r2, [r7, #8]
 80024e4:	4413      	add	r3, r2
 80024e6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 80024f0:	4b62      	ldr	r3, [pc, #392]	@ (800267c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80024f2:	4013      	ands	r3, r2
 80024f4:	68ba      	ldr	r2, [r7, #8]
 80024f6:	0091      	lsls	r1, r2, #2
 80024f8:	687a      	ldr	r2, [r7, #4]
 80024fa:	6812      	ldr	r2, [r2, #0]
 80024fc:	430b      	orrs	r3, r1
 80024fe:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002506:	687a      	ldr	r2, [r7, #4]
 8002508:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800250a:	fb02 f303 	mul.w	r3, r2, r3
 800250e:	68ba      	ldr	r2, [r7, #8]
 8002510:	4413      	add	r3, r2
 8002512:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 800251c:	4b57      	ldr	r3, [pc, #348]	@ (800267c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800251e:	4013      	ands	r3, r2
 8002520:	68ba      	ldr	r2, [r7, #8]
 8002522:	0091      	lsls	r1, r2, #2
 8002524:	687a      	ldr	r2, [r7, #4]
 8002526:	6812      	ldr	r2, [r2, #0]
 8002528:	430b      	orrs	r3, r1
 800252a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002536:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800253e:	041a      	lsls	r2, r3, #16
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	430a      	orrs	r2, r1
 8002546:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800254e:	005b      	lsls	r3, r3, #1
 8002550:	68ba      	ldr	r2, [r7, #8]
 8002552:	4413      	add	r3, r2
 8002554:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 800255e:	4b47      	ldr	r3, [pc, #284]	@ (800267c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8002560:	4013      	ands	r3, r2
 8002562:	68ba      	ldr	r2, [r7, #8]
 8002564:	0091      	lsls	r1, r2, #2
 8002566:	687a      	ldr	r2, [r7, #4]
 8002568:	6812      	ldr	r2, [r2, #0]
 800256a:	430b      	orrs	r3, r1
 800256c:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002578:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002580:	041a      	lsls	r2, r3, #16
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	430a      	orrs	r2, r1
 8002588:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002594:	f023 517c 	bic.w	r1, r3, #1056964608	@ 0x3f000000
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800259c:	061a      	lsls	r2, r3, #24
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	430a      	orrs	r2, r1
 80025a4:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80025ac:	4b34      	ldr	r3, [pc, #208]	@ (8002680 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 80025ae:	4413      	add	r3, r2
 80025b0:	009a      	lsls	r2, r3, #2
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	66da      	str	r2, [r3, #108]	@ 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025be:	009b      	lsls	r3, r3, #2
 80025c0:	441a      	add	r2, r3
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	671a      	str	r2, [r3, #112]	@ 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025ce:	00db      	lsls	r3, r3, #3
 80025d0:	441a      	add	r2, r3
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	675a      	str	r2, [r3, #116]	@ 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
                             (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025de:	6879      	ldr	r1, [r7, #4]
 80025e0:	6c49      	ldr	r1, [r1, #68]	@ 0x44
 80025e2:	fb01 f303 	mul.w	r3, r1, r3
 80025e6:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 80025e8:	441a      	add	r2, r3
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	679a      	str	r2, [r3, #120]	@ 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
                              (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80025f6:	6879      	ldr	r1, [r7, #4]
 80025f8:	6cc9      	ldr	r1, [r1, #76]	@ 0x4c
 80025fa:	fb01 f303 	mul.w	r3, r1, r3
 80025fe:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8002600:	441a      	add	r2, r3
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	67da      	str	r2, [r3, #124]	@ 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
                                 (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800260e:	6879      	ldr	r1, [r7, #4]
 8002610:	6d49      	ldr	r1, [r1, #84]	@ 0x54
 8002612:	fb01 f303 	mul.w	r3, r1, r3
 8002616:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8002618:	441a      	add	r2, r3
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800262a:	00db      	lsls	r3, r3, #3
 800262c:	441a      	add	r2, r3
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800263e:	6879      	ldr	r1, [r7, #4]
 8002640:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8002642:	fb01 f303 	mul.w	r3, r1, r3
 8002646:	009b      	lsls	r3, r3, #2
 8002648:	441a      	add	r2, r3
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
                              (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800265a:	6879      	ldr	r1, [r7, #4]
 800265c:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 800265e:	fb01 f303 	mul.w	r3, r1, r3
 8002662:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8002664:	441a      	add	r2, r3
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002672:	4a04      	ldr	r2, [pc, #16]	@ (8002684 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8002674:	4293      	cmp	r3, r2
 8002676:	d915      	bls.n	80026a4 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8002678:	e006      	b.n	8002688 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 800267a:	bf00      	nop
 800267c:	ffff0003 	.word	0xffff0003
 8002680:	10002b00 	.word	0x10002b00
 8002684:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800268e:	f043 0220 	orr.w	r2, r3, #32
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2203      	movs	r2, #3
 800269c:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    return HAL_ERROR;
 80026a0:	2301      	movs	r3, #1
 80026a2:	e010      	b.n	80026c6 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80026a8:	60fb      	str	r3, [r7, #12]
 80026aa:	e005      	b.n	80026b8 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	2200      	movs	r2, #0
 80026b0:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	3304      	adds	r3, #4
 80026b6:	60fb      	str	r3, [r7, #12]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026be:	68fa      	ldr	r2, [r7, #12]
 80026c0:	429a      	cmp	r2, r3
 80026c2:	d3f3      	bcc.n	80026ac <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 80026c4:	2300      	movs	r3, #0
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	3714      	adds	r7, #20
 80026ca:	46bd      	mov	sp, r7
 80026cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d0:	4770      	bx	lr
 80026d2:	bf00      	nop

080026d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 80026d4:	b480      	push	{r7}
 80026d6:	b089      	sub	sp, #36	@ 0x24
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
 80026dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80026de:	2300      	movs	r3, #0
 80026e0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80026e2:	4b89      	ldr	r3, [pc, #548]	@ (8002908 <HAL_GPIO_Init+0x234>)
 80026e4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80026e6:	e194      	b.n	8002a12 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	681a      	ldr	r2, [r3, #0]
 80026ec:	2101      	movs	r1, #1
 80026ee:	69fb      	ldr	r3, [r7, #28]
 80026f0:	fa01 f303 	lsl.w	r3, r1, r3
 80026f4:	4013      	ands	r3, r2
 80026f6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80026f8:	693b      	ldr	r3, [r7, #16]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	f000 8186 	beq.w	8002a0c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	f003 0303 	and.w	r3, r3, #3
 8002708:	2b01      	cmp	r3, #1
 800270a:	d005      	beq.n	8002718 <HAL_GPIO_Init+0x44>
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	f003 0303 	and.w	r3, r3, #3
 8002714:	2b02      	cmp	r3, #2
 8002716:	d130      	bne.n	800277a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	689b      	ldr	r3, [r3, #8]
 800271c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800271e:	69fb      	ldr	r3, [r7, #28]
 8002720:	005b      	lsls	r3, r3, #1
 8002722:	2203      	movs	r2, #3
 8002724:	fa02 f303 	lsl.w	r3, r2, r3
 8002728:	43db      	mvns	r3, r3
 800272a:	69ba      	ldr	r2, [r7, #24]
 800272c:	4013      	ands	r3, r2
 800272e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	68da      	ldr	r2, [r3, #12]
 8002734:	69fb      	ldr	r3, [r7, #28]
 8002736:	005b      	lsls	r3, r3, #1
 8002738:	fa02 f303 	lsl.w	r3, r2, r3
 800273c:	69ba      	ldr	r2, [r7, #24]
 800273e:	4313      	orrs	r3, r2
 8002740:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	69ba      	ldr	r2, [r7, #24]
 8002746:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800274e:	2201      	movs	r2, #1
 8002750:	69fb      	ldr	r3, [r7, #28]
 8002752:	fa02 f303 	lsl.w	r3, r2, r3
 8002756:	43db      	mvns	r3, r3
 8002758:	69ba      	ldr	r2, [r7, #24]
 800275a:	4013      	ands	r3, r2
 800275c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	091b      	lsrs	r3, r3, #4
 8002764:	f003 0201 	and.w	r2, r3, #1
 8002768:	69fb      	ldr	r3, [r7, #28]
 800276a:	fa02 f303 	lsl.w	r3, r2, r3
 800276e:	69ba      	ldr	r2, [r7, #24]
 8002770:	4313      	orrs	r3, r2
 8002772:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	69ba      	ldr	r2, [r7, #24]
 8002778:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	f003 0303 	and.w	r3, r3, #3
 8002782:	2b03      	cmp	r3, #3
 8002784:	d017      	beq.n	80027b6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	68db      	ldr	r3, [r3, #12]
 800278a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800278c:	69fb      	ldr	r3, [r7, #28]
 800278e:	005b      	lsls	r3, r3, #1
 8002790:	2203      	movs	r2, #3
 8002792:	fa02 f303 	lsl.w	r3, r2, r3
 8002796:	43db      	mvns	r3, r3
 8002798:	69ba      	ldr	r2, [r7, #24]
 800279a:	4013      	ands	r3, r2
 800279c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	689a      	ldr	r2, [r3, #8]
 80027a2:	69fb      	ldr	r3, [r7, #28]
 80027a4:	005b      	lsls	r3, r3, #1
 80027a6:	fa02 f303 	lsl.w	r3, r2, r3
 80027aa:	69ba      	ldr	r2, [r7, #24]
 80027ac:	4313      	orrs	r3, r2
 80027ae:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	69ba      	ldr	r2, [r7, #24]
 80027b4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	f003 0303 	and.w	r3, r3, #3
 80027be:	2b02      	cmp	r3, #2
 80027c0:	d123      	bne.n	800280a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80027c2:	69fb      	ldr	r3, [r7, #28]
 80027c4:	08da      	lsrs	r2, r3, #3
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	3208      	adds	r2, #8
 80027ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80027d0:	69fb      	ldr	r3, [r7, #28]
 80027d2:	f003 0307 	and.w	r3, r3, #7
 80027d6:	009b      	lsls	r3, r3, #2
 80027d8:	220f      	movs	r2, #15
 80027da:	fa02 f303 	lsl.w	r3, r2, r3
 80027de:	43db      	mvns	r3, r3
 80027e0:	69ba      	ldr	r2, [r7, #24]
 80027e2:	4013      	ands	r3, r2
 80027e4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	691a      	ldr	r2, [r3, #16]
 80027ea:	69fb      	ldr	r3, [r7, #28]
 80027ec:	f003 0307 	and.w	r3, r3, #7
 80027f0:	009b      	lsls	r3, r3, #2
 80027f2:	fa02 f303 	lsl.w	r3, r2, r3
 80027f6:	69ba      	ldr	r2, [r7, #24]
 80027f8:	4313      	orrs	r3, r2
 80027fa:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80027fc:	69fb      	ldr	r3, [r7, #28]
 80027fe:	08da      	lsrs	r2, r3, #3
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	3208      	adds	r2, #8
 8002804:	69b9      	ldr	r1, [r7, #24]
 8002806:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002810:	69fb      	ldr	r3, [r7, #28]
 8002812:	005b      	lsls	r3, r3, #1
 8002814:	2203      	movs	r2, #3
 8002816:	fa02 f303 	lsl.w	r3, r2, r3
 800281a:	43db      	mvns	r3, r3
 800281c:	69ba      	ldr	r2, [r7, #24]
 800281e:	4013      	ands	r3, r2
 8002820:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	f003 0203 	and.w	r2, r3, #3
 800282a:	69fb      	ldr	r3, [r7, #28]
 800282c:	005b      	lsls	r3, r3, #1
 800282e:	fa02 f303 	lsl.w	r3, r2, r3
 8002832:	69ba      	ldr	r2, [r7, #24]
 8002834:	4313      	orrs	r3, r2
 8002836:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	69ba      	ldr	r2, [r7, #24]
 800283c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002846:	2b00      	cmp	r3, #0
 8002848:	f000 80e0 	beq.w	8002a0c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800284c:	4b2f      	ldr	r3, [pc, #188]	@ (800290c <HAL_GPIO_Init+0x238>)
 800284e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002852:	4a2e      	ldr	r2, [pc, #184]	@ (800290c <HAL_GPIO_Init+0x238>)
 8002854:	f043 0302 	orr.w	r3, r3, #2
 8002858:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800285c:	4b2b      	ldr	r3, [pc, #172]	@ (800290c <HAL_GPIO_Init+0x238>)
 800285e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002862:	f003 0302 	and.w	r3, r3, #2
 8002866:	60fb      	str	r3, [r7, #12]
 8002868:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800286a:	4a29      	ldr	r2, [pc, #164]	@ (8002910 <HAL_GPIO_Init+0x23c>)
 800286c:	69fb      	ldr	r3, [r7, #28]
 800286e:	089b      	lsrs	r3, r3, #2
 8002870:	3302      	adds	r3, #2
 8002872:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002876:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002878:	69fb      	ldr	r3, [r7, #28]
 800287a:	f003 0303 	and.w	r3, r3, #3
 800287e:	009b      	lsls	r3, r3, #2
 8002880:	220f      	movs	r2, #15
 8002882:	fa02 f303 	lsl.w	r3, r2, r3
 8002886:	43db      	mvns	r3, r3
 8002888:	69ba      	ldr	r2, [r7, #24]
 800288a:	4013      	ands	r3, r2
 800288c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	4a20      	ldr	r2, [pc, #128]	@ (8002914 <HAL_GPIO_Init+0x240>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d052      	beq.n	800293c <HAL_GPIO_Init+0x268>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	4a1f      	ldr	r2, [pc, #124]	@ (8002918 <HAL_GPIO_Init+0x244>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d031      	beq.n	8002902 <HAL_GPIO_Init+0x22e>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	4a1e      	ldr	r2, [pc, #120]	@ (800291c <HAL_GPIO_Init+0x248>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d02b      	beq.n	80028fe <HAL_GPIO_Init+0x22a>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	4a1d      	ldr	r2, [pc, #116]	@ (8002920 <HAL_GPIO_Init+0x24c>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d025      	beq.n	80028fa <HAL_GPIO_Init+0x226>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	4a1c      	ldr	r2, [pc, #112]	@ (8002924 <HAL_GPIO_Init+0x250>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d01f      	beq.n	80028f6 <HAL_GPIO_Init+0x222>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	4a1b      	ldr	r2, [pc, #108]	@ (8002928 <HAL_GPIO_Init+0x254>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d019      	beq.n	80028f2 <HAL_GPIO_Init+0x21e>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	4a1a      	ldr	r2, [pc, #104]	@ (800292c <HAL_GPIO_Init+0x258>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d013      	beq.n	80028ee <HAL_GPIO_Init+0x21a>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	4a19      	ldr	r2, [pc, #100]	@ (8002930 <HAL_GPIO_Init+0x25c>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d00d      	beq.n	80028ea <HAL_GPIO_Init+0x216>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	4a18      	ldr	r2, [pc, #96]	@ (8002934 <HAL_GPIO_Init+0x260>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d007      	beq.n	80028e6 <HAL_GPIO_Init+0x212>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	4a17      	ldr	r2, [pc, #92]	@ (8002938 <HAL_GPIO_Init+0x264>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d101      	bne.n	80028e2 <HAL_GPIO_Init+0x20e>
 80028de:	2309      	movs	r3, #9
 80028e0:	e02d      	b.n	800293e <HAL_GPIO_Init+0x26a>
 80028e2:	230a      	movs	r3, #10
 80028e4:	e02b      	b.n	800293e <HAL_GPIO_Init+0x26a>
 80028e6:	2308      	movs	r3, #8
 80028e8:	e029      	b.n	800293e <HAL_GPIO_Init+0x26a>
 80028ea:	2307      	movs	r3, #7
 80028ec:	e027      	b.n	800293e <HAL_GPIO_Init+0x26a>
 80028ee:	2306      	movs	r3, #6
 80028f0:	e025      	b.n	800293e <HAL_GPIO_Init+0x26a>
 80028f2:	2305      	movs	r3, #5
 80028f4:	e023      	b.n	800293e <HAL_GPIO_Init+0x26a>
 80028f6:	2304      	movs	r3, #4
 80028f8:	e021      	b.n	800293e <HAL_GPIO_Init+0x26a>
 80028fa:	2303      	movs	r3, #3
 80028fc:	e01f      	b.n	800293e <HAL_GPIO_Init+0x26a>
 80028fe:	2302      	movs	r3, #2
 8002900:	e01d      	b.n	800293e <HAL_GPIO_Init+0x26a>
 8002902:	2301      	movs	r3, #1
 8002904:	e01b      	b.n	800293e <HAL_GPIO_Init+0x26a>
 8002906:	bf00      	nop
 8002908:	58000080 	.word	0x58000080
 800290c:	58024400 	.word	0x58024400
 8002910:	58000400 	.word	0x58000400
 8002914:	58020000 	.word	0x58020000
 8002918:	58020400 	.word	0x58020400
 800291c:	58020800 	.word	0x58020800
 8002920:	58020c00 	.word	0x58020c00
 8002924:	58021000 	.word	0x58021000
 8002928:	58021400 	.word	0x58021400
 800292c:	58021800 	.word	0x58021800
 8002930:	58021c00 	.word	0x58021c00
 8002934:	58022000 	.word	0x58022000
 8002938:	58022400 	.word	0x58022400
 800293c:	2300      	movs	r3, #0
 800293e:	69fa      	ldr	r2, [r7, #28]
 8002940:	f002 0203 	and.w	r2, r2, #3
 8002944:	0092      	lsls	r2, r2, #2
 8002946:	4093      	lsls	r3, r2
 8002948:	69ba      	ldr	r2, [r7, #24]
 800294a:	4313      	orrs	r3, r2
 800294c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800294e:	4938      	ldr	r1, [pc, #224]	@ (8002a30 <HAL_GPIO_Init+0x35c>)
 8002950:	69fb      	ldr	r3, [r7, #28]
 8002952:	089b      	lsrs	r3, r3, #2
 8002954:	3302      	adds	r3, #2
 8002956:	69ba      	ldr	r2, [r7, #24]
 8002958:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800295c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002964:	693b      	ldr	r3, [r7, #16]
 8002966:	43db      	mvns	r3, r3
 8002968:	69ba      	ldr	r2, [r7, #24]
 800296a:	4013      	ands	r3, r2
 800296c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002976:	2b00      	cmp	r3, #0
 8002978:	d003      	beq.n	8002982 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800297a:	69ba      	ldr	r2, [r7, #24]
 800297c:	693b      	ldr	r3, [r7, #16]
 800297e:	4313      	orrs	r3, r2
 8002980:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002982:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002986:	69bb      	ldr	r3, [r7, #24]
 8002988:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800298a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002992:	693b      	ldr	r3, [r7, #16]
 8002994:	43db      	mvns	r3, r3
 8002996:	69ba      	ldr	r2, [r7, #24]
 8002998:	4013      	ands	r3, r2
 800299a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d003      	beq.n	80029b0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80029a8:	69ba      	ldr	r2, [r7, #24]
 80029aa:	693b      	ldr	r3, [r7, #16]
 80029ac:	4313      	orrs	r3, r2
 80029ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80029b0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80029b4:	69bb      	ldr	r3, [r7, #24]
 80029b6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80029be:	693b      	ldr	r3, [r7, #16]
 80029c0:	43db      	mvns	r3, r3
 80029c2:	69ba      	ldr	r2, [r7, #24]
 80029c4:	4013      	ands	r3, r2
 80029c6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d003      	beq.n	80029dc <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80029d4:	69ba      	ldr	r2, [r7, #24]
 80029d6:	693b      	ldr	r3, [r7, #16]
 80029d8:	4313      	orrs	r3, r2
 80029da:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80029dc:	697b      	ldr	r3, [r7, #20]
 80029de:	69ba      	ldr	r2, [r7, #24]
 80029e0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80029e8:	693b      	ldr	r3, [r7, #16]
 80029ea:	43db      	mvns	r3, r3
 80029ec:	69ba      	ldr	r2, [r7, #24]
 80029ee:	4013      	ands	r3, r2
 80029f0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d003      	beq.n	8002a06 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80029fe:	69ba      	ldr	r2, [r7, #24]
 8002a00:	693b      	ldr	r3, [r7, #16]
 8002a02:	4313      	orrs	r3, r2
 8002a04:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002a06:	697b      	ldr	r3, [r7, #20]
 8002a08:	69ba      	ldr	r2, [r7, #24]
 8002a0a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002a0c:	69fb      	ldr	r3, [r7, #28]
 8002a0e:	3301      	adds	r3, #1
 8002a10:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	681a      	ldr	r2, [r3, #0]
 8002a16:	69fb      	ldr	r3, [r7, #28]
 8002a18:	fa22 f303 	lsr.w	r3, r2, r3
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	f47f ae63 	bne.w	80026e8 <HAL_GPIO_Init+0x14>
  }
}
 8002a22:	bf00      	nop
 8002a24:	bf00      	nop
 8002a26:	3724      	adds	r7, #36	@ 0x24
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2e:	4770      	bx	lr
 8002a30:	58000400 	.word	0x58000400

08002a34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a34:	b480      	push	{r7}
 8002a36:	b083      	sub	sp, #12
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
 8002a3c:	460b      	mov	r3, r1
 8002a3e:	807b      	strh	r3, [r7, #2]
 8002a40:	4613      	mov	r3, r2
 8002a42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002a44:	787b      	ldrb	r3, [r7, #1]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d003      	beq.n	8002a52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a4a:	887a      	ldrh	r2, [r7, #2]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002a50:	e003      	b.n	8002a5a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002a52:	887b      	ldrh	r3, [r7, #2]
 8002a54:	041a      	lsls	r2, r3, #16
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	619a      	str	r2, [r3, #24]
}
 8002a5a:	bf00      	nop
 8002a5c:	370c      	adds	r7, #12
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a64:	4770      	bx	lr
	...

08002a68 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b084      	sub	sp, #16
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002a70:	4b19      	ldr	r3, [pc, #100]	@ (8002ad8 <HAL_PWREx_ConfigSupply+0x70>)
 8002a72:	68db      	ldr	r3, [r3, #12]
 8002a74:	f003 0304 	and.w	r3, r3, #4
 8002a78:	2b04      	cmp	r3, #4
 8002a7a:	d00a      	beq.n	8002a92 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002a7c:	4b16      	ldr	r3, [pc, #88]	@ (8002ad8 <HAL_PWREx_ConfigSupply+0x70>)
 8002a7e:	68db      	ldr	r3, [r3, #12]
 8002a80:	f003 0307 	and.w	r3, r3, #7
 8002a84:	687a      	ldr	r2, [r7, #4]
 8002a86:	429a      	cmp	r2, r3
 8002a88:	d001      	beq.n	8002a8e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	e01f      	b.n	8002ace <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	e01d      	b.n	8002ace <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002a92:	4b11      	ldr	r3, [pc, #68]	@ (8002ad8 <HAL_PWREx_ConfigSupply+0x70>)
 8002a94:	68db      	ldr	r3, [r3, #12]
 8002a96:	f023 0207 	bic.w	r2, r3, #7
 8002a9a:	490f      	ldr	r1, [pc, #60]	@ (8002ad8 <HAL_PWREx_ConfigSupply+0x70>)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002aa2:	f7fe fbf9 	bl	8001298 <HAL_GetTick>
 8002aa6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002aa8:	e009      	b.n	8002abe <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002aaa:	f7fe fbf5 	bl	8001298 <HAL_GetTick>
 8002aae:	4602      	mov	r2, r0
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	1ad3      	subs	r3, r2, r3
 8002ab4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002ab8:	d901      	bls.n	8002abe <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002aba:	2301      	movs	r3, #1
 8002abc:	e007      	b.n	8002ace <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002abe:	4b06      	ldr	r3, [pc, #24]	@ (8002ad8 <HAL_PWREx_ConfigSupply+0x70>)
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002ac6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002aca:	d1ee      	bne.n	8002aaa <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002acc:	2300      	movs	r3, #0
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	3710      	adds	r7, #16
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}
 8002ad6:	bf00      	nop
 8002ad8:	58024800 	.word	0x58024800

08002adc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b08c      	sub	sp, #48	@ 0x30
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d102      	bne.n	8002af0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002aea:	2301      	movs	r3, #1
 8002aec:	f000 bc48 	b.w	8003380 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f003 0301 	and.w	r3, r3, #1
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	f000 8088 	beq.w	8002c0e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002afe:	4b99      	ldr	r3, [pc, #612]	@ (8002d64 <HAL_RCC_OscConfig+0x288>)
 8002b00:	691b      	ldr	r3, [r3, #16]
 8002b02:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002b06:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002b08:	4b96      	ldr	r3, [pc, #600]	@ (8002d64 <HAL_RCC_OscConfig+0x288>)
 8002b0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b0c:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002b0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b10:	2b10      	cmp	r3, #16
 8002b12:	d007      	beq.n	8002b24 <HAL_RCC_OscConfig+0x48>
 8002b14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b16:	2b18      	cmp	r3, #24
 8002b18:	d111      	bne.n	8002b3e <HAL_RCC_OscConfig+0x62>
 8002b1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b1c:	f003 0303 	and.w	r3, r3, #3
 8002b20:	2b02      	cmp	r3, #2
 8002b22:	d10c      	bne.n	8002b3e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b24:	4b8f      	ldr	r3, [pc, #572]	@ (8002d64 <HAL_RCC_OscConfig+0x288>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d06d      	beq.n	8002c0c <HAL_RCC_OscConfig+0x130>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d169      	bne.n	8002c0c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	f000 bc21 	b.w	8003380 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b46:	d106      	bne.n	8002b56 <HAL_RCC_OscConfig+0x7a>
 8002b48:	4b86      	ldr	r3, [pc, #536]	@ (8002d64 <HAL_RCC_OscConfig+0x288>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a85      	ldr	r2, [pc, #532]	@ (8002d64 <HAL_RCC_OscConfig+0x288>)
 8002b4e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b52:	6013      	str	r3, [r2, #0]
 8002b54:	e02e      	b.n	8002bb4 <HAL_RCC_OscConfig+0xd8>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d10c      	bne.n	8002b78 <HAL_RCC_OscConfig+0x9c>
 8002b5e:	4b81      	ldr	r3, [pc, #516]	@ (8002d64 <HAL_RCC_OscConfig+0x288>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4a80      	ldr	r2, [pc, #512]	@ (8002d64 <HAL_RCC_OscConfig+0x288>)
 8002b64:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b68:	6013      	str	r3, [r2, #0]
 8002b6a:	4b7e      	ldr	r3, [pc, #504]	@ (8002d64 <HAL_RCC_OscConfig+0x288>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a7d      	ldr	r2, [pc, #500]	@ (8002d64 <HAL_RCC_OscConfig+0x288>)
 8002b70:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002b74:	6013      	str	r3, [r2, #0]
 8002b76:	e01d      	b.n	8002bb4 <HAL_RCC_OscConfig+0xd8>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002b80:	d10c      	bne.n	8002b9c <HAL_RCC_OscConfig+0xc0>
 8002b82:	4b78      	ldr	r3, [pc, #480]	@ (8002d64 <HAL_RCC_OscConfig+0x288>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a77      	ldr	r2, [pc, #476]	@ (8002d64 <HAL_RCC_OscConfig+0x288>)
 8002b88:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002b8c:	6013      	str	r3, [r2, #0]
 8002b8e:	4b75      	ldr	r3, [pc, #468]	@ (8002d64 <HAL_RCC_OscConfig+0x288>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4a74      	ldr	r2, [pc, #464]	@ (8002d64 <HAL_RCC_OscConfig+0x288>)
 8002b94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b98:	6013      	str	r3, [r2, #0]
 8002b9a:	e00b      	b.n	8002bb4 <HAL_RCC_OscConfig+0xd8>
 8002b9c:	4b71      	ldr	r3, [pc, #452]	@ (8002d64 <HAL_RCC_OscConfig+0x288>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a70      	ldr	r2, [pc, #448]	@ (8002d64 <HAL_RCC_OscConfig+0x288>)
 8002ba2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ba6:	6013      	str	r3, [r2, #0]
 8002ba8:	4b6e      	ldr	r3, [pc, #440]	@ (8002d64 <HAL_RCC_OscConfig+0x288>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a6d      	ldr	r2, [pc, #436]	@ (8002d64 <HAL_RCC_OscConfig+0x288>)
 8002bae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002bb2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d013      	beq.n	8002be4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bbc:	f7fe fb6c 	bl	8001298 <HAL_GetTick>
 8002bc0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002bc2:	e008      	b.n	8002bd6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002bc4:	f7fe fb68 	bl	8001298 <HAL_GetTick>
 8002bc8:	4602      	mov	r2, r0
 8002bca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bcc:	1ad3      	subs	r3, r2, r3
 8002bce:	2b64      	cmp	r3, #100	@ 0x64
 8002bd0:	d901      	bls.n	8002bd6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002bd2:	2303      	movs	r3, #3
 8002bd4:	e3d4      	b.n	8003380 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002bd6:	4b63      	ldr	r3, [pc, #396]	@ (8002d64 <HAL_RCC_OscConfig+0x288>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d0f0      	beq.n	8002bc4 <HAL_RCC_OscConfig+0xe8>
 8002be2:	e014      	b.n	8002c0e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002be4:	f7fe fb58 	bl	8001298 <HAL_GetTick>
 8002be8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002bea:	e008      	b.n	8002bfe <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002bec:	f7fe fb54 	bl	8001298 <HAL_GetTick>
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bf4:	1ad3      	subs	r3, r2, r3
 8002bf6:	2b64      	cmp	r3, #100	@ 0x64
 8002bf8:	d901      	bls.n	8002bfe <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002bfa:	2303      	movs	r3, #3
 8002bfc:	e3c0      	b.n	8003380 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002bfe:	4b59      	ldr	r3, [pc, #356]	@ (8002d64 <HAL_RCC_OscConfig+0x288>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d1f0      	bne.n	8002bec <HAL_RCC_OscConfig+0x110>
 8002c0a:	e000      	b.n	8002c0e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f003 0302 	and.w	r3, r3, #2
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	f000 80ca 	beq.w	8002db0 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c1c:	4b51      	ldr	r3, [pc, #324]	@ (8002d64 <HAL_RCC_OscConfig+0x288>)
 8002c1e:	691b      	ldr	r3, [r3, #16]
 8002c20:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002c24:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002c26:	4b4f      	ldr	r3, [pc, #316]	@ (8002d64 <HAL_RCC_OscConfig+0x288>)
 8002c28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c2a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002c2c:	6a3b      	ldr	r3, [r7, #32]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d007      	beq.n	8002c42 <HAL_RCC_OscConfig+0x166>
 8002c32:	6a3b      	ldr	r3, [r7, #32]
 8002c34:	2b18      	cmp	r3, #24
 8002c36:	d156      	bne.n	8002ce6 <HAL_RCC_OscConfig+0x20a>
 8002c38:	69fb      	ldr	r3, [r7, #28]
 8002c3a:	f003 0303 	and.w	r3, r3, #3
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d151      	bne.n	8002ce6 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c42:	4b48      	ldr	r3, [pc, #288]	@ (8002d64 <HAL_RCC_OscConfig+0x288>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f003 0304 	and.w	r3, r3, #4
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d005      	beq.n	8002c5a <HAL_RCC_OscConfig+0x17e>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	68db      	ldr	r3, [r3, #12]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d101      	bne.n	8002c5a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	e392      	b.n	8003380 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002c5a:	4b42      	ldr	r3, [pc, #264]	@ (8002d64 <HAL_RCC_OscConfig+0x288>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f023 0219 	bic.w	r2, r3, #25
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	68db      	ldr	r3, [r3, #12]
 8002c66:	493f      	ldr	r1, [pc, #252]	@ (8002d64 <HAL_RCC_OscConfig+0x288>)
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c6c:	f7fe fb14 	bl	8001298 <HAL_GetTick>
 8002c70:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002c72:	e008      	b.n	8002c86 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c74:	f7fe fb10 	bl	8001298 <HAL_GetTick>
 8002c78:	4602      	mov	r2, r0
 8002c7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c7c:	1ad3      	subs	r3, r2, r3
 8002c7e:	2b02      	cmp	r3, #2
 8002c80:	d901      	bls.n	8002c86 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002c82:	2303      	movs	r3, #3
 8002c84:	e37c      	b.n	8003380 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002c86:	4b37      	ldr	r3, [pc, #220]	@ (8002d64 <HAL_RCC_OscConfig+0x288>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f003 0304 	and.w	r3, r3, #4
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d0f0      	beq.n	8002c74 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c92:	f7fe fb0d 	bl	80012b0 <HAL_GetREVID>
 8002c96:	4603      	mov	r3, r0
 8002c98:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d817      	bhi.n	8002cd0 <HAL_RCC_OscConfig+0x1f4>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	691b      	ldr	r3, [r3, #16]
 8002ca4:	2b40      	cmp	r3, #64	@ 0x40
 8002ca6:	d108      	bne.n	8002cba <HAL_RCC_OscConfig+0x1de>
 8002ca8:	4b2e      	ldr	r3, [pc, #184]	@ (8002d64 <HAL_RCC_OscConfig+0x288>)
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002cb0:	4a2c      	ldr	r2, [pc, #176]	@ (8002d64 <HAL_RCC_OscConfig+0x288>)
 8002cb2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002cb6:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002cb8:	e07a      	b.n	8002db0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cba:	4b2a      	ldr	r3, [pc, #168]	@ (8002d64 <HAL_RCC_OscConfig+0x288>)
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	691b      	ldr	r3, [r3, #16]
 8002cc6:	031b      	lsls	r3, r3, #12
 8002cc8:	4926      	ldr	r1, [pc, #152]	@ (8002d64 <HAL_RCC_OscConfig+0x288>)
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002cce:	e06f      	b.n	8002db0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cd0:	4b24      	ldr	r3, [pc, #144]	@ (8002d64 <HAL_RCC_OscConfig+0x288>)
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	691b      	ldr	r3, [r3, #16]
 8002cdc:	061b      	lsls	r3, r3, #24
 8002cde:	4921      	ldr	r1, [pc, #132]	@ (8002d64 <HAL_RCC_OscConfig+0x288>)
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ce4:	e064      	b.n	8002db0 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	68db      	ldr	r3, [r3, #12]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d047      	beq.n	8002d7e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002cee:	4b1d      	ldr	r3, [pc, #116]	@ (8002d64 <HAL_RCC_OscConfig+0x288>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f023 0219 	bic.w	r2, r3, #25
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	68db      	ldr	r3, [r3, #12]
 8002cfa:	491a      	ldr	r1, [pc, #104]	@ (8002d64 <HAL_RCC_OscConfig+0x288>)
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d00:	f7fe faca 	bl	8001298 <HAL_GetTick>
 8002d04:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002d06:	e008      	b.n	8002d1a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d08:	f7fe fac6 	bl	8001298 <HAL_GetTick>
 8002d0c:	4602      	mov	r2, r0
 8002d0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d10:	1ad3      	subs	r3, r2, r3
 8002d12:	2b02      	cmp	r3, #2
 8002d14:	d901      	bls.n	8002d1a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8002d16:	2303      	movs	r3, #3
 8002d18:	e332      	b.n	8003380 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002d1a:	4b12      	ldr	r3, [pc, #72]	@ (8002d64 <HAL_RCC_OscConfig+0x288>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f003 0304 	and.w	r3, r3, #4
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d0f0      	beq.n	8002d08 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d26:	f7fe fac3 	bl	80012b0 <HAL_GetREVID>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d819      	bhi.n	8002d68 <HAL_RCC_OscConfig+0x28c>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	691b      	ldr	r3, [r3, #16]
 8002d38:	2b40      	cmp	r3, #64	@ 0x40
 8002d3a:	d108      	bne.n	8002d4e <HAL_RCC_OscConfig+0x272>
 8002d3c:	4b09      	ldr	r3, [pc, #36]	@ (8002d64 <HAL_RCC_OscConfig+0x288>)
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002d44:	4a07      	ldr	r2, [pc, #28]	@ (8002d64 <HAL_RCC_OscConfig+0x288>)
 8002d46:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d4a:	6053      	str	r3, [r2, #4]
 8002d4c:	e030      	b.n	8002db0 <HAL_RCC_OscConfig+0x2d4>
 8002d4e:	4b05      	ldr	r3, [pc, #20]	@ (8002d64 <HAL_RCC_OscConfig+0x288>)
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	691b      	ldr	r3, [r3, #16]
 8002d5a:	031b      	lsls	r3, r3, #12
 8002d5c:	4901      	ldr	r1, [pc, #4]	@ (8002d64 <HAL_RCC_OscConfig+0x288>)
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	604b      	str	r3, [r1, #4]
 8002d62:	e025      	b.n	8002db0 <HAL_RCC_OscConfig+0x2d4>
 8002d64:	58024400 	.word	0x58024400
 8002d68:	4b9a      	ldr	r3, [pc, #616]	@ (8002fd4 <HAL_RCC_OscConfig+0x4f8>)
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	691b      	ldr	r3, [r3, #16]
 8002d74:	061b      	lsls	r3, r3, #24
 8002d76:	4997      	ldr	r1, [pc, #604]	@ (8002fd4 <HAL_RCC_OscConfig+0x4f8>)
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	604b      	str	r3, [r1, #4]
 8002d7c:	e018      	b.n	8002db0 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d7e:	4b95      	ldr	r3, [pc, #596]	@ (8002fd4 <HAL_RCC_OscConfig+0x4f8>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4a94      	ldr	r2, [pc, #592]	@ (8002fd4 <HAL_RCC_OscConfig+0x4f8>)
 8002d84:	f023 0301 	bic.w	r3, r3, #1
 8002d88:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d8a:	f7fe fa85 	bl	8001298 <HAL_GetTick>
 8002d8e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002d90:	e008      	b.n	8002da4 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d92:	f7fe fa81 	bl	8001298 <HAL_GetTick>
 8002d96:	4602      	mov	r2, r0
 8002d98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d9a:	1ad3      	subs	r3, r2, r3
 8002d9c:	2b02      	cmp	r3, #2
 8002d9e:	d901      	bls.n	8002da4 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8002da0:	2303      	movs	r3, #3
 8002da2:	e2ed      	b.n	8003380 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002da4:	4b8b      	ldr	r3, [pc, #556]	@ (8002fd4 <HAL_RCC_OscConfig+0x4f8>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f003 0304 	and.w	r3, r3, #4
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d1f0      	bne.n	8002d92 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f003 0310 	and.w	r3, r3, #16
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	f000 80a9 	beq.w	8002f10 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002dbe:	4b85      	ldr	r3, [pc, #532]	@ (8002fd4 <HAL_RCC_OscConfig+0x4f8>)
 8002dc0:	691b      	ldr	r3, [r3, #16]
 8002dc2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002dc6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002dc8:	4b82      	ldr	r3, [pc, #520]	@ (8002fd4 <HAL_RCC_OscConfig+0x4f8>)
 8002dca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dcc:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002dce:	69bb      	ldr	r3, [r7, #24]
 8002dd0:	2b08      	cmp	r3, #8
 8002dd2:	d007      	beq.n	8002de4 <HAL_RCC_OscConfig+0x308>
 8002dd4:	69bb      	ldr	r3, [r7, #24]
 8002dd6:	2b18      	cmp	r3, #24
 8002dd8:	d13a      	bne.n	8002e50 <HAL_RCC_OscConfig+0x374>
 8002dda:	697b      	ldr	r3, [r7, #20]
 8002ddc:	f003 0303 	and.w	r3, r3, #3
 8002de0:	2b01      	cmp	r3, #1
 8002de2:	d135      	bne.n	8002e50 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002de4:	4b7b      	ldr	r3, [pc, #492]	@ (8002fd4 <HAL_RCC_OscConfig+0x4f8>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d005      	beq.n	8002dfc <HAL_RCC_OscConfig+0x320>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	69db      	ldr	r3, [r3, #28]
 8002df4:	2b80      	cmp	r3, #128	@ 0x80
 8002df6:	d001      	beq.n	8002dfc <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	e2c1      	b.n	8003380 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002dfc:	f7fe fa58 	bl	80012b0 <HAL_GetREVID>
 8002e00:	4603      	mov	r3, r0
 8002e02:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d817      	bhi.n	8002e3a <HAL_RCC_OscConfig+0x35e>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6a1b      	ldr	r3, [r3, #32]
 8002e0e:	2b20      	cmp	r3, #32
 8002e10:	d108      	bne.n	8002e24 <HAL_RCC_OscConfig+0x348>
 8002e12:	4b70      	ldr	r3, [pc, #448]	@ (8002fd4 <HAL_RCC_OscConfig+0x4f8>)
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002e1a:	4a6e      	ldr	r2, [pc, #440]	@ (8002fd4 <HAL_RCC_OscConfig+0x4f8>)
 8002e1c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002e20:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002e22:	e075      	b.n	8002f10 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002e24:	4b6b      	ldr	r3, [pc, #428]	@ (8002fd4 <HAL_RCC_OscConfig+0x4f8>)
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6a1b      	ldr	r3, [r3, #32]
 8002e30:	069b      	lsls	r3, r3, #26
 8002e32:	4968      	ldr	r1, [pc, #416]	@ (8002fd4 <HAL_RCC_OscConfig+0x4f8>)
 8002e34:	4313      	orrs	r3, r2
 8002e36:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002e38:	e06a      	b.n	8002f10 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002e3a:	4b66      	ldr	r3, [pc, #408]	@ (8002fd4 <HAL_RCC_OscConfig+0x4f8>)
 8002e3c:	68db      	ldr	r3, [r3, #12]
 8002e3e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6a1b      	ldr	r3, [r3, #32]
 8002e46:	061b      	lsls	r3, r3, #24
 8002e48:	4962      	ldr	r1, [pc, #392]	@ (8002fd4 <HAL_RCC_OscConfig+0x4f8>)
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002e4e:	e05f      	b.n	8002f10 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	69db      	ldr	r3, [r3, #28]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d042      	beq.n	8002ede <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002e58:	4b5e      	ldr	r3, [pc, #376]	@ (8002fd4 <HAL_RCC_OscConfig+0x4f8>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a5d      	ldr	r2, [pc, #372]	@ (8002fd4 <HAL_RCC_OscConfig+0x4f8>)
 8002e5e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002e62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e64:	f7fe fa18 	bl	8001298 <HAL_GetTick>
 8002e68:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002e6a:	e008      	b.n	8002e7e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002e6c:	f7fe fa14 	bl	8001298 <HAL_GetTick>
 8002e70:	4602      	mov	r2, r0
 8002e72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e74:	1ad3      	subs	r3, r2, r3
 8002e76:	2b02      	cmp	r3, #2
 8002e78:	d901      	bls.n	8002e7e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8002e7a:	2303      	movs	r3, #3
 8002e7c:	e280      	b.n	8003380 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002e7e:	4b55      	ldr	r3, [pc, #340]	@ (8002fd4 <HAL_RCC_OscConfig+0x4f8>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d0f0      	beq.n	8002e6c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002e8a:	f7fe fa11 	bl	80012b0 <HAL_GetREVID>
 8002e8e:	4603      	mov	r3, r0
 8002e90:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d817      	bhi.n	8002ec8 <HAL_RCC_OscConfig+0x3ec>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6a1b      	ldr	r3, [r3, #32]
 8002e9c:	2b20      	cmp	r3, #32
 8002e9e:	d108      	bne.n	8002eb2 <HAL_RCC_OscConfig+0x3d6>
 8002ea0:	4b4c      	ldr	r3, [pc, #304]	@ (8002fd4 <HAL_RCC_OscConfig+0x4f8>)
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002ea8:	4a4a      	ldr	r2, [pc, #296]	@ (8002fd4 <HAL_RCC_OscConfig+0x4f8>)
 8002eaa:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002eae:	6053      	str	r3, [r2, #4]
 8002eb0:	e02e      	b.n	8002f10 <HAL_RCC_OscConfig+0x434>
 8002eb2:	4b48      	ldr	r3, [pc, #288]	@ (8002fd4 <HAL_RCC_OscConfig+0x4f8>)
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6a1b      	ldr	r3, [r3, #32]
 8002ebe:	069b      	lsls	r3, r3, #26
 8002ec0:	4944      	ldr	r1, [pc, #272]	@ (8002fd4 <HAL_RCC_OscConfig+0x4f8>)
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	604b      	str	r3, [r1, #4]
 8002ec6:	e023      	b.n	8002f10 <HAL_RCC_OscConfig+0x434>
 8002ec8:	4b42      	ldr	r3, [pc, #264]	@ (8002fd4 <HAL_RCC_OscConfig+0x4f8>)
 8002eca:	68db      	ldr	r3, [r3, #12]
 8002ecc:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6a1b      	ldr	r3, [r3, #32]
 8002ed4:	061b      	lsls	r3, r3, #24
 8002ed6:	493f      	ldr	r1, [pc, #252]	@ (8002fd4 <HAL_RCC_OscConfig+0x4f8>)
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	60cb      	str	r3, [r1, #12]
 8002edc:	e018      	b.n	8002f10 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002ede:	4b3d      	ldr	r3, [pc, #244]	@ (8002fd4 <HAL_RCC_OscConfig+0x4f8>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a3c      	ldr	r2, [pc, #240]	@ (8002fd4 <HAL_RCC_OscConfig+0x4f8>)
 8002ee4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002ee8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eea:	f7fe f9d5 	bl	8001298 <HAL_GetTick>
 8002eee:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002ef0:	e008      	b.n	8002f04 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002ef2:	f7fe f9d1 	bl	8001298 <HAL_GetTick>
 8002ef6:	4602      	mov	r2, r0
 8002ef8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002efa:	1ad3      	subs	r3, r2, r3
 8002efc:	2b02      	cmp	r3, #2
 8002efe:	d901      	bls.n	8002f04 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002f00:	2303      	movs	r3, #3
 8002f02:	e23d      	b.n	8003380 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002f04:	4b33      	ldr	r3, [pc, #204]	@ (8002fd4 <HAL_RCC_OscConfig+0x4f8>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d1f0      	bne.n	8002ef2 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f003 0308 	and.w	r3, r3, #8
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d036      	beq.n	8002f8a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	695b      	ldr	r3, [r3, #20]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d019      	beq.n	8002f58 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f24:	4b2b      	ldr	r3, [pc, #172]	@ (8002fd4 <HAL_RCC_OscConfig+0x4f8>)
 8002f26:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f28:	4a2a      	ldr	r2, [pc, #168]	@ (8002fd4 <HAL_RCC_OscConfig+0x4f8>)
 8002f2a:	f043 0301 	orr.w	r3, r3, #1
 8002f2e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f30:	f7fe f9b2 	bl	8001298 <HAL_GetTick>
 8002f34:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002f36:	e008      	b.n	8002f4a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f38:	f7fe f9ae 	bl	8001298 <HAL_GetTick>
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f40:	1ad3      	subs	r3, r2, r3
 8002f42:	2b02      	cmp	r3, #2
 8002f44:	d901      	bls.n	8002f4a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8002f46:	2303      	movs	r3, #3
 8002f48:	e21a      	b.n	8003380 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002f4a:	4b22      	ldr	r3, [pc, #136]	@ (8002fd4 <HAL_RCC_OscConfig+0x4f8>)
 8002f4c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f4e:	f003 0302 	and.w	r3, r3, #2
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d0f0      	beq.n	8002f38 <HAL_RCC_OscConfig+0x45c>
 8002f56:	e018      	b.n	8002f8a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f58:	4b1e      	ldr	r3, [pc, #120]	@ (8002fd4 <HAL_RCC_OscConfig+0x4f8>)
 8002f5a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f5c:	4a1d      	ldr	r2, [pc, #116]	@ (8002fd4 <HAL_RCC_OscConfig+0x4f8>)
 8002f5e:	f023 0301 	bic.w	r3, r3, #1
 8002f62:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f64:	f7fe f998 	bl	8001298 <HAL_GetTick>
 8002f68:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002f6a:	e008      	b.n	8002f7e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f6c:	f7fe f994 	bl	8001298 <HAL_GetTick>
 8002f70:	4602      	mov	r2, r0
 8002f72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f74:	1ad3      	subs	r3, r2, r3
 8002f76:	2b02      	cmp	r3, #2
 8002f78:	d901      	bls.n	8002f7e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8002f7a:	2303      	movs	r3, #3
 8002f7c:	e200      	b.n	8003380 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002f7e:	4b15      	ldr	r3, [pc, #84]	@ (8002fd4 <HAL_RCC_OscConfig+0x4f8>)
 8002f80:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f82:	f003 0302 	and.w	r3, r3, #2
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d1f0      	bne.n	8002f6c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f003 0320 	and.w	r3, r3, #32
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d039      	beq.n	800300a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	699b      	ldr	r3, [r3, #24]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d01c      	beq.n	8002fd8 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002f9e:	4b0d      	ldr	r3, [pc, #52]	@ (8002fd4 <HAL_RCC_OscConfig+0x4f8>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a0c      	ldr	r2, [pc, #48]	@ (8002fd4 <HAL_RCC_OscConfig+0x4f8>)
 8002fa4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002fa8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002faa:	f7fe f975 	bl	8001298 <HAL_GetTick>
 8002fae:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002fb0:	e008      	b.n	8002fc4 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002fb2:	f7fe f971 	bl	8001298 <HAL_GetTick>
 8002fb6:	4602      	mov	r2, r0
 8002fb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fba:	1ad3      	subs	r3, r2, r3
 8002fbc:	2b02      	cmp	r3, #2
 8002fbe:	d901      	bls.n	8002fc4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002fc0:	2303      	movs	r3, #3
 8002fc2:	e1dd      	b.n	8003380 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002fc4:	4b03      	ldr	r3, [pc, #12]	@ (8002fd4 <HAL_RCC_OscConfig+0x4f8>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d0f0      	beq.n	8002fb2 <HAL_RCC_OscConfig+0x4d6>
 8002fd0:	e01b      	b.n	800300a <HAL_RCC_OscConfig+0x52e>
 8002fd2:	bf00      	nop
 8002fd4:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002fd8:	4b9b      	ldr	r3, [pc, #620]	@ (8003248 <HAL_RCC_OscConfig+0x76c>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a9a      	ldr	r2, [pc, #616]	@ (8003248 <HAL_RCC_OscConfig+0x76c>)
 8002fde:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002fe2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002fe4:	f7fe f958 	bl	8001298 <HAL_GetTick>
 8002fe8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002fea:	e008      	b.n	8002ffe <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002fec:	f7fe f954 	bl	8001298 <HAL_GetTick>
 8002ff0:	4602      	mov	r2, r0
 8002ff2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ff4:	1ad3      	subs	r3, r2, r3
 8002ff6:	2b02      	cmp	r3, #2
 8002ff8:	d901      	bls.n	8002ffe <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8002ffa:	2303      	movs	r3, #3
 8002ffc:	e1c0      	b.n	8003380 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002ffe:	4b92      	ldr	r3, [pc, #584]	@ (8003248 <HAL_RCC_OscConfig+0x76c>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003006:	2b00      	cmp	r3, #0
 8003008:	d1f0      	bne.n	8002fec <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f003 0304 	and.w	r3, r3, #4
 8003012:	2b00      	cmp	r3, #0
 8003014:	f000 8081 	beq.w	800311a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003018:	4b8c      	ldr	r3, [pc, #560]	@ (800324c <HAL_RCC_OscConfig+0x770>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a8b      	ldr	r2, [pc, #556]	@ (800324c <HAL_RCC_OscConfig+0x770>)
 800301e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003022:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003024:	f7fe f938 	bl	8001298 <HAL_GetTick>
 8003028:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800302a:	e008      	b.n	800303e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800302c:	f7fe f934 	bl	8001298 <HAL_GetTick>
 8003030:	4602      	mov	r2, r0
 8003032:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003034:	1ad3      	subs	r3, r2, r3
 8003036:	2b64      	cmp	r3, #100	@ 0x64
 8003038:	d901      	bls.n	800303e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800303a:	2303      	movs	r3, #3
 800303c:	e1a0      	b.n	8003380 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800303e:	4b83      	ldr	r3, [pc, #524]	@ (800324c <HAL_RCC_OscConfig+0x770>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003046:	2b00      	cmp	r3, #0
 8003048:	d0f0      	beq.n	800302c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	689b      	ldr	r3, [r3, #8]
 800304e:	2b01      	cmp	r3, #1
 8003050:	d106      	bne.n	8003060 <HAL_RCC_OscConfig+0x584>
 8003052:	4b7d      	ldr	r3, [pc, #500]	@ (8003248 <HAL_RCC_OscConfig+0x76c>)
 8003054:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003056:	4a7c      	ldr	r2, [pc, #496]	@ (8003248 <HAL_RCC_OscConfig+0x76c>)
 8003058:	f043 0301 	orr.w	r3, r3, #1
 800305c:	6713      	str	r3, [r2, #112]	@ 0x70
 800305e:	e02d      	b.n	80030bc <HAL_RCC_OscConfig+0x5e0>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	689b      	ldr	r3, [r3, #8]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d10c      	bne.n	8003082 <HAL_RCC_OscConfig+0x5a6>
 8003068:	4b77      	ldr	r3, [pc, #476]	@ (8003248 <HAL_RCC_OscConfig+0x76c>)
 800306a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800306c:	4a76      	ldr	r2, [pc, #472]	@ (8003248 <HAL_RCC_OscConfig+0x76c>)
 800306e:	f023 0301 	bic.w	r3, r3, #1
 8003072:	6713      	str	r3, [r2, #112]	@ 0x70
 8003074:	4b74      	ldr	r3, [pc, #464]	@ (8003248 <HAL_RCC_OscConfig+0x76c>)
 8003076:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003078:	4a73      	ldr	r2, [pc, #460]	@ (8003248 <HAL_RCC_OscConfig+0x76c>)
 800307a:	f023 0304 	bic.w	r3, r3, #4
 800307e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003080:	e01c      	b.n	80030bc <HAL_RCC_OscConfig+0x5e0>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	689b      	ldr	r3, [r3, #8]
 8003086:	2b05      	cmp	r3, #5
 8003088:	d10c      	bne.n	80030a4 <HAL_RCC_OscConfig+0x5c8>
 800308a:	4b6f      	ldr	r3, [pc, #444]	@ (8003248 <HAL_RCC_OscConfig+0x76c>)
 800308c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800308e:	4a6e      	ldr	r2, [pc, #440]	@ (8003248 <HAL_RCC_OscConfig+0x76c>)
 8003090:	f043 0304 	orr.w	r3, r3, #4
 8003094:	6713      	str	r3, [r2, #112]	@ 0x70
 8003096:	4b6c      	ldr	r3, [pc, #432]	@ (8003248 <HAL_RCC_OscConfig+0x76c>)
 8003098:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800309a:	4a6b      	ldr	r2, [pc, #428]	@ (8003248 <HAL_RCC_OscConfig+0x76c>)
 800309c:	f043 0301 	orr.w	r3, r3, #1
 80030a0:	6713      	str	r3, [r2, #112]	@ 0x70
 80030a2:	e00b      	b.n	80030bc <HAL_RCC_OscConfig+0x5e0>
 80030a4:	4b68      	ldr	r3, [pc, #416]	@ (8003248 <HAL_RCC_OscConfig+0x76c>)
 80030a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030a8:	4a67      	ldr	r2, [pc, #412]	@ (8003248 <HAL_RCC_OscConfig+0x76c>)
 80030aa:	f023 0301 	bic.w	r3, r3, #1
 80030ae:	6713      	str	r3, [r2, #112]	@ 0x70
 80030b0:	4b65      	ldr	r3, [pc, #404]	@ (8003248 <HAL_RCC_OscConfig+0x76c>)
 80030b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030b4:	4a64      	ldr	r2, [pc, #400]	@ (8003248 <HAL_RCC_OscConfig+0x76c>)
 80030b6:	f023 0304 	bic.w	r3, r3, #4
 80030ba:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	689b      	ldr	r3, [r3, #8]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d015      	beq.n	80030f0 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030c4:	f7fe f8e8 	bl	8001298 <HAL_GetTick>
 80030c8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80030ca:	e00a      	b.n	80030e2 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030cc:	f7fe f8e4 	bl	8001298 <HAL_GetTick>
 80030d0:	4602      	mov	r2, r0
 80030d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030d4:	1ad3      	subs	r3, r2, r3
 80030d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030da:	4293      	cmp	r3, r2
 80030dc:	d901      	bls.n	80030e2 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80030de:	2303      	movs	r3, #3
 80030e0:	e14e      	b.n	8003380 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80030e2:	4b59      	ldr	r3, [pc, #356]	@ (8003248 <HAL_RCC_OscConfig+0x76c>)
 80030e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030e6:	f003 0302 	and.w	r3, r3, #2
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d0ee      	beq.n	80030cc <HAL_RCC_OscConfig+0x5f0>
 80030ee:	e014      	b.n	800311a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030f0:	f7fe f8d2 	bl	8001298 <HAL_GetTick>
 80030f4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80030f6:	e00a      	b.n	800310e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030f8:	f7fe f8ce 	bl	8001298 <HAL_GetTick>
 80030fc:	4602      	mov	r2, r0
 80030fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003100:	1ad3      	subs	r3, r2, r3
 8003102:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003106:	4293      	cmp	r3, r2
 8003108:	d901      	bls.n	800310e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800310a:	2303      	movs	r3, #3
 800310c:	e138      	b.n	8003380 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800310e:	4b4e      	ldr	r3, [pc, #312]	@ (8003248 <HAL_RCC_OscConfig+0x76c>)
 8003110:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003112:	f003 0302 	and.w	r3, r3, #2
 8003116:	2b00      	cmp	r3, #0
 8003118:	d1ee      	bne.n	80030f8 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800311e:	2b00      	cmp	r3, #0
 8003120:	f000 812d 	beq.w	800337e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003124:	4b48      	ldr	r3, [pc, #288]	@ (8003248 <HAL_RCC_OscConfig+0x76c>)
 8003126:	691b      	ldr	r3, [r3, #16]
 8003128:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800312c:	2b18      	cmp	r3, #24
 800312e:	f000 80bd 	beq.w	80032ac <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003136:	2b02      	cmp	r3, #2
 8003138:	f040 809e 	bne.w	8003278 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800313c:	4b42      	ldr	r3, [pc, #264]	@ (8003248 <HAL_RCC_OscConfig+0x76c>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a41      	ldr	r2, [pc, #260]	@ (8003248 <HAL_RCC_OscConfig+0x76c>)
 8003142:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003146:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003148:	f7fe f8a6 	bl	8001298 <HAL_GetTick>
 800314c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800314e:	e008      	b.n	8003162 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003150:	f7fe f8a2 	bl	8001298 <HAL_GetTick>
 8003154:	4602      	mov	r2, r0
 8003156:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003158:	1ad3      	subs	r3, r2, r3
 800315a:	2b02      	cmp	r3, #2
 800315c:	d901      	bls.n	8003162 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800315e:	2303      	movs	r3, #3
 8003160:	e10e      	b.n	8003380 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003162:	4b39      	ldr	r3, [pc, #228]	@ (8003248 <HAL_RCC_OscConfig+0x76c>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800316a:	2b00      	cmp	r3, #0
 800316c:	d1f0      	bne.n	8003150 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800316e:	4b36      	ldr	r3, [pc, #216]	@ (8003248 <HAL_RCC_OscConfig+0x76c>)
 8003170:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003172:	4b37      	ldr	r3, [pc, #220]	@ (8003250 <HAL_RCC_OscConfig+0x774>)
 8003174:	4013      	ands	r3, r2
 8003176:	687a      	ldr	r2, [r7, #4]
 8003178:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800317a:	687a      	ldr	r2, [r7, #4]
 800317c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800317e:	0112      	lsls	r2, r2, #4
 8003180:	430a      	orrs	r2, r1
 8003182:	4931      	ldr	r1, [pc, #196]	@ (8003248 <HAL_RCC_OscConfig+0x76c>)
 8003184:	4313      	orrs	r3, r2
 8003186:	628b      	str	r3, [r1, #40]	@ 0x28
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800318c:	3b01      	subs	r3, #1
 800318e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003196:	3b01      	subs	r3, #1
 8003198:	025b      	lsls	r3, r3, #9
 800319a:	b29b      	uxth	r3, r3
 800319c:	431a      	orrs	r2, r3
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031a2:	3b01      	subs	r3, #1
 80031a4:	041b      	lsls	r3, r3, #16
 80031a6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80031aa:	431a      	orrs	r2, r3
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031b0:	3b01      	subs	r3, #1
 80031b2:	061b      	lsls	r3, r3, #24
 80031b4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80031b8:	4923      	ldr	r1, [pc, #140]	@ (8003248 <HAL_RCC_OscConfig+0x76c>)
 80031ba:	4313      	orrs	r3, r2
 80031bc:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80031be:	4b22      	ldr	r3, [pc, #136]	@ (8003248 <HAL_RCC_OscConfig+0x76c>)
 80031c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031c2:	4a21      	ldr	r2, [pc, #132]	@ (8003248 <HAL_RCC_OscConfig+0x76c>)
 80031c4:	f023 0301 	bic.w	r3, r3, #1
 80031c8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80031ca:	4b1f      	ldr	r3, [pc, #124]	@ (8003248 <HAL_RCC_OscConfig+0x76c>)
 80031cc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80031ce:	4b21      	ldr	r3, [pc, #132]	@ (8003254 <HAL_RCC_OscConfig+0x778>)
 80031d0:	4013      	ands	r3, r2
 80031d2:	687a      	ldr	r2, [r7, #4]
 80031d4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80031d6:	00d2      	lsls	r2, r2, #3
 80031d8:	491b      	ldr	r1, [pc, #108]	@ (8003248 <HAL_RCC_OscConfig+0x76c>)
 80031da:	4313      	orrs	r3, r2
 80031dc:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80031de:	4b1a      	ldr	r3, [pc, #104]	@ (8003248 <HAL_RCC_OscConfig+0x76c>)
 80031e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031e2:	f023 020c 	bic.w	r2, r3, #12
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031ea:	4917      	ldr	r1, [pc, #92]	@ (8003248 <HAL_RCC_OscConfig+0x76c>)
 80031ec:	4313      	orrs	r3, r2
 80031ee:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80031f0:	4b15      	ldr	r3, [pc, #84]	@ (8003248 <HAL_RCC_OscConfig+0x76c>)
 80031f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031f4:	f023 0202 	bic.w	r2, r3, #2
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031fc:	4912      	ldr	r1, [pc, #72]	@ (8003248 <HAL_RCC_OscConfig+0x76c>)
 80031fe:	4313      	orrs	r3, r2
 8003200:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003202:	4b11      	ldr	r3, [pc, #68]	@ (8003248 <HAL_RCC_OscConfig+0x76c>)
 8003204:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003206:	4a10      	ldr	r2, [pc, #64]	@ (8003248 <HAL_RCC_OscConfig+0x76c>)
 8003208:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800320c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800320e:	4b0e      	ldr	r3, [pc, #56]	@ (8003248 <HAL_RCC_OscConfig+0x76c>)
 8003210:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003212:	4a0d      	ldr	r2, [pc, #52]	@ (8003248 <HAL_RCC_OscConfig+0x76c>)
 8003214:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003218:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800321a:	4b0b      	ldr	r3, [pc, #44]	@ (8003248 <HAL_RCC_OscConfig+0x76c>)
 800321c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800321e:	4a0a      	ldr	r2, [pc, #40]	@ (8003248 <HAL_RCC_OscConfig+0x76c>)
 8003220:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003224:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8003226:	4b08      	ldr	r3, [pc, #32]	@ (8003248 <HAL_RCC_OscConfig+0x76c>)
 8003228:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800322a:	4a07      	ldr	r2, [pc, #28]	@ (8003248 <HAL_RCC_OscConfig+0x76c>)
 800322c:	f043 0301 	orr.w	r3, r3, #1
 8003230:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003232:	4b05      	ldr	r3, [pc, #20]	@ (8003248 <HAL_RCC_OscConfig+0x76c>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a04      	ldr	r2, [pc, #16]	@ (8003248 <HAL_RCC_OscConfig+0x76c>)
 8003238:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800323c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800323e:	f7fe f82b 	bl	8001298 <HAL_GetTick>
 8003242:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003244:	e011      	b.n	800326a <HAL_RCC_OscConfig+0x78e>
 8003246:	bf00      	nop
 8003248:	58024400 	.word	0x58024400
 800324c:	58024800 	.word	0x58024800
 8003250:	fffffc0c 	.word	0xfffffc0c
 8003254:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003258:	f7fe f81e 	bl	8001298 <HAL_GetTick>
 800325c:	4602      	mov	r2, r0
 800325e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003260:	1ad3      	subs	r3, r2, r3
 8003262:	2b02      	cmp	r3, #2
 8003264:	d901      	bls.n	800326a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8003266:	2303      	movs	r3, #3
 8003268:	e08a      	b.n	8003380 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800326a:	4b47      	ldr	r3, [pc, #284]	@ (8003388 <HAL_RCC_OscConfig+0x8ac>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003272:	2b00      	cmp	r3, #0
 8003274:	d0f0      	beq.n	8003258 <HAL_RCC_OscConfig+0x77c>
 8003276:	e082      	b.n	800337e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003278:	4b43      	ldr	r3, [pc, #268]	@ (8003388 <HAL_RCC_OscConfig+0x8ac>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a42      	ldr	r2, [pc, #264]	@ (8003388 <HAL_RCC_OscConfig+0x8ac>)
 800327e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003282:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003284:	f7fe f808 	bl	8001298 <HAL_GetTick>
 8003288:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800328a:	e008      	b.n	800329e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800328c:	f7fe f804 	bl	8001298 <HAL_GetTick>
 8003290:	4602      	mov	r2, r0
 8003292:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003294:	1ad3      	subs	r3, r2, r3
 8003296:	2b02      	cmp	r3, #2
 8003298:	d901      	bls.n	800329e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800329a:	2303      	movs	r3, #3
 800329c:	e070      	b.n	8003380 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800329e:	4b3a      	ldr	r3, [pc, #232]	@ (8003388 <HAL_RCC_OscConfig+0x8ac>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d1f0      	bne.n	800328c <HAL_RCC_OscConfig+0x7b0>
 80032aa:	e068      	b.n	800337e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80032ac:	4b36      	ldr	r3, [pc, #216]	@ (8003388 <HAL_RCC_OscConfig+0x8ac>)
 80032ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032b0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80032b2:	4b35      	ldr	r3, [pc, #212]	@ (8003388 <HAL_RCC_OscConfig+0x8ac>)
 80032b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032b6:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032bc:	2b01      	cmp	r3, #1
 80032be:	d031      	beq.n	8003324 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032c0:	693b      	ldr	r3, [r7, #16]
 80032c2:	f003 0203 	and.w	r2, r3, #3
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032ca:	429a      	cmp	r2, r3
 80032cc:	d12a      	bne.n	8003324 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80032ce:	693b      	ldr	r3, [r7, #16]
 80032d0:	091b      	lsrs	r3, r3, #4
 80032d2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032da:	429a      	cmp	r2, r3
 80032dc:	d122      	bne.n	8003324 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032e8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80032ea:	429a      	cmp	r2, r3
 80032ec:	d11a      	bne.n	8003324 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	0a5b      	lsrs	r3, r3, #9
 80032f2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032fa:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80032fc:	429a      	cmp	r2, r3
 80032fe:	d111      	bne.n	8003324 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	0c1b      	lsrs	r3, r3, #16
 8003304:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800330c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800330e:	429a      	cmp	r2, r3
 8003310:	d108      	bne.n	8003324 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	0e1b      	lsrs	r3, r3, #24
 8003316:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800331e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003320:	429a      	cmp	r2, r3
 8003322:	d001      	beq.n	8003328 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8003324:	2301      	movs	r3, #1
 8003326:	e02b      	b.n	8003380 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8003328:	4b17      	ldr	r3, [pc, #92]	@ (8003388 <HAL_RCC_OscConfig+0x8ac>)
 800332a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800332c:	08db      	lsrs	r3, r3, #3
 800332e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003332:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003338:	693a      	ldr	r2, [r7, #16]
 800333a:	429a      	cmp	r2, r3
 800333c:	d01f      	beq.n	800337e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800333e:	4b12      	ldr	r3, [pc, #72]	@ (8003388 <HAL_RCC_OscConfig+0x8ac>)
 8003340:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003342:	4a11      	ldr	r2, [pc, #68]	@ (8003388 <HAL_RCC_OscConfig+0x8ac>)
 8003344:	f023 0301 	bic.w	r3, r3, #1
 8003348:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800334a:	f7fd ffa5 	bl	8001298 <HAL_GetTick>
 800334e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8003350:	bf00      	nop
 8003352:	f7fd ffa1 	bl	8001298 <HAL_GetTick>
 8003356:	4602      	mov	r2, r0
 8003358:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800335a:	4293      	cmp	r3, r2
 800335c:	d0f9      	beq.n	8003352 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800335e:	4b0a      	ldr	r3, [pc, #40]	@ (8003388 <HAL_RCC_OscConfig+0x8ac>)
 8003360:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003362:	4b0a      	ldr	r3, [pc, #40]	@ (800338c <HAL_RCC_OscConfig+0x8b0>)
 8003364:	4013      	ands	r3, r2
 8003366:	687a      	ldr	r2, [r7, #4]
 8003368:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800336a:	00d2      	lsls	r2, r2, #3
 800336c:	4906      	ldr	r1, [pc, #24]	@ (8003388 <HAL_RCC_OscConfig+0x8ac>)
 800336e:	4313      	orrs	r3, r2
 8003370:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8003372:	4b05      	ldr	r3, [pc, #20]	@ (8003388 <HAL_RCC_OscConfig+0x8ac>)
 8003374:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003376:	4a04      	ldr	r2, [pc, #16]	@ (8003388 <HAL_RCC_OscConfig+0x8ac>)
 8003378:	f043 0301 	orr.w	r3, r3, #1
 800337c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800337e:	2300      	movs	r3, #0
}
 8003380:	4618      	mov	r0, r3
 8003382:	3730      	adds	r7, #48	@ 0x30
 8003384:	46bd      	mov	sp, r7
 8003386:	bd80      	pop	{r7, pc}
 8003388:	58024400 	.word	0x58024400
 800338c:	ffff0007 	.word	0xffff0007

08003390 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b086      	sub	sp, #24
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
 8003398:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d101      	bne.n	80033a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80033a0:	2301      	movs	r3, #1
 80033a2:	e19c      	b.n	80036de <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80033a4:	4b8a      	ldr	r3, [pc, #552]	@ (80035d0 <HAL_RCC_ClockConfig+0x240>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f003 030f 	and.w	r3, r3, #15
 80033ac:	683a      	ldr	r2, [r7, #0]
 80033ae:	429a      	cmp	r2, r3
 80033b0:	d910      	bls.n	80033d4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033b2:	4b87      	ldr	r3, [pc, #540]	@ (80035d0 <HAL_RCC_ClockConfig+0x240>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f023 020f 	bic.w	r2, r3, #15
 80033ba:	4985      	ldr	r1, [pc, #532]	@ (80035d0 <HAL_RCC_ClockConfig+0x240>)
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	4313      	orrs	r3, r2
 80033c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033c2:	4b83      	ldr	r3, [pc, #524]	@ (80035d0 <HAL_RCC_ClockConfig+0x240>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f003 030f 	and.w	r3, r3, #15
 80033ca:	683a      	ldr	r2, [r7, #0]
 80033cc:	429a      	cmp	r2, r3
 80033ce:	d001      	beq.n	80033d4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80033d0:	2301      	movs	r3, #1
 80033d2:	e184      	b.n	80036de <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f003 0304 	and.w	r3, r3, #4
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d010      	beq.n	8003402 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	691a      	ldr	r2, [r3, #16]
 80033e4:	4b7b      	ldr	r3, [pc, #492]	@ (80035d4 <HAL_RCC_ClockConfig+0x244>)
 80033e6:	699b      	ldr	r3, [r3, #24]
 80033e8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80033ec:	429a      	cmp	r2, r3
 80033ee:	d908      	bls.n	8003402 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80033f0:	4b78      	ldr	r3, [pc, #480]	@ (80035d4 <HAL_RCC_ClockConfig+0x244>)
 80033f2:	699b      	ldr	r3, [r3, #24]
 80033f4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	691b      	ldr	r3, [r3, #16]
 80033fc:	4975      	ldr	r1, [pc, #468]	@ (80035d4 <HAL_RCC_ClockConfig+0x244>)
 80033fe:	4313      	orrs	r3, r2
 8003400:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f003 0308 	and.w	r3, r3, #8
 800340a:	2b00      	cmp	r3, #0
 800340c:	d010      	beq.n	8003430 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	695a      	ldr	r2, [r3, #20]
 8003412:	4b70      	ldr	r3, [pc, #448]	@ (80035d4 <HAL_RCC_ClockConfig+0x244>)
 8003414:	69db      	ldr	r3, [r3, #28]
 8003416:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800341a:	429a      	cmp	r2, r3
 800341c:	d908      	bls.n	8003430 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800341e:	4b6d      	ldr	r3, [pc, #436]	@ (80035d4 <HAL_RCC_ClockConfig+0x244>)
 8003420:	69db      	ldr	r3, [r3, #28]
 8003422:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	695b      	ldr	r3, [r3, #20]
 800342a:	496a      	ldr	r1, [pc, #424]	@ (80035d4 <HAL_RCC_ClockConfig+0x244>)
 800342c:	4313      	orrs	r3, r2
 800342e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f003 0310 	and.w	r3, r3, #16
 8003438:	2b00      	cmp	r3, #0
 800343a:	d010      	beq.n	800345e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	699a      	ldr	r2, [r3, #24]
 8003440:	4b64      	ldr	r3, [pc, #400]	@ (80035d4 <HAL_RCC_ClockConfig+0x244>)
 8003442:	69db      	ldr	r3, [r3, #28]
 8003444:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003448:	429a      	cmp	r2, r3
 800344a:	d908      	bls.n	800345e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800344c:	4b61      	ldr	r3, [pc, #388]	@ (80035d4 <HAL_RCC_ClockConfig+0x244>)
 800344e:	69db      	ldr	r3, [r3, #28]
 8003450:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	699b      	ldr	r3, [r3, #24]
 8003458:	495e      	ldr	r1, [pc, #376]	@ (80035d4 <HAL_RCC_ClockConfig+0x244>)
 800345a:	4313      	orrs	r3, r2
 800345c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f003 0320 	and.w	r3, r3, #32
 8003466:	2b00      	cmp	r3, #0
 8003468:	d010      	beq.n	800348c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	69da      	ldr	r2, [r3, #28]
 800346e:	4b59      	ldr	r3, [pc, #356]	@ (80035d4 <HAL_RCC_ClockConfig+0x244>)
 8003470:	6a1b      	ldr	r3, [r3, #32]
 8003472:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003476:	429a      	cmp	r2, r3
 8003478:	d908      	bls.n	800348c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800347a:	4b56      	ldr	r3, [pc, #344]	@ (80035d4 <HAL_RCC_ClockConfig+0x244>)
 800347c:	6a1b      	ldr	r3, [r3, #32]
 800347e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	69db      	ldr	r3, [r3, #28]
 8003486:	4953      	ldr	r1, [pc, #332]	@ (80035d4 <HAL_RCC_ClockConfig+0x244>)
 8003488:	4313      	orrs	r3, r2
 800348a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f003 0302 	and.w	r3, r3, #2
 8003494:	2b00      	cmp	r3, #0
 8003496:	d010      	beq.n	80034ba <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	68da      	ldr	r2, [r3, #12]
 800349c:	4b4d      	ldr	r3, [pc, #308]	@ (80035d4 <HAL_RCC_ClockConfig+0x244>)
 800349e:	699b      	ldr	r3, [r3, #24]
 80034a0:	f003 030f 	and.w	r3, r3, #15
 80034a4:	429a      	cmp	r2, r3
 80034a6:	d908      	bls.n	80034ba <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034a8:	4b4a      	ldr	r3, [pc, #296]	@ (80035d4 <HAL_RCC_ClockConfig+0x244>)
 80034aa:	699b      	ldr	r3, [r3, #24]
 80034ac:	f023 020f 	bic.w	r2, r3, #15
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	68db      	ldr	r3, [r3, #12]
 80034b4:	4947      	ldr	r1, [pc, #284]	@ (80035d4 <HAL_RCC_ClockConfig+0x244>)
 80034b6:	4313      	orrs	r3, r2
 80034b8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f003 0301 	and.w	r3, r3, #1
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d055      	beq.n	8003572 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80034c6:	4b43      	ldr	r3, [pc, #268]	@ (80035d4 <HAL_RCC_ClockConfig+0x244>)
 80034c8:	699b      	ldr	r3, [r3, #24]
 80034ca:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	689b      	ldr	r3, [r3, #8]
 80034d2:	4940      	ldr	r1, [pc, #256]	@ (80035d4 <HAL_RCC_ClockConfig+0x244>)
 80034d4:	4313      	orrs	r3, r2
 80034d6:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	2b02      	cmp	r3, #2
 80034de:	d107      	bne.n	80034f0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80034e0:	4b3c      	ldr	r3, [pc, #240]	@ (80035d4 <HAL_RCC_ClockConfig+0x244>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d121      	bne.n	8003530 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80034ec:	2301      	movs	r3, #1
 80034ee:	e0f6      	b.n	80036de <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	2b03      	cmp	r3, #3
 80034f6:	d107      	bne.n	8003508 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80034f8:	4b36      	ldr	r3, [pc, #216]	@ (80035d4 <HAL_RCC_ClockConfig+0x244>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003500:	2b00      	cmp	r3, #0
 8003502:	d115      	bne.n	8003530 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003504:	2301      	movs	r3, #1
 8003506:	e0ea      	b.n	80036de <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	2b01      	cmp	r3, #1
 800350e:	d107      	bne.n	8003520 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003510:	4b30      	ldr	r3, [pc, #192]	@ (80035d4 <HAL_RCC_ClockConfig+0x244>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003518:	2b00      	cmp	r3, #0
 800351a:	d109      	bne.n	8003530 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800351c:	2301      	movs	r3, #1
 800351e:	e0de      	b.n	80036de <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003520:	4b2c      	ldr	r3, [pc, #176]	@ (80035d4 <HAL_RCC_ClockConfig+0x244>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f003 0304 	and.w	r3, r3, #4
 8003528:	2b00      	cmp	r3, #0
 800352a:	d101      	bne.n	8003530 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800352c:	2301      	movs	r3, #1
 800352e:	e0d6      	b.n	80036de <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003530:	4b28      	ldr	r3, [pc, #160]	@ (80035d4 <HAL_RCC_ClockConfig+0x244>)
 8003532:	691b      	ldr	r3, [r3, #16]
 8003534:	f023 0207 	bic.w	r2, r3, #7
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	4925      	ldr	r1, [pc, #148]	@ (80035d4 <HAL_RCC_ClockConfig+0x244>)
 800353e:	4313      	orrs	r3, r2
 8003540:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003542:	f7fd fea9 	bl	8001298 <HAL_GetTick>
 8003546:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003548:	e00a      	b.n	8003560 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800354a:	f7fd fea5 	bl	8001298 <HAL_GetTick>
 800354e:	4602      	mov	r2, r0
 8003550:	697b      	ldr	r3, [r7, #20]
 8003552:	1ad3      	subs	r3, r2, r3
 8003554:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003558:	4293      	cmp	r3, r2
 800355a:	d901      	bls.n	8003560 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800355c:	2303      	movs	r3, #3
 800355e:	e0be      	b.n	80036de <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003560:	4b1c      	ldr	r3, [pc, #112]	@ (80035d4 <HAL_RCC_ClockConfig+0x244>)
 8003562:	691b      	ldr	r3, [r3, #16]
 8003564:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	00db      	lsls	r3, r3, #3
 800356e:	429a      	cmp	r2, r3
 8003570:	d1eb      	bne.n	800354a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f003 0302 	and.w	r3, r3, #2
 800357a:	2b00      	cmp	r3, #0
 800357c:	d010      	beq.n	80035a0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	68da      	ldr	r2, [r3, #12]
 8003582:	4b14      	ldr	r3, [pc, #80]	@ (80035d4 <HAL_RCC_ClockConfig+0x244>)
 8003584:	699b      	ldr	r3, [r3, #24]
 8003586:	f003 030f 	and.w	r3, r3, #15
 800358a:	429a      	cmp	r2, r3
 800358c:	d208      	bcs.n	80035a0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800358e:	4b11      	ldr	r3, [pc, #68]	@ (80035d4 <HAL_RCC_ClockConfig+0x244>)
 8003590:	699b      	ldr	r3, [r3, #24]
 8003592:	f023 020f 	bic.w	r2, r3, #15
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	68db      	ldr	r3, [r3, #12]
 800359a:	490e      	ldr	r1, [pc, #56]	@ (80035d4 <HAL_RCC_ClockConfig+0x244>)
 800359c:	4313      	orrs	r3, r2
 800359e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80035a0:	4b0b      	ldr	r3, [pc, #44]	@ (80035d0 <HAL_RCC_ClockConfig+0x240>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f003 030f 	and.w	r3, r3, #15
 80035a8:	683a      	ldr	r2, [r7, #0]
 80035aa:	429a      	cmp	r2, r3
 80035ac:	d214      	bcs.n	80035d8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035ae:	4b08      	ldr	r3, [pc, #32]	@ (80035d0 <HAL_RCC_ClockConfig+0x240>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f023 020f 	bic.w	r2, r3, #15
 80035b6:	4906      	ldr	r1, [pc, #24]	@ (80035d0 <HAL_RCC_ClockConfig+0x240>)
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	4313      	orrs	r3, r2
 80035bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035be:	4b04      	ldr	r3, [pc, #16]	@ (80035d0 <HAL_RCC_ClockConfig+0x240>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f003 030f 	and.w	r3, r3, #15
 80035c6:	683a      	ldr	r2, [r7, #0]
 80035c8:	429a      	cmp	r2, r3
 80035ca:	d005      	beq.n	80035d8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80035cc:	2301      	movs	r3, #1
 80035ce:	e086      	b.n	80036de <HAL_RCC_ClockConfig+0x34e>
 80035d0:	52002000 	.word	0x52002000
 80035d4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f003 0304 	and.w	r3, r3, #4
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d010      	beq.n	8003606 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	691a      	ldr	r2, [r3, #16]
 80035e8:	4b3f      	ldr	r3, [pc, #252]	@ (80036e8 <HAL_RCC_ClockConfig+0x358>)
 80035ea:	699b      	ldr	r3, [r3, #24]
 80035ec:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80035f0:	429a      	cmp	r2, r3
 80035f2:	d208      	bcs.n	8003606 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80035f4:	4b3c      	ldr	r3, [pc, #240]	@ (80036e8 <HAL_RCC_ClockConfig+0x358>)
 80035f6:	699b      	ldr	r3, [r3, #24]
 80035f8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	691b      	ldr	r3, [r3, #16]
 8003600:	4939      	ldr	r1, [pc, #228]	@ (80036e8 <HAL_RCC_ClockConfig+0x358>)
 8003602:	4313      	orrs	r3, r2
 8003604:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f003 0308 	and.w	r3, r3, #8
 800360e:	2b00      	cmp	r3, #0
 8003610:	d010      	beq.n	8003634 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	695a      	ldr	r2, [r3, #20]
 8003616:	4b34      	ldr	r3, [pc, #208]	@ (80036e8 <HAL_RCC_ClockConfig+0x358>)
 8003618:	69db      	ldr	r3, [r3, #28]
 800361a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800361e:	429a      	cmp	r2, r3
 8003620:	d208      	bcs.n	8003634 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003622:	4b31      	ldr	r3, [pc, #196]	@ (80036e8 <HAL_RCC_ClockConfig+0x358>)
 8003624:	69db      	ldr	r3, [r3, #28]
 8003626:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	695b      	ldr	r3, [r3, #20]
 800362e:	492e      	ldr	r1, [pc, #184]	@ (80036e8 <HAL_RCC_ClockConfig+0x358>)
 8003630:	4313      	orrs	r3, r2
 8003632:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f003 0310 	and.w	r3, r3, #16
 800363c:	2b00      	cmp	r3, #0
 800363e:	d010      	beq.n	8003662 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	699a      	ldr	r2, [r3, #24]
 8003644:	4b28      	ldr	r3, [pc, #160]	@ (80036e8 <HAL_RCC_ClockConfig+0x358>)
 8003646:	69db      	ldr	r3, [r3, #28]
 8003648:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800364c:	429a      	cmp	r2, r3
 800364e:	d208      	bcs.n	8003662 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003650:	4b25      	ldr	r3, [pc, #148]	@ (80036e8 <HAL_RCC_ClockConfig+0x358>)
 8003652:	69db      	ldr	r3, [r3, #28]
 8003654:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	699b      	ldr	r3, [r3, #24]
 800365c:	4922      	ldr	r1, [pc, #136]	@ (80036e8 <HAL_RCC_ClockConfig+0x358>)
 800365e:	4313      	orrs	r3, r2
 8003660:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f003 0320 	and.w	r3, r3, #32
 800366a:	2b00      	cmp	r3, #0
 800366c:	d010      	beq.n	8003690 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	69da      	ldr	r2, [r3, #28]
 8003672:	4b1d      	ldr	r3, [pc, #116]	@ (80036e8 <HAL_RCC_ClockConfig+0x358>)
 8003674:	6a1b      	ldr	r3, [r3, #32]
 8003676:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800367a:	429a      	cmp	r2, r3
 800367c:	d208      	bcs.n	8003690 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800367e:	4b1a      	ldr	r3, [pc, #104]	@ (80036e8 <HAL_RCC_ClockConfig+0x358>)
 8003680:	6a1b      	ldr	r3, [r3, #32]
 8003682:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	69db      	ldr	r3, [r3, #28]
 800368a:	4917      	ldr	r1, [pc, #92]	@ (80036e8 <HAL_RCC_ClockConfig+0x358>)
 800368c:	4313      	orrs	r3, r2
 800368e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003690:	f000 f834 	bl	80036fc <HAL_RCC_GetSysClockFreq>
 8003694:	4602      	mov	r2, r0
 8003696:	4b14      	ldr	r3, [pc, #80]	@ (80036e8 <HAL_RCC_ClockConfig+0x358>)
 8003698:	699b      	ldr	r3, [r3, #24]
 800369a:	0a1b      	lsrs	r3, r3, #8
 800369c:	f003 030f 	and.w	r3, r3, #15
 80036a0:	4912      	ldr	r1, [pc, #72]	@ (80036ec <HAL_RCC_ClockConfig+0x35c>)
 80036a2:	5ccb      	ldrb	r3, [r1, r3]
 80036a4:	f003 031f 	and.w	r3, r3, #31
 80036a8:	fa22 f303 	lsr.w	r3, r2, r3
 80036ac:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80036ae:	4b0e      	ldr	r3, [pc, #56]	@ (80036e8 <HAL_RCC_ClockConfig+0x358>)
 80036b0:	699b      	ldr	r3, [r3, #24]
 80036b2:	f003 030f 	and.w	r3, r3, #15
 80036b6:	4a0d      	ldr	r2, [pc, #52]	@ (80036ec <HAL_RCC_ClockConfig+0x35c>)
 80036b8:	5cd3      	ldrb	r3, [r2, r3]
 80036ba:	f003 031f 	and.w	r3, r3, #31
 80036be:	693a      	ldr	r2, [r7, #16]
 80036c0:	fa22 f303 	lsr.w	r3, r2, r3
 80036c4:	4a0a      	ldr	r2, [pc, #40]	@ (80036f0 <HAL_RCC_ClockConfig+0x360>)
 80036c6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80036c8:	4a0a      	ldr	r2, [pc, #40]	@ (80036f4 <HAL_RCC_ClockConfig+0x364>)
 80036ca:	693b      	ldr	r3, [r7, #16]
 80036cc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80036ce:	4b0a      	ldr	r3, [pc, #40]	@ (80036f8 <HAL_RCC_ClockConfig+0x368>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4618      	mov	r0, r3
 80036d4:	f7fd fd96 	bl	8001204 <HAL_InitTick>
 80036d8:	4603      	mov	r3, r0
 80036da:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80036dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80036de:	4618      	mov	r0, r3
 80036e0:	3718      	adds	r7, #24
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bd80      	pop	{r7, pc}
 80036e6:	bf00      	nop
 80036e8:	58024400 	.word	0x58024400
 80036ec:	08009648 	.word	0x08009648
 80036f0:	24000004 	.word	0x24000004
 80036f4:	24000000 	.word	0x24000000
 80036f8:	24000008 	.word	0x24000008

080036fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036fc:	b480      	push	{r7}
 80036fe:	b089      	sub	sp, #36	@ 0x24
 8003700:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003702:	4bb3      	ldr	r3, [pc, #716]	@ (80039d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003704:	691b      	ldr	r3, [r3, #16]
 8003706:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800370a:	2b18      	cmp	r3, #24
 800370c:	f200 8155 	bhi.w	80039ba <HAL_RCC_GetSysClockFreq+0x2be>
 8003710:	a201      	add	r2, pc, #4	@ (adr r2, 8003718 <HAL_RCC_GetSysClockFreq+0x1c>)
 8003712:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003716:	bf00      	nop
 8003718:	0800377d 	.word	0x0800377d
 800371c:	080039bb 	.word	0x080039bb
 8003720:	080039bb 	.word	0x080039bb
 8003724:	080039bb 	.word	0x080039bb
 8003728:	080039bb 	.word	0x080039bb
 800372c:	080039bb 	.word	0x080039bb
 8003730:	080039bb 	.word	0x080039bb
 8003734:	080039bb 	.word	0x080039bb
 8003738:	080037a3 	.word	0x080037a3
 800373c:	080039bb 	.word	0x080039bb
 8003740:	080039bb 	.word	0x080039bb
 8003744:	080039bb 	.word	0x080039bb
 8003748:	080039bb 	.word	0x080039bb
 800374c:	080039bb 	.word	0x080039bb
 8003750:	080039bb 	.word	0x080039bb
 8003754:	080039bb 	.word	0x080039bb
 8003758:	080037a9 	.word	0x080037a9
 800375c:	080039bb 	.word	0x080039bb
 8003760:	080039bb 	.word	0x080039bb
 8003764:	080039bb 	.word	0x080039bb
 8003768:	080039bb 	.word	0x080039bb
 800376c:	080039bb 	.word	0x080039bb
 8003770:	080039bb 	.word	0x080039bb
 8003774:	080039bb 	.word	0x080039bb
 8003778:	080037af 	.word	0x080037af
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800377c:	4b94      	ldr	r3, [pc, #592]	@ (80039d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f003 0320 	and.w	r3, r3, #32
 8003784:	2b00      	cmp	r3, #0
 8003786:	d009      	beq.n	800379c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003788:	4b91      	ldr	r3, [pc, #580]	@ (80039d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	08db      	lsrs	r3, r3, #3
 800378e:	f003 0303 	and.w	r3, r3, #3
 8003792:	4a90      	ldr	r2, [pc, #576]	@ (80039d4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003794:	fa22 f303 	lsr.w	r3, r2, r3
 8003798:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800379a:	e111      	b.n	80039c0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800379c:	4b8d      	ldr	r3, [pc, #564]	@ (80039d4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800379e:	61bb      	str	r3, [r7, #24]
      break;
 80037a0:	e10e      	b.n	80039c0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80037a2:	4b8d      	ldr	r3, [pc, #564]	@ (80039d8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80037a4:	61bb      	str	r3, [r7, #24]
      break;
 80037a6:	e10b      	b.n	80039c0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80037a8:	4b8c      	ldr	r3, [pc, #560]	@ (80039dc <HAL_RCC_GetSysClockFreq+0x2e0>)
 80037aa:	61bb      	str	r3, [r7, #24]
      break;
 80037ac:	e108      	b.n	80039c0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80037ae:	4b88      	ldr	r3, [pc, #544]	@ (80039d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80037b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037b2:	f003 0303 	and.w	r3, r3, #3
 80037b6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80037b8:	4b85      	ldr	r3, [pc, #532]	@ (80039d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80037ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037bc:	091b      	lsrs	r3, r3, #4
 80037be:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80037c2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80037c4:	4b82      	ldr	r3, [pc, #520]	@ (80039d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80037c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037c8:	f003 0301 	and.w	r3, r3, #1
 80037cc:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80037ce:	4b80      	ldr	r3, [pc, #512]	@ (80039d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80037d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037d2:	08db      	lsrs	r3, r3, #3
 80037d4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80037d8:	68fa      	ldr	r2, [r7, #12]
 80037da:	fb02 f303 	mul.w	r3, r2, r3
 80037de:	ee07 3a90 	vmov	s15, r3
 80037e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037e6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80037ea:	693b      	ldr	r3, [r7, #16]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	f000 80e1 	beq.w	80039b4 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 80037f2:	697b      	ldr	r3, [r7, #20]
 80037f4:	2b02      	cmp	r3, #2
 80037f6:	f000 8083 	beq.w	8003900 <HAL_RCC_GetSysClockFreq+0x204>
 80037fa:	697b      	ldr	r3, [r7, #20]
 80037fc:	2b02      	cmp	r3, #2
 80037fe:	f200 80a1 	bhi.w	8003944 <HAL_RCC_GetSysClockFreq+0x248>
 8003802:	697b      	ldr	r3, [r7, #20]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d003      	beq.n	8003810 <HAL_RCC_GetSysClockFreq+0x114>
 8003808:	697b      	ldr	r3, [r7, #20]
 800380a:	2b01      	cmp	r3, #1
 800380c:	d056      	beq.n	80038bc <HAL_RCC_GetSysClockFreq+0x1c0>
 800380e:	e099      	b.n	8003944 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003810:	4b6f      	ldr	r3, [pc, #444]	@ (80039d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f003 0320 	and.w	r3, r3, #32
 8003818:	2b00      	cmp	r3, #0
 800381a:	d02d      	beq.n	8003878 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800381c:	4b6c      	ldr	r3, [pc, #432]	@ (80039d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	08db      	lsrs	r3, r3, #3
 8003822:	f003 0303 	and.w	r3, r3, #3
 8003826:	4a6b      	ldr	r2, [pc, #428]	@ (80039d4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003828:	fa22 f303 	lsr.w	r3, r2, r3
 800382c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	ee07 3a90 	vmov	s15, r3
 8003834:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003838:	693b      	ldr	r3, [r7, #16]
 800383a:	ee07 3a90 	vmov	s15, r3
 800383e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003842:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003846:	4b62      	ldr	r3, [pc, #392]	@ (80039d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800384a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800384e:	ee07 3a90 	vmov	s15, r3
 8003852:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003856:	ed97 6a02 	vldr	s12, [r7, #8]
 800385a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80039e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800385e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003862:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003866:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800386a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800386e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003872:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8003876:	e087      	b.n	8003988 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003878:	693b      	ldr	r3, [r7, #16]
 800387a:	ee07 3a90 	vmov	s15, r3
 800387e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003882:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80039e4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003886:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800388a:	4b51      	ldr	r3, [pc, #324]	@ (80039d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800388c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800388e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003892:	ee07 3a90 	vmov	s15, r3
 8003896:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800389a:	ed97 6a02 	vldr	s12, [r7, #8]
 800389e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80039e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80038a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80038a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80038aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80038ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80038b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038b6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80038ba:	e065      	b.n	8003988 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80038bc:	693b      	ldr	r3, [r7, #16]
 80038be:	ee07 3a90 	vmov	s15, r3
 80038c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038c6:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80039e8 <HAL_RCC_GetSysClockFreq+0x2ec>
 80038ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80038ce:	4b40      	ldr	r3, [pc, #256]	@ (80039d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80038d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038d6:	ee07 3a90 	vmov	s15, r3
 80038da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80038de:	ed97 6a02 	vldr	s12, [r7, #8]
 80038e2:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80039e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80038e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80038ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80038ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80038f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80038f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038fa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80038fe:	e043      	b.n	8003988 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003900:	693b      	ldr	r3, [r7, #16]
 8003902:	ee07 3a90 	vmov	s15, r3
 8003906:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800390a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80039ec <HAL_RCC_GetSysClockFreq+0x2f0>
 800390e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003912:	4b2f      	ldr	r3, [pc, #188]	@ (80039d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003914:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003916:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800391a:	ee07 3a90 	vmov	s15, r3
 800391e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003922:	ed97 6a02 	vldr	s12, [r7, #8]
 8003926:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80039e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800392a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800392e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003932:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003936:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800393a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800393e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003942:	e021      	b.n	8003988 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003944:	693b      	ldr	r3, [r7, #16]
 8003946:	ee07 3a90 	vmov	s15, r3
 800394a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800394e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80039e8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003952:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003956:	4b1e      	ldr	r3, [pc, #120]	@ (80039d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003958:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800395a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800395e:	ee07 3a90 	vmov	s15, r3
 8003962:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003966:	ed97 6a02 	vldr	s12, [r7, #8]
 800396a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80039e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800396e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003972:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003976:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800397a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800397e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003982:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003986:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003988:	4b11      	ldr	r3, [pc, #68]	@ (80039d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800398a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800398c:	0a5b      	lsrs	r3, r3, #9
 800398e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003992:	3301      	adds	r3, #1
 8003994:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	ee07 3a90 	vmov	s15, r3
 800399c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80039a0:	edd7 6a07 	vldr	s13, [r7, #28]
 80039a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80039a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80039ac:	ee17 3a90 	vmov	r3, s15
 80039b0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80039b2:	e005      	b.n	80039c0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80039b4:	2300      	movs	r3, #0
 80039b6:	61bb      	str	r3, [r7, #24]
      break;
 80039b8:	e002      	b.n	80039c0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80039ba:	4b07      	ldr	r3, [pc, #28]	@ (80039d8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80039bc:	61bb      	str	r3, [r7, #24]
      break;
 80039be:	bf00      	nop
  }

  return sysclockfreq;
 80039c0:	69bb      	ldr	r3, [r7, #24]
}
 80039c2:	4618      	mov	r0, r3
 80039c4:	3724      	adds	r7, #36	@ 0x24
 80039c6:	46bd      	mov	sp, r7
 80039c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039cc:	4770      	bx	lr
 80039ce:	bf00      	nop
 80039d0:	58024400 	.word	0x58024400
 80039d4:	03d09000 	.word	0x03d09000
 80039d8:	003d0900 	.word	0x003d0900
 80039dc:	007a1200 	.word	0x007a1200
 80039e0:	46000000 	.word	0x46000000
 80039e4:	4c742400 	.word	0x4c742400
 80039e8:	4a742400 	.word	0x4a742400
 80039ec:	4af42400 	.word	0x4af42400

080039f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b082      	sub	sp, #8
 80039f4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80039f6:	f7ff fe81 	bl	80036fc <HAL_RCC_GetSysClockFreq>
 80039fa:	4602      	mov	r2, r0
 80039fc:	4b10      	ldr	r3, [pc, #64]	@ (8003a40 <HAL_RCC_GetHCLKFreq+0x50>)
 80039fe:	699b      	ldr	r3, [r3, #24]
 8003a00:	0a1b      	lsrs	r3, r3, #8
 8003a02:	f003 030f 	and.w	r3, r3, #15
 8003a06:	490f      	ldr	r1, [pc, #60]	@ (8003a44 <HAL_RCC_GetHCLKFreq+0x54>)
 8003a08:	5ccb      	ldrb	r3, [r1, r3]
 8003a0a:	f003 031f 	and.w	r3, r3, #31
 8003a0e:	fa22 f303 	lsr.w	r3, r2, r3
 8003a12:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003a14:	4b0a      	ldr	r3, [pc, #40]	@ (8003a40 <HAL_RCC_GetHCLKFreq+0x50>)
 8003a16:	699b      	ldr	r3, [r3, #24]
 8003a18:	f003 030f 	and.w	r3, r3, #15
 8003a1c:	4a09      	ldr	r2, [pc, #36]	@ (8003a44 <HAL_RCC_GetHCLKFreq+0x54>)
 8003a1e:	5cd3      	ldrb	r3, [r2, r3]
 8003a20:	f003 031f 	and.w	r3, r3, #31
 8003a24:	687a      	ldr	r2, [r7, #4]
 8003a26:	fa22 f303 	lsr.w	r3, r2, r3
 8003a2a:	4a07      	ldr	r2, [pc, #28]	@ (8003a48 <HAL_RCC_GetHCLKFreq+0x58>)
 8003a2c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003a2e:	4a07      	ldr	r2, [pc, #28]	@ (8003a4c <HAL_RCC_GetHCLKFreq+0x5c>)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003a34:	4b04      	ldr	r3, [pc, #16]	@ (8003a48 <HAL_RCC_GetHCLKFreq+0x58>)
 8003a36:	681b      	ldr	r3, [r3, #0]
}
 8003a38:	4618      	mov	r0, r3
 8003a3a:	3708      	adds	r7, #8
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bd80      	pop	{r7, pc}
 8003a40:	58024400 	.word	0x58024400
 8003a44:	08009648 	.word	0x08009648
 8003a48:	24000004 	.word	0x24000004
 8003a4c:	24000000 	.word	0x24000000

08003a50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003a54:	f7ff ffcc 	bl	80039f0 <HAL_RCC_GetHCLKFreq>
 8003a58:	4602      	mov	r2, r0
 8003a5a:	4b06      	ldr	r3, [pc, #24]	@ (8003a74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a5c:	69db      	ldr	r3, [r3, #28]
 8003a5e:	091b      	lsrs	r3, r3, #4
 8003a60:	f003 0307 	and.w	r3, r3, #7
 8003a64:	4904      	ldr	r1, [pc, #16]	@ (8003a78 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003a66:	5ccb      	ldrb	r3, [r1, r3]
 8003a68:	f003 031f 	and.w	r3, r3, #31
 8003a6c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003a70:	4618      	mov	r0, r3
 8003a72:	bd80      	pop	{r7, pc}
 8003a74:	58024400 	.word	0x58024400
 8003a78:	08009648 	.word	0x08009648

08003a7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003a80:	f7ff ffb6 	bl	80039f0 <HAL_RCC_GetHCLKFreq>
 8003a84:	4602      	mov	r2, r0
 8003a86:	4b06      	ldr	r3, [pc, #24]	@ (8003aa0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a88:	69db      	ldr	r3, [r3, #28]
 8003a8a:	0a1b      	lsrs	r3, r3, #8
 8003a8c:	f003 0307 	and.w	r3, r3, #7
 8003a90:	4904      	ldr	r1, [pc, #16]	@ (8003aa4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003a92:	5ccb      	ldrb	r3, [r1, r3]
 8003a94:	f003 031f 	and.w	r3, r3, #31
 8003a98:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	bd80      	pop	{r7, pc}
 8003aa0:	58024400 	.word	0x58024400
 8003aa4:	08009648 	.word	0x08009648

08003aa8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003aa8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003aac:	b0ca      	sub	sp, #296	@ 0x128
 8003aae:	af00      	add	r7, sp, #0
 8003ab0:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003aba:	2300      	movs	r3, #0
 8003abc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003ac0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ac8:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8003acc:	2500      	movs	r5, #0
 8003ace:	ea54 0305 	orrs.w	r3, r4, r5
 8003ad2:	d049      	beq.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003ad4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ad8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003ada:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003ade:	d02f      	beq.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003ae0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003ae4:	d828      	bhi.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003ae6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003aea:	d01a      	beq.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003aec:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003af0:	d822      	bhi.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d003      	beq.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003af6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003afa:	d007      	beq.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003afc:	e01c      	b.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003afe:	4bb8      	ldr	r3, [pc, #736]	@ (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003b00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b02:	4ab7      	ldr	r2, [pc, #732]	@ (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003b04:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003b08:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003b0a:	e01a      	b.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003b0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b10:	3308      	adds	r3, #8
 8003b12:	2102      	movs	r1, #2
 8003b14:	4618      	mov	r0, r3
 8003b16:	f001 fc8f 	bl	8005438 <RCCEx_PLL2_Config>
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003b20:	e00f      	b.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003b22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b26:	3328      	adds	r3, #40	@ 0x28
 8003b28:	2102      	movs	r1, #2
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	f001 fd36 	bl	800559c <RCCEx_PLL3_Config>
 8003b30:	4603      	mov	r3, r0
 8003b32:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003b36:	e004      	b.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b38:	2301      	movs	r3, #1
 8003b3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003b3e:	e000      	b.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003b40:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b42:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d10a      	bne.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003b4a:	4ba5      	ldr	r3, [pc, #660]	@ (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003b4c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b4e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003b52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b56:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003b58:	4aa1      	ldr	r2, [pc, #644]	@ (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003b5a:	430b      	orrs	r3, r1
 8003b5c:	6513      	str	r3, [r2, #80]	@ 0x50
 8003b5e:	e003      	b.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b60:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b64:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003b68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b70:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8003b74:	f04f 0900 	mov.w	r9, #0
 8003b78:	ea58 0309 	orrs.w	r3, r8, r9
 8003b7c:	d047      	beq.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8003b7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b84:	2b04      	cmp	r3, #4
 8003b86:	d82a      	bhi.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003b88:	a201      	add	r2, pc, #4	@ (adr r2, 8003b90 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003b8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b8e:	bf00      	nop
 8003b90:	08003ba5 	.word	0x08003ba5
 8003b94:	08003bb3 	.word	0x08003bb3
 8003b98:	08003bc9 	.word	0x08003bc9
 8003b9c:	08003be7 	.word	0x08003be7
 8003ba0:	08003be7 	.word	0x08003be7
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ba4:	4b8e      	ldr	r3, [pc, #568]	@ (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003ba6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ba8:	4a8d      	ldr	r2, [pc, #564]	@ (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003baa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003bae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003bb0:	e01a      	b.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003bb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bb6:	3308      	adds	r3, #8
 8003bb8:	2100      	movs	r1, #0
 8003bba:	4618      	mov	r0, r3
 8003bbc:	f001 fc3c 	bl	8005438 <RCCEx_PLL2_Config>
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003bc6:	e00f      	b.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003bc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bcc:	3328      	adds	r3, #40	@ 0x28
 8003bce:	2100      	movs	r1, #0
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	f001 fce3 	bl	800559c <RCCEx_PLL3_Config>
 8003bd6:	4603      	mov	r3, r0
 8003bd8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003bdc:	e004      	b.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003bde:	2301      	movs	r3, #1
 8003be0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003be4:	e000      	b.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8003be6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003be8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d10a      	bne.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003bf0:	4b7b      	ldr	r3, [pc, #492]	@ (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003bf2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003bf4:	f023 0107 	bic.w	r1, r3, #7
 8003bf8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bfc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bfe:	4a78      	ldr	r2, [pc, #480]	@ (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003c00:	430b      	orrs	r3, r1
 8003c02:	6513      	str	r3, [r2, #80]	@ 0x50
 8003c04:	e003      	b.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c06:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c0a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003c0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c16:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8003c1a:	f04f 0b00 	mov.w	fp, #0
 8003c1e:	ea5a 030b 	orrs.w	r3, sl, fp
 8003c22:	d04c      	beq.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8003c24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c2a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003c2e:	d030      	beq.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8003c30:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003c34:	d829      	bhi.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003c36:	2bc0      	cmp	r3, #192	@ 0xc0
 8003c38:	d02d      	beq.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003c3a:	2bc0      	cmp	r3, #192	@ 0xc0
 8003c3c:	d825      	bhi.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003c3e:	2b80      	cmp	r3, #128	@ 0x80
 8003c40:	d018      	beq.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8003c42:	2b80      	cmp	r3, #128	@ 0x80
 8003c44:	d821      	bhi.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d002      	beq.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8003c4a:	2b40      	cmp	r3, #64	@ 0x40
 8003c4c:	d007      	beq.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8003c4e:	e01c      	b.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c50:	4b63      	ldr	r3, [pc, #396]	@ (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003c52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c54:	4a62      	ldr	r2, [pc, #392]	@ (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003c56:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c5a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003c5c:	e01c      	b.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003c5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c62:	3308      	adds	r3, #8
 8003c64:	2100      	movs	r1, #0
 8003c66:	4618      	mov	r0, r3
 8003c68:	f001 fbe6 	bl	8005438 <RCCEx_PLL2_Config>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003c72:	e011      	b.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003c74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c78:	3328      	adds	r3, #40	@ 0x28
 8003c7a:	2100      	movs	r1, #0
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	f001 fc8d 	bl	800559c <RCCEx_PLL3_Config>
 8003c82:	4603      	mov	r3, r0
 8003c84:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003c88:	e006      	b.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003c90:	e002      	b.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003c92:	bf00      	nop
 8003c94:	e000      	b.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003c96:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c98:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d10a      	bne.n	8003cb6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003ca0:	4b4f      	ldr	r3, [pc, #316]	@ (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003ca2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ca4:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8003ca8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cae:	4a4c      	ldr	r2, [pc, #304]	@ (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003cb0:	430b      	orrs	r3, r1
 8003cb2:	6513      	str	r3, [r2, #80]	@ 0x50
 8003cb4:	e003      	b.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cb6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003cba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003cbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cc6:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8003cca:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8003cce:	2300      	movs	r3, #0
 8003cd0:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8003cd4:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8003cd8:	460b      	mov	r3, r1
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	d053      	beq.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8003cde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ce2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003ce6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003cea:	d035      	beq.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8003cec:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003cf0:	d82e      	bhi.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003cf2:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003cf6:	d031      	beq.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8003cf8:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003cfc:	d828      	bhi.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003cfe:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003d02:	d01a      	beq.n	8003d3a <HAL_RCCEx_PeriphCLKConfig+0x292>
 8003d04:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003d08:	d822      	bhi.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d003      	beq.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8003d0e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003d12:	d007      	beq.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8003d14:	e01c      	b.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d16:	4b32      	ldr	r3, [pc, #200]	@ (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003d18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d1a:	4a31      	ldr	r2, [pc, #196]	@ (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003d1c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003d20:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003d22:	e01c      	b.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003d24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d28:	3308      	adds	r3, #8
 8003d2a:	2100      	movs	r1, #0
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	f001 fb83 	bl	8005438 <RCCEx_PLL2_Config>
 8003d32:	4603      	mov	r3, r0
 8003d34:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003d38:	e011      	b.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003d3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d3e:	3328      	adds	r3, #40	@ 0x28
 8003d40:	2100      	movs	r1, #0
 8003d42:	4618      	mov	r0, r3
 8003d44:	f001 fc2a 	bl	800559c <RCCEx_PLL3_Config>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003d4e:	e006      	b.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003d50:	2301      	movs	r3, #1
 8003d52:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003d56:	e002      	b.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003d58:	bf00      	nop
 8003d5a:	e000      	b.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003d5c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d5e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d10b      	bne.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003d66:	4b1e      	ldr	r3, [pc, #120]	@ (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003d68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d6a:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8003d6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d72:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003d76:	4a1a      	ldr	r2, [pc, #104]	@ (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003d78:	430b      	orrs	r3, r1
 8003d7a:	6593      	str	r3, [r2, #88]	@ 0x58
 8003d7c:	e003      	b.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d7e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d82:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003d86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d8e:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8003d92:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8003d96:	2300      	movs	r3, #0
 8003d98:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003d9c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8003da0:	460b      	mov	r3, r1
 8003da2:	4313      	orrs	r3, r2
 8003da4:	d056      	beq.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8003da6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003daa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003dae:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003db2:	d038      	beq.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8003db4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003db8:	d831      	bhi.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003dba:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003dbe:	d034      	beq.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0x382>
 8003dc0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003dc4:	d82b      	bhi.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003dc6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003dca:	d01d      	beq.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8003dcc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003dd0:	d825      	bhi.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d006      	beq.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8003dd6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003dda:	d00a      	beq.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003ddc:	e01f      	b.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003dde:	bf00      	nop
 8003de0:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003de4:	4ba2      	ldr	r3, [pc, #648]	@ (8004070 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003de6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003de8:	4aa1      	ldr	r2, [pc, #644]	@ (8004070 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003dea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003dee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003df0:	e01c      	b.n	8003e2c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003df2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003df6:	3308      	adds	r3, #8
 8003df8:	2100      	movs	r1, #0
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	f001 fb1c 	bl	8005438 <RCCEx_PLL2_Config>
 8003e00:	4603      	mov	r3, r0
 8003e02:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003e06:	e011      	b.n	8003e2c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003e08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e0c:	3328      	adds	r3, #40	@ 0x28
 8003e0e:	2100      	movs	r1, #0
 8003e10:	4618      	mov	r0, r3
 8003e12:	f001 fbc3 	bl	800559c <RCCEx_PLL3_Config>
 8003e16:	4603      	mov	r3, r0
 8003e18:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003e1c:	e006      	b.n	8003e2c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003e24:	e002      	b.n	8003e2c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003e26:	bf00      	nop
 8003e28:	e000      	b.n	8003e2c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003e2a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e2c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d10b      	bne.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003e34:	4b8e      	ldr	r3, [pc, #568]	@ (8004070 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003e36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e38:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8003e3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e40:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003e44:	4a8a      	ldr	r2, [pc, #552]	@ (8004070 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003e46:	430b      	orrs	r3, r1
 8003e48:	6593      	str	r3, [r2, #88]	@ 0x58
 8003e4a:	e003      	b.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e4c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e50:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003e54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e5c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8003e60:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8003e64:	2300      	movs	r3, #0
 8003e66:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8003e6a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8003e6e:	460b      	mov	r3, r1
 8003e70:	4313      	orrs	r3, r2
 8003e72:	d03a      	beq.n	8003eea <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8003e74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e7a:	2b30      	cmp	r3, #48	@ 0x30
 8003e7c:	d01f      	beq.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x416>
 8003e7e:	2b30      	cmp	r3, #48	@ 0x30
 8003e80:	d819      	bhi.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003e82:	2b20      	cmp	r3, #32
 8003e84:	d00c      	beq.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8003e86:	2b20      	cmp	r3, #32
 8003e88:	d815      	bhi.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d019      	beq.n	8003ec2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8003e8e:	2b10      	cmp	r3, #16
 8003e90:	d111      	bne.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e92:	4b77      	ldr	r3, [pc, #476]	@ (8004070 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003e94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e96:	4a76      	ldr	r2, [pc, #472]	@ (8004070 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003e98:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003e9c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003e9e:	e011      	b.n	8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003ea0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ea4:	3308      	adds	r3, #8
 8003ea6:	2102      	movs	r1, #2
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	f001 fac5 	bl	8005438 <RCCEx_PLL2_Config>
 8003eae:	4603      	mov	r3, r0
 8003eb0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003eb4:	e006      	b.n	8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003ebc:	e002      	b.n	8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003ebe:	bf00      	nop
 8003ec0:	e000      	b.n	8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003ec2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ec4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d10a      	bne.n	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003ecc:	4b68      	ldr	r3, [pc, #416]	@ (8004070 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003ece:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ed0:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8003ed4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ed8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003eda:	4a65      	ldr	r2, [pc, #404]	@ (8004070 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003edc:	430b      	orrs	r3, r1
 8003ede:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003ee0:	e003      	b.n	8003eea <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ee2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ee6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003eea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003eee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ef2:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8003ef6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8003efa:	2300      	movs	r3, #0
 8003efc:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8003f00:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8003f04:	460b      	mov	r3, r1
 8003f06:	4313      	orrs	r3, r2
 8003f08:	d051      	beq.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003f0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f0e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f10:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003f14:	d035      	beq.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8003f16:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003f1a:	d82e      	bhi.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003f1c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003f20:	d031      	beq.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8003f22:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003f26:	d828      	bhi.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003f28:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f2c:	d01a      	beq.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8003f2e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f32:	d822      	bhi.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d003      	beq.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8003f38:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f3c:	d007      	beq.n	8003f4e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8003f3e:	e01c      	b.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f40:	4b4b      	ldr	r3, [pc, #300]	@ (8004070 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003f42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f44:	4a4a      	ldr	r2, [pc, #296]	@ (8004070 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003f46:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003f4a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003f4c:	e01c      	b.n	8003f88 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003f4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f52:	3308      	adds	r3, #8
 8003f54:	2100      	movs	r1, #0
 8003f56:	4618      	mov	r0, r3
 8003f58:	f001 fa6e 	bl	8005438 <RCCEx_PLL2_Config>
 8003f5c:	4603      	mov	r3, r0
 8003f5e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003f62:	e011      	b.n	8003f88 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003f64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f68:	3328      	adds	r3, #40	@ 0x28
 8003f6a:	2100      	movs	r1, #0
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	f001 fb15 	bl	800559c <RCCEx_PLL3_Config>
 8003f72:	4603      	mov	r3, r0
 8003f74:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003f78:	e006      	b.n	8003f88 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003f80:	e002      	b.n	8003f88 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003f82:	bf00      	nop
 8003f84:	e000      	b.n	8003f88 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003f86:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f88:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d10a      	bne.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003f90:	4b37      	ldr	r3, [pc, #220]	@ (8004070 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003f92:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f94:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8003f98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f9e:	4a34      	ldr	r2, [pc, #208]	@ (8004070 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003fa0:	430b      	orrs	r3, r1
 8003fa2:	6513      	str	r3, [r2, #80]	@ 0x50
 8003fa4:	e003      	b.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fa6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003faa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003fae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fb6:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8003fba:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003fc4:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8003fc8:	460b      	mov	r3, r1
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	d056      	beq.n	800407c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003fce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fd2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003fd4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003fd8:	d033      	beq.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8003fda:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003fde:	d82c      	bhi.n	800403a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003fe0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003fe4:	d02f      	beq.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8003fe6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003fea:	d826      	bhi.n	800403a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003fec:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003ff0:	d02b      	beq.n	800404a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8003ff2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003ff6:	d820      	bhi.n	800403a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003ff8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003ffc:	d012      	beq.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8003ffe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004002:	d81a      	bhi.n	800403a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004004:	2b00      	cmp	r3, #0
 8004006:	d022      	beq.n	800404e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8004008:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800400c:	d115      	bne.n	800403a <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800400e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004012:	3308      	adds	r3, #8
 8004014:	2101      	movs	r1, #1
 8004016:	4618      	mov	r0, r3
 8004018:	f001 fa0e 	bl	8005438 <RCCEx_PLL2_Config>
 800401c:	4603      	mov	r3, r0
 800401e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004022:	e015      	b.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004024:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004028:	3328      	adds	r3, #40	@ 0x28
 800402a:	2101      	movs	r1, #1
 800402c:	4618      	mov	r0, r3
 800402e:	f001 fab5 	bl	800559c <RCCEx_PLL3_Config>
 8004032:	4603      	mov	r3, r0
 8004034:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004038:	e00a      	b.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800403a:	2301      	movs	r3, #1
 800403c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004040:	e006      	b.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004042:	bf00      	nop
 8004044:	e004      	b.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004046:	bf00      	nop
 8004048:	e002      	b.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800404a:	bf00      	nop
 800404c:	e000      	b.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800404e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004050:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004054:	2b00      	cmp	r3, #0
 8004056:	d10d      	bne.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004058:	4b05      	ldr	r3, [pc, #20]	@ (8004070 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800405a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800405c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8004060:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004064:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004066:	4a02      	ldr	r2, [pc, #8]	@ (8004070 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004068:	430b      	orrs	r3, r1
 800406a:	6513      	str	r3, [r2, #80]	@ 0x50
 800406c:	e006      	b.n	800407c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800406e:	bf00      	nop
 8004070:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004074:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004078:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800407c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004084:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8004088:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800408c:	2300      	movs	r3, #0
 800408e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004092:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8004096:	460b      	mov	r3, r1
 8004098:	4313      	orrs	r3, r2
 800409a:	d055      	beq.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800409c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040a0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80040a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80040a8:	d033      	beq.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80040aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80040ae:	d82c      	bhi.n	800410a <HAL_RCCEx_PeriphCLKConfig+0x662>
 80040b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80040b4:	d02f      	beq.n	8004116 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80040b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80040ba:	d826      	bhi.n	800410a <HAL_RCCEx_PeriphCLKConfig+0x662>
 80040bc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80040c0:	d02b      	beq.n	800411a <HAL_RCCEx_PeriphCLKConfig+0x672>
 80040c2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80040c6:	d820      	bhi.n	800410a <HAL_RCCEx_PeriphCLKConfig+0x662>
 80040c8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80040cc:	d012      	beq.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80040ce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80040d2:	d81a      	bhi.n	800410a <HAL_RCCEx_PeriphCLKConfig+0x662>
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d022      	beq.n	800411e <HAL_RCCEx_PeriphCLKConfig+0x676>
 80040d8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80040dc:	d115      	bne.n	800410a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80040de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040e2:	3308      	adds	r3, #8
 80040e4:	2101      	movs	r1, #1
 80040e6:	4618      	mov	r0, r3
 80040e8:	f001 f9a6 	bl	8005438 <RCCEx_PLL2_Config>
 80040ec:	4603      	mov	r3, r0
 80040ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80040f2:	e015      	b.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80040f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040f8:	3328      	adds	r3, #40	@ 0x28
 80040fa:	2101      	movs	r1, #1
 80040fc:	4618      	mov	r0, r3
 80040fe:	f001 fa4d 	bl	800559c <RCCEx_PLL3_Config>
 8004102:	4603      	mov	r3, r0
 8004104:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004108:	e00a      	b.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800410a:	2301      	movs	r3, #1
 800410c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004110:	e006      	b.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004112:	bf00      	nop
 8004114:	e004      	b.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004116:	bf00      	nop
 8004118:	e002      	b.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800411a:	bf00      	nop
 800411c:	e000      	b.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800411e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004120:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004124:	2b00      	cmp	r3, #0
 8004126:	d10b      	bne.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004128:	4ba3      	ldr	r3, [pc, #652]	@ (80043b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800412a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800412c:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8004130:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004134:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004138:	4a9f      	ldr	r2, [pc, #636]	@ (80043b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800413a:	430b      	orrs	r3, r1
 800413c:	6593      	str	r3, [r2, #88]	@ 0x58
 800413e:	e003      	b.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004140:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004144:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004148:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800414c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004150:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8004154:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004158:	2300      	movs	r3, #0
 800415a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800415e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004162:	460b      	mov	r3, r1
 8004164:	4313      	orrs	r3, r2
 8004166:	d037      	beq.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8004168:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800416c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800416e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004172:	d00e      	beq.n	8004192 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8004174:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004178:	d816      	bhi.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800417a:	2b00      	cmp	r3, #0
 800417c:	d018      	beq.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800417e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004182:	d111      	bne.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004184:	4b8c      	ldr	r3, [pc, #560]	@ (80043b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004186:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004188:	4a8b      	ldr	r2, [pc, #556]	@ (80043b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800418a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800418e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004190:	e00f      	b.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004192:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004196:	3308      	adds	r3, #8
 8004198:	2101      	movs	r1, #1
 800419a:	4618      	mov	r0, r3
 800419c:	f001 f94c 	bl	8005438 <RCCEx_PLL2_Config>
 80041a0:	4603      	mov	r3, r0
 80041a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80041a6:	e004      	b.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80041a8:	2301      	movs	r3, #1
 80041aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80041ae:	e000      	b.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80041b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d10a      	bne.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80041ba:	4b7f      	ldr	r3, [pc, #508]	@ (80043b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80041bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041be:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80041c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041c8:	4a7b      	ldr	r2, [pc, #492]	@ (80043b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80041ca:	430b      	orrs	r3, r1
 80041cc:	6513      	str	r3, [r2, #80]	@ 0x50
 80041ce:	e003      	b.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041d0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80041d4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80041d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041e0:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80041e4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80041e8:	2300      	movs	r3, #0
 80041ea:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80041ee:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80041f2:	460b      	mov	r3, r1
 80041f4:	4313      	orrs	r3, r2
 80041f6:	d039      	beq.n	800426c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80041f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80041fe:	2b03      	cmp	r3, #3
 8004200:	d81c      	bhi.n	800423c <HAL_RCCEx_PeriphCLKConfig+0x794>
 8004202:	a201      	add	r2, pc, #4	@ (adr r2, 8004208 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8004204:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004208:	08004245 	.word	0x08004245
 800420c:	08004219 	.word	0x08004219
 8004210:	08004227 	.word	0x08004227
 8004214:	08004245 	.word	0x08004245
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004218:	4b67      	ldr	r3, [pc, #412]	@ (80043b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800421a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800421c:	4a66      	ldr	r2, [pc, #408]	@ (80043b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800421e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004222:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004224:	e00f      	b.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004226:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800422a:	3308      	adds	r3, #8
 800422c:	2102      	movs	r1, #2
 800422e:	4618      	mov	r0, r3
 8004230:	f001 f902 	bl	8005438 <RCCEx_PLL2_Config>
 8004234:	4603      	mov	r3, r0
 8004236:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800423a:	e004      	b.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800423c:	2301      	movs	r3, #1
 800423e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004242:	e000      	b.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8004244:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004246:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800424a:	2b00      	cmp	r3, #0
 800424c:	d10a      	bne.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800424e:	4b5a      	ldr	r3, [pc, #360]	@ (80043b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004250:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004252:	f023 0103 	bic.w	r1, r3, #3
 8004256:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800425a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800425c:	4a56      	ldr	r2, [pc, #344]	@ (80043b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800425e:	430b      	orrs	r3, r1
 8004260:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004262:	e003      	b.n	800426c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004264:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004268:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800426c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004274:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8004278:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800427c:	2300      	movs	r3, #0
 800427e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004282:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8004286:	460b      	mov	r3, r1
 8004288:	4313      	orrs	r3, r2
 800428a:	f000 809f 	beq.w	80043cc <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800428e:	4b4b      	ldr	r3, [pc, #300]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4a4a      	ldr	r2, [pc, #296]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004294:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004298:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800429a:	f7fc fffd 	bl	8001298 <HAL_GetTick>
 800429e:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80042a2:	e00b      	b.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042a4:	f7fc fff8 	bl	8001298 <HAL_GetTick>
 80042a8:	4602      	mov	r2, r0
 80042aa:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80042ae:	1ad3      	subs	r3, r2, r3
 80042b0:	2b64      	cmp	r3, #100	@ 0x64
 80042b2:	d903      	bls.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80042b4:	2303      	movs	r3, #3
 80042b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80042ba:	e005      	b.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80042bc:	4b3f      	ldr	r3, [pc, #252]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d0ed      	beq.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80042c8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d179      	bne.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80042d0:	4b39      	ldr	r3, [pc, #228]	@ (80043b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80042d2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80042d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042d8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80042dc:	4053      	eors	r3, r2
 80042de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d015      	beq.n	8004312 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80042e6:	4b34      	ldr	r3, [pc, #208]	@ (80043b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80042e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042ea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80042ee:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80042f2:	4b31      	ldr	r3, [pc, #196]	@ (80043b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80042f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042f6:	4a30      	ldr	r2, [pc, #192]	@ (80043b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80042f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80042fc:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80042fe:	4b2e      	ldr	r3, [pc, #184]	@ (80043b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004300:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004302:	4a2d      	ldr	r2, [pc, #180]	@ (80043b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004304:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004308:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800430a:	4a2b      	ldr	r2, [pc, #172]	@ (80043b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800430c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004310:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004312:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004316:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800431a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800431e:	d118      	bne.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004320:	f7fc ffba 	bl	8001298 <HAL_GetTick>
 8004324:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004328:	e00d      	b.n	8004346 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800432a:	f7fc ffb5 	bl	8001298 <HAL_GetTick>
 800432e:	4602      	mov	r2, r0
 8004330:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8004334:	1ad2      	subs	r2, r2, r3
 8004336:	f241 3388 	movw	r3, #5000	@ 0x1388
 800433a:	429a      	cmp	r2, r3
 800433c:	d903      	bls.n	8004346 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800433e:	2303      	movs	r3, #3
 8004340:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8004344:	e005      	b.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004346:	4b1c      	ldr	r3, [pc, #112]	@ (80043b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004348:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800434a:	f003 0302 	and.w	r3, r3, #2
 800434e:	2b00      	cmp	r3, #0
 8004350:	d0eb      	beq.n	800432a <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8004352:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004356:	2b00      	cmp	r3, #0
 8004358:	d129      	bne.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800435a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800435e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004362:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004366:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800436a:	d10e      	bne.n	800438a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800436c:	4b12      	ldr	r3, [pc, #72]	@ (80043b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800436e:	691b      	ldr	r3, [r3, #16]
 8004370:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8004374:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004378:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800437c:	091a      	lsrs	r2, r3, #4
 800437e:	4b10      	ldr	r3, [pc, #64]	@ (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8004380:	4013      	ands	r3, r2
 8004382:	4a0d      	ldr	r2, [pc, #52]	@ (80043b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004384:	430b      	orrs	r3, r1
 8004386:	6113      	str	r3, [r2, #16]
 8004388:	e005      	b.n	8004396 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800438a:	4b0b      	ldr	r3, [pc, #44]	@ (80043b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800438c:	691b      	ldr	r3, [r3, #16]
 800438e:	4a0a      	ldr	r2, [pc, #40]	@ (80043b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004390:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004394:	6113      	str	r3, [r2, #16]
 8004396:	4b08      	ldr	r3, [pc, #32]	@ (80043b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004398:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800439a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800439e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80043a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043a6:	4a04      	ldr	r2, [pc, #16]	@ (80043b8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80043a8:	430b      	orrs	r3, r1
 80043aa:	6713      	str	r3, [r2, #112]	@ 0x70
 80043ac:	e00e      	b.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80043ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80043b2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 80043b6:	e009      	b.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0x924>
 80043b8:	58024400 	.word	0x58024400
 80043bc:	58024800 	.word	0x58024800
 80043c0:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043c4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80043c8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80043cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043d4:	f002 0301 	and.w	r3, r2, #1
 80043d8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80043dc:	2300      	movs	r3, #0
 80043de:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80043e2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80043e6:	460b      	mov	r3, r1
 80043e8:	4313      	orrs	r3, r2
 80043ea:	f000 8089 	beq.w	8004500 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80043ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043f2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80043f4:	2b28      	cmp	r3, #40	@ 0x28
 80043f6:	d86b      	bhi.n	80044d0 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80043f8:	a201      	add	r2, pc, #4	@ (adr r2, 8004400 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80043fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043fe:	bf00      	nop
 8004400:	080044d9 	.word	0x080044d9
 8004404:	080044d1 	.word	0x080044d1
 8004408:	080044d1 	.word	0x080044d1
 800440c:	080044d1 	.word	0x080044d1
 8004410:	080044d1 	.word	0x080044d1
 8004414:	080044d1 	.word	0x080044d1
 8004418:	080044d1 	.word	0x080044d1
 800441c:	080044d1 	.word	0x080044d1
 8004420:	080044a5 	.word	0x080044a5
 8004424:	080044d1 	.word	0x080044d1
 8004428:	080044d1 	.word	0x080044d1
 800442c:	080044d1 	.word	0x080044d1
 8004430:	080044d1 	.word	0x080044d1
 8004434:	080044d1 	.word	0x080044d1
 8004438:	080044d1 	.word	0x080044d1
 800443c:	080044d1 	.word	0x080044d1
 8004440:	080044bb 	.word	0x080044bb
 8004444:	080044d1 	.word	0x080044d1
 8004448:	080044d1 	.word	0x080044d1
 800444c:	080044d1 	.word	0x080044d1
 8004450:	080044d1 	.word	0x080044d1
 8004454:	080044d1 	.word	0x080044d1
 8004458:	080044d1 	.word	0x080044d1
 800445c:	080044d1 	.word	0x080044d1
 8004460:	080044d9 	.word	0x080044d9
 8004464:	080044d1 	.word	0x080044d1
 8004468:	080044d1 	.word	0x080044d1
 800446c:	080044d1 	.word	0x080044d1
 8004470:	080044d1 	.word	0x080044d1
 8004474:	080044d1 	.word	0x080044d1
 8004478:	080044d1 	.word	0x080044d1
 800447c:	080044d1 	.word	0x080044d1
 8004480:	080044d9 	.word	0x080044d9
 8004484:	080044d1 	.word	0x080044d1
 8004488:	080044d1 	.word	0x080044d1
 800448c:	080044d1 	.word	0x080044d1
 8004490:	080044d1 	.word	0x080044d1
 8004494:	080044d1 	.word	0x080044d1
 8004498:	080044d1 	.word	0x080044d1
 800449c:	080044d1 	.word	0x080044d1
 80044a0:	080044d9 	.word	0x080044d9
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80044a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044a8:	3308      	adds	r3, #8
 80044aa:	2101      	movs	r1, #1
 80044ac:	4618      	mov	r0, r3
 80044ae:	f000 ffc3 	bl	8005438 <RCCEx_PLL2_Config>
 80044b2:	4603      	mov	r3, r0
 80044b4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80044b8:	e00f      	b.n	80044da <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80044ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044be:	3328      	adds	r3, #40	@ 0x28
 80044c0:	2101      	movs	r1, #1
 80044c2:	4618      	mov	r0, r3
 80044c4:	f001 f86a 	bl	800559c <RCCEx_PLL3_Config>
 80044c8:	4603      	mov	r3, r0
 80044ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80044ce:	e004      	b.n	80044da <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80044d0:	2301      	movs	r3, #1
 80044d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80044d6:	e000      	b.n	80044da <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80044d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80044da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d10a      	bne.n	80044f8 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80044e2:	4bbf      	ldr	r3, [pc, #764]	@ (80047e0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80044e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044e6:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80044ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044ee:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80044f0:	4abb      	ldr	r2, [pc, #748]	@ (80047e0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80044f2:	430b      	orrs	r3, r1
 80044f4:	6553      	str	r3, [r2, #84]	@ 0x54
 80044f6:	e003      	b.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044f8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80044fc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004500:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004508:	f002 0302 	and.w	r3, r2, #2
 800450c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004510:	2300      	movs	r3, #0
 8004512:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8004516:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800451a:	460b      	mov	r3, r1
 800451c:	4313      	orrs	r3, r2
 800451e:	d041      	beq.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8004520:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004524:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004526:	2b05      	cmp	r3, #5
 8004528:	d824      	bhi.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800452a:	a201      	add	r2, pc, #4	@ (adr r2, 8004530 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800452c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004530:	0800457d 	.word	0x0800457d
 8004534:	08004549 	.word	0x08004549
 8004538:	0800455f 	.word	0x0800455f
 800453c:	0800457d 	.word	0x0800457d
 8004540:	0800457d 	.word	0x0800457d
 8004544:	0800457d 	.word	0x0800457d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004548:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800454c:	3308      	adds	r3, #8
 800454e:	2101      	movs	r1, #1
 8004550:	4618      	mov	r0, r3
 8004552:	f000 ff71 	bl	8005438 <RCCEx_PLL2_Config>
 8004556:	4603      	mov	r3, r0
 8004558:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800455c:	e00f      	b.n	800457e <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800455e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004562:	3328      	adds	r3, #40	@ 0x28
 8004564:	2101      	movs	r1, #1
 8004566:	4618      	mov	r0, r3
 8004568:	f001 f818 	bl	800559c <RCCEx_PLL3_Config>
 800456c:	4603      	mov	r3, r0
 800456e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004572:	e004      	b.n	800457e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004574:	2301      	movs	r3, #1
 8004576:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800457a:	e000      	b.n	800457e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800457c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800457e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004582:	2b00      	cmp	r3, #0
 8004584:	d10a      	bne.n	800459c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004586:	4b96      	ldr	r3, [pc, #600]	@ (80047e0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004588:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800458a:	f023 0107 	bic.w	r1, r3, #7
 800458e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004592:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004594:	4a92      	ldr	r2, [pc, #584]	@ (80047e0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004596:	430b      	orrs	r3, r1
 8004598:	6553      	str	r3, [r2, #84]	@ 0x54
 800459a:	e003      	b.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800459c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80045a0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80045a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045ac:	f002 0304 	and.w	r3, r2, #4
 80045b0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80045b4:	2300      	movs	r3, #0
 80045b6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80045ba:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80045be:	460b      	mov	r3, r1
 80045c0:	4313      	orrs	r3, r2
 80045c2:	d044      	beq.n	800464e <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80045c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80045cc:	2b05      	cmp	r3, #5
 80045ce:	d825      	bhi.n	800461c <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80045d0:	a201      	add	r2, pc, #4	@ (adr r2, 80045d8 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80045d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045d6:	bf00      	nop
 80045d8:	08004625 	.word	0x08004625
 80045dc:	080045f1 	.word	0x080045f1
 80045e0:	08004607 	.word	0x08004607
 80045e4:	08004625 	.word	0x08004625
 80045e8:	08004625 	.word	0x08004625
 80045ec:	08004625 	.word	0x08004625
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80045f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045f4:	3308      	adds	r3, #8
 80045f6:	2101      	movs	r1, #1
 80045f8:	4618      	mov	r0, r3
 80045fa:	f000 ff1d 	bl	8005438 <RCCEx_PLL2_Config>
 80045fe:	4603      	mov	r3, r0
 8004600:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004604:	e00f      	b.n	8004626 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004606:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800460a:	3328      	adds	r3, #40	@ 0x28
 800460c:	2101      	movs	r1, #1
 800460e:	4618      	mov	r0, r3
 8004610:	f000 ffc4 	bl	800559c <RCCEx_PLL3_Config>
 8004614:	4603      	mov	r3, r0
 8004616:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800461a:	e004      	b.n	8004626 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800461c:	2301      	movs	r3, #1
 800461e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004622:	e000      	b.n	8004626 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8004624:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004626:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800462a:	2b00      	cmp	r3, #0
 800462c:	d10b      	bne.n	8004646 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800462e:	4b6c      	ldr	r3, [pc, #432]	@ (80047e0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004630:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004632:	f023 0107 	bic.w	r1, r3, #7
 8004636:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800463a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800463e:	4a68      	ldr	r2, [pc, #416]	@ (80047e0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004640:	430b      	orrs	r3, r1
 8004642:	6593      	str	r3, [r2, #88]	@ 0x58
 8004644:	e003      	b.n	800464e <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004646:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800464a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800464e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004652:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004656:	f002 0320 	and.w	r3, r2, #32
 800465a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800465e:	2300      	movs	r3, #0
 8004660:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004664:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004668:	460b      	mov	r3, r1
 800466a:	4313      	orrs	r3, r2
 800466c:	d055      	beq.n	800471a <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800466e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004672:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004676:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800467a:	d033      	beq.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800467c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004680:	d82c      	bhi.n	80046dc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004682:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004686:	d02f      	beq.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8004688:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800468c:	d826      	bhi.n	80046dc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800468e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004692:	d02b      	beq.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8004694:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004698:	d820      	bhi.n	80046dc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800469a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800469e:	d012      	beq.n	80046c6 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80046a0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80046a4:	d81a      	bhi.n	80046dc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d022      	beq.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80046aa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80046ae:	d115      	bne.n	80046dc <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80046b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046b4:	3308      	adds	r3, #8
 80046b6:	2100      	movs	r1, #0
 80046b8:	4618      	mov	r0, r3
 80046ba:	f000 febd 	bl	8005438 <RCCEx_PLL2_Config>
 80046be:	4603      	mov	r3, r0
 80046c0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80046c4:	e015      	b.n	80046f2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80046c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046ca:	3328      	adds	r3, #40	@ 0x28
 80046cc:	2102      	movs	r1, #2
 80046ce:	4618      	mov	r0, r3
 80046d0:	f000 ff64 	bl	800559c <RCCEx_PLL3_Config>
 80046d4:	4603      	mov	r3, r0
 80046d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80046da:	e00a      	b.n	80046f2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80046dc:	2301      	movs	r3, #1
 80046de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80046e2:	e006      	b.n	80046f2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80046e4:	bf00      	nop
 80046e6:	e004      	b.n	80046f2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80046e8:	bf00      	nop
 80046ea:	e002      	b.n	80046f2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80046ec:	bf00      	nop
 80046ee:	e000      	b.n	80046f2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80046f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80046f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d10b      	bne.n	8004712 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80046fa:	4b39      	ldr	r3, [pc, #228]	@ (80047e0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80046fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046fe:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8004702:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004706:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800470a:	4a35      	ldr	r2, [pc, #212]	@ (80047e0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800470c:	430b      	orrs	r3, r1
 800470e:	6553      	str	r3, [r2, #84]	@ 0x54
 8004710:	e003      	b.n	800471a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004712:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004716:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800471a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800471e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004722:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8004726:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800472a:	2300      	movs	r3, #0
 800472c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004730:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8004734:	460b      	mov	r3, r1
 8004736:	4313      	orrs	r3, r2
 8004738:	d058      	beq.n	80047ec <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800473a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800473e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004742:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004746:	d033      	beq.n	80047b0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8004748:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800474c:	d82c      	bhi.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800474e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004752:	d02f      	beq.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8004754:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004758:	d826      	bhi.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800475a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800475e:	d02b      	beq.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8004760:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004764:	d820      	bhi.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004766:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800476a:	d012      	beq.n	8004792 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800476c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004770:	d81a      	bhi.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004772:	2b00      	cmp	r3, #0
 8004774:	d022      	beq.n	80047bc <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8004776:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800477a:	d115      	bne.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800477c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004780:	3308      	adds	r3, #8
 8004782:	2100      	movs	r1, #0
 8004784:	4618      	mov	r0, r3
 8004786:	f000 fe57 	bl	8005438 <RCCEx_PLL2_Config>
 800478a:	4603      	mov	r3, r0
 800478c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004790:	e015      	b.n	80047be <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004792:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004796:	3328      	adds	r3, #40	@ 0x28
 8004798:	2102      	movs	r1, #2
 800479a:	4618      	mov	r0, r3
 800479c:	f000 fefe 	bl	800559c <RCCEx_PLL3_Config>
 80047a0:	4603      	mov	r3, r0
 80047a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80047a6:	e00a      	b.n	80047be <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80047a8:	2301      	movs	r3, #1
 80047aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80047ae:	e006      	b.n	80047be <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80047b0:	bf00      	nop
 80047b2:	e004      	b.n	80047be <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80047b4:	bf00      	nop
 80047b6:	e002      	b.n	80047be <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80047b8:	bf00      	nop
 80047ba:	e000      	b.n	80047be <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80047bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80047be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d10e      	bne.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80047c6:	4b06      	ldr	r3, [pc, #24]	@ (80047e0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80047c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047ca:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80047ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047d2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80047d6:	4a02      	ldr	r2, [pc, #8]	@ (80047e0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80047d8:	430b      	orrs	r3, r1
 80047da:	6593      	str	r3, [r2, #88]	@ 0x58
 80047dc:	e006      	b.n	80047ec <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80047de:	bf00      	nop
 80047e0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047e4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80047e8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80047ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047f4:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80047f8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80047fc:	2300      	movs	r3, #0
 80047fe:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004802:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8004806:	460b      	mov	r3, r1
 8004808:	4313      	orrs	r3, r2
 800480a:	d055      	beq.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800480c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004810:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004814:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004818:	d033      	beq.n	8004882 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800481a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800481e:	d82c      	bhi.n	800487a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004820:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004824:	d02f      	beq.n	8004886 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8004826:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800482a:	d826      	bhi.n	800487a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800482c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004830:	d02b      	beq.n	800488a <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8004832:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004836:	d820      	bhi.n	800487a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004838:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800483c:	d012      	beq.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800483e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004842:	d81a      	bhi.n	800487a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004844:	2b00      	cmp	r3, #0
 8004846:	d022      	beq.n	800488e <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8004848:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800484c:	d115      	bne.n	800487a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800484e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004852:	3308      	adds	r3, #8
 8004854:	2100      	movs	r1, #0
 8004856:	4618      	mov	r0, r3
 8004858:	f000 fdee 	bl	8005438 <RCCEx_PLL2_Config>
 800485c:	4603      	mov	r3, r0
 800485e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004862:	e015      	b.n	8004890 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004864:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004868:	3328      	adds	r3, #40	@ 0x28
 800486a:	2102      	movs	r1, #2
 800486c:	4618      	mov	r0, r3
 800486e:	f000 fe95 	bl	800559c <RCCEx_PLL3_Config>
 8004872:	4603      	mov	r3, r0
 8004874:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004878:	e00a      	b.n	8004890 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800487a:	2301      	movs	r3, #1
 800487c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004880:	e006      	b.n	8004890 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004882:	bf00      	nop
 8004884:	e004      	b.n	8004890 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004886:	bf00      	nop
 8004888:	e002      	b.n	8004890 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800488a:	bf00      	nop
 800488c:	e000      	b.n	8004890 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800488e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004890:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004894:	2b00      	cmp	r3, #0
 8004896:	d10b      	bne.n	80048b0 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004898:	4ba1      	ldr	r3, [pc, #644]	@ (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800489a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800489c:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80048a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048a4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80048a8:	4a9d      	ldr	r2, [pc, #628]	@ (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80048aa:	430b      	orrs	r3, r1
 80048ac:	6593      	str	r3, [r2, #88]	@ 0x58
 80048ae:	e003      	b.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048b0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80048b4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80048b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048c0:	f002 0308 	and.w	r3, r2, #8
 80048c4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80048c8:	2300      	movs	r3, #0
 80048ca:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80048ce:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80048d2:	460b      	mov	r3, r1
 80048d4:	4313      	orrs	r3, r2
 80048d6:	d01e      	beq.n	8004916 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80048d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80048e0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80048e4:	d10c      	bne.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80048e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048ea:	3328      	adds	r3, #40	@ 0x28
 80048ec:	2102      	movs	r1, #2
 80048ee:	4618      	mov	r0, r3
 80048f0:	f000 fe54 	bl	800559c <RCCEx_PLL3_Config>
 80048f4:	4603      	mov	r3, r0
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d002      	beq.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80048fa:	2301      	movs	r3, #1
 80048fc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004900:	4b87      	ldr	r3, [pc, #540]	@ (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004902:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004904:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004908:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800490c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004910:	4a83      	ldr	r2, [pc, #524]	@ (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004912:	430b      	orrs	r3, r1
 8004914:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004916:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800491a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800491e:	f002 0310 	and.w	r3, r2, #16
 8004922:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004926:	2300      	movs	r3, #0
 8004928:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800492c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8004930:	460b      	mov	r3, r1
 8004932:	4313      	orrs	r3, r2
 8004934:	d01e      	beq.n	8004974 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8004936:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800493a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800493e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004942:	d10c      	bne.n	800495e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004944:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004948:	3328      	adds	r3, #40	@ 0x28
 800494a:	2102      	movs	r1, #2
 800494c:	4618      	mov	r0, r3
 800494e:	f000 fe25 	bl	800559c <RCCEx_PLL3_Config>
 8004952:	4603      	mov	r3, r0
 8004954:	2b00      	cmp	r3, #0
 8004956:	d002      	beq.n	800495e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8004958:	2301      	movs	r3, #1
 800495a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800495e:	4b70      	ldr	r3, [pc, #448]	@ (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004960:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004962:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004966:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800496a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800496e:	4a6c      	ldr	r2, [pc, #432]	@ (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004970:	430b      	orrs	r3, r1
 8004972:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004974:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004978:	e9d3 2300 	ldrd	r2, r3, [r3]
 800497c:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8004980:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004984:	2300      	movs	r3, #0
 8004986:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800498a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800498e:	460b      	mov	r3, r1
 8004990:	4313      	orrs	r3, r2
 8004992:	d03e      	beq.n	8004a12 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004994:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004998:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800499c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80049a0:	d022      	beq.n	80049e8 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80049a2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80049a6:	d81b      	bhi.n	80049e0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d003      	beq.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80049ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80049b0:	d00b      	beq.n	80049ca <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80049b2:	e015      	b.n	80049e0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80049b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049b8:	3308      	adds	r3, #8
 80049ba:	2100      	movs	r1, #0
 80049bc:	4618      	mov	r0, r3
 80049be:	f000 fd3b 	bl	8005438 <RCCEx_PLL2_Config>
 80049c2:	4603      	mov	r3, r0
 80049c4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80049c8:	e00f      	b.n	80049ea <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80049ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049ce:	3328      	adds	r3, #40	@ 0x28
 80049d0:	2102      	movs	r1, #2
 80049d2:	4618      	mov	r0, r3
 80049d4:	f000 fde2 	bl	800559c <RCCEx_PLL3_Config>
 80049d8:	4603      	mov	r3, r0
 80049da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80049de:	e004      	b.n	80049ea <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80049e0:	2301      	movs	r3, #1
 80049e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80049e6:	e000      	b.n	80049ea <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80049e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80049ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d10b      	bne.n	8004a0a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80049f2:	4b4b      	ldr	r3, [pc, #300]	@ (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80049f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049f6:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80049fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049fe:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004a02:	4a47      	ldr	r2, [pc, #284]	@ (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004a04:	430b      	orrs	r3, r1
 8004a06:	6593      	str	r3, [r2, #88]	@ 0x58
 8004a08:	e003      	b.n	8004a12 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a0a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a0e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004a12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a1a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8004a1e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004a20:	2300      	movs	r3, #0
 8004a22:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004a24:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8004a28:	460b      	mov	r3, r1
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	d03b      	beq.n	8004aa6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8004a2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a36:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004a3a:	d01f      	beq.n	8004a7c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8004a3c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004a40:	d818      	bhi.n	8004a74 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8004a42:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004a46:	d003      	beq.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8004a48:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004a4c:	d007      	beq.n	8004a5e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8004a4e:	e011      	b.n	8004a74 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a50:	4b33      	ldr	r3, [pc, #204]	@ (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004a52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a54:	4a32      	ldr	r2, [pc, #200]	@ (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004a56:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004a5a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004a5c:	e00f      	b.n	8004a7e <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004a5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a62:	3328      	adds	r3, #40	@ 0x28
 8004a64:	2101      	movs	r1, #1
 8004a66:	4618      	mov	r0, r3
 8004a68:	f000 fd98 	bl	800559c <RCCEx_PLL3_Config>
 8004a6c:	4603      	mov	r3, r0
 8004a6e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8004a72:	e004      	b.n	8004a7e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a74:	2301      	movs	r3, #1
 8004a76:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004a7a:	e000      	b.n	8004a7e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8004a7c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a7e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d10b      	bne.n	8004a9e <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004a86:	4b26      	ldr	r3, [pc, #152]	@ (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004a88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a8a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004a8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a96:	4a22      	ldr	r2, [pc, #136]	@ (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004a98:	430b      	orrs	r3, r1
 8004a9a:	6553      	str	r3, [r2, #84]	@ 0x54
 8004a9c:	e003      	b.n	8004aa6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a9e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004aa2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004aa6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aae:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8004ab2:	673b      	str	r3, [r7, #112]	@ 0x70
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	677b      	str	r3, [r7, #116]	@ 0x74
 8004ab8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8004abc:	460b      	mov	r3, r1
 8004abe:	4313      	orrs	r3, r2
 8004ac0:	d034      	beq.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8004ac2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ac6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d003      	beq.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8004acc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ad0:	d007      	beq.n	8004ae2 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8004ad2:	e011      	b.n	8004af8 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ad4:	4b12      	ldr	r3, [pc, #72]	@ (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004ad6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ad8:	4a11      	ldr	r2, [pc, #68]	@ (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004ada:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004ade:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004ae0:	e00e      	b.n	8004b00 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004ae2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ae6:	3308      	adds	r3, #8
 8004ae8:	2102      	movs	r1, #2
 8004aea:	4618      	mov	r0, r3
 8004aec:	f000 fca4 	bl	8005438 <RCCEx_PLL2_Config>
 8004af0:	4603      	mov	r3, r0
 8004af2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004af6:	e003      	b.n	8004b00 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8004af8:	2301      	movs	r3, #1
 8004afa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004afe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b00:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d10d      	bne.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004b08:	4b05      	ldr	r3, [pc, #20]	@ (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004b0a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b0c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004b10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b14:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b16:	4a02      	ldr	r2, [pc, #8]	@ (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004b18:	430b      	orrs	r3, r1
 8004b1a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004b1c:	e006      	b.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8004b1e:	bf00      	nop
 8004b20:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b24:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b28:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004b2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b34:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8004b38:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004b3e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8004b42:	460b      	mov	r3, r1
 8004b44:	4313      	orrs	r3, r2
 8004b46:	d00c      	beq.n	8004b62 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004b48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b4c:	3328      	adds	r3, #40	@ 0x28
 8004b4e:	2102      	movs	r1, #2
 8004b50:	4618      	mov	r0, r3
 8004b52:	f000 fd23 	bl	800559c <RCCEx_PLL3_Config>
 8004b56:	4603      	mov	r3, r0
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d002      	beq.n	8004b62 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004b62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b6a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8004b6e:	663b      	str	r3, [r7, #96]	@ 0x60
 8004b70:	2300      	movs	r3, #0
 8004b72:	667b      	str	r3, [r7, #100]	@ 0x64
 8004b74:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8004b78:	460b      	mov	r3, r1
 8004b7a:	4313      	orrs	r3, r2
 8004b7c:	d038      	beq.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8004b7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b82:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004b86:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004b8a:	d018      	beq.n	8004bbe <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8004b8c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004b90:	d811      	bhi.n	8004bb6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004b92:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004b96:	d014      	beq.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8004b98:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004b9c:	d80b      	bhi.n	8004bb6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d011      	beq.n	8004bc6 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8004ba2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004ba6:	d106      	bne.n	8004bb6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ba8:	4bc3      	ldr	r3, [pc, #780]	@ (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004baa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bac:	4ac2      	ldr	r2, [pc, #776]	@ (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004bae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004bb2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004bb4:	e008      	b.n	8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004bbc:	e004      	b.n	8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004bbe:	bf00      	nop
 8004bc0:	e002      	b.n	8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004bc2:	bf00      	nop
 8004bc4:	e000      	b.n	8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004bc6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004bc8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d10b      	bne.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004bd0:	4bb9      	ldr	r3, [pc, #740]	@ (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004bd2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bd4:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004bd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bdc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004be0:	4ab5      	ldr	r2, [pc, #724]	@ (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004be2:	430b      	orrs	r3, r1
 8004be4:	6553      	str	r3, [r2, #84]	@ 0x54
 8004be6:	e003      	b.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004be8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004bec:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004bf0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bf8:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8004bfc:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004bfe:	2300      	movs	r3, #0
 8004c00:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004c02:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8004c06:	460b      	mov	r3, r1
 8004c08:	4313      	orrs	r3, r2
 8004c0a:	d009      	beq.n	8004c20 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004c0c:	4baa      	ldr	r3, [pc, #680]	@ (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004c0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c10:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8004c14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c18:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c1a:	4aa7      	ldr	r2, [pc, #668]	@ (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004c1c:	430b      	orrs	r3, r1
 8004c1e:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004c20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c28:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8004c2c:	653b      	str	r3, [r7, #80]	@ 0x50
 8004c2e:	2300      	movs	r3, #0
 8004c30:	657b      	str	r3, [r7, #84]	@ 0x54
 8004c32:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8004c36:	460b      	mov	r3, r1
 8004c38:	4313      	orrs	r3, r2
 8004c3a:	d00a      	beq.n	8004c52 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004c3c:	4b9e      	ldr	r3, [pc, #632]	@ (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004c3e:	691b      	ldr	r3, [r3, #16]
 8004c40:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8004c44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c48:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8004c4c:	4a9a      	ldr	r2, [pc, #616]	@ (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004c4e:	430b      	orrs	r3, r1
 8004c50:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004c52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c5a:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8004c5e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004c60:	2300      	movs	r3, #0
 8004c62:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004c64:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8004c68:	460b      	mov	r3, r1
 8004c6a:	4313      	orrs	r3, r2
 8004c6c:	d009      	beq.n	8004c82 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004c6e:	4b92      	ldr	r3, [pc, #584]	@ (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004c70:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c72:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8004c76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c7a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004c7c:	4a8e      	ldr	r2, [pc, #568]	@ (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004c7e:	430b      	orrs	r3, r1
 8004c80:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004c82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c8a:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8004c8e:	643b      	str	r3, [r7, #64]	@ 0x40
 8004c90:	2300      	movs	r3, #0
 8004c92:	647b      	str	r3, [r7, #68]	@ 0x44
 8004c94:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8004c98:	460b      	mov	r3, r1
 8004c9a:	4313      	orrs	r3, r2
 8004c9c:	d00e      	beq.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004c9e:	4b86      	ldr	r3, [pc, #536]	@ (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004ca0:	691b      	ldr	r3, [r3, #16]
 8004ca2:	4a85      	ldr	r2, [pc, #532]	@ (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004ca4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004ca8:	6113      	str	r3, [r2, #16]
 8004caa:	4b83      	ldr	r3, [pc, #524]	@ (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004cac:	6919      	ldr	r1, [r3, #16]
 8004cae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cb2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004cb6:	4a80      	ldr	r2, [pc, #512]	@ (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004cb8:	430b      	orrs	r3, r1
 8004cba:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004cbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cc4:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8004cc8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004cca:	2300      	movs	r3, #0
 8004ccc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004cce:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8004cd2:	460b      	mov	r3, r1
 8004cd4:	4313      	orrs	r3, r2
 8004cd6:	d009      	beq.n	8004cec <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004cd8:	4b77      	ldr	r3, [pc, #476]	@ (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004cda:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004cdc:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004ce0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ce4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ce6:	4a74      	ldr	r2, [pc, #464]	@ (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004ce8:	430b      	orrs	r3, r1
 8004cea:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004cec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cf4:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8004cf8:	633b      	str	r3, [r7, #48]	@ 0x30
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	637b      	str	r3, [r7, #52]	@ 0x34
 8004cfe:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8004d02:	460b      	mov	r3, r1
 8004d04:	4313      	orrs	r3, r2
 8004d06:	d00a      	beq.n	8004d1e <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004d08:	4b6b      	ldr	r3, [pc, #428]	@ (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004d0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d0c:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8004d10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d14:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004d18:	4a67      	ldr	r2, [pc, #412]	@ (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004d1a:	430b      	orrs	r3, r1
 8004d1c:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004d1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d26:	2100      	movs	r1, #0
 8004d28:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004d2a:	f003 0301 	and.w	r3, r3, #1
 8004d2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004d30:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8004d34:	460b      	mov	r3, r1
 8004d36:	4313      	orrs	r3, r2
 8004d38:	d011      	beq.n	8004d5e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004d3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d3e:	3308      	adds	r3, #8
 8004d40:	2100      	movs	r1, #0
 8004d42:	4618      	mov	r0, r3
 8004d44:	f000 fb78 	bl	8005438 <RCCEx_PLL2_Config>
 8004d48:	4603      	mov	r3, r0
 8004d4a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004d4e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d003      	beq.n	8004d5e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d56:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d5a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004d5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d66:	2100      	movs	r1, #0
 8004d68:	6239      	str	r1, [r7, #32]
 8004d6a:	f003 0302 	and.w	r3, r3, #2
 8004d6e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d70:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004d74:	460b      	mov	r3, r1
 8004d76:	4313      	orrs	r3, r2
 8004d78:	d011      	beq.n	8004d9e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004d7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d7e:	3308      	adds	r3, #8
 8004d80:	2101      	movs	r1, #1
 8004d82:	4618      	mov	r0, r3
 8004d84:	f000 fb58 	bl	8005438 <RCCEx_PLL2_Config>
 8004d88:	4603      	mov	r3, r0
 8004d8a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004d8e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d003      	beq.n	8004d9e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d96:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d9a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004d9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004da6:	2100      	movs	r1, #0
 8004da8:	61b9      	str	r1, [r7, #24]
 8004daa:	f003 0304 	and.w	r3, r3, #4
 8004dae:	61fb      	str	r3, [r7, #28]
 8004db0:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004db4:	460b      	mov	r3, r1
 8004db6:	4313      	orrs	r3, r2
 8004db8:	d011      	beq.n	8004dde <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004dba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004dbe:	3308      	adds	r3, #8
 8004dc0:	2102      	movs	r1, #2
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	f000 fb38 	bl	8005438 <RCCEx_PLL2_Config>
 8004dc8:	4603      	mov	r3, r0
 8004dca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004dce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d003      	beq.n	8004dde <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004dd6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004dda:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004dde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004de2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004de6:	2100      	movs	r1, #0
 8004de8:	6139      	str	r1, [r7, #16]
 8004dea:	f003 0308 	and.w	r3, r3, #8
 8004dee:	617b      	str	r3, [r7, #20]
 8004df0:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004df4:	460b      	mov	r3, r1
 8004df6:	4313      	orrs	r3, r2
 8004df8:	d011      	beq.n	8004e1e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004dfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004dfe:	3328      	adds	r3, #40	@ 0x28
 8004e00:	2100      	movs	r1, #0
 8004e02:	4618      	mov	r0, r3
 8004e04:	f000 fbca 	bl	800559c <RCCEx_PLL3_Config>
 8004e08:	4603      	mov	r3, r0
 8004e0a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8004e0e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d003      	beq.n	8004e1e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e16:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e1a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004e1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e26:	2100      	movs	r1, #0
 8004e28:	60b9      	str	r1, [r7, #8]
 8004e2a:	f003 0310 	and.w	r3, r3, #16
 8004e2e:	60fb      	str	r3, [r7, #12]
 8004e30:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004e34:	460b      	mov	r3, r1
 8004e36:	4313      	orrs	r3, r2
 8004e38:	d011      	beq.n	8004e5e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004e3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e3e:	3328      	adds	r3, #40	@ 0x28
 8004e40:	2101      	movs	r1, #1
 8004e42:	4618      	mov	r0, r3
 8004e44:	f000 fbaa 	bl	800559c <RCCEx_PLL3_Config>
 8004e48:	4603      	mov	r3, r0
 8004e4a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004e4e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d003      	beq.n	8004e5e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e56:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e5a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004e5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e66:	2100      	movs	r1, #0
 8004e68:	6039      	str	r1, [r7, #0]
 8004e6a:	f003 0320 	and.w	r3, r3, #32
 8004e6e:	607b      	str	r3, [r7, #4]
 8004e70:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004e74:	460b      	mov	r3, r1
 8004e76:	4313      	orrs	r3, r2
 8004e78:	d011      	beq.n	8004e9e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004e7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e7e:	3328      	adds	r3, #40	@ 0x28
 8004e80:	2102      	movs	r1, #2
 8004e82:	4618      	mov	r0, r3
 8004e84:	f000 fb8a 	bl	800559c <RCCEx_PLL3_Config>
 8004e88:	4603      	mov	r3, r0
 8004e8a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004e8e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d003      	beq.n	8004e9e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e96:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e9a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8004e9e:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d101      	bne.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	e000      	b.n	8004eac <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8004eaa:	2301      	movs	r3, #1
}
 8004eac:	4618      	mov	r0, r3
 8004eae:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004eb8:	58024400 	.word	0x58024400

08004ebc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004ec0:	f7fe fd96 	bl	80039f0 <HAL_RCC_GetHCLKFreq>
 8004ec4:	4602      	mov	r2, r0
 8004ec6:	4b06      	ldr	r3, [pc, #24]	@ (8004ee0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004ec8:	6a1b      	ldr	r3, [r3, #32]
 8004eca:	091b      	lsrs	r3, r3, #4
 8004ecc:	f003 0307 	and.w	r3, r3, #7
 8004ed0:	4904      	ldr	r1, [pc, #16]	@ (8004ee4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004ed2:	5ccb      	ldrb	r3, [r1, r3]
 8004ed4:	f003 031f 	and.w	r3, r3, #31
 8004ed8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004edc:	4618      	mov	r0, r3
 8004ede:	bd80      	pop	{r7, pc}
 8004ee0:	58024400 	.word	0x58024400
 8004ee4:	08009648 	.word	0x08009648

08004ee8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004ee8:	b480      	push	{r7}
 8004eea:	b089      	sub	sp, #36	@ 0x24
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004ef0:	4ba1      	ldr	r3, [pc, #644]	@ (8005178 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ef2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ef4:	f003 0303 	and.w	r3, r3, #3
 8004ef8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8004efa:	4b9f      	ldr	r3, [pc, #636]	@ (8005178 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004efc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004efe:	0b1b      	lsrs	r3, r3, #12
 8004f00:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004f04:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004f06:	4b9c      	ldr	r3, [pc, #624]	@ (8005178 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f0a:	091b      	lsrs	r3, r3, #4
 8004f0c:	f003 0301 	and.w	r3, r3, #1
 8004f10:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8004f12:	4b99      	ldr	r3, [pc, #612]	@ (8005178 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f16:	08db      	lsrs	r3, r3, #3
 8004f18:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004f1c:	693a      	ldr	r2, [r7, #16]
 8004f1e:	fb02 f303 	mul.w	r3, r2, r3
 8004f22:	ee07 3a90 	vmov	s15, r3
 8004f26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f2a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004f2e:	697b      	ldr	r3, [r7, #20]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	f000 8111 	beq.w	8005158 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004f36:	69bb      	ldr	r3, [r7, #24]
 8004f38:	2b02      	cmp	r3, #2
 8004f3a:	f000 8083 	beq.w	8005044 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004f3e:	69bb      	ldr	r3, [r7, #24]
 8004f40:	2b02      	cmp	r3, #2
 8004f42:	f200 80a1 	bhi.w	8005088 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004f46:	69bb      	ldr	r3, [r7, #24]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d003      	beq.n	8004f54 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004f4c:	69bb      	ldr	r3, [r7, #24]
 8004f4e:	2b01      	cmp	r3, #1
 8004f50:	d056      	beq.n	8005000 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004f52:	e099      	b.n	8005088 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004f54:	4b88      	ldr	r3, [pc, #544]	@ (8005178 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f003 0320 	and.w	r3, r3, #32
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d02d      	beq.n	8004fbc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004f60:	4b85      	ldr	r3, [pc, #532]	@ (8005178 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	08db      	lsrs	r3, r3, #3
 8004f66:	f003 0303 	and.w	r3, r3, #3
 8004f6a:	4a84      	ldr	r2, [pc, #528]	@ (800517c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004f6c:	fa22 f303 	lsr.w	r3, r2, r3
 8004f70:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004f72:	68bb      	ldr	r3, [r7, #8]
 8004f74:	ee07 3a90 	vmov	s15, r3
 8004f78:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f7c:	697b      	ldr	r3, [r7, #20]
 8004f7e:	ee07 3a90 	vmov	s15, r3
 8004f82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f8a:	4b7b      	ldr	r3, [pc, #492]	@ (8005178 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f92:	ee07 3a90 	vmov	s15, r3
 8004f96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f9a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f9e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005180 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004fa2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004fa6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004faa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004fae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004fb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fb6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004fba:	e087      	b.n	80050cc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004fbc:	697b      	ldr	r3, [r7, #20]
 8004fbe:	ee07 3a90 	vmov	s15, r3
 8004fc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fc6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8005184 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004fca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004fce:	4b6a      	ldr	r3, [pc, #424]	@ (8005178 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004fd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fd6:	ee07 3a90 	vmov	s15, r3
 8004fda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004fde:	ed97 6a03 	vldr	s12, [r7, #12]
 8004fe2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8005180 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004fe6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004fea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004fee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004ff2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ff6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ffa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004ffe:	e065      	b.n	80050cc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005000:	697b      	ldr	r3, [r7, #20]
 8005002:	ee07 3a90 	vmov	s15, r3
 8005006:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800500a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005188 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800500e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005012:	4b59      	ldr	r3, [pc, #356]	@ (8005178 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005014:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005016:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800501a:	ee07 3a90 	vmov	s15, r3
 800501e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005022:	ed97 6a03 	vldr	s12, [r7, #12]
 8005026:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8005180 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800502a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800502e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005032:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005036:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800503a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800503e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005042:	e043      	b.n	80050cc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005044:	697b      	ldr	r3, [r7, #20]
 8005046:	ee07 3a90 	vmov	s15, r3
 800504a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800504e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800518c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005052:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005056:	4b48      	ldr	r3, [pc, #288]	@ (8005178 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005058:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800505a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800505e:	ee07 3a90 	vmov	s15, r3
 8005062:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005066:	ed97 6a03 	vldr	s12, [r7, #12]
 800506a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8005180 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800506e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005072:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005076:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800507a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800507e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005082:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005086:	e021      	b.n	80050cc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005088:	697b      	ldr	r3, [r7, #20]
 800508a:	ee07 3a90 	vmov	s15, r3
 800508e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005092:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8005188 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005096:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800509a:	4b37      	ldr	r3, [pc, #220]	@ (8005178 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800509c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800509e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050a2:	ee07 3a90 	vmov	s15, r3
 80050a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80050ae:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8005180 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80050b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80050b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80050ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80050be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80050c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80050ca:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80050cc:	4b2a      	ldr	r3, [pc, #168]	@ (8005178 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80050ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050d0:	0a5b      	lsrs	r3, r3, #9
 80050d2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80050d6:	ee07 3a90 	vmov	s15, r3
 80050da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050de:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80050e2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80050e6:	edd7 6a07 	vldr	s13, [r7, #28]
 80050ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80050ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80050f2:	ee17 2a90 	vmov	r2, s15
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80050fa:	4b1f      	ldr	r3, [pc, #124]	@ (8005178 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80050fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050fe:	0c1b      	lsrs	r3, r3, #16
 8005100:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005104:	ee07 3a90 	vmov	s15, r3
 8005108:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800510c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005110:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005114:	edd7 6a07 	vldr	s13, [r7, #28]
 8005118:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800511c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005120:	ee17 2a90 	vmov	r2, s15
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8005128:	4b13      	ldr	r3, [pc, #76]	@ (8005178 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800512a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800512c:	0e1b      	lsrs	r3, r3, #24
 800512e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005132:	ee07 3a90 	vmov	s15, r3
 8005136:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800513a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800513e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005142:	edd7 6a07 	vldr	s13, [r7, #28]
 8005146:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800514a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800514e:	ee17 2a90 	vmov	r2, s15
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005156:	e008      	b.n	800516a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2200      	movs	r2, #0
 800515c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2200      	movs	r2, #0
 8005162:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2200      	movs	r2, #0
 8005168:	609a      	str	r2, [r3, #8]
}
 800516a:	bf00      	nop
 800516c:	3724      	adds	r7, #36	@ 0x24
 800516e:	46bd      	mov	sp, r7
 8005170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005174:	4770      	bx	lr
 8005176:	bf00      	nop
 8005178:	58024400 	.word	0x58024400
 800517c:	03d09000 	.word	0x03d09000
 8005180:	46000000 	.word	0x46000000
 8005184:	4c742400 	.word	0x4c742400
 8005188:	4a742400 	.word	0x4a742400
 800518c:	4af42400 	.word	0x4af42400

08005190 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8005190:	b480      	push	{r7}
 8005192:	b089      	sub	sp, #36	@ 0x24
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005198:	4ba1      	ldr	r3, [pc, #644]	@ (8005420 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800519a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800519c:	f003 0303 	and.w	r3, r3, #3
 80051a0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80051a2:	4b9f      	ldr	r3, [pc, #636]	@ (8005420 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80051a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051a6:	0d1b      	lsrs	r3, r3, #20
 80051a8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80051ac:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80051ae:	4b9c      	ldr	r3, [pc, #624]	@ (8005420 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80051b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051b2:	0a1b      	lsrs	r3, r3, #8
 80051b4:	f003 0301 	and.w	r3, r3, #1
 80051b8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80051ba:	4b99      	ldr	r3, [pc, #612]	@ (8005420 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80051bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051be:	08db      	lsrs	r3, r3, #3
 80051c0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80051c4:	693a      	ldr	r2, [r7, #16]
 80051c6:	fb02 f303 	mul.w	r3, r2, r3
 80051ca:	ee07 3a90 	vmov	s15, r3
 80051ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051d2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80051d6:	697b      	ldr	r3, [r7, #20]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	f000 8111 	beq.w	8005400 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80051de:	69bb      	ldr	r3, [r7, #24]
 80051e0:	2b02      	cmp	r3, #2
 80051e2:	f000 8083 	beq.w	80052ec <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80051e6:	69bb      	ldr	r3, [r7, #24]
 80051e8:	2b02      	cmp	r3, #2
 80051ea:	f200 80a1 	bhi.w	8005330 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80051ee:	69bb      	ldr	r3, [r7, #24]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d003      	beq.n	80051fc <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80051f4:	69bb      	ldr	r3, [r7, #24]
 80051f6:	2b01      	cmp	r3, #1
 80051f8:	d056      	beq.n	80052a8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80051fa:	e099      	b.n	8005330 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80051fc:	4b88      	ldr	r3, [pc, #544]	@ (8005420 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f003 0320 	and.w	r3, r3, #32
 8005204:	2b00      	cmp	r3, #0
 8005206:	d02d      	beq.n	8005264 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005208:	4b85      	ldr	r3, [pc, #532]	@ (8005420 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	08db      	lsrs	r3, r3, #3
 800520e:	f003 0303 	and.w	r3, r3, #3
 8005212:	4a84      	ldr	r2, [pc, #528]	@ (8005424 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005214:	fa22 f303 	lsr.w	r3, r2, r3
 8005218:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800521a:	68bb      	ldr	r3, [r7, #8]
 800521c:	ee07 3a90 	vmov	s15, r3
 8005220:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005224:	697b      	ldr	r3, [r7, #20]
 8005226:	ee07 3a90 	vmov	s15, r3
 800522a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800522e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005232:	4b7b      	ldr	r3, [pc, #492]	@ (8005420 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005234:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005236:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800523a:	ee07 3a90 	vmov	s15, r3
 800523e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005242:	ed97 6a03 	vldr	s12, [r7, #12]
 8005246:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005428 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800524a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800524e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005252:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005256:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800525a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800525e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005262:	e087      	b.n	8005374 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005264:	697b      	ldr	r3, [r7, #20]
 8005266:	ee07 3a90 	vmov	s15, r3
 800526a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800526e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800542c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8005272:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005276:	4b6a      	ldr	r3, [pc, #424]	@ (8005420 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005278:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800527a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800527e:	ee07 3a90 	vmov	s15, r3
 8005282:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005286:	ed97 6a03 	vldr	s12, [r7, #12]
 800528a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8005428 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800528e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005292:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005296:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800529a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800529e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80052a6:	e065      	b.n	8005374 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80052a8:	697b      	ldr	r3, [r7, #20]
 80052aa:	ee07 3a90 	vmov	s15, r3
 80052ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052b2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005430 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80052b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80052ba:	4b59      	ldr	r3, [pc, #356]	@ (8005420 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80052bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052c2:	ee07 3a90 	vmov	s15, r3
 80052c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80052ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80052ce:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8005428 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80052d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80052d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80052da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80052de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80052e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80052ea:	e043      	b.n	8005374 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80052ec:	697b      	ldr	r3, [r7, #20]
 80052ee:	ee07 3a90 	vmov	s15, r3
 80052f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052f6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8005434 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80052fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80052fe:	4b48      	ldr	r3, [pc, #288]	@ (8005420 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005300:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005302:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005306:	ee07 3a90 	vmov	s15, r3
 800530a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800530e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005312:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8005428 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005316:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800531a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800531e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005322:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005326:	ee67 7a27 	vmul.f32	s15, s14, s15
 800532a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800532e:	e021      	b.n	8005374 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005330:	697b      	ldr	r3, [r7, #20]
 8005332:	ee07 3a90 	vmov	s15, r3
 8005336:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800533a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8005430 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800533e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005342:	4b37      	ldr	r3, [pc, #220]	@ (8005420 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005344:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005346:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800534a:	ee07 3a90 	vmov	s15, r3
 800534e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005352:	ed97 6a03 	vldr	s12, [r7, #12]
 8005356:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8005428 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800535a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800535e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005362:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005366:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800536a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800536e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005372:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8005374:	4b2a      	ldr	r3, [pc, #168]	@ (8005420 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005376:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005378:	0a5b      	lsrs	r3, r3, #9
 800537a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800537e:	ee07 3a90 	vmov	s15, r3
 8005382:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005386:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800538a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800538e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005392:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005396:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800539a:	ee17 2a90 	vmov	r2, s15
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80053a2:	4b1f      	ldr	r3, [pc, #124]	@ (8005420 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80053a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053a6:	0c1b      	lsrs	r3, r3, #16
 80053a8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80053ac:	ee07 3a90 	vmov	s15, r3
 80053b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053b4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80053b8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80053bc:	edd7 6a07 	vldr	s13, [r7, #28]
 80053c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80053c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80053c8:	ee17 2a90 	vmov	r2, s15
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80053d0:	4b13      	ldr	r3, [pc, #76]	@ (8005420 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80053d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053d4:	0e1b      	lsrs	r3, r3, #24
 80053d6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80053da:	ee07 3a90 	vmov	s15, r3
 80053de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053e2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80053e6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80053ea:	edd7 6a07 	vldr	s13, [r7, #28]
 80053ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80053f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80053f6:	ee17 2a90 	vmov	r2, s15
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80053fe:	e008      	b.n	8005412 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2200      	movs	r2, #0
 8005404:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2200      	movs	r2, #0
 800540a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2200      	movs	r2, #0
 8005410:	609a      	str	r2, [r3, #8]
}
 8005412:	bf00      	nop
 8005414:	3724      	adds	r7, #36	@ 0x24
 8005416:	46bd      	mov	sp, r7
 8005418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541c:	4770      	bx	lr
 800541e:	bf00      	nop
 8005420:	58024400 	.word	0x58024400
 8005424:	03d09000 	.word	0x03d09000
 8005428:	46000000 	.word	0x46000000
 800542c:	4c742400 	.word	0x4c742400
 8005430:	4a742400 	.word	0x4a742400
 8005434:	4af42400 	.word	0x4af42400

08005438 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005438:	b580      	push	{r7, lr}
 800543a:	b084      	sub	sp, #16
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
 8005440:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005442:	2300      	movs	r3, #0
 8005444:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005446:	4b53      	ldr	r3, [pc, #332]	@ (8005594 <RCCEx_PLL2_Config+0x15c>)
 8005448:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800544a:	f003 0303 	and.w	r3, r3, #3
 800544e:	2b03      	cmp	r3, #3
 8005450:	d101      	bne.n	8005456 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005452:	2301      	movs	r3, #1
 8005454:	e099      	b.n	800558a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005456:	4b4f      	ldr	r3, [pc, #316]	@ (8005594 <RCCEx_PLL2_Config+0x15c>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	4a4e      	ldr	r2, [pc, #312]	@ (8005594 <RCCEx_PLL2_Config+0x15c>)
 800545c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005460:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005462:	f7fb ff19 	bl	8001298 <HAL_GetTick>
 8005466:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005468:	e008      	b.n	800547c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800546a:	f7fb ff15 	bl	8001298 <HAL_GetTick>
 800546e:	4602      	mov	r2, r0
 8005470:	68bb      	ldr	r3, [r7, #8]
 8005472:	1ad3      	subs	r3, r2, r3
 8005474:	2b02      	cmp	r3, #2
 8005476:	d901      	bls.n	800547c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005478:	2303      	movs	r3, #3
 800547a:	e086      	b.n	800558a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800547c:	4b45      	ldr	r3, [pc, #276]	@ (8005594 <RCCEx_PLL2_Config+0x15c>)
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005484:	2b00      	cmp	r3, #0
 8005486:	d1f0      	bne.n	800546a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005488:	4b42      	ldr	r3, [pc, #264]	@ (8005594 <RCCEx_PLL2_Config+0x15c>)
 800548a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800548c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	031b      	lsls	r3, r3, #12
 8005496:	493f      	ldr	r1, [pc, #252]	@ (8005594 <RCCEx_PLL2_Config+0x15c>)
 8005498:	4313      	orrs	r3, r2
 800549a:	628b      	str	r3, [r1, #40]	@ 0x28
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	685b      	ldr	r3, [r3, #4]
 80054a0:	3b01      	subs	r3, #1
 80054a2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	689b      	ldr	r3, [r3, #8]
 80054aa:	3b01      	subs	r3, #1
 80054ac:	025b      	lsls	r3, r3, #9
 80054ae:	b29b      	uxth	r3, r3
 80054b0:	431a      	orrs	r2, r3
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	68db      	ldr	r3, [r3, #12]
 80054b6:	3b01      	subs	r3, #1
 80054b8:	041b      	lsls	r3, r3, #16
 80054ba:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80054be:	431a      	orrs	r2, r3
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	691b      	ldr	r3, [r3, #16]
 80054c4:	3b01      	subs	r3, #1
 80054c6:	061b      	lsls	r3, r3, #24
 80054c8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80054cc:	4931      	ldr	r1, [pc, #196]	@ (8005594 <RCCEx_PLL2_Config+0x15c>)
 80054ce:	4313      	orrs	r3, r2
 80054d0:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80054d2:	4b30      	ldr	r3, [pc, #192]	@ (8005594 <RCCEx_PLL2_Config+0x15c>)
 80054d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054d6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	695b      	ldr	r3, [r3, #20]
 80054de:	492d      	ldr	r1, [pc, #180]	@ (8005594 <RCCEx_PLL2_Config+0x15c>)
 80054e0:	4313      	orrs	r3, r2
 80054e2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80054e4:	4b2b      	ldr	r3, [pc, #172]	@ (8005594 <RCCEx_PLL2_Config+0x15c>)
 80054e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054e8:	f023 0220 	bic.w	r2, r3, #32
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	699b      	ldr	r3, [r3, #24]
 80054f0:	4928      	ldr	r1, [pc, #160]	@ (8005594 <RCCEx_PLL2_Config+0x15c>)
 80054f2:	4313      	orrs	r3, r2
 80054f4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80054f6:	4b27      	ldr	r3, [pc, #156]	@ (8005594 <RCCEx_PLL2_Config+0x15c>)
 80054f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054fa:	4a26      	ldr	r2, [pc, #152]	@ (8005594 <RCCEx_PLL2_Config+0x15c>)
 80054fc:	f023 0310 	bic.w	r3, r3, #16
 8005500:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005502:	4b24      	ldr	r3, [pc, #144]	@ (8005594 <RCCEx_PLL2_Config+0x15c>)
 8005504:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005506:	4b24      	ldr	r3, [pc, #144]	@ (8005598 <RCCEx_PLL2_Config+0x160>)
 8005508:	4013      	ands	r3, r2
 800550a:	687a      	ldr	r2, [r7, #4]
 800550c:	69d2      	ldr	r2, [r2, #28]
 800550e:	00d2      	lsls	r2, r2, #3
 8005510:	4920      	ldr	r1, [pc, #128]	@ (8005594 <RCCEx_PLL2_Config+0x15c>)
 8005512:	4313      	orrs	r3, r2
 8005514:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005516:	4b1f      	ldr	r3, [pc, #124]	@ (8005594 <RCCEx_PLL2_Config+0x15c>)
 8005518:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800551a:	4a1e      	ldr	r2, [pc, #120]	@ (8005594 <RCCEx_PLL2_Config+0x15c>)
 800551c:	f043 0310 	orr.w	r3, r3, #16
 8005520:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d106      	bne.n	8005536 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005528:	4b1a      	ldr	r3, [pc, #104]	@ (8005594 <RCCEx_PLL2_Config+0x15c>)
 800552a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800552c:	4a19      	ldr	r2, [pc, #100]	@ (8005594 <RCCEx_PLL2_Config+0x15c>)
 800552e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005532:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005534:	e00f      	b.n	8005556 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	2b01      	cmp	r3, #1
 800553a:	d106      	bne.n	800554a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800553c:	4b15      	ldr	r3, [pc, #84]	@ (8005594 <RCCEx_PLL2_Config+0x15c>)
 800553e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005540:	4a14      	ldr	r2, [pc, #80]	@ (8005594 <RCCEx_PLL2_Config+0x15c>)
 8005542:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005546:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005548:	e005      	b.n	8005556 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800554a:	4b12      	ldr	r3, [pc, #72]	@ (8005594 <RCCEx_PLL2_Config+0x15c>)
 800554c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800554e:	4a11      	ldr	r2, [pc, #68]	@ (8005594 <RCCEx_PLL2_Config+0x15c>)
 8005550:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005554:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005556:	4b0f      	ldr	r3, [pc, #60]	@ (8005594 <RCCEx_PLL2_Config+0x15c>)
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	4a0e      	ldr	r2, [pc, #56]	@ (8005594 <RCCEx_PLL2_Config+0x15c>)
 800555c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005560:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005562:	f7fb fe99 	bl	8001298 <HAL_GetTick>
 8005566:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005568:	e008      	b.n	800557c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800556a:	f7fb fe95 	bl	8001298 <HAL_GetTick>
 800556e:	4602      	mov	r2, r0
 8005570:	68bb      	ldr	r3, [r7, #8]
 8005572:	1ad3      	subs	r3, r2, r3
 8005574:	2b02      	cmp	r3, #2
 8005576:	d901      	bls.n	800557c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005578:	2303      	movs	r3, #3
 800557a:	e006      	b.n	800558a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800557c:	4b05      	ldr	r3, [pc, #20]	@ (8005594 <RCCEx_PLL2_Config+0x15c>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005584:	2b00      	cmp	r3, #0
 8005586:	d0f0      	beq.n	800556a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005588:	7bfb      	ldrb	r3, [r7, #15]
}
 800558a:	4618      	mov	r0, r3
 800558c:	3710      	adds	r7, #16
 800558e:	46bd      	mov	sp, r7
 8005590:	bd80      	pop	{r7, pc}
 8005592:	bf00      	nop
 8005594:	58024400 	.word	0x58024400
 8005598:	ffff0007 	.word	0xffff0007

0800559c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800559c:	b580      	push	{r7, lr}
 800559e:	b084      	sub	sp, #16
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
 80055a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80055a6:	2300      	movs	r3, #0
 80055a8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80055aa:	4b53      	ldr	r3, [pc, #332]	@ (80056f8 <RCCEx_PLL3_Config+0x15c>)
 80055ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055ae:	f003 0303 	and.w	r3, r3, #3
 80055b2:	2b03      	cmp	r3, #3
 80055b4:	d101      	bne.n	80055ba <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80055b6:	2301      	movs	r3, #1
 80055b8:	e099      	b.n	80056ee <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80055ba:	4b4f      	ldr	r3, [pc, #316]	@ (80056f8 <RCCEx_PLL3_Config+0x15c>)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	4a4e      	ldr	r2, [pc, #312]	@ (80056f8 <RCCEx_PLL3_Config+0x15c>)
 80055c0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80055c4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80055c6:	f7fb fe67 	bl	8001298 <HAL_GetTick>
 80055ca:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80055cc:	e008      	b.n	80055e0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80055ce:	f7fb fe63 	bl	8001298 <HAL_GetTick>
 80055d2:	4602      	mov	r2, r0
 80055d4:	68bb      	ldr	r3, [r7, #8]
 80055d6:	1ad3      	subs	r3, r2, r3
 80055d8:	2b02      	cmp	r3, #2
 80055da:	d901      	bls.n	80055e0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80055dc:	2303      	movs	r3, #3
 80055de:	e086      	b.n	80056ee <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80055e0:	4b45      	ldr	r3, [pc, #276]	@ (80056f8 <RCCEx_PLL3_Config+0x15c>)
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d1f0      	bne.n	80055ce <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80055ec:	4b42      	ldr	r3, [pc, #264]	@ (80056f8 <RCCEx_PLL3_Config+0x15c>)
 80055ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055f0:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	051b      	lsls	r3, r3, #20
 80055fa:	493f      	ldr	r1, [pc, #252]	@ (80056f8 <RCCEx_PLL3_Config+0x15c>)
 80055fc:	4313      	orrs	r3, r2
 80055fe:	628b      	str	r3, [r1, #40]	@ 0x28
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	685b      	ldr	r3, [r3, #4]
 8005604:	3b01      	subs	r3, #1
 8005606:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	689b      	ldr	r3, [r3, #8]
 800560e:	3b01      	subs	r3, #1
 8005610:	025b      	lsls	r3, r3, #9
 8005612:	b29b      	uxth	r3, r3
 8005614:	431a      	orrs	r2, r3
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	68db      	ldr	r3, [r3, #12]
 800561a:	3b01      	subs	r3, #1
 800561c:	041b      	lsls	r3, r3, #16
 800561e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005622:	431a      	orrs	r2, r3
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	691b      	ldr	r3, [r3, #16]
 8005628:	3b01      	subs	r3, #1
 800562a:	061b      	lsls	r3, r3, #24
 800562c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005630:	4931      	ldr	r1, [pc, #196]	@ (80056f8 <RCCEx_PLL3_Config+0x15c>)
 8005632:	4313      	orrs	r3, r2
 8005634:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005636:	4b30      	ldr	r3, [pc, #192]	@ (80056f8 <RCCEx_PLL3_Config+0x15c>)
 8005638:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800563a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	695b      	ldr	r3, [r3, #20]
 8005642:	492d      	ldr	r1, [pc, #180]	@ (80056f8 <RCCEx_PLL3_Config+0x15c>)
 8005644:	4313      	orrs	r3, r2
 8005646:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005648:	4b2b      	ldr	r3, [pc, #172]	@ (80056f8 <RCCEx_PLL3_Config+0x15c>)
 800564a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800564c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	699b      	ldr	r3, [r3, #24]
 8005654:	4928      	ldr	r1, [pc, #160]	@ (80056f8 <RCCEx_PLL3_Config+0x15c>)
 8005656:	4313      	orrs	r3, r2
 8005658:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800565a:	4b27      	ldr	r3, [pc, #156]	@ (80056f8 <RCCEx_PLL3_Config+0x15c>)
 800565c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800565e:	4a26      	ldr	r2, [pc, #152]	@ (80056f8 <RCCEx_PLL3_Config+0x15c>)
 8005660:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005664:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005666:	4b24      	ldr	r3, [pc, #144]	@ (80056f8 <RCCEx_PLL3_Config+0x15c>)
 8005668:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800566a:	4b24      	ldr	r3, [pc, #144]	@ (80056fc <RCCEx_PLL3_Config+0x160>)
 800566c:	4013      	ands	r3, r2
 800566e:	687a      	ldr	r2, [r7, #4]
 8005670:	69d2      	ldr	r2, [r2, #28]
 8005672:	00d2      	lsls	r2, r2, #3
 8005674:	4920      	ldr	r1, [pc, #128]	@ (80056f8 <RCCEx_PLL3_Config+0x15c>)
 8005676:	4313      	orrs	r3, r2
 8005678:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800567a:	4b1f      	ldr	r3, [pc, #124]	@ (80056f8 <RCCEx_PLL3_Config+0x15c>)
 800567c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800567e:	4a1e      	ldr	r2, [pc, #120]	@ (80056f8 <RCCEx_PLL3_Config+0x15c>)
 8005680:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005684:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d106      	bne.n	800569a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800568c:	4b1a      	ldr	r3, [pc, #104]	@ (80056f8 <RCCEx_PLL3_Config+0x15c>)
 800568e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005690:	4a19      	ldr	r2, [pc, #100]	@ (80056f8 <RCCEx_PLL3_Config+0x15c>)
 8005692:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005696:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005698:	e00f      	b.n	80056ba <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	2b01      	cmp	r3, #1
 800569e:	d106      	bne.n	80056ae <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80056a0:	4b15      	ldr	r3, [pc, #84]	@ (80056f8 <RCCEx_PLL3_Config+0x15c>)
 80056a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056a4:	4a14      	ldr	r2, [pc, #80]	@ (80056f8 <RCCEx_PLL3_Config+0x15c>)
 80056a6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80056aa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80056ac:	e005      	b.n	80056ba <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80056ae:	4b12      	ldr	r3, [pc, #72]	@ (80056f8 <RCCEx_PLL3_Config+0x15c>)
 80056b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056b2:	4a11      	ldr	r2, [pc, #68]	@ (80056f8 <RCCEx_PLL3_Config+0x15c>)
 80056b4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80056b8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80056ba:	4b0f      	ldr	r3, [pc, #60]	@ (80056f8 <RCCEx_PLL3_Config+0x15c>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	4a0e      	ldr	r2, [pc, #56]	@ (80056f8 <RCCEx_PLL3_Config+0x15c>)
 80056c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80056c4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80056c6:	f7fb fde7 	bl	8001298 <HAL_GetTick>
 80056ca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80056cc:	e008      	b.n	80056e0 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80056ce:	f7fb fde3 	bl	8001298 <HAL_GetTick>
 80056d2:	4602      	mov	r2, r0
 80056d4:	68bb      	ldr	r3, [r7, #8]
 80056d6:	1ad3      	subs	r3, r2, r3
 80056d8:	2b02      	cmp	r3, #2
 80056da:	d901      	bls.n	80056e0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80056dc:	2303      	movs	r3, #3
 80056de:	e006      	b.n	80056ee <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80056e0:	4b05      	ldr	r3, [pc, #20]	@ (80056f8 <RCCEx_PLL3_Config+0x15c>)
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d0f0      	beq.n	80056ce <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80056ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80056ee:	4618      	mov	r0, r3
 80056f0:	3710      	adds	r7, #16
 80056f2:	46bd      	mov	sp, r7
 80056f4:	bd80      	pop	{r7, pc}
 80056f6:	bf00      	nop
 80056f8:	58024400 	.word	0x58024400
 80056fc:	ffff0007 	.word	0xffff0007

08005700 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005700:	b580      	push	{r7, lr}
 8005702:	b082      	sub	sp, #8
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d101      	bne.n	8005712 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800570e:	2301      	movs	r3, #1
 8005710:	e042      	b.n	8005798 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005718:	2b00      	cmp	r3, #0
 800571a:	d106      	bne.n	800572a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2200      	movs	r2, #0
 8005720:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005724:	6878      	ldr	r0, [r7, #4]
 8005726:	f7fb fae3 	bl	8000cf0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2224      	movs	r2, #36	@ 0x24
 800572e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	681a      	ldr	r2, [r3, #0]
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f022 0201 	bic.w	r2, r2, #1
 8005740:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005746:	2b00      	cmp	r3, #0
 8005748:	d002      	beq.n	8005750 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800574a:	6878      	ldr	r0, [r7, #4]
 800574c:	f000 fe1e 	bl	800638c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005750:	6878      	ldr	r0, [r7, #4]
 8005752:	f000 f8b3 	bl	80058bc <UART_SetConfig>
 8005756:	4603      	mov	r3, r0
 8005758:	2b01      	cmp	r3, #1
 800575a:	d101      	bne.n	8005760 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800575c:	2301      	movs	r3, #1
 800575e:	e01b      	b.n	8005798 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	685a      	ldr	r2, [r3, #4]
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800576e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	689a      	ldr	r2, [r3, #8]
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800577e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	681a      	ldr	r2, [r3, #0]
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f042 0201 	orr.w	r2, r2, #1
 800578e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005790:	6878      	ldr	r0, [r7, #4]
 8005792:	f000 fe9d 	bl	80064d0 <UART_CheckIdleState>
 8005796:	4603      	mov	r3, r0
}
 8005798:	4618      	mov	r0, r3
 800579a:	3708      	adds	r7, #8
 800579c:	46bd      	mov	sp, r7
 800579e:	bd80      	pop	{r7, pc}

080057a0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b08a      	sub	sp, #40	@ 0x28
 80057a4:	af02      	add	r7, sp, #8
 80057a6:	60f8      	str	r0, [r7, #12]
 80057a8:	60b9      	str	r1, [r7, #8]
 80057aa:	603b      	str	r3, [r7, #0]
 80057ac:	4613      	mov	r3, r2
 80057ae:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057b6:	2b20      	cmp	r3, #32
 80057b8:	d17b      	bne.n	80058b2 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80057ba:	68bb      	ldr	r3, [r7, #8]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d002      	beq.n	80057c6 <HAL_UART_Transmit+0x26>
 80057c0:	88fb      	ldrh	r3, [r7, #6]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d101      	bne.n	80057ca <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80057c6:	2301      	movs	r3, #1
 80057c8:	e074      	b.n	80058b4 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	2200      	movs	r2, #0
 80057ce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	2221      	movs	r2, #33	@ 0x21
 80057d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80057da:	f7fb fd5d 	bl	8001298 <HAL_GetTick>
 80057de:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	88fa      	ldrh	r2, [r7, #6]
 80057e4:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	88fa      	ldrh	r2, [r7, #6]
 80057ec:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	689b      	ldr	r3, [r3, #8]
 80057f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80057f8:	d108      	bne.n	800580c <HAL_UART_Transmit+0x6c>
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	691b      	ldr	r3, [r3, #16]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d104      	bne.n	800580c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005802:	2300      	movs	r3, #0
 8005804:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005806:	68bb      	ldr	r3, [r7, #8]
 8005808:	61bb      	str	r3, [r7, #24]
 800580a:	e003      	b.n	8005814 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800580c:	68bb      	ldr	r3, [r7, #8]
 800580e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005810:	2300      	movs	r3, #0
 8005812:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005814:	e030      	b.n	8005878 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	9300      	str	r3, [sp, #0]
 800581a:	697b      	ldr	r3, [r7, #20]
 800581c:	2200      	movs	r2, #0
 800581e:	2180      	movs	r1, #128	@ 0x80
 8005820:	68f8      	ldr	r0, [r7, #12]
 8005822:	f000 feff 	bl	8006624 <UART_WaitOnFlagUntilTimeout>
 8005826:	4603      	mov	r3, r0
 8005828:	2b00      	cmp	r3, #0
 800582a:	d005      	beq.n	8005838 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	2220      	movs	r2, #32
 8005830:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8005834:	2303      	movs	r3, #3
 8005836:	e03d      	b.n	80058b4 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8005838:	69fb      	ldr	r3, [r7, #28]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d10b      	bne.n	8005856 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800583e:	69bb      	ldr	r3, [r7, #24]
 8005840:	881b      	ldrh	r3, [r3, #0]
 8005842:	461a      	mov	r2, r3
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800584c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800584e:	69bb      	ldr	r3, [r7, #24]
 8005850:	3302      	adds	r3, #2
 8005852:	61bb      	str	r3, [r7, #24]
 8005854:	e007      	b.n	8005866 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005856:	69fb      	ldr	r3, [r7, #28]
 8005858:	781a      	ldrb	r2, [r3, #0]
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005860:	69fb      	ldr	r3, [r7, #28]
 8005862:	3301      	adds	r3, #1
 8005864:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800586c:	b29b      	uxth	r3, r3
 800586e:	3b01      	subs	r3, #1
 8005870:	b29a      	uxth	r2, r3
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800587e:	b29b      	uxth	r3, r3
 8005880:	2b00      	cmp	r3, #0
 8005882:	d1c8      	bne.n	8005816 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	9300      	str	r3, [sp, #0]
 8005888:	697b      	ldr	r3, [r7, #20]
 800588a:	2200      	movs	r2, #0
 800588c:	2140      	movs	r1, #64	@ 0x40
 800588e:	68f8      	ldr	r0, [r7, #12]
 8005890:	f000 fec8 	bl	8006624 <UART_WaitOnFlagUntilTimeout>
 8005894:	4603      	mov	r3, r0
 8005896:	2b00      	cmp	r3, #0
 8005898:	d005      	beq.n	80058a6 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	2220      	movs	r2, #32
 800589e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80058a2:	2303      	movs	r3, #3
 80058a4:	e006      	b.n	80058b4 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	2220      	movs	r2, #32
 80058aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80058ae:	2300      	movs	r3, #0
 80058b0:	e000      	b.n	80058b4 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80058b2:	2302      	movs	r3, #2
  }
}
 80058b4:	4618      	mov	r0, r3
 80058b6:	3720      	adds	r7, #32
 80058b8:	46bd      	mov	sp, r7
 80058ba:	bd80      	pop	{r7, pc}

080058bc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80058bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80058c0:	b092      	sub	sp, #72	@ 0x48
 80058c2:	af00      	add	r7, sp, #0
 80058c4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80058c6:	2300      	movs	r3, #0
 80058c8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80058cc:	697b      	ldr	r3, [r7, #20]
 80058ce:	689a      	ldr	r2, [r3, #8]
 80058d0:	697b      	ldr	r3, [r7, #20]
 80058d2:	691b      	ldr	r3, [r3, #16]
 80058d4:	431a      	orrs	r2, r3
 80058d6:	697b      	ldr	r3, [r7, #20]
 80058d8:	695b      	ldr	r3, [r3, #20]
 80058da:	431a      	orrs	r2, r3
 80058dc:	697b      	ldr	r3, [r7, #20]
 80058de:	69db      	ldr	r3, [r3, #28]
 80058e0:	4313      	orrs	r3, r2
 80058e2:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80058e4:	697b      	ldr	r3, [r7, #20]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	681a      	ldr	r2, [r3, #0]
 80058ea:	4bbe      	ldr	r3, [pc, #760]	@ (8005be4 <UART_SetConfig+0x328>)
 80058ec:	4013      	ands	r3, r2
 80058ee:	697a      	ldr	r2, [r7, #20]
 80058f0:	6812      	ldr	r2, [r2, #0]
 80058f2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80058f4:	430b      	orrs	r3, r1
 80058f6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80058f8:	697b      	ldr	r3, [r7, #20]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	685b      	ldr	r3, [r3, #4]
 80058fe:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005902:	697b      	ldr	r3, [r7, #20]
 8005904:	68da      	ldr	r2, [r3, #12]
 8005906:	697b      	ldr	r3, [r7, #20]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	430a      	orrs	r2, r1
 800590c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800590e:	697b      	ldr	r3, [r7, #20]
 8005910:	699b      	ldr	r3, [r3, #24]
 8005912:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005914:	697b      	ldr	r3, [r7, #20]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	4ab3      	ldr	r2, [pc, #716]	@ (8005be8 <UART_SetConfig+0x32c>)
 800591a:	4293      	cmp	r3, r2
 800591c:	d004      	beq.n	8005928 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800591e:	697b      	ldr	r3, [r7, #20]
 8005920:	6a1b      	ldr	r3, [r3, #32]
 8005922:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005924:	4313      	orrs	r3, r2
 8005926:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005928:	697b      	ldr	r3, [r7, #20]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	689a      	ldr	r2, [r3, #8]
 800592e:	4baf      	ldr	r3, [pc, #700]	@ (8005bec <UART_SetConfig+0x330>)
 8005930:	4013      	ands	r3, r2
 8005932:	697a      	ldr	r2, [r7, #20]
 8005934:	6812      	ldr	r2, [r2, #0]
 8005936:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005938:	430b      	orrs	r3, r1
 800593a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800593c:	697b      	ldr	r3, [r7, #20]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005942:	f023 010f 	bic.w	r1, r3, #15
 8005946:	697b      	ldr	r3, [r7, #20]
 8005948:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800594a:	697b      	ldr	r3, [r7, #20]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	430a      	orrs	r2, r1
 8005950:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005952:	697b      	ldr	r3, [r7, #20]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	4aa6      	ldr	r2, [pc, #664]	@ (8005bf0 <UART_SetConfig+0x334>)
 8005958:	4293      	cmp	r3, r2
 800595a:	d177      	bne.n	8005a4c <UART_SetConfig+0x190>
 800595c:	4ba5      	ldr	r3, [pc, #660]	@ (8005bf4 <UART_SetConfig+0x338>)
 800595e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005960:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005964:	2b28      	cmp	r3, #40	@ 0x28
 8005966:	d86d      	bhi.n	8005a44 <UART_SetConfig+0x188>
 8005968:	a201      	add	r2, pc, #4	@ (adr r2, 8005970 <UART_SetConfig+0xb4>)
 800596a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800596e:	bf00      	nop
 8005970:	08005a15 	.word	0x08005a15
 8005974:	08005a45 	.word	0x08005a45
 8005978:	08005a45 	.word	0x08005a45
 800597c:	08005a45 	.word	0x08005a45
 8005980:	08005a45 	.word	0x08005a45
 8005984:	08005a45 	.word	0x08005a45
 8005988:	08005a45 	.word	0x08005a45
 800598c:	08005a45 	.word	0x08005a45
 8005990:	08005a1d 	.word	0x08005a1d
 8005994:	08005a45 	.word	0x08005a45
 8005998:	08005a45 	.word	0x08005a45
 800599c:	08005a45 	.word	0x08005a45
 80059a0:	08005a45 	.word	0x08005a45
 80059a4:	08005a45 	.word	0x08005a45
 80059a8:	08005a45 	.word	0x08005a45
 80059ac:	08005a45 	.word	0x08005a45
 80059b0:	08005a25 	.word	0x08005a25
 80059b4:	08005a45 	.word	0x08005a45
 80059b8:	08005a45 	.word	0x08005a45
 80059bc:	08005a45 	.word	0x08005a45
 80059c0:	08005a45 	.word	0x08005a45
 80059c4:	08005a45 	.word	0x08005a45
 80059c8:	08005a45 	.word	0x08005a45
 80059cc:	08005a45 	.word	0x08005a45
 80059d0:	08005a2d 	.word	0x08005a2d
 80059d4:	08005a45 	.word	0x08005a45
 80059d8:	08005a45 	.word	0x08005a45
 80059dc:	08005a45 	.word	0x08005a45
 80059e0:	08005a45 	.word	0x08005a45
 80059e4:	08005a45 	.word	0x08005a45
 80059e8:	08005a45 	.word	0x08005a45
 80059ec:	08005a45 	.word	0x08005a45
 80059f0:	08005a35 	.word	0x08005a35
 80059f4:	08005a45 	.word	0x08005a45
 80059f8:	08005a45 	.word	0x08005a45
 80059fc:	08005a45 	.word	0x08005a45
 8005a00:	08005a45 	.word	0x08005a45
 8005a04:	08005a45 	.word	0x08005a45
 8005a08:	08005a45 	.word	0x08005a45
 8005a0c:	08005a45 	.word	0x08005a45
 8005a10:	08005a3d 	.word	0x08005a3d
 8005a14:	2301      	movs	r3, #1
 8005a16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a1a:	e222      	b.n	8005e62 <UART_SetConfig+0x5a6>
 8005a1c:	2304      	movs	r3, #4
 8005a1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a22:	e21e      	b.n	8005e62 <UART_SetConfig+0x5a6>
 8005a24:	2308      	movs	r3, #8
 8005a26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a2a:	e21a      	b.n	8005e62 <UART_SetConfig+0x5a6>
 8005a2c:	2310      	movs	r3, #16
 8005a2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a32:	e216      	b.n	8005e62 <UART_SetConfig+0x5a6>
 8005a34:	2320      	movs	r3, #32
 8005a36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a3a:	e212      	b.n	8005e62 <UART_SetConfig+0x5a6>
 8005a3c:	2340      	movs	r3, #64	@ 0x40
 8005a3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a42:	e20e      	b.n	8005e62 <UART_SetConfig+0x5a6>
 8005a44:	2380      	movs	r3, #128	@ 0x80
 8005a46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a4a:	e20a      	b.n	8005e62 <UART_SetConfig+0x5a6>
 8005a4c:	697b      	ldr	r3, [r7, #20]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	4a69      	ldr	r2, [pc, #420]	@ (8005bf8 <UART_SetConfig+0x33c>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d130      	bne.n	8005ab8 <UART_SetConfig+0x1fc>
 8005a56:	4b67      	ldr	r3, [pc, #412]	@ (8005bf4 <UART_SetConfig+0x338>)
 8005a58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a5a:	f003 0307 	and.w	r3, r3, #7
 8005a5e:	2b05      	cmp	r3, #5
 8005a60:	d826      	bhi.n	8005ab0 <UART_SetConfig+0x1f4>
 8005a62:	a201      	add	r2, pc, #4	@ (adr r2, 8005a68 <UART_SetConfig+0x1ac>)
 8005a64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a68:	08005a81 	.word	0x08005a81
 8005a6c:	08005a89 	.word	0x08005a89
 8005a70:	08005a91 	.word	0x08005a91
 8005a74:	08005a99 	.word	0x08005a99
 8005a78:	08005aa1 	.word	0x08005aa1
 8005a7c:	08005aa9 	.word	0x08005aa9
 8005a80:	2300      	movs	r3, #0
 8005a82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a86:	e1ec      	b.n	8005e62 <UART_SetConfig+0x5a6>
 8005a88:	2304      	movs	r3, #4
 8005a8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a8e:	e1e8      	b.n	8005e62 <UART_SetConfig+0x5a6>
 8005a90:	2308      	movs	r3, #8
 8005a92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a96:	e1e4      	b.n	8005e62 <UART_SetConfig+0x5a6>
 8005a98:	2310      	movs	r3, #16
 8005a9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a9e:	e1e0      	b.n	8005e62 <UART_SetConfig+0x5a6>
 8005aa0:	2320      	movs	r3, #32
 8005aa2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005aa6:	e1dc      	b.n	8005e62 <UART_SetConfig+0x5a6>
 8005aa8:	2340      	movs	r3, #64	@ 0x40
 8005aaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005aae:	e1d8      	b.n	8005e62 <UART_SetConfig+0x5a6>
 8005ab0:	2380      	movs	r3, #128	@ 0x80
 8005ab2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ab6:	e1d4      	b.n	8005e62 <UART_SetConfig+0x5a6>
 8005ab8:	697b      	ldr	r3, [r7, #20]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	4a4f      	ldr	r2, [pc, #316]	@ (8005bfc <UART_SetConfig+0x340>)
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d130      	bne.n	8005b24 <UART_SetConfig+0x268>
 8005ac2:	4b4c      	ldr	r3, [pc, #304]	@ (8005bf4 <UART_SetConfig+0x338>)
 8005ac4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ac6:	f003 0307 	and.w	r3, r3, #7
 8005aca:	2b05      	cmp	r3, #5
 8005acc:	d826      	bhi.n	8005b1c <UART_SetConfig+0x260>
 8005ace:	a201      	add	r2, pc, #4	@ (adr r2, 8005ad4 <UART_SetConfig+0x218>)
 8005ad0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ad4:	08005aed 	.word	0x08005aed
 8005ad8:	08005af5 	.word	0x08005af5
 8005adc:	08005afd 	.word	0x08005afd
 8005ae0:	08005b05 	.word	0x08005b05
 8005ae4:	08005b0d 	.word	0x08005b0d
 8005ae8:	08005b15 	.word	0x08005b15
 8005aec:	2300      	movs	r3, #0
 8005aee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005af2:	e1b6      	b.n	8005e62 <UART_SetConfig+0x5a6>
 8005af4:	2304      	movs	r3, #4
 8005af6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005afa:	e1b2      	b.n	8005e62 <UART_SetConfig+0x5a6>
 8005afc:	2308      	movs	r3, #8
 8005afe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b02:	e1ae      	b.n	8005e62 <UART_SetConfig+0x5a6>
 8005b04:	2310      	movs	r3, #16
 8005b06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b0a:	e1aa      	b.n	8005e62 <UART_SetConfig+0x5a6>
 8005b0c:	2320      	movs	r3, #32
 8005b0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b12:	e1a6      	b.n	8005e62 <UART_SetConfig+0x5a6>
 8005b14:	2340      	movs	r3, #64	@ 0x40
 8005b16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b1a:	e1a2      	b.n	8005e62 <UART_SetConfig+0x5a6>
 8005b1c:	2380      	movs	r3, #128	@ 0x80
 8005b1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b22:	e19e      	b.n	8005e62 <UART_SetConfig+0x5a6>
 8005b24:	697b      	ldr	r3, [r7, #20]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	4a35      	ldr	r2, [pc, #212]	@ (8005c00 <UART_SetConfig+0x344>)
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d130      	bne.n	8005b90 <UART_SetConfig+0x2d4>
 8005b2e:	4b31      	ldr	r3, [pc, #196]	@ (8005bf4 <UART_SetConfig+0x338>)
 8005b30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b32:	f003 0307 	and.w	r3, r3, #7
 8005b36:	2b05      	cmp	r3, #5
 8005b38:	d826      	bhi.n	8005b88 <UART_SetConfig+0x2cc>
 8005b3a:	a201      	add	r2, pc, #4	@ (adr r2, 8005b40 <UART_SetConfig+0x284>)
 8005b3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b40:	08005b59 	.word	0x08005b59
 8005b44:	08005b61 	.word	0x08005b61
 8005b48:	08005b69 	.word	0x08005b69
 8005b4c:	08005b71 	.word	0x08005b71
 8005b50:	08005b79 	.word	0x08005b79
 8005b54:	08005b81 	.word	0x08005b81
 8005b58:	2300      	movs	r3, #0
 8005b5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b5e:	e180      	b.n	8005e62 <UART_SetConfig+0x5a6>
 8005b60:	2304      	movs	r3, #4
 8005b62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b66:	e17c      	b.n	8005e62 <UART_SetConfig+0x5a6>
 8005b68:	2308      	movs	r3, #8
 8005b6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b6e:	e178      	b.n	8005e62 <UART_SetConfig+0x5a6>
 8005b70:	2310      	movs	r3, #16
 8005b72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b76:	e174      	b.n	8005e62 <UART_SetConfig+0x5a6>
 8005b78:	2320      	movs	r3, #32
 8005b7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b7e:	e170      	b.n	8005e62 <UART_SetConfig+0x5a6>
 8005b80:	2340      	movs	r3, #64	@ 0x40
 8005b82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b86:	e16c      	b.n	8005e62 <UART_SetConfig+0x5a6>
 8005b88:	2380      	movs	r3, #128	@ 0x80
 8005b8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b8e:	e168      	b.n	8005e62 <UART_SetConfig+0x5a6>
 8005b90:	697b      	ldr	r3, [r7, #20]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	4a1b      	ldr	r2, [pc, #108]	@ (8005c04 <UART_SetConfig+0x348>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d142      	bne.n	8005c20 <UART_SetConfig+0x364>
 8005b9a:	4b16      	ldr	r3, [pc, #88]	@ (8005bf4 <UART_SetConfig+0x338>)
 8005b9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b9e:	f003 0307 	and.w	r3, r3, #7
 8005ba2:	2b05      	cmp	r3, #5
 8005ba4:	d838      	bhi.n	8005c18 <UART_SetConfig+0x35c>
 8005ba6:	a201      	add	r2, pc, #4	@ (adr r2, 8005bac <UART_SetConfig+0x2f0>)
 8005ba8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bac:	08005bc5 	.word	0x08005bc5
 8005bb0:	08005bcd 	.word	0x08005bcd
 8005bb4:	08005bd5 	.word	0x08005bd5
 8005bb8:	08005bdd 	.word	0x08005bdd
 8005bbc:	08005c09 	.word	0x08005c09
 8005bc0:	08005c11 	.word	0x08005c11
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005bca:	e14a      	b.n	8005e62 <UART_SetConfig+0x5a6>
 8005bcc:	2304      	movs	r3, #4
 8005bce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005bd2:	e146      	b.n	8005e62 <UART_SetConfig+0x5a6>
 8005bd4:	2308      	movs	r3, #8
 8005bd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005bda:	e142      	b.n	8005e62 <UART_SetConfig+0x5a6>
 8005bdc:	2310      	movs	r3, #16
 8005bde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005be2:	e13e      	b.n	8005e62 <UART_SetConfig+0x5a6>
 8005be4:	cfff69f3 	.word	0xcfff69f3
 8005be8:	58000c00 	.word	0x58000c00
 8005bec:	11fff4ff 	.word	0x11fff4ff
 8005bf0:	40011000 	.word	0x40011000
 8005bf4:	58024400 	.word	0x58024400
 8005bf8:	40004400 	.word	0x40004400
 8005bfc:	40004800 	.word	0x40004800
 8005c00:	40004c00 	.word	0x40004c00
 8005c04:	40005000 	.word	0x40005000
 8005c08:	2320      	movs	r3, #32
 8005c0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c0e:	e128      	b.n	8005e62 <UART_SetConfig+0x5a6>
 8005c10:	2340      	movs	r3, #64	@ 0x40
 8005c12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c16:	e124      	b.n	8005e62 <UART_SetConfig+0x5a6>
 8005c18:	2380      	movs	r3, #128	@ 0x80
 8005c1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c1e:	e120      	b.n	8005e62 <UART_SetConfig+0x5a6>
 8005c20:	697b      	ldr	r3, [r7, #20]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	4acb      	ldr	r2, [pc, #812]	@ (8005f54 <UART_SetConfig+0x698>)
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d176      	bne.n	8005d18 <UART_SetConfig+0x45c>
 8005c2a:	4bcb      	ldr	r3, [pc, #812]	@ (8005f58 <UART_SetConfig+0x69c>)
 8005c2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c2e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005c32:	2b28      	cmp	r3, #40	@ 0x28
 8005c34:	d86c      	bhi.n	8005d10 <UART_SetConfig+0x454>
 8005c36:	a201      	add	r2, pc, #4	@ (adr r2, 8005c3c <UART_SetConfig+0x380>)
 8005c38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c3c:	08005ce1 	.word	0x08005ce1
 8005c40:	08005d11 	.word	0x08005d11
 8005c44:	08005d11 	.word	0x08005d11
 8005c48:	08005d11 	.word	0x08005d11
 8005c4c:	08005d11 	.word	0x08005d11
 8005c50:	08005d11 	.word	0x08005d11
 8005c54:	08005d11 	.word	0x08005d11
 8005c58:	08005d11 	.word	0x08005d11
 8005c5c:	08005ce9 	.word	0x08005ce9
 8005c60:	08005d11 	.word	0x08005d11
 8005c64:	08005d11 	.word	0x08005d11
 8005c68:	08005d11 	.word	0x08005d11
 8005c6c:	08005d11 	.word	0x08005d11
 8005c70:	08005d11 	.word	0x08005d11
 8005c74:	08005d11 	.word	0x08005d11
 8005c78:	08005d11 	.word	0x08005d11
 8005c7c:	08005cf1 	.word	0x08005cf1
 8005c80:	08005d11 	.word	0x08005d11
 8005c84:	08005d11 	.word	0x08005d11
 8005c88:	08005d11 	.word	0x08005d11
 8005c8c:	08005d11 	.word	0x08005d11
 8005c90:	08005d11 	.word	0x08005d11
 8005c94:	08005d11 	.word	0x08005d11
 8005c98:	08005d11 	.word	0x08005d11
 8005c9c:	08005cf9 	.word	0x08005cf9
 8005ca0:	08005d11 	.word	0x08005d11
 8005ca4:	08005d11 	.word	0x08005d11
 8005ca8:	08005d11 	.word	0x08005d11
 8005cac:	08005d11 	.word	0x08005d11
 8005cb0:	08005d11 	.word	0x08005d11
 8005cb4:	08005d11 	.word	0x08005d11
 8005cb8:	08005d11 	.word	0x08005d11
 8005cbc:	08005d01 	.word	0x08005d01
 8005cc0:	08005d11 	.word	0x08005d11
 8005cc4:	08005d11 	.word	0x08005d11
 8005cc8:	08005d11 	.word	0x08005d11
 8005ccc:	08005d11 	.word	0x08005d11
 8005cd0:	08005d11 	.word	0x08005d11
 8005cd4:	08005d11 	.word	0x08005d11
 8005cd8:	08005d11 	.word	0x08005d11
 8005cdc:	08005d09 	.word	0x08005d09
 8005ce0:	2301      	movs	r3, #1
 8005ce2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ce6:	e0bc      	b.n	8005e62 <UART_SetConfig+0x5a6>
 8005ce8:	2304      	movs	r3, #4
 8005cea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005cee:	e0b8      	b.n	8005e62 <UART_SetConfig+0x5a6>
 8005cf0:	2308      	movs	r3, #8
 8005cf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005cf6:	e0b4      	b.n	8005e62 <UART_SetConfig+0x5a6>
 8005cf8:	2310      	movs	r3, #16
 8005cfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005cfe:	e0b0      	b.n	8005e62 <UART_SetConfig+0x5a6>
 8005d00:	2320      	movs	r3, #32
 8005d02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d06:	e0ac      	b.n	8005e62 <UART_SetConfig+0x5a6>
 8005d08:	2340      	movs	r3, #64	@ 0x40
 8005d0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d0e:	e0a8      	b.n	8005e62 <UART_SetConfig+0x5a6>
 8005d10:	2380      	movs	r3, #128	@ 0x80
 8005d12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d16:	e0a4      	b.n	8005e62 <UART_SetConfig+0x5a6>
 8005d18:	697b      	ldr	r3, [r7, #20]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	4a8f      	ldr	r2, [pc, #572]	@ (8005f5c <UART_SetConfig+0x6a0>)
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	d130      	bne.n	8005d84 <UART_SetConfig+0x4c8>
 8005d22:	4b8d      	ldr	r3, [pc, #564]	@ (8005f58 <UART_SetConfig+0x69c>)
 8005d24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d26:	f003 0307 	and.w	r3, r3, #7
 8005d2a:	2b05      	cmp	r3, #5
 8005d2c:	d826      	bhi.n	8005d7c <UART_SetConfig+0x4c0>
 8005d2e:	a201      	add	r2, pc, #4	@ (adr r2, 8005d34 <UART_SetConfig+0x478>)
 8005d30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d34:	08005d4d 	.word	0x08005d4d
 8005d38:	08005d55 	.word	0x08005d55
 8005d3c:	08005d5d 	.word	0x08005d5d
 8005d40:	08005d65 	.word	0x08005d65
 8005d44:	08005d6d 	.word	0x08005d6d
 8005d48:	08005d75 	.word	0x08005d75
 8005d4c:	2300      	movs	r3, #0
 8005d4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d52:	e086      	b.n	8005e62 <UART_SetConfig+0x5a6>
 8005d54:	2304      	movs	r3, #4
 8005d56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d5a:	e082      	b.n	8005e62 <UART_SetConfig+0x5a6>
 8005d5c:	2308      	movs	r3, #8
 8005d5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d62:	e07e      	b.n	8005e62 <UART_SetConfig+0x5a6>
 8005d64:	2310      	movs	r3, #16
 8005d66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d6a:	e07a      	b.n	8005e62 <UART_SetConfig+0x5a6>
 8005d6c:	2320      	movs	r3, #32
 8005d6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d72:	e076      	b.n	8005e62 <UART_SetConfig+0x5a6>
 8005d74:	2340      	movs	r3, #64	@ 0x40
 8005d76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d7a:	e072      	b.n	8005e62 <UART_SetConfig+0x5a6>
 8005d7c:	2380      	movs	r3, #128	@ 0x80
 8005d7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d82:	e06e      	b.n	8005e62 <UART_SetConfig+0x5a6>
 8005d84:	697b      	ldr	r3, [r7, #20]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	4a75      	ldr	r2, [pc, #468]	@ (8005f60 <UART_SetConfig+0x6a4>)
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d130      	bne.n	8005df0 <UART_SetConfig+0x534>
 8005d8e:	4b72      	ldr	r3, [pc, #456]	@ (8005f58 <UART_SetConfig+0x69c>)
 8005d90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d92:	f003 0307 	and.w	r3, r3, #7
 8005d96:	2b05      	cmp	r3, #5
 8005d98:	d826      	bhi.n	8005de8 <UART_SetConfig+0x52c>
 8005d9a:	a201      	add	r2, pc, #4	@ (adr r2, 8005da0 <UART_SetConfig+0x4e4>)
 8005d9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005da0:	08005db9 	.word	0x08005db9
 8005da4:	08005dc1 	.word	0x08005dc1
 8005da8:	08005dc9 	.word	0x08005dc9
 8005dac:	08005dd1 	.word	0x08005dd1
 8005db0:	08005dd9 	.word	0x08005dd9
 8005db4:	08005de1 	.word	0x08005de1
 8005db8:	2300      	movs	r3, #0
 8005dba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005dbe:	e050      	b.n	8005e62 <UART_SetConfig+0x5a6>
 8005dc0:	2304      	movs	r3, #4
 8005dc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005dc6:	e04c      	b.n	8005e62 <UART_SetConfig+0x5a6>
 8005dc8:	2308      	movs	r3, #8
 8005dca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005dce:	e048      	b.n	8005e62 <UART_SetConfig+0x5a6>
 8005dd0:	2310      	movs	r3, #16
 8005dd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005dd6:	e044      	b.n	8005e62 <UART_SetConfig+0x5a6>
 8005dd8:	2320      	movs	r3, #32
 8005dda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005dde:	e040      	b.n	8005e62 <UART_SetConfig+0x5a6>
 8005de0:	2340      	movs	r3, #64	@ 0x40
 8005de2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005de6:	e03c      	b.n	8005e62 <UART_SetConfig+0x5a6>
 8005de8:	2380      	movs	r3, #128	@ 0x80
 8005dea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005dee:	e038      	b.n	8005e62 <UART_SetConfig+0x5a6>
 8005df0:	697b      	ldr	r3, [r7, #20]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	4a5b      	ldr	r2, [pc, #364]	@ (8005f64 <UART_SetConfig+0x6a8>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d130      	bne.n	8005e5c <UART_SetConfig+0x5a0>
 8005dfa:	4b57      	ldr	r3, [pc, #348]	@ (8005f58 <UART_SetConfig+0x69c>)
 8005dfc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005dfe:	f003 0307 	and.w	r3, r3, #7
 8005e02:	2b05      	cmp	r3, #5
 8005e04:	d826      	bhi.n	8005e54 <UART_SetConfig+0x598>
 8005e06:	a201      	add	r2, pc, #4	@ (adr r2, 8005e0c <UART_SetConfig+0x550>)
 8005e08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e0c:	08005e25 	.word	0x08005e25
 8005e10:	08005e2d 	.word	0x08005e2d
 8005e14:	08005e35 	.word	0x08005e35
 8005e18:	08005e3d 	.word	0x08005e3d
 8005e1c:	08005e45 	.word	0x08005e45
 8005e20:	08005e4d 	.word	0x08005e4d
 8005e24:	2302      	movs	r3, #2
 8005e26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e2a:	e01a      	b.n	8005e62 <UART_SetConfig+0x5a6>
 8005e2c:	2304      	movs	r3, #4
 8005e2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e32:	e016      	b.n	8005e62 <UART_SetConfig+0x5a6>
 8005e34:	2308      	movs	r3, #8
 8005e36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e3a:	e012      	b.n	8005e62 <UART_SetConfig+0x5a6>
 8005e3c:	2310      	movs	r3, #16
 8005e3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e42:	e00e      	b.n	8005e62 <UART_SetConfig+0x5a6>
 8005e44:	2320      	movs	r3, #32
 8005e46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e4a:	e00a      	b.n	8005e62 <UART_SetConfig+0x5a6>
 8005e4c:	2340      	movs	r3, #64	@ 0x40
 8005e4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e52:	e006      	b.n	8005e62 <UART_SetConfig+0x5a6>
 8005e54:	2380      	movs	r3, #128	@ 0x80
 8005e56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e5a:	e002      	b.n	8005e62 <UART_SetConfig+0x5a6>
 8005e5c:	2380      	movs	r3, #128	@ 0x80
 8005e5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005e62:	697b      	ldr	r3, [r7, #20]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	4a3f      	ldr	r2, [pc, #252]	@ (8005f64 <UART_SetConfig+0x6a8>)
 8005e68:	4293      	cmp	r3, r2
 8005e6a:	f040 80f8 	bne.w	800605e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005e6e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005e72:	2b20      	cmp	r3, #32
 8005e74:	dc46      	bgt.n	8005f04 <UART_SetConfig+0x648>
 8005e76:	2b02      	cmp	r3, #2
 8005e78:	f2c0 8082 	blt.w	8005f80 <UART_SetConfig+0x6c4>
 8005e7c:	3b02      	subs	r3, #2
 8005e7e:	2b1e      	cmp	r3, #30
 8005e80:	d87e      	bhi.n	8005f80 <UART_SetConfig+0x6c4>
 8005e82:	a201      	add	r2, pc, #4	@ (adr r2, 8005e88 <UART_SetConfig+0x5cc>)
 8005e84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e88:	08005f0b 	.word	0x08005f0b
 8005e8c:	08005f81 	.word	0x08005f81
 8005e90:	08005f13 	.word	0x08005f13
 8005e94:	08005f81 	.word	0x08005f81
 8005e98:	08005f81 	.word	0x08005f81
 8005e9c:	08005f81 	.word	0x08005f81
 8005ea0:	08005f23 	.word	0x08005f23
 8005ea4:	08005f81 	.word	0x08005f81
 8005ea8:	08005f81 	.word	0x08005f81
 8005eac:	08005f81 	.word	0x08005f81
 8005eb0:	08005f81 	.word	0x08005f81
 8005eb4:	08005f81 	.word	0x08005f81
 8005eb8:	08005f81 	.word	0x08005f81
 8005ebc:	08005f81 	.word	0x08005f81
 8005ec0:	08005f33 	.word	0x08005f33
 8005ec4:	08005f81 	.word	0x08005f81
 8005ec8:	08005f81 	.word	0x08005f81
 8005ecc:	08005f81 	.word	0x08005f81
 8005ed0:	08005f81 	.word	0x08005f81
 8005ed4:	08005f81 	.word	0x08005f81
 8005ed8:	08005f81 	.word	0x08005f81
 8005edc:	08005f81 	.word	0x08005f81
 8005ee0:	08005f81 	.word	0x08005f81
 8005ee4:	08005f81 	.word	0x08005f81
 8005ee8:	08005f81 	.word	0x08005f81
 8005eec:	08005f81 	.word	0x08005f81
 8005ef0:	08005f81 	.word	0x08005f81
 8005ef4:	08005f81 	.word	0x08005f81
 8005ef8:	08005f81 	.word	0x08005f81
 8005efc:	08005f81 	.word	0x08005f81
 8005f00:	08005f73 	.word	0x08005f73
 8005f04:	2b40      	cmp	r3, #64	@ 0x40
 8005f06:	d037      	beq.n	8005f78 <UART_SetConfig+0x6bc>
 8005f08:	e03a      	b.n	8005f80 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8005f0a:	f7fe ffd7 	bl	8004ebc <HAL_RCCEx_GetD3PCLK1Freq>
 8005f0e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005f10:	e03c      	b.n	8005f8c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005f12:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005f16:	4618      	mov	r0, r3
 8005f18:	f7fe ffe6 	bl	8004ee8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005f1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005f20:	e034      	b.n	8005f8c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005f22:	f107 0318 	add.w	r3, r7, #24
 8005f26:	4618      	mov	r0, r3
 8005f28:	f7ff f932 	bl	8005190 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005f2c:	69fb      	ldr	r3, [r7, #28]
 8005f2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005f30:	e02c      	b.n	8005f8c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005f32:	4b09      	ldr	r3, [pc, #36]	@ (8005f58 <UART_SetConfig+0x69c>)
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f003 0320 	and.w	r3, r3, #32
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d016      	beq.n	8005f6c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005f3e:	4b06      	ldr	r3, [pc, #24]	@ (8005f58 <UART_SetConfig+0x69c>)
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	08db      	lsrs	r3, r3, #3
 8005f44:	f003 0303 	and.w	r3, r3, #3
 8005f48:	4a07      	ldr	r2, [pc, #28]	@ (8005f68 <UART_SetConfig+0x6ac>)
 8005f4a:	fa22 f303 	lsr.w	r3, r2, r3
 8005f4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005f50:	e01c      	b.n	8005f8c <UART_SetConfig+0x6d0>
 8005f52:	bf00      	nop
 8005f54:	40011400 	.word	0x40011400
 8005f58:	58024400 	.word	0x58024400
 8005f5c:	40007800 	.word	0x40007800
 8005f60:	40007c00 	.word	0x40007c00
 8005f64:	58000c00 	.word	0x58000c00
 8005f68:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8005f6c:	4b9d      	ldr	r3, [pc, #628]	@ (80061e4 <UART_SetConfig+0x928>)
 8005f6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005f70:	e00c      	b.n	8005f8c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005f72:	4b9d      	ldr	r3, [pc, #628]	@ (80061e8 <UART_SetConfig+0x92c>)
 8005f74:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005f76:	e009      	b.n	8005f8c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f78:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005f7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005f7e:	e005      	b.n	8005f8c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8005f80:	2300      	movs	r3, #0
 8005f82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8005f84:	2301      	movs	r3, #1
 8005f86:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8005f8a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005f8c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	f000 81de 	beq.w	8006350 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005f94:	697b      	ldr	r3, [r7, #20]
 8005f96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f98:	4a94      	ldr	r2, [pc, #592]	@ (80061ec <UART_SetConfig+0x930>)
 8005f9a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005f9e:	461a      	mov	r2, r3
 8005fa0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005fa2:	fbb3 f3f2 	udiv	r3, r3, r2
 8005fa6:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005fa8:	697b      	ldr	r3, [r7, #20]
 8005faa:	685a      	ldr	r2, [r3, #4]
 8005fac:	4613      	mov	r3, r2
 8005fae:	005b      	lsls	r3, r3, #1
 8005fb0:	4413      	add	r3, r2
 8005fb2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005fb4:	429a      	cmp	r2, r3
 8005fb6:	d305      	bcc.n	8005fc4 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005fb8:	697b      	ldr	r3, [r7, #20]
 8005fba:	685b      	ldr	r3, [r3, #4]
 8005fbc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005fbe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005fc0:	429a      	cmp	r2, r3
 8005fc2:	d903      	bls.n	8005fcc <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8005fc4:	2301      	movs	r3, #1
 8005fc6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8005fca:	e1c1      	b.n	8006350 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005fcc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005fce:	2200      	movs	r2, #0
 8005fd0:	60bb      	str	r3, [r7, #8]
 8005fd2:	60fa      	str	r2, [r7, #12]
 8005fd4:	697b      	ldr	r3, [r7, #20]
 8005fd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fd8:	4a84      	ldr	r2, [pc, #528]	@ (80061ec <UART_SetConfig+0x930>)
 8005fda:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005fde:	b29b      	uxth	r3, r3
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	603b      	str	r3, [r7, #0]
 8005fe4:	607a      	str	r2, [r7, #4]
 8005fe6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005fea:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005fee:	f7fa f9cf 	bl	8000390 <__aeabi_uldivmod>
 8005ff2:	4602      	mov	r2, r0
 8005ff4:	460b      	mov	r3, r1
 8005ff6:	4610      	mov	r0, r2
 8005ff8:	4619      	mov	r1, r3
 8005ffa:	f04f 0200 	mov.w	r2, #0
 8005ffe:	f04f 0300 	mov.w	r3, #0
 8006002:	020b      	lsls	r3, r1, #8
 8006004:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006008:	0202      	lsls	r2, r0, #8
 800600a:	6979      	ldr	r1, [r7, #20]
 800600c:	6849      	ldr	r1, [r1, #4]
 800600e:	0849      	lsrs	r1, r1, #1
 8006010:	2000      	movs	r0, #0
 8006012:	460c      	mov	r4, r1
 8006014:	4605      	mov	r5, r0
 8006016:	eb12 0804 	adds.w	r8, r2, r4
 800601a:	eb43 0905 	adc.w	r9, r3, r5
 800601e:	697b      	ldr	r3, [r7, #20]
 8006020:	685b      	ldr	r3, [r3, #4]
 8006022:	2200      	movs	r2, #0
 8006024:	469a      	mov	sl, r3
 8006026:	4693      	mov	fp, r2
 8006028:	4652      	mov	r2, sl
 800602a:	465b      	mov	r3, fp
 800602c:	4640      	mov	r0, r8
 800602e:	4649      	mov	r1, r9
 8006030:	f7fa f9ae 	bl	8000390 <__aeabi_uldivmod>
 8006034:	4602      	mov	r2, r0
 8006036:	460b      	mov	r3, r1
 8006038:	4613      	mov	r3, r2
 800603a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800603c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800603e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006042:	d308      	bcc.n	8006056 <UART_SetConfig+0x79a>
 8006044:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006046:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800604a:	d204      	bcs.n	8006056 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800604c:	697b      	ldr	r3, [r7, #20]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006052:	60da      	str	r2, [r3, #12]
 8006054:	e17c      	b.n	8006350 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8006056:	2301      	movs	r3, #1
 8006058:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800605c:	e178      	b.n	8006350 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800605e:	697b      	ldr	r3, [r7, #20]
 8006060:	69db      	ldr	r3, [r3, #28]
 8006062:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006066:	f040 80c5 	bne.w	80061f4 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800606a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800606e:	2b20      	cmp	r3, #32
 8006070:	dc48      	bgt.n	8006104 <UART_SetConfig+0x848>
 8006072:	2b00      	cmp	r3, #0
 8006074:	db7b      	blt.n	800616e <UART_SetConfig+0x8b2>
 8006076:	2b20      	cmp	r3, #32
 8006078:	d879      	bhi.n	800616e <UART_SetConfig+0x8b2>
 800607a:	a201      	add	r2, pc, #4	@ (adr r2, 8006080 <UART_SetConfig+0x7c4>)
 800607c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006080:	0800610b 	.word	0x0800610b
 8006084:	08006113 	.word	0x08006113
 8006088:	0800616f 	.word	0x0800616f
 800608c:	0800616f 	.word	0x0800616f
 8006090:	0800611b 	.word	0x0800611b
 8006094:	0800616f 	.word	0x0800616f
 8006098:	0800616f 	.word	0x0800616f
 800609c:	0800616f 	.word	0x0800616f
 80060a0:	0800612b 	.word	0x0800612b
 80060a4:	0800616f 	.word	0x0800616f
 80060a8:	0800616f 	.word	0x0800616f
 80060ac:	0800616f 	.word	0x0800616f
 80060b0:	0800616f 	.word	0x0800616f
 80060b4:	0800616f 	.word	0x0800616f
 80060b8:	0800616f 	.word	0x0800616f
 80060bc:	0800616f 	.word	0x0800616f
 80060c0:	0800613b 	.word	0x0800613b
 80060c4:	0800616f 	.word	0x0800616f
 80060c8:	0800616f 	.word	0x0800616f
 80060cc:	0800616f 	.word	0x0800616f
 80060d0:	0800616f 	.word	0x0800616f
 80060d4:	0800616f 	.word	0x0800616f
 80060d8:	0800616f 	.word	0x0800616f
 80060dc:	0800616f 	.word	0x0800616f
 80060e0:	0800616f 	.word	0x0800616f
 80060e4:	0800616f 	.word	0x0800616f
 80060e8:	0800616f 	.word	0x0800616f
 80060ec:	0800616f 	.word	0x0800616f
 80060f0:	0800616f 	.word	0x0800616f
 80060f4:	0800616f 	.word	0x0800616f
 80060f8:	0800616f 	.word	0x0800616f
 80060fc:	0800616f 	.word	0x0800616f
 8006100:	08006161 	.word	0x08006161
 8006104:	2b40      	cmp	r3, #64	@ 0x40
 8006106:	d02e      	beq.n	8006166 <UART_SetConfig+0x8aa>
 8006108:	e031      	b.n	800616e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800610a:	f7fd fca1 	bl	8003a50 <HAL_RCC_GetPCLK1Freq>
 800610e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006110:	e033      	b.n	800617a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006112:	f7fd fcb3 	bl	8003a7c <HAL_RCC_GetPCLK2Freq>
 8006116:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006118:	e02f      	b.n	800617a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800611a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800611e:	4618      	mov	r0, r3
 8006120:	f7fe fee2 	bl	8004ee8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006124:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006126:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006128:	e027      	b.n	800617a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800612a:	f107 0318 	add.w	r3, r7, #24
 800612e:	4618      	mov	r0, r3
 8006130:	f7ff f82e 	bl	8005190 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006134:	69fb      	ldr	r3, [r7, #28]
 8006136:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006138:	e01f      	b.n	800617a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800613a:	4b2d      	ldr	r3, [pc, #180]	@ (80061f0 <UART_SetConfig+0x934>)
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f003 0320 	and.w	r3, r3, #32
 8006142:	2b00      	cmp	r3, #0
 8006144:	d009      	beq.n	800615a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006146:	4b2a      	ldr	r3, [pc, #168]	@ (80061f0 <UART_SetConfig+0x934>)
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	08db      	lsrs	r3, r3, #3
 800614c:	f003 0303 	and.w	r3, r3, #3
 8006150:	4a24      	ldr	r2, [pc, #144]	@ (80061e4 <UART_SetConfig+0x928>)
 8006152:	fa22 f303 	lsr.w	r3, r2, r3
 8006156:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006158:	e00f      	b.n	800617a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800615a:	4b22      	ldr	r3, [pc, #136]	@ (80061e4 <UART_SetConfig+0x928>)
 800615c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800615e:	e00c      	b.n	800617a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006160:	4b21      	ldr	r3, [pc, #132]	@ (80061e8 <UART_SetConfig+0x92c>)
 8006162:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006164:	e009      	b.n	800617a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006166:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800616a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800616c:	e005      	b.n	800617a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800616e:	2300      	movs	r3, #0
 8006170:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006172:	2301      	movs	r3, #1
 8006174:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006178:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800617a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800617c:	2b00      	cmp	r3, #0
 800617e:	f000 80e7 	beq.w	8006350 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006182:	697b      	ldr	r3, [r7, #20]
 8006184:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006186:	4a19      	ldr	r2, [pc, #100]	@ (80061ec <UART_SetConfig+0x930>)
 8006188:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800618c:	461a      	mov	r2, r3
 800618e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006190:	fbb3 f3f2 	udiv	r3, r3, r2
 8006194:	005a      	lsls	r2, r3, #1
 8006196:	697b      	ldr	r3, [r7, #20]
 8006198:	685b      	ldr	r3, [r3, #4]
 800619a:	085b      	lsrs	r3, r3, #1
 800619c:	441a      	add	r2, r3
 800619e:	697b      	ldr	r3, [r7, #20]
 80061a0:	685b      	ldr	r3, [r3, #4]
 80061a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80061a6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80061a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061aa:	2b0f      	cmp	r3, #15
 80061ac:	d916      	bls.n	80061dc <UART_SetConfig+0x920>
 80061ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80061b4:	d212      	bcs.n	80061dc <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80061b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061b8:	b29b      	uxth	r3, r3
 80061ba:	f023 030f 	bic.w	r3, r3, #15
 80061be:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80061c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061c2:	085b      	lsrs	r3, r3, #1
 80061c4:	b29b      	uxth	r3, r3
 80061c6:	f003 0307 	and.w	r3, r3, #7
 80061ca:	b29a      	uxth	r2, r3
 80061cc:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80061ce:	4313      	orrs	r3, r2
 80061d0:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 80061d2:	697b      	ldr	r3, [r7, #20]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80061d8:	60da      	str	r2, [r3, #12]
 80061da:	e0b9      	b.n	8006350 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80061dc:	2301      	movs	r3, #1
 80061de:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80061e2:	e0b5      	b.n	8006350 <UART_SetConfig+0xa94>
 80061e4:	03d09000 	.word	0x03d09000
 80061e8:	003d0900 	.word	0x003d0900
 80061ec:	08009668 	.word	0x08009668
 80061f0:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80061f4:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80061f8:	2b20      	cmp	r3, #32
 80061fa:	dc49      	bgt.n	8006290 <UART_SetConfig+0x9d4>
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	db7c      	blt.n	80062fa <UART_SetConfig+0xa3e>
 8006200:	2b20      	cmp	r3, #32
 8006202:	d87a      	bhi.n	80062fa <UART_SetConfig+0xa3e>
 8006204:	a201      	add	r2, pc, #4	@ (adr r2, 800620c <UART_SetConfig+0x950>)
 8006206:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800620a:	bf00      	nop
 800620c:	08006297 	.word	0x08006297
 8006210:	0800629f 	.word	0x0800629f
 8006214:	080062fb 	.word	0x080062fb
 8006218:	080062fb 	.word	0x080062fb
 800621c:	080062a7 	.word	0x080062a7
 8006220:	080062fb 	.word	0x080062fb
 8006224:	080062fb 	.word	0x080062fb
 8006228:	080062fb 	.word	0x080062fb
 800622c:	080062b7 	.word	0x080062b7
 8006230:	080062fb 	.word	0x080062fb
 8006234:	080062fb 	.word	0x080062fb
 8006238:	080062fb 	.word	0x080062fb
 800623c:	080062fb 	.word	0x080062fb
 8006240:	080062fb 	.word	0x080062fb
 8006244:	080062fb 	.word	0x080062fb
 8006248:	080062fb 	.word	0x080062fb
 800624c:	080062c7 	.word	0x080062c7
 8006250:	080062fb 	.word	0x080062fb
 8006254:	080062fb 	.word	0x080062fb
 8006258:	080062fb 	.word	0x080062fb
 800625c:	080062fb 	.word	0x080062fb
 8006260:	080062fb 	.word	0x080062fb
 8006264:	080062fb 	.word	0x080062fb
 8006268:	080062fb 	.word	0x080062fb
 800626c:	080062fb 	.word	0x080062fb
 8006270:	080062fb 	.word	0x080062fb
 8006274:	080062fb 	.word	0x080062fb
 8006278:	080062fb 	.word	0x080062fb
 800627c:	080062fb 	.word	0x080062fb
 8006280:	080062fb 	.word	0x080062fb
 8006284:	080062fb 	.word	0x080062fb
 8006288:	080062fb 	.word	0x080062fb
 800628c:	080062ed 	.word	0x080062ed
 8006290:	2b40      	cmp	r3, #64	@ 0x40
 8006292:	d02e      	beq.n	80062f2 <UART_SetConfig+0xa36>
 8006294:	e031      	b.n	80062fa <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006296:	f7fd fbdb 	bl	8003a50 <HAL_RCC_GetPCLK1Freq>
 800629a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800629c:	e033      	b.n	8006306 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800629e:	f7fd fbed 	bl	8003a7c <HAL_RCC_GetPCLK2Freq>
 80062a2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80062a4:	e02f      	b.n	8006306 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80062a6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80062aa:	4618      	mov	r0, r3
 80062ac:	f7fe fe1c 	bl	8004ee8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80062b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80062b4:	e027      	b.n	8006306 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80062b6:	f107 0318 	add.w	r3, r7, #24
 80062ba:	4618      	mov	r0, r3
 80062bc:	f7fe ff68 	bl	8005190 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80062c0:	69fb      	ldr	r3, [r7, #28]
 80062c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80062c4:	e01f      	b.n	8006306 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80062c6:	4b2d      	ldr	r3, [pc, #180]	@ (800637c <UART_SetConfig+0xac0>)
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f003 0320 	and.w	r3, r3, #32
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d009      	beq.n	80062e6 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80062d2:	4b2a      	ldr	r3, [pc, #168]	@ (800637c <UART_SetConfig+0xac0>)
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	08db      	lsrs	r3, r3, #3
 80062d8:	f003 0303 	and.w	r3, r3, #3
 80062dc:	4a28      	ldr	r2, [pc, #160]	@ (8006380 <UART_SetConfig+0xac4>)
 80062de:	fa22 f303 	lsr.w	r3, r2, r3
 80062e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80062e4:	e00f      	b.n	8006306 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80062e6:	4b26      	ldr	r3, [pc, #152]	@ (8006380 <UART_SetConfig+0xac4>)
 80062e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80062ea:	e00c      	b.n	8006306 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80062ec:	4b25      	ldr	r3, [pc, #148]	@ (8006384 <UART_SetConfig+0xac8>)
 80062ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80062f0:	e009      	b.n	8006306 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80062f2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80062f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80062f8:	e005      	b.n	8006306 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80062fa:	2300      	movs	r3, #0
 80062fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80062fe:	2301      	movs	r3, #1
 8006300:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006304:	bf00      	nop
    }

    if (pclk != 0U)
 8006306:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006308:	2b00      	cmp	r3, #0
 800630a:	d021      	beq.n	8006350 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800630c:	697b      	ldr	r3, [r7, #20]
 800630e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006310:	4a1d      	ldr	r2, [pc, #116]	@ (8006388 <UART_SetConfig+0xacc>)
 8006312:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006316:	461a      	mov	r2, r3
 8006318:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800631a:	fbb3 f2f2 	udiv	r2, r3, r2
 800631e:	697b      	ldr	r3, [r7, #20]
 8006320:	685b      	ldr	r3, [r3, #4]
 8006322:	085b      	lsrs	r3, r3, #1
 8006324:	441a      	add	r2, r3
 8006326:	697b      	ldr	r3, [r7, #20]
 8006328:	685b      	ldr	r3, [r3, #4]
 800632a:	fbb2 f3f3 	udiv	r3, r2, r3
 800632e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006330:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006332:	2b0f      	cmp	r3, #15
 8006334:	d909      	bls.n	800634a <UART_SetConfig+0xa8e>
 8006336:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006338:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800633c:	d205      	bcs.n	800634a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800633e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006340:	b29a      	uxth	r2, r3
 8006342:	697b      	ldr	r3, [r7, #20]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	60da      	str	r2, [r3, #12]
 8006348:	e002      	b.n	8006350 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800634a:	2301      	movs	r3, #1
 800634c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006350:	697b      	ldr	r3, [r7, #20]
 8006352:	2201      	movs	r2, #1
 8006354:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006358:	697b      	ldr	r3, [r7, #20]
 800635a:	2201      	movs	r2, #1
 800635c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006360:	697b      	ldr	r3, [r7, #20]
 8006362:	2200      	movs	r2, #0
 8006364:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006366:	697b      	ldr	r3, [r7, #20]
 8006368:	2200      	movs	r2, #0
 800636a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800636c:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8006370:	4618      	mov	r0, r3
 8006372:	3748      	adds	r7, #72	@ 0x48
 8006374:	46bd      	mov	sp, r7
 8006376:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800637a:	bf00      	nop
 800637c:	58024400 	.word	0x58024400
 8006380:	03d09000 	.word	0x03d09000
 8006384:	003d0900 	.word	0x003d0900
 8006388:	08009668 	.word	0x08009668

0800638c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800638c:	b480      	push	{r7}
 800638e:	b083      	sub	sp, #12
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006398:	f003 0308 	and.w	r3, r3, #8
 800639c:	2b00      	cmp	r3, #0
 800639e:	d00a      	beq.n	80063b6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	685b      	ldr	r3, [r3, #4]
 80063a6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	430a      	orrs	r2, r1
 80063b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063ba:	f003 0301 	and.w	r3, r3, #1
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d00a      	beq.n	80063d8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	685b      	ldr	r3, [r3, #4]
 80063c8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	430a      	orrs	r2, r1
 80063d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063dc:	f003 0302 	and.w	r3, r3, #2
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d00a      	beq.n	80063fa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	685b      	ldr	r3, [r3, #4]
 80063ea:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	430a      	orrs	r2, r1
 80063f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063fe:	f003 0304 	and.w	r3, r3, #4
 8006402:	2b00      	cmp	r3, #0
 8006404:	d00a      	beq.n	800641c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	685b      	ldr	r3, [r3, #4]
 800640c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	430a      	orrs	r2, r1
 800641a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006420:	f003 0310 	and.w	r3, r3, #16
 8006424:	2b00      	cmp	r3, #0
 8006426:	d00a      	beq.n	800643e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	689b      	ldr	r3, [r3, #8]
 800642e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	430a      	orrs	r2, r1
 800643c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006442:	f003 0320 	and.w	r3, r3, #32
 8006446:	2b00      	cmp	r3, #0
 8006448:	d00a      	beq.n	8006460 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	689b      	ldr	r3, [r3, #8]
 8006450:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	430a      	orrs	r2, r1
 800645e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006464:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006468:	2b00      	cmp	r3, #0
 800646a:	d01a      	beq.n	80064a2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	685b      	ldr	r3, [r3, #4]
 8006472:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	430a      	orrs	r2, r1
 8006480:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006486:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800648a:	d10a      	bne.n	80064a2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	685b      	ldr	r3, [r3, #4]
 8006492:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	430a      	orrs	r2, r1
 80064a0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d00a      	beq.n	80064c4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	685b      	ldr	r3, [r3, #4]
 80064b4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	430a      	orrs	r2, r1
 80064c2:	605a      	str	r2, [r3, #4]
  }
}
 80064c4:	bf00      	nop
 80064c6:	370c      	adds	r7, #12
 80064c8:	46bd      	mov	sp, r7
 80064ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ce:	4770      	bx	lr

080064d0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b098      	sub	sp, #96	@ 0x60
 80064d4:	af02      	add	r7, sp, #8
 80064d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2200      	movs	r2, #0
 80064dc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80064e0:	f7fa feda 	bl	8001298 <HAL_GetTick>
 80064e4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f003 0308 	and.w	r3, r3, #8
 80064f0:	2b08      	cmp	r3, #8
 80064f2:	d12f      	bne.n	8006554 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80064f4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80064f8:	9300      	str	r3, [sp, #0]
 80064fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80064fc:	2200      	movs	r2, #0
 80064fe:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006502:	6878      	ldr	r0, [r7, #4]
 8006504:	f000 f88e 	bl	8006624 <UART_WaitOnFlagUntilTimeout>
 8006508:	4603      	mov	r3, r0
 800650a:	2b00      	cmp	r3, #0
 800650c:	d022      	beq.n	8006554 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006514:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006516:	e853 3f00 	ldrex	r3, [r3]
 800651a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800651c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800651e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006522:	653b      	str	r3, [r7, #80]	@ 0x50
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	461a      	mov	r2, r3
 800652a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800652c:	647b      	str	r3, [r7, #68]	@ 0x44
 800652e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006530:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006532:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006534:	e841 2300 	strex	r3, r2, [r1]
 8006538:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800653a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800653c:	2b00      	cmp	r3, #0
 800653e:	d1e6      	bne.n	800650e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2220      	movs	r2, #32
 8006544:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2200      	movs	r2, #0
 800654c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006550:	2303      	movs	r3, #3
 8006552:	e063      	b.n	800661c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f003 0304 	and.w	r3, r3, #4
 800655e:	2b04      	cmp	r3, #4
 8006560:	d149      	bne.n	80065f6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006562:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006566:	9300      	str	r3, [sp, #0]
 8006568:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800656a:	2200      	movs	r2, #0
 800656c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006570:	6878      	ldr	r0, [r7, #4]
 8006572:	f000 f857 	bl	8006624 <UART_WaitOnFlagUntilTimeout>
 8006576:	4603      	mov	r3, r0
 8006578:	2b00      	cmp	r3, #0
 800657a:	d03c      	beq.n	80065f6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006584:	e853 3f00 	ldrex	r3, [r3]
 8006588:	623b      	str	r3, [r7, #32]
   return(result);
 800658a:	6a3b      	ldr	r3, [r7, #32]
 800658c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006590:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	461a      	mov	r2, r3
 8006598:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800659a:	633b      	str	r3, [r7, #48]	@ 0x30
 800659c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800659e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80065a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80065a2:	e841 2300 	strex	r3, r2, [r1]
 80065a6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80065a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d1e6      	bne.n	800657c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	3308      	adds	r3, #8
 80065b4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065b6:	693b      	ldr	r3, [r7, #16]
 80065b8:	e853 3f00 	ldrex	r3, [r3]
 80065bc:	60fb      	str	r3, [r7, #12]
   return(result);
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	f023 0301 	bic.w	r3, r3, #1
 80065c4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	3308      	adds	r3, #8
 80065cc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80065ce:	61fa      	str	r2, [r7, #28]
 80065d0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065d2:	69b9      	ldr	r1, [r7, #24]
 80065d4:	69fa      	ldr	r2, [r7, #28]
 80065d6:	e841 2300 	strex	r3, r2, [r1]
 80065da:	617b      	str	r3, [r7, #20]
   return(result);
 80065dc:	697b      	ldr	r3, [r7, #20]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d1e5      	bne.n	80065ae <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	2220      	movs	r2, #32
 80065e6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2200      	movs	r2, #0
 80065ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80065f2:	2303      	movs	r3, #3
 80065f4:	e012      	b.n	800661c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	2220      	movs	r2, #32
 80065fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	2220      	movs	r2, #32
 8006602:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	2200      	movs	r2, #0
 800660a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2200      	movs	r2, #0
 8006610:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	2200      	movs	r2, #0
 8006616:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800661a:	2300      	movs	r3, #0
}
 800661c:	4618      	mov	r0, r3
 800661e:	3758      	adds	r7, #88	@ 0x58
 8006620:	46bd      	mov	sp, r7
 8006622:	bd80      	pop	{r7, pc}

08006624 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006624:	b580      	push	{r7, lr}
 8006626:	b084      	sub	sp, #16
 8006628:	af00      	add	r7, sp, #0
 800662a:	60f8      	str	r0, [r7, #12]
 800662c:	60b9      	str	r1, [r7, #8]
 800662e:	603b      	str	r3, [r7, #0]
 8006630:	4613      	mov	r3, r2
 8006632:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006634:	e04f      	b.n	80066d6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006636:	69bb      	ldr	r3, [r7, #24]
 8006638:	f1b3 3fff 	cmp.w	r3, #4294967295
 800663c:	d04b      	beq.n	80066d6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800663e:	f7fa fe2b 	bl	8001298 <HAL_GetTick>
 8006642:	4602      	mov	r2, r0
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	1ad3      	subs	r3, r2, r3
 8006648:	69ba      	ldr	r2, [r7, #24]
 800664a:	429a      	cmp	r2, r3
 800664c:	d302      	bcc.n	8006654 <UART_WaitOnFlagUntilTimeout+0x30>
 800664e:	69bb      	ldr	r3, [r7, #24]
 8006650:	2b00      	cmp	r3, #0
 8006652:	d101      	bne.n	8006658 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006654:	2303      	movs	r3, #3
 8006656:	e04e      	b.n	80066f6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f003 0304 	and.w	r3, r3, #4
 8006662:	2b00      	cmp	r3, #0
 8006664:	d037      	beq.n	80066d6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006666:	68bb      	ldr	r3, [r7, #8]
 8006668:	2b80      	cmp	r3, #128	@ 0x80
 800666a:	d034      	beq.n	80066d6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800666c:	68bb      	ldr	r3, [r7, #8]
 800666e:	2b40      	cmp	r3, #64	@ 0x40
 8006670:	d031      	beq.n	80066d6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	69db      	ldr	r3, [r3, #28]
 8006678:	f003 0308 	and.w	r3, r3, #8
 800667c:	2b08      	cmp	r3, #8
 800667e:	d110      	bne.n	80066a2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	2208      	movs	r2, #8
 8006686:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006688:	68f8      	ldr	r0, [r7, #12]
 800668a:	f000 f839 	bl	8006700 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	2208      	movs	r2, #8
 8006692:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	2200      	movs	r2, #0
 800669a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800669e:	2301      	movs	r3, #1
 80066a0:	e029      	b.n	80066f6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	69db      	ldr	r3, [r3, #28]
 80066a8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80066ac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80066b0:	d111      	bne.n	80066d6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80066ba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80066bc:	68f8      	ldr	r0, [r7, #12]
 80066be:	f000 f81f 	bl	8006700 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	2220      	movs	r2, #32
 80066c6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	2200      	movs	r2, #0
 80066ce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80066d2:	2303      	movs	r3, #3
 80066d4:	e00f      	b.n	80066f6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	69da      	ldr	r2, [r3, #28]
 80066dc:	68bb      	ldr	r3, [r7, #8]
 80066de:	4013      	ands	r3, r2
 80066e0:	68ba      	ldr	r2, [r7, #8]
 80066e2:	429a      	cmp	r2, r3
 80066e4:	bf0c      	ite	eq
 80066e6:	2301      	moveq	r3, #1
 80066e8:	2300      	movne	r3, #0
 80066ea:	b2db      	uxtb	r3, r3
 80066ec:	461a      	mov	r2, r3
 80066ee:	79fb      	ldrb	r3, [r7, #7]
 80066f0:	429a      	cmp	r2, r3
 80066f2:	d0a0      	beq.n	8006636 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80066f4:	2300      	movs	r3, #0
}
 80066f6:	4618      	mov	r0, r3
 80066f8:	3710      	adds	r7, #16
 80066fa:	46bd      	mov	sp, r7
 80066fc:	bd80      	pop	{r7, pc}
	...

08006700 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006700:	b480      	push	{r7}
 8006702:	b095      	sub	sp, #84	@ 0x54
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800670e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006710:	e853 3f00 	ldrex	r3, [r3]
 8006714:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006716:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006718:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800671c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	461a      	mov	r2, r3
 8006724:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006726:	643b      	str	r3, [r7, #64]	@ 0x40
 8006728:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800672a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800672c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800672e:	e841 2300 	strex	r3, r2, [r1]
 8006732:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006734:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006736:	2b00      	cmp	r3, #0
 8006738:	d1e6      	bne.n	8006708 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	3308      	adds	r3, #8
 8006740:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006742:	6a3b      	ldr	r3, [r7, #32]
 8006744:	e853 3f00 	ldrex	r3, [r3]
 8006748:	61fb      	str	r3, [r7, #28]
   return(result);
 800674a:	69fa      	ldr	r2, [r7, #28]
 800674c:	4b1e      	ldr	r3, [pc, #120]	@ (80067c8 <UART_EndRxTransfer+0xc8>)
 800674e:	4013      	ands	r3, r2
 8006750:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	3308      	adds	r3, #8
 8006758:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800675a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800675c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800675e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006760:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006762:	e841 2300 	strex	r3, r2, [r1]
 8006766:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006768:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800676a:	2b00      	cmp	r3, #0
 800676c:	d1e5      	bne.n	800673a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006772:	2b01      	cmp	r3, #1
 8006774:	d118      	bne.n	80067a8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	e853 3f00 	ldrex	r3, [r3]
 8006782:	60bb      	str	r3, [r7, #8]
   return(result);
 8006784:	68bb      	ldr	r3, [r7, #8]
 8006786:	f023 0310 	bic.w	r3, r3, #16
 800678a:	647b      	str	r3, [r7, #68]	@ 0x44
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	461a      	mov	r2, r3
 8006792:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006794:	61bb      	str	r3, [r7, #24]
 8006796:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006798:	6979      	ldr	r1, [r7, #20]
 800679a:	69ba      	ldr	r2, [r7, #24]
 800679c:	e841 2300 	strex	r3, r2, [r1]
 80067a0:	613b      	str	r3, [r7, #16]
   return(result);
 80067a2:	693b      	ldr	r3, [r7, #16]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d1e6      	bne.n	8006776 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2220      	movs	r2, #32
 80067ac:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2200      	movs	r2, #0
 80067b4:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	2200      	movs	r2, #0
 80067ba:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80067bc:	bf00      	nop
 80067be:	3754      	adds	r7, #84	@ 0x54
 80067c0:	46bd      	mov	sp, r7
 80067c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c6:	4770      	bx	lr
 80067c8:	effffffe 	.word	0xeffffffe

080067cc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80067cc:	b480      	push	{r7}
 80067ce:	b085      	sub	sp, #20
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80067da:	2b01      	cmp	r3, #1
 80067dc:	d101      	bne.n	80067e2 <HAL_UARTEx_DisableFifoMode+0x16>
 80067de:	2302      	movs	r3, #2
 80067e0:	e027      	b.n	8006832 <HAL_UARTEx_DisableFifoMode+0x66>
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	2201      	movs	r2, #1
 80067e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	2224      	movs	r2, #36	@ 0x24
 80067ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	681a      	ldr	r2, [r3, #0]
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	f022 0201 	bic.w	r2, r2, #1
 8006808:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006810:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	2200      	movs	r2, #0
 8006816:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	68fa      	ldr	r2, [r7, #12]
 800681e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2220      	movs	r2, #32
 8006824:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2200      	movs	r2, #0
 800682c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006830:	2300      	movs	r3, #0
}
 8006832:	4618      	mov	r0, r3
 8006834:	3714      	adds	r7, #20
 8006836:	46bd      	mov	sp, r7
 8006838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683c:	4770      	bx	lr

0800683e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800683e:	b580      	push	{r7, lr}
 8006840:	b084      	sub	sp, #16
 8006842:	af00      	add	r7, sp, #0
 8006844:	6078      	str	r0, [r7, #4]
 8006846:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800684e:	2b01      	cmp	r3, #1
 8006850:	d101      	bne.n	8006856 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006852:	2302      	movs	r3, #2
 8006854:	e02d      	b.n	80068b2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	2201      	movs	r2, #1
 800685a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	2224      	movs	r2, #36	@ 0x24
 8006862:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	681a      	ldr	r2, [r3, #0]
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f022 0201 	bic.w	r2, r2, #1
 800687c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	689b      	ldr	r3, [r3, #8]
 8006884:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	683a      	ldr	r2, [r7, #0]
 800688e:	430a      	orrs	r2, r1
 8006890:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006892:	6878      	ldr	r0, [r7, #4]
 8006894:	f000 f850 	bl	8006938 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	68fa      	ldr	r2, [r7, #12]
 800689e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2220      	movs	r2, #32
 80068a4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2200      	movs	r2, #0
 80068ac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80068b0:	2300      	movs	r3, #0
}
 80068b2:	4618      	mov	r0, r3
 80068b4:	3710      	adds	r7, #16
 80068b6:	46bd      	mov	sp, r7
 80068b8:	bd80      	pop	{r7, pc}

080068ba <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80068ba:	b580      	push	{r7, lr}
 80068bc:	b084      	sub	sp, #16
 80068be:	af00      	add	r7, sp, #0
 80068c0:	6078      	str	r0, [r7, #4]
 80068c2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80068ca:	2b01      	cmp	r3, #1
 80068cc:	d101      	bne.n	80068d2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80068ce:	2302      	movs	r3, #2
 80068d0:	e02d      	b.n	800692e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	2201      	movs	r2, #1
 80068d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	2224      	movs	r2, #36	@ 0x24
 80068de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	681a      	ldr	r2, [r3, #0]
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f022 0201 	bic.w	r2, r2, #1
 80068f8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	689b      	ldr	r3, [r3, #8]
 8006900:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	683a      	ldr	r2, [r7, #0]
 800690a:	430a      	orrs	r2, r1
 800690c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800690e:	6878      	ldr	r0, [r7, #4]
 8006910:	f000 f812 	bl	8006938 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	68fa      	ldr	r2, [r7, #12]
 800691a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2220      	movs	r2, #32
 8006920:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2200      	movs	r2, #0
 8006928:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800692c:	2300      	movs	r3, #0
}
 800692e:	4618      	mov	r0, r3
 8006930:	3710      	adds	r7, #16
 8006932:	46bd      	mov	sp, r7
 8006934:	bd80      	pop	{r7, pc}
	...

08006938 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006938:	b480      	push	{r7}
 800693a:	b085      	sub	sp, #20
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006944:	2b00      	cmp	r3, #0
 8006946:	d108      	bne.n	800695a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2201      	movs	r2, #1
 800694c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2201      	movs	r2, #1
 8006954:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006958:	e031      	b.n	80069be <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800695a:	2310      	movs	r3, #16
 800695c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800695e:	2310      	movs	r3, #16
 8006960:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	689b      	ldr	r3, [r3, #8]
 8006968:	0e5b      	lsrs	r3, r3, #25
 800696a:	b2db      	uxtb	r3, r3
 800696c:	f003 0307 	and.w	r3, r3, #7
 8006970:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	689b      	ldr	r3, [r3, #8]
 8006978:	0f5b      	lsrs	r3, r3, #29
 800697a:	b2db      	uxtb	r3, r3
 800697c:	f003 0307 	and.w	r3, r3, #7
 8006980:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006982:	7bbb      	ldrb	r3, [r7, #14]
 8006984:	7b3a      	ldrb	r2, [r7, #12]
 8006986:	4911      	ldr	r1, [pc, #68]	@ (80069cc <UARTEx_SetNbDataToProcess+0x94>)
 8006988:	5c8a      	ldrb	r2, [r1, r2]
 800698a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800698e:	7b3a      	ldrb	r2, [r7, #12]
 8006990:	490f      	ldr	r1, [pc, #60]	@ (80069d0 <UARTEx_SetNbDataToProcess+0x98>)
 8006992:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006994:	fb93 f3f2 	sdiv	r3, r3, r2
 8006998:	b29a      	uxth	r2, r3
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80069a0:	7bfb      	ldrb	r3, [r7, #15]
 80069a2:	7b7a      	ldrb	r2, [r7, #13]
 80069a4:	4909      	ldr	r1, [pc, #36]	@ (80069cc <UARTEx_SetNbDataToProcess+0x94>)
 80069a6:	5c8a      	ldrb	r2, [r1, r2]
 80069a8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80069ac:	7b7a      	ldrb	r2, [r7, #13]
 80069ae:	4908      	ldr	r1, [pc, #32]	@ (80069d0 <UARTEx_SetNbDataToProcess+0x98>)
 80069b0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80069b2:	fb93 f3f2 	sdiv	r3, r3, r2
 80069b6:	b29a      	uxth	r2, r3
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80069be:	bf00      	nop
 80069c0:	3714      	adds	r7, #20
 80069c2:	46bd      	mov	sp, r7
 80069c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c8:	4770      	bx	lr
 80069ca:	bf00      	nop
 80069cc:	08009680 	.word	0x08009680
 80069d0:	08009688 	.word	0x08009688

080069d4 <__cvt>:
 80069d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80069d6:	ed2d 8b02 	vpush	{d8}
 80069da:	eeb0 8b40 	vmov.f64	d8, d0
 80069de:	b085      	sub	sp, #20
 80069e0:	4617      	mov	r7, r2
 80069e2:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 80069e4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80069e6:	ee18 2a90 	vmov	r2, s17
 80069ea:	f025 0520 	bic.w	r5, r5, #32
 80069ee:	2a00      	cmp	r2, #0
 80069f0:	bfb6      	itet	lt
 80069f2:	222d      	movlt	r2, #45	@ 0x2d
 80069f4:	2200      	movge	r2, #0
 80069f6:	eeb1 8b40 	vneglt.f64	d8, d0
 80069fa:	2d46      	cmp	r5, #70	@ 0x46
 80069fc:	460c      	mov	r4, r1
 80069fe:	701a      	strb	r2, [r3, #0]
 8006a00:	d004      	beq.n	8006a0c <__cvt+0x38>
 8006a02:	2d45      	cmp	r5, #69	@ 0x45
 8006a04:	d100      	bne.n	8006a08 <__cvt+0x34>
 8006a06:	3401      	adds	r4, #1
 8006a08:	2102      	movs	r1, #2
 8006a0a:	e000      	b.n	8006a0e <__cvt+0x3a>
 8006a0c:	2103      	movs	r1, #3
 8006a0e:	ab03      	add	r3, sp, #12
 8006a10:	9301      	str	r3, [sp, #4]
 8006a12:	ab02      	add	r3, sp, #8
 8006a14:	9300      	str	r3, [sp, #0]
 8006a16:	4622      	mov	r2, r4
 8006a18:	4633      	mov	r3, r6
 8006a1a:	eeb0 0b48 	vmov.f64	d0, d8
 8006a1e:	f000 fe5f 	bl	80076e0 <_dtoa_r>
 8006a22:	2d47      	cmp	r5, #71	@ 0x47
 8006a24:	d114      	bne.n	8006a50 <__cvt+0x7c>
 8006a26:	07fb      	lsls	r3, r7, #31
 8006a28:	d50a      	bpl.n	8006a40 <__cvt+0x6c>
 8006a2a:	1902      	adds	r2, r0, r4
 8006a2c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8006a30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a34:	bf08      	it	eq
 8006a36:	9203      	streq	r2, [sp, #12]
 8006a38:	2130      	movs	r1, #48	@ 0x30
 8006a3a:	9b03      	ldr	r3, [sp, #12]
 8006a3c:	4293      	cmp	r3, r2
 8006a3e:	d319      	bcc.n	8006a74 <__cvt+0xa0>
 8006a40:	9b03      	ldr	r3, [sp, #12]
 8006a42:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006a44:	1a1b      	subs	r3, r3, r0
 8006a46:	6013      	str	r3, [r2, #0]
 8006a48:	b005      	add	sp, #20
 8006a4a:	ecbd 8b02 	vpop	{d8}
 8006a4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a50:	2d46      	cmp	r5, #70	@ 0x46
 8006a52:	eb00 0204 	add.w	r2, r0, r4
 8006a56:	d1e9      	bne.n	8006a2c <__cvt+0x58>
 8006a58:	7803      	ldrb	r3, [r0, #0]
 8006a5a:	2b30      	cmp	r3, #48	@ 0x30
 8006a5c:	d107      	bne.n	8006a6e <__cvt+0x9a>
 8006a5e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8006a62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a66:	bf1c      	itt	ne
 8006a68:	f1c4 0401 	rsbne	r4, r4, #1
 8006a6c:	6034      	strne	r4, [r6, #0]
 8006a6e:	6833      	ldr	r3, [r6, #0]
 8006a70:	441a      	add	r2, r3
 8006a72:	e7db      	b.n	8006a2c <__cvt+0x58>
 8006a74:	1c5c      	adds	r4, r3, #1
 8006a76:	9403      	str	r4, [sp, #12]
 8006a78:	7019      	strb	r1, [r3, #0]
 8006a7a:	e7de      	b.n	8006a3a <__cvt+0x66>

08006a7c <__exponent>:
 8006a7c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006a7e:	2900      	cmp	r1, #0
 8006a80:	bfba      	itte	lt
 8006a82:	4249      	neglt	r1, r1
 8006a84:	232d      	movlt	r3, #45	@ 0x2d
 8006a86:	232b      	movge	r3, #43	@ 0x2b
 8006a88:	2909      	cmp	r1, #9
 8006a8a:	7002      	strb	r2, [r0, #0]
 8006a8c:	7043      	strb	r3, [r0, #1]
 8006a8e:	dd29      	ble.n	8006ae4 <__exponent+0x68>
 8006a90:	f10d 0307 	add.w	r3, sp, #7
 8006a94:	461d      	mov	r5, r3
 8006a96:	270a      	movs	r7, #10
 8006a98:	461a      	mov	r2, r3
 8006a9a:	fbb1 f6f7 	udiv	r6, r1, r7
 8006a9e:	fb07 1416 	mls	r4, r7, r6, r1
 8006aa2:	3430      	adds	r4, #48	@ 0x30
 8006aa4:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006aa8:	460c      	mov	r4, r1
 8006aaa:	2c63      	cmp	r4, #99	@ 0x63
 8006aac:	f103 33ff 	add.w	r3, r3, #4294967295
 8006ab0:	4631      	mov	r1, r6
 8006ab2:	dcf1      	bgt.n	8006a98 <__exponent+0x1c>
 8006ab4:	3130      	adds	r1, #48	@ 0x30
 8006ab6:	1e94      	subs	r4, r2, #2
 8006ab8:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006abc:	1c41      	adds	r1, r0, #1
 8006abe:	4623      	mov	r3, r4
 8006ac0:	42ab      	cmp	r3, r5
 8006ac2:	d30a      	bcc.n	8006ada <__exponent+0x5e>
 8006ac4:	f10d 0309 	add.w	r3, sp, #9
 8006ac8:	1a9b      	subs	r3, r3, r2
 8006aca:	42ac      	cmp	r4, r5
 8006acc:	bf88      	it	hi
 8006ace:	2300      	movhi	r3, #0
 8006ad0:	3302      	adds	r3, #2
 8006ad2:	4403      	add	r3, r0
 8006ad4:	1a18      	subs	r0, r3, r0
 8006ad6:	b003      	add	sp, #12
 8006ad8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006ada:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006ade:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006ae2:	e7ed      	b.n	8006ac0 <__exponent+0x44>
 8006ae4:	2330      	movs	r3, #48	@ 0x30
 8006ae6:	3130      	adds	r1, #48	@ 0x30
 8006ae8:	7083      	strb	r3, [r0, #2]
 8006aea:	70c1      	strb	r1, [r0, #3]
 8006aec:	1d03      	adds	r3, r0, #4
 8006aee:	e7f1      	b.n	8006ad4 <__exponent+0x58>

08006af0 <_printf_float>:
 8006af0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006af4:	b08d      	sub	sp, #52	@ 0x34
 8006af6:	460c      	mov	r4, r1
 8006af8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8006afc:	4616      	mov	r6, r2
 8006afe:	461f      	mov	r7, r3
 8006b00:	4605      	mov	r5, r0
 8006b02:	f000 fcdf 	bl	80074c4 <_localeconv_r>
 8006b06:	f8d0 b000 	ldr.w	fp, [r0]
 8006b0a:	4658      	mov	r0, fp
 8006b0c:	f7f9 fc38 	bl	8000380 <strlen>
 8006b10:	2300      	movs	r3, #0
 8006b12:	930a      	str	r3, [sp, #40]	@ 0x28
 8006b14:	f8d8 3000 	ldr.w	r3, [r8]
 8006b18:	f894 9018 	ldrb.w	r9, [r4, #24]
 8006b1c:	6822      	ldr	r2, [r4, #0]
 8006b1e:	9005      	str	r0, [sp, #20]
 8006b20:	3307      	adds	r3, #7
 8006b22:	f023 0307 	bic.w	r3, r3, #7
 8006b26:	f103 0108 	add.w	r1, r3, #8
 8006b2a:	f8c8 1000 	str.w	r1, [r8]
 8006b2e:	ed93 0b00 	vldr	d0, [r3]
 8006b32:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 8006d90 <_printf_float+0x2a0>
 8006b36:	eeb0 7bc0 	vabs.f64	d7, d0
 8006b3a:	eeb4 7b46 	vcmp.f64	d7, d6
 8006b3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b42:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 8006b46:	dd24      	ble.n	8006b92 <_printf_float+0xa2>
 8006b48:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8006b4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b50:	d502      	bpl.n	8006b58 <_printf_float+0x68>
 8006b52:	232d      	movs	r3, #45	@ 0x2d
 8006b54:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006b58:	498f      	ldr	r1, [pc, #572]	@ (8006d98 <_printf_float+0x2a8>)
 8006b5a:	4b90      	ldr	r3, [pc, #576]	@ (8006d9c <_printf_float+0x2ac>)
 8006b5c:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8006b60:	bf8c      	ite	hi
 8006b62:	4688      	movhi	r8, r1
 8006b64:	4698      	movls	r8, r3
 8006b66:	f022 0204 	bic.w	r2, r2, #4
 8006b6a:	2303      	movs	r3, #3
 8006b6c:	6123      	str	r3, [r4, #16]
 8006b6e:	6022      	str	r2, [r4, #0]
 8006b70:	f04f 0a00 	mov.w	sl, #0
 8006b74:	9700      	str	r7, [sp, #0]
 8006b76:	4633      	mov	r3, r6
 8006b78:	aa0b      	add	r2, sp, #44	@ 0x2c
 8006b7a:	4621      	mov	r1, r4
 8006b7c:	4628      	mov	r0, r5
 8006b7e:	f000 f9d1 	bl	8006f24 <_printf_common>
 8006b82:	3001      	adds	r0, #1
 8006b84:	f040 8089 	bne.w	8006c9a <_printf_float+0x1aa>
 8006b88:	f04f 30ff 	mov.w	r0, #4294967295
 8006b8c:	b00d      	add	sp, #52	@ 0x34
 8006b8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b92:	eeb4 0b40 	vcmp.f64	d0, d0
 8006b96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b9a:	d709      	bvc.n	8006bb0 <_printf_float+0xc0>
 8006b9c:	ee10 3a90 	vmov	r3, s1
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	bfbc      	itt	lt
 8006ba4:	232d      	movlt	r3, #45	@ 0x2d
 8006ba6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006baa:	497d      	ldr	r1, [pc, #500]	@ (8006da0 <_printf_float+0x2b0>)
 8006bac:	4b7d      	ldr	r3, [pc, #500]	@ (8006da4 <_printf_float+0x2b4>)
 8006bae:	e7d5      	b.n	8006b5c <_printf_float+0x6c>
 8006bb0:	6863      	ldr	r3, [r4, #4]
 8006bb2:	1c59      	adds	r1, r3, #1
 8006bb4:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 8006bb8:	d139      	bne.n	8006c2e <_printf_float+0x13e>
 8006bba:	2306      	movs	r3, #6
 8006bbc:	6063      	str	r3, [r4, #4]
 8006bbe:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	6022      	str	r2, [r4, #0]
 8006bc6:	9303      	str	r3, [sp, #12]
 8006bc8:	ab0a      	add	r3, sp, #40	@ 0x28
 8006bca:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8006bce:	ab09      	add	r3, sp, #36	@ 0x24
 8006bd0:	9300      	str	r3, [sp, #0]
 8006bd2:	6861      	ldr	r1, [r4, #4]
 8006bd4:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8006bd8:	4628      	mov	r0, r5
 8006bda:	f7ff fefb 	bl	80069d4 <__cvt>
 8006bde:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006be2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006be4:	4680      	mov	r8, r0
 8006be6:	d129      	bne.n	8006c3c <_printf_float+0x14c>
 8006be8:	1cc8      	adds	r0, r1, #3
 8006bea:	db02      	blt.n	8006bf2 <_printf_float+0x102>
 8006bec:	6863      	ldr	r3, [r4, #4]
 8006bee:	4299      	cmp	r1, r3
 8006bf0:	dd41      	ble.n	8006c76 <_printf_float+0x186>
 8006bf2:	f1a9 0902 	sub.w	r9, r9, #2
 8006bf6:	fa5f f989 	uxtb.w	r9, r9
 8006bfa:	3901      	subs	r1, #1
 8006bfc:	464a      	mov	r2, r9
 8006bfe:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006c02:	9109      	str	r1, [sp, #36]	@ 0x24
 8006c04:	f7ff ff3a 	bl	8006a7c <__exponent>
 8006c08:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006c0a:	1813      	adds	r3, r2, r0
 8006c0c:	2a01      	cmp	r2, #1
 8006c0e:	4682      	mov	sl, r0
 8006c10:	6123      	str	r3, [r4, #16]
 8006c12:	dc02      	bgt.n	8006c1a <_printf_float+0x12a>
 8006c14:	6822      	ldr	r2, [r4, #0]
 8006c16:	07d2      	lsls	r2, r2, #31
 8006c18:	d501      	bpl.n	8006c1e <_printf_float+0x12e>
 8006c1a:	3301      	adds	r3, #1
 8006c1c:	6123      	str	r3, [r4, #16]
 8006c1e:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d0a6      	beq.n	8006b74 <_printf_float+0x84>
 8006c26:	232d      	movs	r3, #45	@ 0x2d
 8006c28:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006c2c:	e7a2      	b.n	8006b74 <_printf_float+0x84>
 8006c2e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006c32:	d1c4      	bne.n	8006bbe <_printf_float+0xce>
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d1c2      	bne.n	8006bbe <_printf_float+0xce>
 8006c38:	2301      	movs	r3, #1
 8006c3a:	e7bf      	b.n	8006bbc <_printf_float+0xcc>
 8006c3c:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8006c40:	d9db      	bls.n	8006bfa <_printf_float+0x10a>
 8006c42:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 8006c46:	d118      	bne.n	8006c7a <_printf_float+0x18a>
 8006c48:	2900      	cmp	r1, #0
 8006c4a:	6863      	ldr	r3, [r4, #4]
 8006c4c:	dd0b      	ble.n	8006c66 <_printf_float+0x176>
 8006c4e:	6121      	str	r1, [r4, #16]
 8006c50:	b913      	cbnz	r3, 8006c58 <_printf_float+0x168>
 8006c52:	6822      	ldr	r2, [r4, #0]
 8006c54:	07d0      	lsls	r0, r2, #31
 8006c56:	d502      	bpl.n	8006c5e <_printf_float+0x16e>
 8006c58:	3301      	adds	r3, #1
 8006c5a:	440b      	add	r3, r1
 8006c5c:	6123      	str	r3, [r4, #16]
 8006c5e:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006c60:	f04f 0a00 	mov.w	sl, #0
 8006c64:	e7db      	b.n	8006c1e <_printf_float+0x12e>
 8006c66:	b913      	cbnz	r3, 8006c6e <_printf_float+0x17e>
 8006c68:	6822      	ldr	r2, [r4, #0]
 8006c6a:	07d2      	lsls	r2, r2, #31
 8006c6c:	d501      	bpl.n	8006c72 <_printf_float+0x182>
 8006c6e:	3302      	adds	r3, #2
 8006c70:	e7f4      	b.n	8006c5c <_printf_float+0x16c>
 8006c72:	2301      	movs	r3, #1
 8006c74:	e7f2      	b.n	8006c5c <_printf_float+0x16c>
 8006c76:	f04f 0967 	mov.w	r9, #103	@ 0x67
 8006c7a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006c7c:	4299      	cmp	r1, r3
 8006c7e:	db05      	blt.n	8006c8c <_printf_float+0x19c>
 8006c80:	6823      	ldr	r3, [r4, #0]
 8006c82:	6121      	str	r1, [r4, #16]
 8006c84:	07d8      	lsls	r0, r3, #31
 8006c86:	d5ea      	bpl.n	8006c5e <_printf_float+0x16e>
 8006c88:	1c4b      	adds	r3, r1, #1
 8006c8a:	e7e7      	b.n	8006c5c <_printf_float+0x16c>
 8006c8c:	2900      	cmp	r1, #0
 8006c8e:	bfd4      	ite	le
 8006c90:	f1c1 0202 	rsble	r2, r1, #2
 8006c94:	2201      	movgt	r2, #1
 8006c96:	4413      	add	r3, r2
 8006c98:	e7e0      	b.n	8006c5c <_printf_float+0x16c>
 8006c9a:	6823      	ldr	r3, [r4, #0]
 8006c9c:	055a      	lsls	r2, r3, #21
 8006c9e:	d407      	bmi.n	8006cb0 <_printf_float+0x1c0>
 8006ca0:	6923      	ldr	r3, [r4, #16]
 8006ca2:	4642      	mov	r2, r8
 8006ca4:	4631      	mov	r1, r6
 8006ca6:	4628      	mov	r0, r5
 8006ca8:	47b8      	blx	r7
 8006caa:	3001      	adds	r0, #1
 8006cac:	d12a      	bne.n	8006d04 <_printf_float+0x214>
 8006cae:	e76b      	b.n	8006b88 <_printf_float+0x98>
 8006cb0:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8006cb4:	f240 80e0 	bls.w	8006e78 <_printf_float+0x388>
 8006cb8:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8006cbc:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006cc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006cc4:	d133      	bne.n	8006d2e <_printf_float+0x23e>
 8006cc6:	4a38      	ldr	r2, [pc, #224]	@ (8006da8 <_printf_float+0x2b8>)
 8006cc8:	2301      	movs	r3, #1
 8006cca:	4631      	mov	r1, r6
 8006ccc:	4628      	mov	r0, r5
 8006cce:	47b8      	blx	r7
 8006cd0:	3001      	adds	r0, #1
 8006cd2:	f43f af59 	beq.w	8006b88 <_printf_float+0x98>
 8006cd6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8006cda:	4543      	cmp	r3, r8
 8006cdc:	db02      	blt.n	8006ce4 <_printf_float+0x1f4>
 8006cde:	6823      	ldr	r3, [r4, #0]
 8006ce0:	07d8      	lsls	r0, r3, #31
 8006ce2:	d50f      	bpl.n	8006d04 <_printf_float+0x214>
 8006ce4:	9b05      	ldr	r3, [sp, #20]
 8006ce6:	465a      	mov	r2, fp
 8006ce8:	4631      	mov	r1, r6
 8006cea:	4628      	mov	r0, r5
 8006cec:	47b8      	blx	r7
 8006cee:	3001      	adds	r0, #1
 8006cf0:	f43f af4a 	beq.w	8006b88 <_printf_float+0x98>
 8006cf4:	f04f 0900 	mov.w	r9, #0
 8006cf8:	f108 38ff 	add.w	r8, r8, #4294967295
 8006cfc:	f104 0a1a 	add.w	sl, r4, #26
 8006d00:	45c8      	cmp	r8, r9
 8006d02:	dc09      	bgt.n	8006d18 <_printf_float+0x228>
 8006d04:	6823      	ldr	r3, [r4, #0]
 8006d06:	079b      	lsls	r3, r3, #30
 8006d08:	f100 8107 	bmi.w	8006f1a <_printf_float+0x42a>
 8006d0c:	68e0      	ldr	r0, [r4, #12]
 8006d0e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006d10:	4298      	cmp	r0, r3
 8006d12:	bfb8      	it	lt
 8006d14:	4618      	movlt	r0, r3
 8006d16:	e739      	b.n	8006b8c <_printf_float+0x9c>
 8006d18:	2301      	movs	r3, #1
 8006d1a:	4652      	mov	r2, sl
 8006d1c:	4631      	mov	r1, r6
 8006d1e:	4628      	mov	r0, r5
 8006d20:	47b8      	blx	r7
 8006d22:	3001      	adds	r0, #1
 8006d24:	f43f af30 	beq.w	8006b88 <_printf_float+0x98>
 8006d28:	f109 0901 	add.w	r9, r9, #1
 8006d2c:	e7e8      	b.n	8006d00 <_printf_float+0x210>
 8006d2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	dc3b      	bgt.n	8006dac <_printf_float+0x2bc>
 8006d34:	4a1c      	ldr	r2, [pc, #112]	@ (8006da8 <_printf_float+0x2b8>)
 8006d36:	2301      	movs	r3, #1
 8006d38:	4631      	mov	r1, r6
 8006d3a:	4628      	mov	r0, r5
 8006d3c:	47b8      	blx	r7
 8006d3e:	3001      	adds	r0, #1
 8006d40:	f43f af22 	beq.w	8006b88 <_printf_float+0x98>
 8006d44:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8006d48:	ea59 0303 	orrs.w	r3, r9, r3
 8006d4c:	d102      	bne.n	8006d54 <_printf_float+0x264>
 8006d4e:	6823      	ldr	r3, [r4, #0]
 8006d50:	07d9      	lsls	r1, r3, #31
 8006d52:	d5d7      	bpl.n	8006d04 <_printf_float+0x214>
 8006d54:	9b05      	ldr	r3, [sp, #20]
 8006d56:	465a      	mov	r2, fp
 8006d58:	4631      	mov	r1, r6
 8006d5a:	4628      	mov	r0, r5
 8006d5c:	47b8      	blx	r7
 8006d5e:	3001      	adds	r0, #1
 8006d60:	f43f af12 	beq.w	8006b88 <_printf_float+0x98>
 8006d64:	f04f 0a00 	mov.w	sl, #0
 8006d68:	f104 0b1a 	add.w	fp, r4, #26
 8006d6c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d6e:	425b      	negs	r3, r3
 8006d70:	4553      	cmp	r3, sl
 8006d72:	dc01      	bgt.n	8006d78 <_printf_float+0x288>
 8006d74:	464b      	mov	r3, r9
 8006d76:	e794      	b.n	8006ca2 <_printf_float+0x1b2>
 8006d78:	2301      	movs	r3, #1
 8006d7a:	465a      	mov	r2, fp
 8006d7c:	4631      	mov	r1, r6
 8006d7e:	4628      	mov	r0, r5
 8006d80:	47b8      	blx	r7
 8006d82:	3001      	adds	r0, #1
 8006d84:	f43f af00 	beq.w	8006b88 <_printf_float+0x98>
 8006d88:	f10a 0a01 	add.w	sl, sl, #1
 8006d8c:	e7ee      	b.n	8006d6c <_printf_float+0x27c>
 8006d8e:	bf00      	nop
 8006d90:	ffffffff 	.word	0xffffffff
 8006d94:	7fefffff 	.word	0x7fefffff
 8006d98:	08009694 	.word	0x08009694
 8006d9c:	08009690 	.word	0x08009690
 8006da0:	0800969c 	.word	0x0800969c
 8006da4:	08009698 	.word	0x08009698
 8006da8:	080096a0 	.word	0x080096a0
 8006dac:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006dae:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006db2:	4553      	cmp	r3, sl
 8006db4:	bfa8      	it	ge
 8006db6:	4653      	movge	r3, sl
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	4699      	mov	r9, r3
 8006dbc:	dc37      	bgt.n	8006e2e <_printf_float+0x33e>
 8006dbe:	2300      	movs	r3, #0
 8006dc0:	9307      	str	r3, [sp, #28]
 8006dc2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006dc6:	f104 021a 	add.w	r2, r4, #26
 8006dca:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006dcc:	9907      	ldr	r1, [sp, #28]
 8006dce:	9306      	str	r3, [sp, #24]
 8006dd0:	eba3 0309 	sub.w	r3, r3, r9
 8006dd4:	428b      	cmp	r3, r1
 8006dd6:	dc31      	bgt.n	8006e3c <_printf_float+0x34c>
 8006dd8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006dda:	459a      	cmp	sl, r3
 8006ddc:	dc3b      	bgt.n	8006e56 <_printf_float+0x366>
 8006dde:	6823      	ldr	r3, [r4, #0]
 8006de0:	07da      	lsls	r2, r3, #31
 8006de2:	d438      	bmi.n	8006e56 <_printf_float+0x366>
 8006de4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006de6:	ebaa 0903 	sub.w	r9, sl, r3
 8006dea:	9b06      	ldr	r3, [sp, #24]
 8006dec:	ebaa 0303 	sub.w	r3, sl, r3
 8006df0:	4599      	cmp	r9, r3
 8006df2:	bfa8      	it	ge
 8006df4:	4699      	movge	r9, r3
 8006df6:	f1b9 0f00 	cmp.w	r9, #0
 8006dfa:	dc34      	bgt.n	8006e66 <_printf_float+0x376>
 8006dfc:	f04f 0800 	mov.w	r8, #0
 8006e00:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006e04:	f104 0b1a 	add.w	fp, r4, #26
 8006e08:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e0a:	ebaa 0303 	sub.w	r3, sl, r3
 8006e0e:	eba3 0309 	sub.w	r3, r3, r9
 8006e12:	4543      	cmp	r3, r8
 8006e14:	f77f af76 	ble.w	8006d04 <_printf_float+0x214>
 8006e18:	2301      	movs	r3, #1
 8006e1a:	465a      	mov	r2, fp
 8006e1c:	4631      	mov	r1, r6
 8006e1e:	4628      	mov	r0, r5
 8006e20:	47b8      	blx	r7
 8006e22:	3001      	adds	r0, #1
 8006e24:	f43f aeb0 	beq.w	8006b88 <_printf_float+0x98>
 8006e28:	f108 0801 	add.w	r8, r8, #1
 8006e2c:	e7ec      	b.n	8006e08 <_printf_float+0x318>
 8006e2e:	4642      	mov	r2, r8
 8006e30:	4631      	mov	r1, r6
 8006e32:	4628      	mov	r0, r5
 8006e34:	47b8      	blx	r7
 8006e36:	3001      	adds	r0, #1
 8006e38:	d1c1      	bne.n	8006dbe <_printf_float+0x2ce>
 8006e3a:	e6a5      	b.n	8006b88 <_printf_float+0x98>
 8006e3c:	2301      	movs	r3, #1
 8006e3e:	4631      	mov	r1, r6
 8006e40:	4628      	mov	r0, r5
 8006e42:	9206      	str	r2, [sp, #24]
 8006e44:	47b8      	blx	r7
 8006e46:	3001      	adds	r0, #1
 8006e48:	f43f ae9e 	beq.w	8006b88 <_printf_float+0x98>
 8006e4c:	9b07      	ldr	r3, [sp, #28]
 8006e4e:	9a06      	ldr	r2, [sp, #24]
 8006e50:	3301      	adds	r3, #1
 8006e52:	9307      	str	r3, [sp, #28]
 8006e54:	e7b9      	b.n	8006dca <_printf_float+0x2da>
 8006e56:	9b05      	ldr	r3, [sp, #20]
 8006e58:	465a      	mov	r2, fp
 8006e5a:	4631      	mov	r1, r6
 8006e5c:	4628      	mov	r0, r5
 8006e5e:	47b8      	blx	r7
 8006e60:	3001      	adds	r0, #1
 8006e62:	d1bf      	bne.n	8006de4 <_printf_float+0x2f4>
 8006e64:	e690      	b.n	8006b88 <_printf_float+0x98>
 8006e66:	9a06      	ldr	r2, [sp, #24]
 8006e68:	464b      	mov	r3, r9
 8006e6a:	4442      	add	r2, r8
 8006e6c:	4631      	mov	r1, r6
 8006e6e:	4628      	mov	r0, r5
 8006e70:	47b8      	blx	r7
 8006e72:	3001      	adds	r0, #1
 8006e74:	d1c2      	bne.n	8006dfc <_printf_float+0x30c>
 8006e76:	e687      	b.n	8006b88 <_printf_float+0x98>
 8006e78:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8006e7c:	f1b9 0f01 	cmp.w	r9, #1
 8006e80:	dc01      	bgt.n	8006e86 <_printf_float+0x396>
 8006e82:	07db      	lsls	r3, r3, #31
 8006e84:	d536      	bpl.n	8006ef4 <_printf_float+0x404>
 8006e86:	2301      	movs	r3, #1
 8006e88:	4642      	mov	r2, r8
 8006e8a:	4631      	mov	r1, r6
 8006e8c:	4628      	mov	r0, r5
 8006e8e:	47b8      	blx	r7
 8006e90:	3001      	adds	r0, #1
 8006e92:	f43f ae79 	beq.w	8006b88 <_printf_float+0x98>
 8006e96:	9b05      	ldr	r3, [sp, #20]
 8006e98:	465a      	mov	r2, fp
 8006e9a:	4631      	mov	r1, r6
 8006e9c:	4628      	mov	r0, r5
 8006e9e:	47b8      	blx	r7
 8006ea0:	3001      	adds	r0, #1
 8006ea2:	f43f ae71 	beq.w	8006b88 <_printf_float+0x98>
 8006ea6:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8006eaa:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006eae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006eb2:	f109 39ff 	add.w	r9, r9, #4294967295
 8006eb6:	d018      	beq.n	8006eea <_printf_float+0x3fa>
 8006eb8:	464b      	mov	r3, r9
 8006eba:	f108 0201 	add.w	r2, r8, #1
 8006ebe:	4631      	mov	r1, r6
 8006ec0:	4628      	mov	r0, r5
 8006ec2:	47b8      	blx	r7
 8006ec4:	3001      	adds	r0, #1
 8006ec6:	d10c      	bne.n	8006ee2 <_printf_float+0x3f2>
 8006ec8:	e65e      	b.n	8006b88 <_printf_float+0x98>
 8006eca:	2301      	movs	r3, #1
 8006ecc:	465a      	mov	r2, fp
 8006ece:	4631      	mov	r1, r6
 8006ed0:	4628      	mov	r0, r5
 8006ed2:	47b8      	blx	r7
 8006ed4:	3001      	adds	r0, #1
 8006ed6:	f43f ae57 	beq.w	8006b88 <_printf_float+0x98>
 8006eda:	f108 0801 	add.w	r8, r8, #1
 8006ede:	45c8      	cmp	r8, r9
 8006ee0:	dbf3      	blt.n	8006eca <_printf_float+0x3da>
 8006ee2:	4653      	mov	r3, sl
 8006ee4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006ee8:	e6dc      	b.n	8006ca4 <_printf_float+0x1b4>
 8006eea:	f04f 0800 	mov.w	r8, #0
 8006eee:	f104 0b1a 	add.w	fp, r4, #26
 8006ef2:	e7f4      	b.n	8006ede <_printf_float+0x3ee>
 8006ef4:	2301      	movs	r3, #1
 8006ef6:	4642      	mov	r2, r8
 8006ef8:	e7e1      	b.n	8006ebe <_printf_float+0x3ce>
 8006efa:	2301      	movs	r3, #1
 8006efc:	464a      	mov	r2, r9
 8006efe:	4631      	mov	r1, r6
 8006f00:	4628      	mov	r0, r5
 8006f02:	47b8      	blx	r7
 8006f04:	3001      	adds	r0, #1
 8006f06:	f43f ae3f 	beq.w	8006b88 <_printf_float+0x98>
 8006f0a:	f108 0801 	add.w	r8, r8, #1
 8006f0e:	68e3      	ldr	r3, [r4, #12]
 8006f10:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006f12:	1a5b      	subs	r3, r3, r1
 8006f14:	4543      	cmp	r3, r8
 8006f16:	dcf0      	bgt.n	8006efa <_printf_float+0x40a>
 8006f18:	e6f8      	b.n	8006d0c <_printf_float+0x21c>
 8006f1a:	f04f 0800 	mov.w	r8, #0
 8006f1e:	f104 0919 	add.w	r9, r4, #25
 8006f22:	e7f4      	b.n	8006f0e <_printf_float+0x41e>

08006f24 <_printf_common>:
 8006f24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f28:	4616      	mov	r6, r2
 8006f2a:	4698      	mov	r8, r3
 8006f2c:	688a      	ldr	r2, [r1, #8]
 8006f2e:	690b      	ldr	r3, [r1, #16]
 8006f30:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006f34:	4293      	cmp	r3, r2
 8006f36:	bfb8      	it	lt
 8006f38:	4613      	movlt	r3, r2
 8006f3a:	6033      	str	r3, [r6, #0]
 8006f3c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006f40:	4607      	mov	r7, r0
 8006f42:	460c      	mov	r4, r1
 8006f44:	b10a      	cbz	r2, 8006f4a <_printf_common+0x26>
 8006f46:	3301      	adds	r3, #1
 8006f48:	6033      	str	r3, [r6, #0]
 8006f4a:	6823      	ldr	r3, [r4, #0]
 8006f4c:	0699      	lsls	r1, r3, #26
 8006f4e:	bf42      	ittt	mi
 8006f50:	6833      	ldrmi	r3, [r6, #0]
 8006f52:	3302      	addmi	r3, #2
 8006f54:	6033      	strmi	r3, [r6, #0]
 8006f56:	6825      	ldr	r5, [r4, #0]
 8006f58:	f015 0506 	ands.w	r5, r5, #6
 8006f5c:	d106      	bne.n	8006f6c <_printf_common+0x48>
 8006f5e:	f104 0a19 	add.w	sl, r4, #25
 8006f62:	68e3      	ldr	r3, [r4, #12]
 8006f64:	6832      	ldr	r2, [r6, #0]
 8006f66:	1a9b      	subs	r3, r3, r2
 8006f68:	42ab      	cmp	r3, r5
 8006f6a:	dc26      	bgt.n	8006fba <_printf_common+0x96>
 8006f6c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006f70:	6822      	ldr	r2, [r4, #0]
 8006f72:	3b00      	subs	r3, #0
 8006f74:	bf18      	it	ne
 8006f76:	2301      	movne	r3, #1
 8006f78:	0692      	lsls	r2, r2, #26
 8006f7a:	d42b      	bmi.n	8006fd4 <_printf_common+0xb0>
 8006f7c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006f80:	4641      	mov	r1, r8
 8006f82:	4638      	mov	r0, r7
 8006f84:	47c8      	blx	r9
 8006f86:	3001      	adds	r0, #1
 8006f88:	d01e      	beq.n	8006fc8 <_printf_common+0xa4>
 8006f8a:	6823      	ldr	r3, [r4, #0]
 8006f8c:	6922      	ldr	r2, [r4, #16]
 8006f8e:	f003 0306 	and.w	r3, r3, #6
 8006f92:	2b04      	cmp	r3, #4
 8006f94:	bf02      	ittt	eq
 8006f96:	68e5      	ldreq	r5, [r4, #12]
 8006f98:	6833      	ldreq	r3, [r6, #0]
 8006f9a:	1aed      	subeq	r5, r5, r3
 8006f9c:	68a3      	ldr	r3, [r4, #8]
 8006f9e:	bf0c      	ite	eq
 8006fa0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006fa4:	2500      	movne	r5, #0
 8006fa6:	4293      	cmp	r3, r2
 8006fa8:	bfc4      	itt	gt
 8006faa:	1a9b      	subgt	r3, r3, r2
 8006fac:	18ed      	addgt	r5, r5, r3
 8006fae:	2600      	movs	r6, #0
 8006fb0:	341a      	adds	r4, #26
 8006fb2:	42b5      	cmp	r5, r6
 8006fb4:	d11a      	bne.n	8006fec <_printf_common+0xc8>
 8006fb6:	2000      	movs	r0, #0
 8006fb8:	e008      	b.n	8006fcc <_printf_common+0xa8>
 8006fba:	2301      	movs	r3, #1
 8006fbc:	4652      	mov	r2, sl
 8006fbe:	4641      	mov	r1, r8
 8006fc0:	4638      	mov	r0, r7
 8006fc2:	47c8      	blx	r9
 8006fc4:	3001      	adds	r0, #1
 8006fc6:	d103      	bne.n	8006fd0 <_printf_common+0xac>
 8006fc8:	f04f 30ff 	mov.w	r0, #4294967295
 8006fcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006fd0:	3501      	adds	r5, #1
 8006fd2:	e7c6      	b.n	8006f62 <_printf_common+0x3e>
 8006fd4:	18e1      	adds	r1, r4, r3
 8006fd6:	1c5a      	adds	r2, r3, #1
 8006fd8:	2030      	movs	r0, #48	@ 0x30
 8006fda:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006fde:	4422      	add	r2, r4
 8006fe0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006fe4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006fe8:	3302      	adds	r3, #2
 8006fea:	e7c7      	b.n	8006f7c <_printf_common+0x58>
 8006fec:	2301      	movs	r3, #1
 8006fee:	4622      	mov	r2, r4
 8006ff0:	4641      	mov	r1, r8
 8006ff2:	4638      	mov	r0, r7
 8006ff4:	47c8      	blx	r9
 8006ff6:	3001      	adds	r0, #1
 8006ff8:	d0e6      	beq.n	8006fc8 <_printf_common+0xa4>
 8006ffa:	3601      	adds	r6, #1
 8006ffc:	e7d9      	b.n	8006fb2 <_printf_common+0x8e>
	...

08007000 <_printf_i>:
 8007000:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007004:	7e0f      	ldrb	r7, [r1, #24]
 8007006:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007008:	2f78      	cmp	r7, #120	@ 0x78
 800700a:	4691      	mov	r9, r2
 800700c:	4680      	mov	r8, r0
 800700e:	460c      	mov	r4, r1
 8007010:	469a      	mov	sl, r3
 8007012:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007016:	d807      	bhi.n	8007028 <_printf_i+0x28>
 8007018:	2f62      	cmp	r7, #98	@ 0x62
 800701a:	d80a      	bhi.n	8007032 <_printf_i+0x32>
 800701c:	2f00      	cmp	r7, #0
 800701e:	f000 80d1 	beq.w	80071c4 <_printf_i+0x1c4>
 8007022:	2f58      	cmp	r7, #88	@ 0x58
 8007024:	f000 80b8 	beq.w	8007198 <_printf_i+0x198>
 8007028:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800702c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007030:	e03a      	b.n	80070a8 <_printf_i+0xa8>
 8007032:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007036:	2b15      	cmp	r3, #21
 8007038:	d8f6      	bhi.n	8007028 <_printf_i+0x28>
 800703a:	a101      	add	r1, pc, #4	@ (adr r1, 8007040 <_printf_i+0x40>)
 800703c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007040:	08007099 	.word	0x08007099
 8007044:	080070ad 	.word	0x080070ad
 8007048:	08007029 	.word	0x08007029
 800704c:	08007029 	.word	0x08007029
 8007050:	08007029 	.word	0x08007029
 8007054:	08007029 	.word	0x08007029
 8007058:	080070ad 	.word	0x080070ad
 800705c:	08007029 	.word	0x08007029
 8007060:	08007029 	.word	0x08007029
 8007064:	08007029 	.word	0x08007029
 8007068:	08007029 	.word	0x08007029
 800706c:	080071ab 	.word	0x080071ab
 8007070:	080070d7 	.word	0x080070d7
 8007074:	08007165 	.word	0x08007165
 8007078:	08007029 	.word	0x08007029
 800707c:	08007029 	.word	0x08007029
 8007080:	080071cd 	.word	0x080071cd
 8007084:	08007029 	.word	0x08007029
 8007088:	080070d7 	.word	0x080070d7
 800708c:	08007029 	.word	0x08007029
 8007090:	08007029 	.word	0x08007029
 8007094:	0800716d 	.word	0x0800716d
 8007098:	6833      	ldr	r3, [r6, #0]
 800709a:	1d1a      	adds	r2, r3, #4
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	6032      	str	r2, [r6, #0]
 80070a0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80070a4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80070a8:	2301      	movs	r3, #1
 80070aa:	e09c      	b.n	80071e6 <_printf_i+0x1e6>
 80070ac:	6833      	ldr	r3, [r6, #0]
 80070ae:	6820      	ldr	r0, [r4, #0]
 80070b0:	1d19      	adds	r1, r3, #4
 80070b2:	6031      	str	r1, [r6, #0]
 80070b4:	0606      	lsls	r6, r0, #24
 80070b6:	d501      	bpl.n	80070bc <_printf_i+0xbc>
 80070b8:	681d      	ldr	r5, [r3, #0]
 80070ba:	e003      	b.n	80070c4 <_printf_i+0xc4>
 80070bc:	0645      	lsls	r5, r0, #25
 80070be:	d5fb      	bpl.n	80070b8 <_printf_i+0xb8>
 80070c0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80070c4:	2d00      	cmp	r5, #0
 80070c6:	da03      	bge.n	80070d0 <_printf_i+0xd0>
 80070c8:	232d      	movs	r3, #45	@ 0x2d
 80070ca:	426d      	negs	r5, r5
 80070cc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80070d0:	4858      	ldr	r0, [pc, #352]	@ (8007234 <_printf_i+0x234>)
 80070d2:	230a      	movs	r3, #10
 80070d4:	e011      	b.n	80070fa <_printf_i+0xfa>
 80070d6:	6821      	ldr	r1, [r4, #0]
 80070d8:	6833      	ldr	r3, [r6, #0]
 80070da:	0608      	lsls	r0, r1, #24
 80070dc:	f853 5b04 	ldr.w	r5, [r3], #4
 80070e0:	d402      	bmi.n	80070e8 <_printf_i+0xe8>
 80070e2:	0649      	lsls	r1, r1, #25
 80070e4:	bf48      	it	mi
 80070e6:	b2ad      	uxthmi	r5, r5
 80070e8:	2f6f      	cmp	r7, #111	@ 0x6f
 80070ea:	4852      	ldr	r0, [pc, #328]	@ (8007234 <_printf_i+0x234>)
 80070ec:	6033      	str	r3, [r6, #0]
 80070ee:	bf14      	ite	ne
 80070f0:	230a      	movne	r3, #10
 80070f2:	2308      	moveq	r3, #8
 80070f4:	2100      	movs	r1, #0
 80070f6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80070fa:	6866      	ldr	r6, [r4, #4]
 80070fc:	60a6      	str	r6, [r4, #8]
 80070fe:	2e00      	cmp	r6, #0
 8007100:	db05      	blt.n	800710e <_printf_i+0x10e>
 8007102:	6821      	ldr	r1, [r4, #0]
 8007104:	432e      	orrs	r6, r5
 8007106:	f021 0104 	bic.w	r1, r1, #4
 800710a:	6021      	str	r1, [r4, #0]
 800710c:	d04b      	beq.n	80071a6 <_printf_i+0x1a6>
 800710e:	4616      	mov	r6, r2
 8007110:	fbb5 f1f3 	udiv	r1, r5, r3
 8007114:	fb03 5711 	mls	r7, r3, r1, r5
 8007118:	5dc7      	ldrb	r7, [r0, r7]
 800711a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800711e:	462f      	mov	r7, r5
 8007120:	42bb      	cmp	r3, r7
 8007122:	460d      	mov	r5, r1
 8007124:	d9f4      	bls.n	8007110 <_printf_i+0x110>
 8007126:	2b08      	cmp	r3, #8
 8007128:	d10b      	bne.n	8007142 <_printf_i+0x142>
 800712a:	6823      	ldr	r3, [r4, #0]
 800712c:	07df      	lsls	r7, r3, #31
 800712e:	d508      	bpl.n	8007142 <_printf_i+0x142>
 8007130:	6923      	ldr	r3, [r4, #16]
 8007132:	6861      	ldr	r1, [r4, #4]
 8007134:	4299      	cmp	r1, r3
 8007136:	bfde      	ittt	le
 8007138:	2330      	movle	r3, #48	@ 0x30
 800713a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800713e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007142:	1b92      	subs	r2, r2, r6
 8007144:	6122      	str	r2, [r4, #16]
 8007146:	f8cd a000 	str.w	sl, [sp]
 800714a:	464b      	mov	r3, r9
 800714c:	aa03      	add	r2, sp, #12
 800714e:	4621      	mov	r1, r4
 8007150:	4640      	mov	r0, r8
 8007152:	f7ff fee7 	bl	8006f24 <_printf_common>
 8007156:	3001      	adds	r0, #1
 8007158:	d14a      	bne.n	80071f0 <_printf_i+0x1f0>
 800715a:	f04f 30ff 	mov.w	r0, #4294967295
 800715e:	b004      	add	sp, #16
 8007160:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007164:	6823      	ldr	r3, [r4, #0]
 8007166:	f043 0320 	orr.w	r3, r3, #32
 800716a:	6023      	str	r3, [r4, #0]
 800716c:	4832      	ldr	r0, [pc, #200]	@ (8007238 <_printf_i+0x238>)
 800716e:	2778      	movs	r7, #120	@ 0x78
 8007170:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007174:	6823      	ldr	r3, [r4, #0]
 8007176:	6831      	ldr	r1, [r6, #0]
 8007178:	061f      	lsls	r7, r3, #24
 800717a:	f851 5b04 	ldr.w	r5, [r1], #4
 800717e:	d402      	bmi.n	8007186 <_printf_i+0x186>
 8007180:	065f      	lsls	r7, r3, #25
 8007182:	bf48      	it	mi
 8007184:	b2ad      	uxthmi	r5, r5
 8007186:	6031      	str	r1, [r6, #0]
 8007188:	07d9      	lsls	r1, r3, #31
 800718a:	bf44      	itt	mi
 800718c:	f043 0320 	orrmi.w	r3, r3, #32
 8007190:	6023      	strmi	r3, [r4, #0]
 8007192:	b11d      	cbz	r5, 800719c <_printf_i+0x19c>
 8007194:	2310      	movs	r3, #16
 8007196:	e7ad      	b.n	80070f4 <_printf_i+0xf4>
 8007198:	4826      	ldr	r0, [pc, #152]	@ (8007234 <_printf_i+0x234>)
 800719a:	e7e9      	b.n	8007170 <_printf_i+0x170>
 800719c:	6823      	ldr	r3, [r4, #0]
 800719e:	f023 0320 	bic.w	r3, r3, #32
 80071a2:	6023      	str	r3, [r4, #0]
 80071a4:	e7f6      	b.n	8007194 <_printf_i+0x194>
 80071a6:	4616      	mov	r6, r2
 80071a8:	e7bd      	b.n	8007126 <_printf_i+0x126>
 80071aa:	6833      	ldr	r3, [r6, #0]
 80071ac:	6825      	ldr	r5, [r4, #0]
 80071ae:	6961      	ldr	r1, [r4, #20]
 80071b0:	1d18      	adds	r0, r3, #4
 80071b2:	6030      	str	r0, [r6, #0]
 80071b4:	062e      	lsls	r6, r5, #24
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	d501      	bpl.n	80071be <_printf_i+0x1be>
 80071ba:	6019      	str	r1, [r3, #0]
 80071bc:	e002      	b.n	80071c4 <_printf_i+0x1c4>
 80071be:	0668      	lsls	r0, r5, #25
 80071c0:	d5fb      	bpl.n	80071ba <_printf_i+0x1ba>
 80071c2:	8019      	strh	r1, [r3, #0]
 80071c4:	2300      	movs	r3, #0
 80071c6:	6123      	str	r3, [r4, #16]
 80071c8:	4616      	mov	r6, r2
 80071ca:	e7bc      	b.n	8007146 <_printf_i+0x146>
 80071cc:	6833      	ldr	r3, [r6, #0]
 80071ce:	1d1a      	adds	r2, r3, #4
 80071d0:	6032      	str	r2, [r6, #0]
 80071d2:	681e      	ldr	r6, [r3, #0]
 80071d4:	6862      	ldr	r2, [r4, #4]
 80071d6:	2100      	movs	r1, #0
 80071d8:	4630      	mov	r0, r6
 80071da:	f7f9 f881 	bl	80002e0 <memchr>
 80071de:	b108      	cbz	r0, 80071e4 <_printf_i+0x1e4>
 80071e0:	1b80      	subs	r0, r0, r6
 80071e2:	6060      	str	r0, [r4, #4]
 80071e4:	6863      	ldr	r3, [r4, #4]
 80071e6:	6123      	str	r3, [r4, #16]
 80071e8:	2300      	movs	r3, #0
 80071ea:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80071ee:	e7aa      	b.n	8007146 <_printf_i+0x146>
 80071f0:	6923      	ldr	r3, [r4, #16]
 80071f2:	4632      	mov	r2, r6
 80071f4:	4649      	mov	r1, r9
 80071f6:	4640      	mov	r0, r8
 80071f8:	47d0      	blx	sl
 80071fa:	3001      	adds	r0, #1
 80071fc:	d0ad      	beq.n	800715a <_printf_i+0x15a>
 80071fe:	6823      	ldr	r3, [r4, #0]
 8007200:	079b      	lsls	r3, r3, #30
 8007202:	d413      	bmi.n	800722c <_printf_i+0x22c>
 8007204:	68e0      	ldr	r0, [r4, #12]
 8007206:	9b03      	ldr	r3, [sp, #12]
 8007208:	4298      	cmp	r0, r3
 800720a:	bfb8      	it	lt
 800720c:	4618      	movlt	r0, r3
 800720e:	e7a6      	b.n	800715e <_printf_i+0x15e>
 8007210:	2301      	movs	r3, #1
 8007212:	4632      	mov	r2, r6
 8007214:	4649      	mov	r1, r9
 8007216:	4640      	mov	r0, r8
 8007218:	47d0      	blx	sl
 800721a:	3001      	adds	r0, #1
 800721c:	d09d      	beq.n	800715a <_printf_i+0x15a>
 800721e:	3501      	adds	r5, #1
 8007220:	68e3      	ldr	r3, [r4, #12]
 8007222:	9903      	ldr	r1, [sp, #12]
 8007224:	1a5b      	subs	r3, r3, r1
 8007226:	42ab      	cmp	r3, r5
 8007228:	dcf2      	bgt.n	8007210 <_printf_i+0x210>
 800722a:	e7eb      	b.n	8007204 <_printf_i+0x204>
 800722c:	2500      	movs	r5, #0
 800722e:	f104 0619 	add.w	r6, r4, #25
 8007232:	e7f5      	b.n	8007220 <_printf_i+0x220>
 8007234:	080096a2 	.word	0x080096a2
 8007238:	080096b3 	.word	0x080096b3

0800723c <std>:
 800723c:	2300      	movs	r3, #0
 800723e:	b510      	push	{r4, lr}
 8007240:	4604      	mov	r4, r0
 8007242:	e9c0 3300 	strd	r3, r3, [r0]
 8007246:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800724a:	6083      	str	r3, [r0, #8]
 800724c:	8181      	strh	r1, [r0, #12]
 800724e:	6643      	str	r3, [r0, #100]	@ 0x64
 8007250:	81c2      	strh	r2, [r0, #14]
 8007252:	6183      	str	r3, [r0, #24]
 8007254:	4619      	mov	r1, r3
 8007256:	2208      	movs	r2, #8
 8007258:	305c      	adds	r0, #92	@ 0x5c
 800725a:	f000 f92a 	bl	80074b2 <memset>
 800725e:	4b0d      	ldr	r3, [pc, #52]	@ (8007294 <std+0x58>)
 8007260:	6263      	str	r3, [r4, #36]	@ 0x24
 8007262:	4b0d      	ldr	r3, [pc, #52]	@ (8007298 <std+0x5c>)
 8007264:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007266:	4b0d      	ldr	r3, [pc, #52]	@ (800729c <std+0x60>)
 8007268:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800726a:	4b0d      	ldr	r3, [pc, #52]	@ (80072a0 <std+0x64>)
 800726c:	6323      	str	r3, [r4, #48]	@ 0x30
 800726e:	4b0d      	ldr	r3, [pc, #52]	@ (80072a4 <std+0x68>)
 8007270:	6224      	str	r4, [r4, #32]
 8007272:	429c      	cmp	r4, r3
 8007274:	d006      	beq.n	8007284 <std+0x48>
 8007276:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800727a:	4294      	cmp	r4, r2
 800727c:	d002      	beq.n	8007284 <std+0x48>
 800727e:	33d0      	adds	r3, #208	@ 0xd0
 8007280:	429c      	cmp	r4, r3
 8007282:	d105      	bne.n	8007290 <std+0x54>
 8007284:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007288:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800728c:	f000 b98e 	b.w	80075ac <__retarget_lock_init_recursive>
 8007290:	bd10      	pop	{r4, pc}
 8007292:	bf00      	nop
 8007294:	0800742d 	.word	0x0800742d
 8007298:	0800744f 	.word	0x0800744f
 800729c:	08007487 	.word	0x08007487
 80072a0:	080074ab 	.word	0x080074ab
 80072a4:	24000548 	.word	0x24000548

080072a8 <stdio_exit_handler>:
 80072a8:	4a02      	ldr	r2, [pc, #8]	@ (80072b4 <stdio_exit_handler+0xc>)
 80072aa:	4903      	ldr	r1, [pc, #12]	@ (80072b8 <stdio_exit_handler+0x10>)
 80072ac:	4803      	ldr	r0, [pc, #12]	@ (80072bc <stdio_exit_handler+0x14>)
 80072ae:	f000 b869 	b.w	8007384 <_fwalk_sglue>
 80072b2:	bf00      	nop
 80072b4:	24000010 	.word	0x24000010
 80072b8:	08008e49 	.word	0x08008e49
 80072bc:	24000020 	.word	0x24000020

080072c0 <cleanup_stdio>:
 80072c0:	6841      	ldr	r1, [r0, #4]
 80072c2:	4b0c      	ldr	r3, [pc, #48]	@ (80072f4 <cleanup_stdio+0x34>)
 80072c4:	4299      	cmp	r1, r3
 80072c6:	b510      	push	{r4, lr}
 80072c8:	4604      	mov	r4, r0
 80072ca:	d001      	beq.n	80072d0 <cleanup_stdio+0x10>
 80072cc:	f001 fdbc 	bl	8008e48 <_fflush_r>
 80072d0:	68a1      	ldr	r1, [r4, #8]
 80072d2:	4b09      	ldr	r3, [pc, #36]	@ (80072f8 <cleanup_stdio+0x38>)
 80072d4:	4299      	cmp	r1, r3
 80072d6:	d002      	beq.n	80072de <cleanup_stdio+0x1e>
 80072d8:	4620      	mov	r0, r4
 80072da:	f001 fdb5 	bl	8008e48 <_fflush_r>
 80072de:	68e1      	ldr	r1, [r4, #12]
 80072e0:	4b06      	ldr	r3, [pc, #24]	@ (80072fc <cleanup_stdio+0x3c>)
 80072e2:	4299      	cmp	r1, r3
 80072e4:	d004      	beq.n	80072f0 <cleanup_stdio+0x30>
 80072e6:	4620      	mov	r0, r4
 80072e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80072ec:	f001 bdac 	b.w	8008e48 <_fflush_r>
 80072f0:	bd10      	pop	{r4, pc}
 80072f2:	bf00      	nop
 80072f4:	24000548 	.word	0x24000548
 80072f8:	240005b0 	.word	0x240005b0
 80072fc:	24000618 	.word	0x24000618

08007300 <global_stdio_init.part.0>:
 8007300:	b510      	push	{r4, lr}
 8007302:	4b0b      	ldr	r3, [pc, #44]	@ (8007330 <global_stdio_init.part.0+0x30>)
 8007304:	4c0b      	ldr	r4, [pc, #44]	@ (8007334 <global_stdio_init.part.0+0x34>)
 8007306:	4a0c      	ldr	r2, [pc, #48]	@ (8007338 <global_stdio_init.part.0+0x38>)
 8007308:	601a      	str	r2, [r3, #0]
 800730a:	4620      	mov	r0, r4
 800730c:	2200      	movs	r2, #0
 800730e:	2104      	movs	r1, #4
 8007310:	f7ff ff94 	bl	800723c <std>
 8007314:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007318:	2201      	movs	r2, #1
 800731a:	2109      	movs	r1, #9
 800731c:	f7ff ff8e 	bl	800723c <std>
 8007320:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007324:	2202      	movs	r2, #2
 8007326:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800732a:	2112      	movs	r1, #18
 800732c:	f7ff bf86 	b.w	800723c <std>
 8007330:	24000680 	.word	0x24000680
 8007334:	24000548 	.word	0x24000548
 8007338:	080072a9 	.word	0x080072a9

0800733c <__sfp_lock_acquire>:
 800733c:	4801      	ldr	r0, [pc, #4]	@ (8007344 <__sfp_lock_acquire+0x8>)
 800733e:	f000 b936 	b.w	80075ae <__retarget_lock_acquire_recursive>
 8007342:	bf00      	nop
 8007344:	24000689 	.word	0x24000689

08007348 <__sfp_lock_release>:
 8007348:	4801      	ldr	r0, [pc, #4]	@ (8007350 <__sfp_lock_release+0x8>)
 800734a:	f000 b931 	b.w	80075b0 <__retarget_lock_release_recursive>
 800734e:	bf00      	nop
 8007350:	24000689 	.word	0x24000689

08007354 <__sinit>:
 8007354:	b510      	push	{r4, lr}
 8007356:	4604      	mov	r4, r0
 8007358:	f7ff fff0 	bl	800733c <__sfp_lock_acquire>
 800735c:	6a23      	ldr	r3, [r4, #32]
 800735e:	b11b      	cbz	r3, 8007368 <__sinit+0x14>
 8007360:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007364:	f7ff bff0 	b.w	8007348 <__sfp_lock_release>
 8007368:	4b04      	ldr	r3, [pc, #16]	@ (800737c <__sinit+0x28>)
 800736a:	6223      	str	r3, [r4, #32]
 800736c:	4b04      	ldr	r3, [pc, #16]	@ (8007380 <__sinit+0x2c>)
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	2b00      	cmp	r3, #0
 8007372:	d1f5      	bne.n	8007360 <__sinit+0xc>
 8007374:	f7ff ffc4 	bl	8007300 <global_stdio_init.part.0>
 8007378:	e7f2      	b.n	8007360 <__sinit+0xc>
 800737a:	bf00      	nop
 800737c:	080072c1 	.word	0x080072c1
 8007380:	24000680 	.word	0x24000680

08007384 <_fwalk_sglue>:
 8007384:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007388:	4607      	mov	r7, r0
 800738a:	4688      	mov	r8, r1
 800738c:	4614      	mov	r4, r2
 800738e:	2600      	movs	r6, #0
 8007390:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007394:	f1b9 0901 	subs.w	r9, r9, #1
 8007398:	d505      	bpl.n	80073a6 <_fwalk_sglue+0x22>
 800739a:	6824      	ldr	r4, [r4, #0]
 800739c:	2c00      	cmp	r4, #0
 800739e:	d1f7      	bne.n	8007390 <_fwalk_sglue+0xc>
 80073a0:	4630      	mov	r0, r6
 80073a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80073a6:	89ab      	ldrh	r3, [r5, #12]
 80073a8:	2b01      	cmp	r3, #1
 80073aa:	d907      	bls.n	80073bc <_fwalk_sglue+0x38>
 80073ac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80073b0:	3301      	adds	r3, #1
 80073b2:	d003      	beq.n	80073bc <_fwalk_sglue+0x38>
 80073b4:	4629      	mov	r1, r5
 80073b6:	4638      	mov	r0, r7
 80073b8:	47c0      	blx	r8
 80073ba:	4306      	orrs	r6, r0
 80073bc:	3568      	adds	r5, #104	@ 0x68
 80073be:	e7e9      	b.n	8007394 <_fwalk_sglue+0x10>

080073c0 <sniprintf>:
 80073c0:	b40c      	push	{r2, r3}
 80073c2:	b530      	push	{r4, r5, lr}
 80073c4:	4b18      	ldr	r3, [pc, #96]	@ (8007428 <sniprintf+0x68>)
 80073c6:	1e0c      	subs	r4, r1, #0
 80073c8:	681d      	ldr	r5, [r3, #0]
 80073ca:	b09d      	sub	sp, #116	@ 0x74
 80073cc:	da08      	bge.n	80073e0 <sniprintf+0x20>
 80073ce:	238b      	movs	r3, #139	@ 0x8b
 80073d0:	602b      	str	r3, [r5, #0]
 80073d2:	f04f 30ff 	mov.w	r0, #4294967295
 80073d6:	b01d      	add	sp, #116	@ 0x74
 80073d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80073dc:	b002      	add	sp, #8
 80073de:	4770      	bx	lr
 80073e0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80073e4:	f8ad 3014 	strh.w	r3, [sp, #20]
 80073e8:	f04f 0300 	mov.w	r3, #0
 80073ec:	931b      	str	r3, [sp, #108]	@ 0x6c
 80073ee:	bf14      	ite	ne
 80073f0:	f104 33ff 	addne.w	r3, r4, #4294967295
 80073f4:	4623      	moveq	r3, r4
 80073f6:	9304      	str	r3, [sp, #16]
 80073f8:	9307      	str	r3, [sp, #28]
 80073fa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80073fe:	9002      	str	r0, [sp, #8]
 8007400:	9006      	str	r0, [sp, #24]
 8007402:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007406:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8007408:	ab21      	add	r3, sp, #132	@ 0x84
 800740a:	a902      	add	r1, sp, #8
 800740c:	4628      	mov	r0, r5
 800740e:	9301      	str	r3, [sp, #4]
 8007410:	f001 fb9a 	bl	8008b48 <_svfiprintf_r>
 8007414:	1c43      	adds	r3, r0, #1
 8007416:	bfbc      	itt	lt
 8007418:	238b      	movlt	r3, #139	@ 0x8b
 800741a:	602b      	strlt	r3, [r5, #0]
 800741c:	2c00      	cmp	r4, #0
 800741e:	d0da      	beq.n	80073d6 <sniprintf+0x16>
 8007420:	9b02      	ldr	r3, [sp, #8]
 8007422:	2200      	movs	r2, #0
 8007424:	701a      	strb	r2, [r3, #0]
 8007426:	e7d6      	b.n	80073d6 <sniprintf+0x16>
 8007428:	2400001c 	.word	0x2400001c

0800742c <__sread>:
 800742c:	b510      	push	{r4, lr}
 800742e:	460c      	mov	r4, r1
 8007430:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007434:	f000 f86c 	bl	8007510 <_read_r>
 8007438:	2800      	cmp	r0, #0
 800743a:	bfab      	itete	ge
 800743c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800743e:	89a3      	ldrhlt	r3, [r4, #12]
 8007440:	181b      	addge	r3, r3, r0
 8007442:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007446:	bfac      	ite	ge
 8007448:	6563      	strge	r3, [r4, #84]	@ 0x54
 800744a:	81a3      	strhlt	r3, [r4, #12]
 800744c:	bd10      	pop	{r4, pc}

0800744e <__swrite>:
 800744e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007452:	461f      	mov	r7, r3
 8007454:	898b      	ldrh	r3, [r1, #12]
 8007456:	05db      	lsls	r3, r3, #23
 8007458:	4605      	mov	r5, r0
 800745a:	460c      	mov	r4, r1
 800745c:	4616      	mov	r6, r2
 800745e:	d505      	bpl.n	800746c <__swrite+0x1e>
 8007460:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007464:	2302      	movs	r3, #2
 8007466:	2200      	movs	r2, #0
 8007468:	f000 f840 	bl	80074ec <_lseek_r>
 800746c:	89a3      	ldrh	r3, [r4, #12]
 800746e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007472:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007476:	81a3      	strh	r3, [r4, #12]
 8007478:	4632      	mov	r2, r6
 800747a:	463b      	mov	r3, r7
 800747c:	4628      	mov	r0, r5
 800747e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007482:	f000 b857 	b.w	8007534 <_write_r>

08007486 <__sseek>:
 8007486:	b510      	push	{r4, lr}
 8007488:	460c      	mov	r4, r1
 800748a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800748e:	f000 f82d 	bl	80074ec <_lseek_r>
 8007492:	1c43      	adds	r3, r0, #1
 8007494:	89a3      	ldrh	r3, [r4, #12]
 8007496:	bf15      	itete	ne
 8007498:	6560      	strne	r0, [r4, #84]	@ 0x54
 800749a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800749e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80074a2:	81a3      	strheq	r3, [r4, #12]
 80074a4:	bf18      	it	ne
 80074a6:	81a3      	strhne	r3, [r4, #12]
 80074a8:	bd10      	pop	{r4, pc}

080074aa <__sclose>:
 80074aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80074ae:	f000 b80d 	b.w	80074cc <_close_r>

080074b2 <memset>:
 80074b2:	4402      	add	r2, r0
 80074b4:	4603      	mov	r3, r0
 80074b6:	4293      	cmp	r3, r2
 80074b8:	d100      	bne.n	80074bc <memset+0xa>
 80074ba:	4770      	bx	lr
 80074bc:	f803 1b01 	strb.w	r1, [r3], #1
 80074c0:	e7f9      	b.n	80074b6 <memset+0x4>
	...

080074c4 <_localeconv_r>:
 80074c4:	4800      	ldr	r0, [pc, #0]	@ (80074c8 <_localeconv_r+0x4>)
 80074c6:	4770      	bx	lr
 80074c8:	2400015c 	.word	0x2400015c

080074cc <_close_r>:
 80074cc:	b538      	push	{r3, r4, r5, lr}
 80074ce:	4d06      	ldr	r5, [pc, #24]	@ (80074e8 <_close_r+0x1c>)
 80074d0:	2300      	movs	r3, #0
 80074d2:	4604      	mov	r4, r0
 80074d4:	4608      	mov	r0, r1
 80074d6:	602b      	str	r3, [r5, #0]
 80074d8:	f7f9 fd0a 	bl	8000ef0 <_close>
 80074dc:	1c43      	adds	r3, r0, #1
 80074de:	d102      	bne.n	80074e6 <_close_r+0x1a>
 80074e0:	682b      	ldr	r3, [r5, #0]
 80074e2:	b103      	cbz	r3, 80074e6 <_close_r+0x1a>
 80074e4:	6023      	str	r3, [r4, #0]
 80074e6:	bd38      	pop	{r3, r4, r5, pc}
 80074e8:	24000684 	.word	0x24000684

080074ec <_lseek_r>:
 80074ec:	b538      	push	{r3, r4, r5, lr}
 80074ee:	4d07      	ldr	r5, [pc, #28]	@ (800750c <_lseek_r+0x20>)
 80074f0:	4604      	mov	r4, r0
 80074f2:	4608      	mov	r0, r1
 80074f4:	4611      	mov	r1, r2
 80074f6:	2200      	movs	r2, #0
 80074f8:	602a      	str	r2, [r5, #0]
 80074fa:	461a      	mov	r2, r3
 80074fc:	f7f9 fd1f 	bl	8000f3e <_lseek>
 8007500:	1c43      	adds	r3, r0, #1
 8007502:	d102      	bne.n	800750a <_lseek_r+0x1e>
 8007504:	682b      	ldr	r3, [r5, #0]
 8007506:	b103      	cbz	r3, 800750a <_lseek_r+0x1e>
 8007508:	6023      	str	r3, [r4, #0]
 800750a:	bd38      	pop	{r3, r4, r5, pc}
 800750c:	24000684 	.word	0x24000684

08007510 <_read_r>:
 8007510:	b538      	push	{r3, r4, r5, lr}
 8007512:	4d07      	ldr	r5, [pc, #28]	@ (8007530 <_read_r+0x20>)
 8007514:	4604      	mov	r4, r0
 8007516:	4608      	mov	r0, r1
 8007518:	4611      	mov	r1, r2
 800751a:	2200      	movs	r2, #0
 800751c:	602a      	str	r2, [r5, #0]
 800751e:	461a      	mov	r2, r3
 8007520:	f7f9 fcad 	bl	8000e7e <_read>
 8007524:	1c43      	adds	r3, r0, #1
 8007526:	d102      	bne.n	800752e <_read_r+0x1e>
 8007528:	682b      	ldr	r3, [r5, #0]
 800752a:	b103      	cbz	r3, 800752e <_read_r+0x1e>
 800752c:	6023      	str	r3, [r4, #0]
 800752e:	bd38      	pop	{r3, r4, r5, pc}
 8007530:	24000684 	.word	0x24000684

08007534 <_write_r>:
 8007534:	b538      	push	{r3, r4, r5, lr}
 8007536:	4d07      	ldr	r5, [pc, #28]	@ (8007554 <_write_r+0x20>)
 8007538:	4604      	mov	r4, r0
 800753a:	4608      	mov	r0, r1
 800753c:	4611      	mov	r1, r2
 800753e:	2200      	movs	r2, #0
 8007540:	602a      	str	r2, [r5, #0]
 8007542:	461a      	mov	r2, r3
 8007544:	f7f9 fcb8 	bl	8000eb8 <_write>
 8007548:	1c43      	adds	r3, r0, #1
 800754a:	d102      	bne.n	8007552 <_write_r+0x1e>
 800754c:	682b      	ldr	r3, [r5, #0]
 800754e:	b103      	cbz	r3, 8007552 <_write_r+0x1e>
 8007550:	6023      	str	r3, [r4, #0]
 8007552:	bd38      	pop	{r3, r4, r5, pc}
 8007554:	24000684 	.word	0x24000684

08007558 <__errno>:
 8007558:	4b01      	ldr	r3, [pc, #4]	@ (8007560 <__errno+0x8>)
 800755a:	6818      	ldr	r0, [r3, #0]
 800755c:	4770      	bx	lr
 800755e:	bf00      	nop
 8007560:	2400001c 	.word	0x2400001c

08007564 <__libc_init_array>:
 8007564:	b570      	push	{r4, r5, r6, lr}
 8007566:	4d0d      	ldr	r5, [pc, #52]	@ (800759c <__libc_init_array+0x38>)
 8007568:	4c0d      	ldr	r4, [pc, #52]	@ (80075a0 <__libc_init_array+0x3c>)
 800756a:	1b64      	subs	r4, r4, r5
 800756c:	10a4      	asrs	r4, r4, #2
 800756e:	2600      	movs	r6, #0
 8007570:	42a6      	cmp	r6, r4
 8007572:	d109      	bne.n	8007588 <__libc_init_array+0x24>
 8007574:	4d0b      	ldr	r5, [pc, #44]	@ (80075a4 <__libc_init_array+0x40>)
 8007576:	4c0c      	ldr	r4, [pc, #48]	@ (80075a8 <__libc_init_array+0x44>)
 8007578:	f001 fff6 	bl	8009568 <_init>
 800757c:	1b64      	subs	r4, r4, r5
 800757e:	10a4      	asrs	r4, r4, #2
 8007580:	2600      	movs	r6, #0
 8007582:	42a6      	cmp	r6, r4
 8007584:	d105      	bne.n	8007592 <__libc_init_array+0x2e>
 8007586:	bd70      	pop	{r4, r5, r6, pc}
 8007588:	f855 3b04 	ldr.w	r3, [r5], #4
 800758c:	4798      	blx	r3
 800758e:	3601      	adds	r6, #1
 8007590:	e7ee      	b.n	8007570 <__libc_init_array+0xc>
 8007592:	f855 3b04 	ldr.w	r3, [r5], #4
 8007596:	4798      	blx	r3
 8007598:	3601      	adds	r6, #1
 800759a:	e7f2      	b.n	8007582 <__libc_init_array+0x1e>
 800759c:	08009a0c 	.word	0x08009a0c
 80075a0:	08009a0c 	.word	0x08009a0c
 80075a4:	08009a0c 	.word	0x08009a0c
 80075a8:	08009a10 	.word	0x08009a10

080075ac <__retarget_lock_init_recursive>:
 80075ac:	4770      	bx	lr

080075ae <__retarget_lock_acquire_recursive>:
 80075ae:	4770      	bx	lr

080075b0 <__retarget_lock_release_recursive>:
 80075b0:	4770      	bx	lr

080075b2 <memcpy>:
 80075b2:	440a      	add	r2, r1
 80075b4:	4291      	cmp	r1, r2
 80075b6:	f100 33ff 	add.w	r3, r0, #4294967295
 80075ba:	d100      	bne.n	80075be <memcpy+0xc>
 80075bc:	4770      	bx	lr
 80075be:	b510      	push	{r4, lr}
 80075c0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80075c4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80075c8:	4291      	cmp	r1, r2
 80075ca:	d1f9      	bne.n	80075c0 <memcpy+0xe>
 80075cc:	bd10      	pop	{r4, pc}

080075ce <quorem>:
 80075ce:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075d2:	6903      	ldr	r3, [r0, #16]
 80075d4:	690c      	ldr	r4, [r1, #16]
 80075d6:	42a3      	cmp	r3, r4
 80075d8:	4607      	mov	r7, r0
 80075da:	db7e      	blt.n	80076da <quorem+0x10c>
 80075dc:	3c01      	subs	r4, #1
 80075de:	f101 0814 	add.w	r8, r1, #20
 80075e2:	00a3      	lsls	r3, r4, #2
 80075e4:	f100 0514 	add.w	r5, r0, #20
 80075e8:	9300      	str	r3, [sp, #0]
 80075ea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80075ee:	9301      	str	r3, [sp, #4]
 80075f0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80075f4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80075f8:	3301      	adds	r3, #1
 80075fa:	429a      	cmp	r2, r3
 80075fc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007600:	fbb2 f6f3 	udiv	r6, r2, r3
 8007604:	d32e      	bcc.n	8007664 <quorem+0x96>
 8007606:	f04f 0a00 	mov.w	sl, #0
 800760a:	46c4      	mov	ip, r8
 800760c:	46ae      	mov	lr, r5
 800760e:	46d3      	mov	fp, sl
 8007610:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007614:	b298      	uxth	r0, r3
 8007616:	fb06 a000 	mla	r0, r6, r0, sl
 800761a:	0c02      	lsrs	r2, r0, #16
 800761c:	0c1b      	lsrs	r3, r3, #16
 800761e:	fb06 2303 	mla	r3, r6, r3, r2
 8007622:	f8de 2000 	ldr.w	r2, [lr]
 8007626:	b280      	uxth	r0, r0
 8007628:	b292      	uxth	r2, r2
 800762a:	1a12      	subs	r2, r2, r0
 800762c:	445a      	add	r2, fp
 800762e:	f8de 0000 	ldr.w	r0, [lr]
 8007632:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007636:	b29b      	uxth	r3, r3
 8007638:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800763c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007640:	b292      	uxth	r2, r2
 8007642:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007646:	45e1      	cmp	r9, ip
 8007648:	f84e 2b04 	str.w	r2, [lr], #4
 800764c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007650:	d2de      	bcs.n	8007610 <quorem+0x42>
 8007652:	9b00      	ldr	r3, [sp, #0]
 8007654:	58eb      	ldr	r3, [r5, r3]
 8007656:	b92b      	cbnz	r3, 8007664 <quorem+0x96>
 8007658:	9b01      	ldr	r3, [sp, #4]
 800765a:	3b04      	subs	r3, #4
 800765c:	429d      	cmp	r5, r3
 800765e:	461a      	mov	r2, r3
 8007660:	d32f      	bcc.n	80076c2 <quorem+0xf4>
 8007662:	613c      	str	r4, [r7, #16]
 8007664:	4638      	mov	r0, r7
 8007666:	f001 f90b 	bl	8008880 <__mcmp>
 800766a:	2800      	cmp	r0, #0
 800766c:	db25      	blt.n	80076ba <quorem+0xec>
 800766e:	4629      	mov	r1, r5
 8007670:	2000      	movs	r0, #0
 8007672:	f858 2b04 	ldr.w	r2, [r8], #4
 8007676:	f8d1 c000 	ldr.w	ip, [r1]
 800767a:	fa1f fe82 	uxth.w	lr, r2
 800767e:	fa1f f38c 	uxth.w	r3, ip
 8007682:	eba3 030e 	sub.w	r3, r3, lr
 8007686:	4403      	add	r3, r0
 8007688:	0c12      	lsrs	r2, r2, #16
 800768a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800768e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007692:	b29b      	uxth	r3, r3
 8007694:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007698:	45c1      	cmp	r9, r8
 800769a:	f841 3b04 	str.w	r3, [r1], #4
 800769e:	ea4f 4022 	mov.w	r0, r2, asr #16
 80076a2:	d2e6      	bcs.n	8007672 <quorem+0xa4>
 80076a4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80076a8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80076ac:	b922      	cbnz	r2, 80076b8 <quorem+0xea>
 80076ae:	3b04      	subs	r3, #4
 80076b0:	429d      	cmp	r5, r3
 80076b2:	461a      	mov	r2, r3
 80076b4:	d30b      	bcc.n	80076ce <quorem+0x100>
 80076b6:	613c      	str	r4, [r7, #16]
 80076b8:	3601      	adds	r6, #1
 80076ba:	4630      	mov	r0, r6
 80076bc:	b003      	add	sp, #12
 80076be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076c2:	6812      	ldr	r2, [r2, #0]
 80076c4:	3b04      	subs	r3, #4
 80076c6:	2a00      	cmp	r2, #0
 80076c8:	d1cb      	bne.n	8007662 <quorem+0x94>
 80076ca:	3c01      	subs	r4, #1
 80076cc:	e7c6      	b.n	800765c <quorem+0x8e>
 80076ce:	6812      	ldr	r2, [r2, #0]
 80076d0:	3b04      	subs	r3, #4
 80076d2:	2a00      	cmp	r2, #0
 80076d4:	d1ef      	bne.n	80076b6 <quorem+0xe8>
 80076d6:	3c01      	subs	r4, #1
 80076d8:	e7ea      	b.n	80076b0 <quorem+0xe2>
 80076da:	2000      	movs	r0, #0
 80076dc:	e7ee      	b.n	80076bc <quorem+0xee>
	...

080076e0 <_dtoa_r>:
 80076e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076e4:	ed2d 8b02 	vpush	{d8}
 80076e8:	69c7      	ldr	r7, [r0, #28]
 80076ea:	b091      	sub	sp, #68	@ 0x44
 80076ec:	ed8d 0b02 	vstr	d0, [sp, #8]
 80076f0:	ec55 4b10 	vmov	r4, r5, d0
 80076f4:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 80076f6:	9107      	str	r1, [sp, #28]
 80076f8:	4681      	mov	r9, r0
 80076fa:	9209      	str	r2, [sp, #36]	@ 0x24
 80076fc:	930d      	str	r3, [sp, #52]	@ 0x34
 80076fe:	b97f      	cbnz	r7, 8007720 <_dtoa_r+0x40>
 8007700:	2010      	movs	r0, #16
 8007702:	f000 fd95 	bl	8008230 <malloc>
 8007706:	4602      	mov	r2, r0
 8007708:	f8c9 001c 	str.w	r0, [r9, #28]
 800770c:	b920      	cbnz	r0, 8007718 <_dtoa_r+0x38>
 800770e:	4ba0      	ldr	r3, [pc, #640]	@ (8007990 <_dtoa_r+0x2b0>)
 8007710:	21ef      	movs	r1, #239	@ 0xef
 8007712:	48a0      	ldr	r0, [pc, #640]	@ (8007994 <_dtoa_r+0x2b4>)
 8007714:	f001 fbea 	bl	8008eec <__assert_func>
 8007718:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800771c:	6007      	str	r7, [r0, #0]
 800771e:	60c7      	str	r7, [r0, #12]
 8007720:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007724:	6819      	ldr	r1, [r3, #0]
 8007726:	b159      	cbz	r1, 8007740 <_dtoa_r+0x60>
 8007728:	685a      	ldr	r2, [r3, #4]
 800772a:	604a      	str	r2, [r1, #4]
 800772c:	2301      	movs	r3, #1
 800772e:	4093      	lsls	r3, r2
 8007730:	608b      	str	r3, [r1, #8]
 8007732:	4648      	mov	r0, r9
 8007734:	f000 fe72 	bl	800841c <_Bfree>
 8007738:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800773c:	2200      	movs	r2, #0
 800773e:	601a      	str	r2, [r3, #0]
 8007740:	1e2b      	subs	r3, r5, #0
 8007742:	bfbb      	ittet	lt
 8007744:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007748:	9303      	strlt	r3, [sp, #12]
 800774a:	2300      	movge	r3, #0
 800774c:	2201      	movlt	r2, #1
 800774e:	bfac      	ite	ge
 8007750:	6033      	strge	r3, [r6, #0]
 8007752:	6032      	strlt	r2, [r6, #0]
 8007754:	4b90      	ldr	r3, [pc, #576]	@ (8007998 <_dtoa_r+0x2b8>)
 8007756:	9e03      	ldr	r6, [sp, #12]
 8007758:	43b3      	bics	r3, r6
 800775a:	d110      	bne.n	800777e <_dtoa_r+0x9e>
 800775c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800775e:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007762:	6013      	str	r3, [r2, #0]
 8007764:	f3c6 0313 	ubfx	r3, r6, #0, #20
 8007768:	4323      	orrs	r3, r4
 800776a:	f000 84e6 	beq.w	800813a <_dtoa_r+0xa5a>
 800776e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8007770:	4f8a      	ldr	r7, [pc, #552]	@ (800799c <_dtoa_r+0x2bc>)
 8007772:	2b00      	cmp	r3, #0
 8007774:	f000 84e8 	beq.w	8008148 <_dtoa_r+0xa68>
 8007778:	1cfb      	adds	r3, r7, #3
 800777a:	f000 bce3 	b.w	8008144 <_dtoa_r+0xa64>
 800777e:	ed9d 8b02 	vldr	d8, [sp, #8]
 8007782:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8007786:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800778a:	d10a      	bne.n	80077a2 <_dtoa_r+0xc2>
 800778c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800778e:	2301      	movs	r3, #1
 8007790:	6013      	str	r3, [r2, #0]
 8007792:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8007794:	b113      	cbz	r3, 800779c <_dtoa_r+0xbc>
 8007796:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8007798:	4b81      	ldr	r3, [pc, #516]	@ (80079a0 <_dtoa_r+0x2c0>)
 800779a:	6013      	str	r3, [r2, #0]
 800779c:	4f81      	ldr	r7, [pc, #516]	@ (80079a4 <_dtoa_r+0x2c4>)
 800779e:	f000 bcd3 	b.w	8008148 <_dtoa_r+0xa68>
 80077a2:	aa0e      	add	r2, sp, #56	@ 0x38
 80077a4:	a90f      	add	r1, sp, #60	@ 0x3c
 80077a6:	4648      	mov	r0, r9
 80077a8:	eeb0 0b48 	vmov.f64	d0, d8
 80077ac:	f001 f918 	bl	80089e0 <__d2b>
 80077b0:	f3c6 530a 	ubfx	r3, r6, #20, #11
 80077b4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80077b6:	9001      	str	r0, [sp, #4]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d045      	beq.n	8007848 <_dtoa_r+0x168>
 80077bc:	eeb0 7b48 	vmov.f64	d7, d8
 80077c0:	ee18 1a90 	vmov	r1, s17
 80077c4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 80077c8:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 80077cc:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 80077d0:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 80077d4:	2500      	movs	r5, #0
 80077d6:	ee07 1a90 	vmov	s15, r1
 80077da:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 80077de:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8007978 <_dtoa_r+0x298>
 80077e2:	ee37 7b46 	vsub.f64	d7, d7, d6
 80077e6:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8007980 <_dtoa_r+0x2a0>
 80077ea:	eea7 6b05 	vfma.f64	d6, d7, d5
 80077ee:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8007988 <_dtoa_r+0x2a8>
 80077f2:	ee07 3a90 	vmov	s15, r3
 80077f6:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 80077fa:	eeb0 7b46 	vmov.f64	d7, d6
 80077fe:	eea4 7b05 	vfma.f64	d7, d4, d5
 8007802:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8007806:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800780a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800780e:	ee16 8a90 	vmov	r8, s13
 8007812:	d508      	bpl.n	8007826 <_dtoa_r+0x146>
 8007814:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8007818:	eeb4 6b47 	vcmp.f64	d6, d7
 800781c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007820:	bf18      	it	ne
 8007822:	f108 38ff 	addne.w	r8, r8, #4294967295
 8007826:	f1b8 0f16 	cmp.w	r8, #22
 800782a:	d82b      	bhi.n	8007884 <_dtoa_r+0x1a4>
 800782c:	495e      	ldr	r1, [pc, #376]	@ (80079a8 <_dtoa_r+0x2c8>)
 800782e:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 8007832:	ed91 7b00 	vldr	d7, [r1]
 8007836:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800783a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800783e:	d501      	bpl.n	8007844 <_dtoa_r+0x164>
 8007840:	f108 38ff 	add.w	r8, r8, #4294967295
 8007844:	2100      	movs	r1, #0
 8007846:	e01e      	b.n	8007886 <_dtoa_r+0x1a6>
 8007848:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800784a:	4413      	add	r3, r2
 800784c:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 8007850:	2920      	cmp	r1, #32
 8007852:	bfc1      	itttt	gt
 8007854:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 8007858:	408e      	lslgt	r6, r1
 800785a:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 800785e:	fa24 f101 	lsrgt.w	r1, r4, r1
 8007862:	bfd6      	itet	le
 8007864:	f1c1 0120 	rsble	r1, r1, #32
 8007868:	4331      	orrgt	r1, r6
 800786a:	fa04 f101 	lslle.w	r1, r4, r1
 800786e:	ee07 1a90 	vmov	s15, r1
 8007872:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8007876:	3b01      	subs	r3, #1
 8007878:	ee17 1a90 	vmov	r1, s15
 800787c:	2501      	movs	r5, #1
 800787e:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 8007882:	e7a8      	b.n	80077d6 <_dtoa_r+0xf6>
 8007884:	2101      	movs	r1, #1
 8007886:	1ad2      	subs	r2, r2, r3
 8007888:	1e53      	subs	r3, r2, #1
 800788a:	9306      	str	r3, [sp, #24]
 800788c:	bf45      	ittet	mi
 800788e:	f1c2 0301 	rsbmi	r3, r2, #1
 8007892:	9304      	strmi	r3, [sp, #16]
 8007894:	2300      	movpl	r3, #0
 8007896:	2300      	movmi	r3, #0
 8007898:	bf4c      	ite	mi
 800789a:	9306      	strmi	r3, [sp, #24]
 800789c:	9304      	strpl	r3, [sp, #16]
 800789e:	f1b8 0f00 	cmp.w	r8, #0
 80078a2:	910c      	str	r1, [sp, #48]	@ 0x30
 80078a4:	db18      	blt.n	80078d8 <_dtoa_r+0x1f8>
 80078a6:	9b06      	ldr	r3, [sp, #24]
 80078a8:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 80078ac:	4443      	add	r3, r8
 80078ae:	9306      	str	r3, [sp, #24]
 80078b0:	2300      	movs	r3, #0
 80078b2:	9a07      	ldr	r2, [sp, #28]
 80078b4:	2a09      	cmp	r2, #9
 80078b6:	d845      	bhi.n	8007944 <_dtoa_r+0x264>
 80078b8:	2a05      	cmp	r2, #5
 80078ba:	bfc4      	itt	gt
 80078bc:	3a04      	subgt	r2, #4
 80078be:	9207      	strgt	r2, [sp, #28]
 80078c0:	9a07      	ldr	r2, [sp, #28]
 80078c2:	f1a2 0202 	sub.w	r2, r2, #2
 80078c6:	bfcc      	ite	gt
 80078c8:	2400      	movgt	r4, #0
 80078ca:	2401      	movle	r4, #1
 80078cc:	2a03      	cmp	r2, #3
 80078ce:	d844      	bhi.n	800795a <_dtoa_r+0x27a>
 80078d0:	e8df f002 	tbb	[pc, r2]
 80078d4:	0b173634 	.word	0x0b173634
 80078d8:	9b04      	ldr	r3, [sp, #16]
 80078da:	2200      	movs	r2, #0
 80078dc:	eba3 0308 	sub.w	r3, r3, r8
 80078e0:	9304      	str	r3, [sp, #16]
 80078e2:	920a      	str	r2, [sp, #40]	@ 0x28
 80078e4:	f1c8 0300 	rsb	r3, r8, #0
 80078e8:	e7e3      	b.n	80078b2 <_dtoa_r+0x1d2>
 80078ea:	2201      	movs	r2, #1
 80078ec:	9208      	str	r2, [sp, #32]
 80078ee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80078f0:	eb08 0b02 	add.w	fp, r8, r2
 80078f4:	f10b 0a01 	add.w	sl, fp, #1
 80078f8:	4652      	mov	r2, sl
 80078fa:	2a01      	cmp	r2, #1
 80078fc:	bfb8      	it	lt
 80078fe:	2201      	movlt	r2, #1
 8007900:	e006      	b.n	8007910 <_dtoa_r+0x230>
 8007902:	2201      	movs	r2, #1
 8007904:	9208      	str	r2, [sp, #32]
 8007906:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007908:	2a00      	cmp	r2, #0
 800790a:	dd29      	ble.n	8007960 <_dtoa_r+0x280>
 800790c:	4693      	mov	fp, r2
 800790e:	4692      	mov	sl, r2
 8007910:	f8d9 701c 	ldr.w	r7, [r9, #28]
 8007914:	2100      	movs	r1, #0
 8007916:	2004      	movs	r0, #4
 8007918:	f100 0614 	add.w	r6, r0, #20
 800791c:	4296      	cmp	r6, r2
 800791e:	d926      	bls.n	800796e <_dtoa_r+0x28e>
 8007920:	6079      	str	r1, [r7, #4]
 8007922:	4648      	mov	r0, r9
 8007924:	9305      	str	r3, [sp, #20]
 8007926:	f000 fd39 	bl	800839c <_Balloc>
 800792a:	9b05      	ldr	r3, [sp, #20]
 800792c:	4607      	mov	r7, r0
 800792e:	2800      	cmp	r0, #0
 8007930:	d13e      	bne.n	80079b0 <_dtoa_r+0x2d0>
 8007932:	4b1e      	ldr	r3, [pc, #120]	@ (80079ac <_dtoa_r+0x2cc>)
 8007934:	4602      	mov	r2, r0
 8007936:	f240 11af 	movw	r1, #431	@ 0x1af
 800793a:	e6ea      	b.n	8007712 <_dtoa_r+0x32>
 800793c:	2200      	movs	r2, #0
 800793e:	e7e1      	b.n	8007904 <_dtoa_r+0x224>
 8007940:	2200      	movs	r2, #0
 8007942:	e7d3      	b.n	80078ec <_dtoa_r+0x20c>
 8007944:	2401      	movs	r4, #1
 8007946:	2200      	movs	r2, #0
 8007948:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800794c:	f04f 3bff 	mov.w	fp, #4294967295
 8007950:	2100      	movs	r1, #0
 8007952:	46da      	mov	sl, fp
 8007954:	2212      	movs	r2, #18
 8007956:	9109      	str	r1, [sp, #36]	@ 0x24
 8007958:	e7da      	b.n	8007910 <_dtoa_r+0x230>
 800795a:	2201      	movs	r2, #1
 800795c:	9208      	str	r2, [sp, #32]
 800795e:	e7f5      	b.n	800794c <_dtoa_r+0x26c>
 8007960:	f04f 0b01 	mov.w	fp, #1
 8007964:	46da      	mov	sl, fp
 8007966:	465a      	mov	r2, fp
 8007968:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 800796c:	e7d0      	b.n	8007910 <_dtoa_r+0x230>
 800796e:	3101      	adds	r1, #1
 8007970:	0040      	lsls	r0, r0, #1
 8007972:	e7d1      	b.n	8007918 <_dtoa_r+0x238>
 8007974:	f3af 8000 	nop.w
 8007978:	636f4361 	.word	0x636f4361
 800797c:	3fd287a7 	.word	0x3fd287a7
 8007980:	8b60c8b3 	.word	0x8b60c8b3
 8007984:	3fc68a28 	.word	0x3fc68a28
 8007988:	509f79fb 	.word	0x509f79fb
 800798c:	3fd34413 	.word	0x3fd34413
 8007990:	080096d1 	.word	0x080096d1
 8007994:	080096e8 	.word	0x080096e8
 8007998:	7ff00000 	.word	0x7ff00000
 800799c:	080096cd 	.word	0x080096cd
 80079a0:	080096a1 	.word	0x080096a1
 80079a4:	080096a0 	.word	0x080096a0
 80079a8:	08009838 	.word	0x08009838
 80079ac:	08009740 	.word	0x08009740
 80079b0:	f8d9 201c 	ldr.w	r2, [r9, #28]
 80079b4:	f1ba 0f0e 	cmp.w	sl, #14
 80079b8:	6010      	str	r0, [r2, #0]
 80079ba:	d86e      	bhi.n	8007a9a <_dtoa_r+0x3ba>
 80079bc:	2c00      	cmp	r4, #0
 80079be:	d06c      	beq.n	8007a9a <_dtoa_r+0x3ba>
 80079c0:	f1b8 0f00 	cmp.w	r8, #0
 80079c4:	f340 80b4 	ble.w	8007b30 <_dtoa_r+0x450>
 80079c8:	4ac8      	ldr	r2, [pc, #800]	@ (8007cec <_dtoa_r+0x60c>)
 80079ca:	f008 010f 	and.w	r1, r8, #15
 80079ce:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80079d2:	f418 7f80 	tst.w	r8, #256	@ 0x100
 80079d6:	ed92 7b00 	vldr	d7, [r2]
 80079da:	ea4f 1128 	mov.w	r1, r8, asr #4
 80079de:	f000 809b 	beq.w	8007b18 <_dtoa_r+0x438>
 80079e2:	4ac3      	ldr	r2, [pc, #780]	@ (8007cf0 <_dtoa_r+0x610>)
 80079e4:	ed92 6b08 	vldr	d6, [r2, #32]
 80079e8:	ee88 6b06 	vdiv.f64	d6, d8, d6
 80079ec:	ed8d 6b02 	vstr	d6, [sp, #8]
 80079f0:	f001 010f 	and.w	r1, r1, #15
 80079f4:	2203      	movs	r2, #3
 80079f6:	48be      	ldr	r0, [pc, #760]	@ (8007cf0 <_dtoa_r+0x610>)
 80079f8:	2900      	cmp	r1, #0
 80079fa:	f040 808f 	bne.w	8007b1c <_dtoa_r+0x43c>
 80079fe:	ed9d 6b02 	vldr	d6, [sp, #8]
 8007a02:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8007a06:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007a0a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8007a0c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007a10:	2900      	cmp	r1, #0
 8007a12:	f000 80b3 	beq.w	8007b7c <_dtoa_r+0x49c>
 8007a16:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8007a1a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8007a1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a22:	f140 80ab 	bpl.w	8007b7c <_dtoa_r+0x49c>
 8007a26:	f1ba 0f00 	cmp.w	sl, #0
 8007a2a:	f000 80a7 	beq.w	8007b7c <_dtoa_r+0x49c>
 8007a2e:	f1bb 0f00 	cmp.w	fp, #0
 8007a32:	dd30      	ble.n	8007a96 <_dtoa_r+0x3b6>
 8007a34:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8007a38:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007a3c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007a40:	f108 31ff 	add.w	r1, r8, #4294967295
 8007a44:	9105      	str	r1, [sp, #20]
 8007a46:	3201      	adds	r2, #1
 8007a48:	465c      	mov	r4, fp
 8007a4a:	ed9d 6b02 	vldr	d6, [sp, #8]
 8007a4e:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 8007a52:	ee07 2a90 	vmov	s15, r2
 8007a56:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8007a5a:	eea7 5b06 	vfma.f64	d5, d7, d6
 8007a5e:	ee15 2a90 	vmov	r2, s11
 8007a62:	ec51 0b15 	vmov	r0, r1, d5
 8007a66:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 8007a6a:	2c00      	cmp	r4, #0
 8007a6c:	f040 808a 	bne.w	8007b84 <_dtoa_r+0x4a4>
 8007a70:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8007a74:	ee36 6b47 	vsub.f64	d6, d6, d7
 8007a78:	ec41 0b17 	vmov	d7, r0, r1
 8007a7c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007a80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a84:	f300 826a 	bgt.w	8007f5c <_dtoa_r+0x87c>
 8007a88:	eeb1 7b47 	vneg.f64	d7, d7
 8007a8c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007a90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a94:	d423      	bmi.n	8007ade <_dtoa_r+0x3fe>
 8007a96:	ed8d 8b02 	vstr	d8, [sp, #8]
 8007a9a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8007a9c:	2a00      	cmp	r2, #0
 8007a9e:	f2c0 8129 	blt.w	8007cf4 <_dtoa_r+0x614>
 8007aa2:	f1b8 0f0e 	cmp.w	r8, #14
 8007aa6:	f300 8125 	bgt.w	8007cf4 <_dtoa_r+0x614>
 8007aaa:	4b90      	ldr	r3, [pc, #576]	@ (8007cec <_dtoa_r+0x60c>)
 8007aac:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8007ab0:	ed93 6b00 	vldr	d6, [r3]
 8007ab4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	f280 80c8 	bge.w	8007c4c <_dtoa_r+0x56c>
 8007abc:	f1ba 0f00 	cmp.w	sl, #0
 8007ac0:	f300 80c4 	bgt.w	8007c4c <_dtoa_r+0x56c>
 8007ac4:	d10b      	bne.n	8007ade <_dtoa_r+0x3fe>
 8007ac6:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8007aca:	ee26 6b07 	vmul.f64	d6, d6, d7
 8007ace:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007ad2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007ad6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ada:	f2c0 823c 	blt.w	8007f56 <_dtoa_r+0x876>
 8007ade:	2400      	movs	r4, #0
 8007ae0:	4625      	mov	r5, r4
 8007ae2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ae4:	43db      	mvns	r3, r3
 8007ae6:	9305      	str	r3, [sp, #20]
 8007ae8:	463e      	mov	r6, r7
 8007aea:	f04f 0800 	mov.w	r8, #0
 8007aee:	4621      	mov	r1, r4
 8007af0:	4648      	mov	r0, r9
 8007af2:	f000 fc93 	bl	800841c <_Bfree>
 8007af6:	2d00      	cmp	r5, #0
 8007af8:	f000 80a2 	beq.w	8007c40 <_dtoa_r+0x560>
 8007afc:	f1b8 0f00 	cmp.w	r8, #0
 8007b00:	d005      	beq.n	8007b0e <_dtoa_r+0x42e>
 8007b02:	45a8      	cmp	r8, r5
 8007b04:	d003      	beq.n	8007b0e <_dtoa_r+0x42e>
 8007b06:	4641      	mov	r1, r8
 8007b08:	4648      	mov	r0, r9
 8007b0a:	f000 fc87 	bl	800841c <_Bfree>
 8007b0e:	4629      	mov	r1, r5
 8007b10:	4648      	mov	r0, r9
 8007b12:	f000 fc83 	bl	800841c <_Bfree>
 8007b16:	e093      	b.n	8007c40 <_dtoa_r+0x560>
 8007b18:	2202      	movs	r2, #2
 8007b1a:	e76c      	b.n	80079f6 <_dtoa_r+0x316>
 8007b1c:	07cc      	lsls	r4, r1, #31
 8007b1e:	d504      	bpl.n	8007b2a <_dtoa_r+0x44a>
 8007b20:	ed90 6b00 	vldr	d6, [r0]
 8007b24:	3201      	adds	r2, #1
 8007b26:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007b2a:	1049      	asrs	r1, r1, #1
 8007b2c:	3008      	adds	r0, #8
 8007b2e:	e763      	b.n	80079f8 <_dtoa_r+0x318>
 8007b30:	d022      	beq.n	8007b78 <_dtoa_r+0x498>
 8007b32:	f1c8 0100 	rsb	r1, r8, #0
 8007b36:	4a6d      	ldr	r2, [pc, #436]	@ (8007cec <_dtoa_r+0x60c>)
 8007b38:	f001 000f 	and.w	r0, r1, #15
 8007b3c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8007b40:	ed92 7b00 	vldr	d7, [r2]
 8007b44:	ee28 7b07 	vmul.f64	d7, d8, d7
 8007b48:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007b4c:	4868      	ldr	r0, [pc, #416]	@ (8007cf0 <_dtoa_r+0x610>)
 8007b4e:	1109      	asrs	r1, r1, #4
 8007b50:	2400      	movs	r4, #0
 8007b52:	2202      	movs	r2, #2
 8007b54:	b929      	cbnz	r1, 8007b62 <_dtoa_r+0x482>
 8007b56:	2c00      	cmp	r4, #0
 8007b58:	f43f af57 	beq.w	8007a0a <_dtoa_r+0x32a>
 8007b5c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007b60:	e753      	b.n	8007a0a <_dtoa_r+0x32a>
 8007b62:	07ce      	lsls	r6, r1, #31
 8007b64:	d505      	bpl.n	8007b72 <_dtoa_r+0x492>
 8007b66:	ed90 6b00 	vldr	d6, [r0]
 8007b6a:	3201      	adds	r2, #1
 8007b6c:	2401      	movs	r4, #1
 8007b6e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007b72:	1049      	asrs	r1, r1, #1
 8007b74:	3008      	adds	r0, #8
 8007b76:	e7ed      	b.n	8007b54 <_dtoa_r+0x474>
 8007b78:	2202      	movs	r2, #2
 8007b7a:	e746      	b.n	8007a0a <_dtoa_r+0x32a>
 8007b7c:	f8cd 8014 	str.w	r8, [sp, #20]
 8007b80:	4654      	mov	r4, sl
 8007b82:	e762      	b.n	8007a4a <_dtoa_r+0x36a>
 8007b84:	4a59      	ldr	r2, [pc, #356]	@ (8007cec <_dtoa_r+0x60c>)
 8007b86:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8007b8a:	ed12 4b02 	vldr	d4, [r2, #-8]
 8007b8e:	9a08      	ldr	r2, [sp, #32]
 8007b90:	ec41 0b17 	vmov	d7, r0, r1
 8007b94:	443c      	add	r4, r7
 8007b96:	b34a      	cbz	r2, 8007bec <_dtoa_r+0x50c>
 8007b98:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 8007b9c:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 8007ba0:	463e      	mov	r6, r7
 8007ba2:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8007ba6:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8007baa:	ee35 7b47 	vsub.f64	d7, d5, d7
 8007bae:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8007bb2:	ee14 2a90 	vmov	r2, s9
 8007bb6:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8007bba:	3230      	adds	r2, #48	@ 0x30
 8007bbc:	ee36 6b45 	vsub.f64	d6, d6, d5
 8007bc0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007bc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007bc8:	f806 2b01 	strb.w	r2, [r6], #1
 8007bcc:	d438      	bmi.n	8007c40 <_dtoa_r+0x560>
 8007bce:	ee32 5b46 	vsub.f64	d5, d2, d6
 8007bd2:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8007bd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007bda:	d46e      	bmi.n	8007cba <_dtoa_r+0x5da>
 8007bdc:	42a6      	cmp	r6, r4
 8007bde:	f43f af5a 	beq.w	8007a96 <_dtoa_r+0x3b6>
 8007be2:	ee27 7b03 	vmul.f64	d7, d7, d3
 8007be6:	ee26 6b03 	vmul.f64	d6, d6, d3
 8007bea:	e7e0      	b.n	8007bae <_dtoa_r+0x4ce>
 8007bec:	4621      	mov	r1, r4
 8007bee:	463e      	mov	r6, r7
 8007bf0:	ee27 7b04 	vmul.f64	d7, d7, d4
 8007bf4:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8007bf8:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8007bfc:	ee14 2a90 	vmov	r2, s9
 8007c00:	3230      	adds	r2, #48	@ 0x30
 8007c02:	f806 2b01 	strb.w	r2, [r6], #1
 8007c06:	42a6      	cmp	r6, r4
 8007c08:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8007c0c:	ee36 6b45 	vsub.f64	d6, d6, d5
 8007c10:	d119      	bne.n	8007c46 <_dtoa_r+0x566>
 8007c12:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 8007c16:	ee37 4b05 	vadd.f64	d4, d7, d5
 8007c1a:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8007c1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c22:	dc4a      	bgt.n	8007cba <_dtoa_r+0x5da>
 8007c24:	ee35 5b47 	vsub.f64	d5, d5, d7
 8007c28:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8007c2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c30:	f57f af31 	bpl.w	8007a96 <_dtoa_r+0x3b6>
 8007c34:	460e      	mov	r6, r1
 8007c36:	3901      	subs	r1, #1
 8007c38:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007c3c:	2b30      	cmp	r3, #48	@ 0x30
 8007c3e:	d0f9      	beq.n	8007c34 <_dtoa_r+0x554>
 8007c40:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8007c44:	e027      	b.n	8007c96 <_dtoa_r+0x5b6>
 8007c46:	ee26 6b03 	vmul.f64	d6, d6, d3
 8007c4a:	e7d5      	b.n	8007bf8 <_dtoa_r+0x518>
 8007c4c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007c50:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 8007c54:	463e      	mov	r6, r7
 8007c56:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8007c5a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8007c5e:	ee15 3a10 	vmov	r3, s10
 8007c62:	3330      	adds	r3, #48	@ 0x30
 8007c64:	f806 3b01 	strb.w	r3, [r6], #1
 8007c68:	1bf3      	subs	r3, r6, r7
 8007c6a:	459a      	cmp	sl, r3
 8007c6c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8007c70:	eea3 7b46 	vfms.f64	d7, d3, d6
 8007c74:	d132      	bne.n	8007cdc <_dtoa_r+0x5fc>
 8007c76:	ee37 7b07 	vadd.f64	d7, d7, d7
 8007c7a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8007c7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c82:	dc18      	bgt.n	8007cb6 <_dtoa_r+0x5d6>
 8007c84:	eeb4 7b46 	vcmp.f64	d7, d6
 8007c88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c8c:	d103      	bne.n	8007c96 <_dtoa_r+0x5b6>
 8007c8e:	ee15 3a10 	vmov	r3, s10
 8007c92:	07db      	lsls	r3, r3, #31
 8007c94:	d40f      	bmi.n	8007cb6 <_dtoa_r+0x5d6>
 8007c96:	9901      	ldr	r1, [sp, #4]
 8007c98:	4648      	mov	r0, r9
 8007c9a:	f000 fbbf 	bl	800841c <_Bfree>
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007ca2:	7033      	strb	r3, [r6, #0]
 8007ca4:	f108 0301 	add.w	r3, r8, #1
 8007ca8:	6013      	str	r3, [r2, #0]
 8007caa:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	f000 824b 	beq.w	8008148 <_dtoa_r+0xa68>
 8007cb2:	601e      	str	r6, [r3, #0]
 8007cb4:	e248      	b.n	8008148 <_dtoa_r+0xa68>
 8007cb6:	f8cd 8014 	str.w	r8, [sp, #20]
 8007cba:	4633      	mov	r3, r6
 8007cbc:	461e      	mov	r6, r3
 8007cbe:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007cc2:	2a39      	cmp	r2, #57	@ 0x39
 8007cc4:	d106      	bne.n	8007cd4 <_dtoa_r+0x5f4>
 8007cc6:	429f      	cmp	r7, r3
 8007cc8:	d1f8      	bne.n	8007cbc <_dtoa_r+0x5dc>
 8007cca:	9a05      	ldr	r2, [sp, #20]
 8007ccc:	3201      	adds	r2, #1
 8007cce:	9205      	str	r2, [sp, #20]
 8007cd0:	2230      	movs	r2, #48	@ 0x30
 8007cd2:	703a      	strb	r2, [r7, #0]
 8007cd4:	781a      	ldrb	r2, [r3, #0]
 8007cd6:	3201      	adds	r2, #1
 8007cd8:	701a      	strb	r2, [r3, #0]
 8007cda:	e7b1      	b.n	8007c40 <_dtoa_r+0x560>
 8007cdc:	ee27 7b04 	vmul.f64	d7, d7, d4
 8007ce0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007ce4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ce8:	d1b5      	bne.n	8007c56 <_dtoa_r+0x576>
 8007cea:	e7d4      	b.n	8007c96 <_dtoa_r+0x5b6>
 8007cec:	08009838 	.word	0x08009838
 8007cf0:	08009810 	.word	0x08009810
 8007cf4:	9908      	ldr	r1, [sp, #32]
 8007cf6:	2900      	cmp	r1, #0
 8007cf8:	f000 80e9 	beq.w	8007ece <_dtoa_r+0x7ee>
 8007cfc:	9907      	ldr	r1, [sp, #28]
 8007cfe:	2901      	cmp	r1, #1
 8007d00:	f300 80cb 	bgt.w	8007e9a <_dtoa_r+0x7ba>
 8007d04:	2d00      	cmp	r5, #0
 8007d06:	f000 80c4 	beq.w	8007e92 <_dtoa_r+0x7b2>
 8007d0a:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8007d0e:	9e04      	ldr	r6, [sp, #16]
 8007d10:	461c      	mov	r4, r3
 8007d12:	9305      	str	r3, [sp, #20]
 8007d14:	9b04      	ldr	r3, [sp, #16]
 8007d16:	4413      	add	r3, r2
 8007d18:	9304      	str	r3, [sp, #16]
 8007d1a:	9b06      	ldr	r3, [sp, #24]
 8007d1c:	2101      	movs	r1, #1
 8007d1e:	4413      	add	r3, r2
 8007d20:	4648      	mov	r0, r9
 8007d22:	9306      	str	r3, [sp, #24]
 8007d24:	f000 fc2e 	bl	8008584 <__i2b>
 8007d28:	9b05      	ldr	r3, [sp, #20]
 8007d2a:	4605      	mov	r5, r0
 8007d2c:	b166      	cbz	r6, 8007d48 <_dtoa_r+0x668>
 8007d2e:	9a06      	ldr	r2, [sp, #24]
 8007d30:	2a00      	cmp	r2, #0
 8007d32:	dd09      	ble.n	8007d48 <_dtoa_r+0x668>
 8007d34:	42b2      	cmp	r2, r6
 8007d36:	9904      	ldr	r1, [sp, #16]
 8007d38:	bfa8      	it	ge
 8007d3a:	4632      	movge	r2, r6
 8007d3c:	1a89      	subs	r1, r1, r2
 8007d3e:	9104      	str	r1, [sp, #16]
 8007d40:	9906      	ldr	r1, [sp, #24]
 8007d42:	1ab6      	subs	r6, r6, r2
 8007d44:	1a8a      	subs	r2, r1, r2
 8007d46:	9206      	str	r2, [sp, #24]
 8007d48:	b30b      	cbz	r3, 8007d8e <_dtoa_r+0x6ae>
 8007d4a:	9a08      	ldr	r2, [sp, #32]
 8007d4c:	2a00      	cmp	r2, #0
 8007d4e:	f000 80c5 	beq.w	8007edc <_dtoa_r+0x7fc>
 8007d52:	2c00      	cmp	r4, #0
 8007d54:	f000 80bf 	beq.w	8007ed6 <_dtoa_r+0x7f6>
 8007d58:	4629      	mov	r1, r5
 8007d5a:	4622      	mov	r2, r4
 8007d5c:	4648      	mov	r0, r9
 8007d5e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007d60:	f000 fcc8 	bl	80086f4 <__pow5mult>
 8007d64:	9a01      	ldr	r2, [sp, #4]
 8007d66:	4601      	mov	r1, r0
 8007d68:	4605      	mov	r5, r0
 8007d6a:	4648      	mov	r0, r9
 8007d6c:	f000 fc20 	bl	80085b0 <__multiply>
 8007d70:	9901      	ldr	r1, [sp, #4]
 8007d72:	9005      	str	r0, [sp, #20]
 8007d74:	4648      	mov	r0, r9
 8007d76:	f000 fb51 	bl	800841c <_Bfree>
 8007d7a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007d7c:	1b1b      	subs	r3, r3, r4
 8007d7e:	f000 80b0 	beq.w	8007ee2 <_dtoa_r+0x802>
 8007d82:	9905      	ldr	r1, [sp, #20]
 8007d84:	461a      	mov	r2, r3
 8007d86:	4648      	mov	r0, r9
 8007d88:	f000 fcb4 	bl	80086f4 <__pow5mult>
 8007d8c:	9001      	str	r0, [sp, #4]
 8007d8e:	2101      	movs	r1, #1
 8007d90:	4648      	mov	r0, r9
 8007d92:	f000 fbf7 	bl	8008584 <__i2b>
 8007d96:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007d98:	4604      	mov	r4, r0
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	f000 81da 	beq.w	8008154 <_dtoa_r+0xa74>
 8007da0:	461a      	mov	r2, r3
 8007da2:	4601      	mov	r1, r0
 8007da4:	4648      	mov	r0, r9
 8007da6:	f000 fca5 	bl	80086f4 <__pow5mult>
 8007daa:	9b07      	ldr	r3, [sp, #28]
 8007dac:	2b01      	cmp	r3, #1
 8007dae:	4604      	mov	r4, r0
 8007db0:	f300 80a0 	bgt.w	8007ef4 <_dtoa_r+0x814>
 8007db4:	9b02      	ldr	r3, [sp, #8]
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	f040 8096 	bne.w	8007ee8 <_dtoa_r+0x808>
 8007dbc:	9b03      	ldr	r3, [sp, #12]
 8007dbe:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8007dc2:	2a00      	cmp	r2, #0
 8007dc4:	f040 8092 	bne.w	8007eec <_dtoa_r+0x80c>
 8007dc8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8007dcc:	0d12      	lsrs	r2, r2, #20
 8007dce:	0512      	lsls	r2, r2, #20
 8007dd0:	2a00      	cmp	r2, #0
 8007dd2:	f000 808d 	beq.w	8007ef0 <_dtoa_r+0x810>
 8007dd6:	9b04      	ldr	r3, [sp, #16]
 8007dd8:	3301      	adds	r3, #1
 8007dda:	9304      	str	r3, [sp, #16]
 8007ddc:	9b06      	ldr	r3, [sp, #24]
 8007dde:	3301      	adds	r3, #1
 8007de0:	9306      	str	r3, [sp, #24]
 8007de2:	2301      	movs	r3, #1
 8007de4:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007de6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	f000 81b9 	beq.w	8008160 <_dtoa_r+0xa80>
 8007dee:	6922      	ldr	r2, [r4, #16]
 8007df0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8007df4:	6910      	ldr	r0, [r2, #16]
 8007df6:	f000 fb79 	bl	80084ec <__hi0bits>
 8007dfa:	f1c0 0020 	rsb	r0, r0, #32
 8007dfe:	9b06      	ldr	r3, [sp, #24]
 8007e00:	4418      	add	r0, r3
 8007e02:	f010 001f 	ands.w	r0, r0, #31
 8007e06:	f000 8081 	beq.w	8007f0c <_dtoa_r+0x82c>
 8007e0a:	f1c0 0220 	rsb	r2, r0, #32
 8007e0e:	2a04      	cmp	r2, #4
 8007e10:	dd73      	ble.n	8007efa <_dtoa_r+0x81a>
 8007e12:	9b04      	ldr	r3, [sp, #16]
 8007e14:	f1c0 001c 	rsb	r0, r0, #28
 8007e18:	4403      	add	r3, r0
 8007e1a:	9304      	str	r3, [sp, #16]
 8007e1c:	9b06      	ldr	r3, [sp, #24]
 8007e1e:	4406      	add	r6, r0
 8007e20:	4403      	add	r3, r0
 8007e22:	9306      	str	r3, [sp, #24]
 8007e24:	9b04      	ldr	r3, [sp, #16]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	dd05      	ble.n	8007e36 <_dtoa_r+0x756>
 8007e2a:	9901      	ldr	r1, [sp, #4]
 8007e2c:	461a      	mov	r2, r3
 8007e2e:	4648      	mov	r0, r9
 8007e30:	f000 fcba 	bl	80087a8 <__lshift>
 8007e34:	9001      	str	r0, [sp, #4]
 8007e36:	9b06      	ldr	r3, [sp, #24]
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	dd05      	ble.n	8007e48 <_dtoa_r+0x768>
 8007e3c:	4621      	mov	r1, r4
 8007e3e:	461a      	mov	r2, r3
 8007e40:	4648      	mov	r0, r9
 8007e42:	f000 fcb1 	bl	80087a8 <__lshift>
 8007e46:	4604      	mov	r4, r0
 8007e48:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d060      	beq.n	8007f10 <_dtoa_r+0x830>
 8007e4e:	9801      	ldr	r0, [sp, #4]
 8007e50:	4621      	mov	r1, r4
 8007e52:	f000 fd15 	bl	8008880 <__mcmp>
 8007e56:	2800      	cmp	r0, #0
 8007e58:	da5a      	bge.n	8007f10 <_dtoa_r+0x830>
 8007e5a:	f108 33ff 	add.w	r3, r8, #4294967295
 8007e5e:	9305      	str	r3, [sp, #20]
 8007e60:	9901      	ldr	r1, [sp, #4]
 8007e62:	2300      	movs	r3, #0
 8007e64:	220a      	movs	r2, #10
 8007e66:	4648      	mov	r0, r9
 8007e68:	f000 fafa 	bl	8008460 <__multadd>
 8007e6c:	9b08      	ldr	r3, [sp, #32]
 8007e6e:	9001      	str	r0, [sp, #4]
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	f000 8177 	beq.w	8008164 <_dtoa_r+0xa84>
 8007e76:	4629      	mov	r1, r5
 8007e78:	2300      	movs	r3, #0
 8007e7a:	220a      	movs	r2, #10
 8007e7c:	4648      	mov	r0, r9
 8007e7e:	f000 faef 	bl	8008460 <__multadd>
 8007e82:	f1bb 0f00 	cmp.w	fp, #0
 8007e86:	4605      	mov	r5, r0
 8007e88:	dc6e      	bgt.n	8007f68 <_dtoa_r+0x888>
 8007e8a:	9b07      	ldr	r3, [sp, #28]
 8007e8c:	2b02      	cmp	r3, #2
 8007e8e:	dc48      	bgt.n	8007f22 <_dtoa_r+0x842>
 8007e90:	e06a      	b.n	8007f68 <_dtoa_r+0x888>
 8007e92:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007e94:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8007e98:	e739      	b.n	8007d0e <_dtoa_r+0x62e>
 8007e9a:	f10a 34ff 	add.w	r4, sl, #4294967295
 8007e9e:	42a3      	cmp	r3, r4
 8007ea0:	db07      	blt.n	8007eb2 <_dtoa_r+0x7d2>
 8007ea2:	f1ba 0f00 	cmp.w	sl, #0
 8007ea6:	eba3 0404 	sub.w	r4, r3, r4
 8007eaa:	db0b      	blt.n	8007ec4 <_dtoa_r+0x7e4>
 8007eac:	9e04      	ldr	r6, [sp, #16]
 8007eae:	4652      	mov	r2, sl
 8007eb0:	e72f      	b.n	8007d12 <_dtoa_r+0x632>
 8007eb2:	1ae2      	subs	r2, r4, r3
 8007eb4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007eb6:	9e04      	ldr	r6, [sp, #16]
 8007eb8:	4413      	add	r3, r2
 8007eba:	930a      	str	r3, [sp, #40]	@ 0x28
 8007ebc:	4652      	mov	r2, sl
 8007ebe:	4623      	mov	r3, r4
 8007ec0:	2400      	movs	r4, #0
 8007ec2:	e726      	b.n	8007d12 <_dtoa_r+0x632>
 8007ec4:	9a04      	ldr	r2, [sp, #16]
 8007ec6:	eba2 060a 	sub.w	r6, r2, sl
 8007eca:	2200      	movs	r2, #0
 8007ecc:	e721      	b.n	8007d12 <_dtoa_r+0x632>
 8007ece:	9e04      	ldr	r6, [sp, #16]
 8007ed0:	9d08      	ldr	r5, [sp, #32]
 8007ed2:	461c      	mov	r4, r3
 8007ed4:	e72a      	b.n	8007d2c <_dtoa_r+0x64c>
 8007ed6:	9a01      	ldr	r2, [sp, #4]
 8007ed8:	9205      	str	r2, [sp, #20]
 8007eda:	e752      	b.n	8007d82 <_dtoa_r+0x6a2>
 8007edc:	9901      	ldr	r1, [sp, #4]
 8007ede:	461a      	mov	r2, r3
 8007ee0:	e751      	b.n	8007d86 <_dtoa_r+0x6a6>
 8007ee2:	9b05      	ldr	r3, [sp, #20]
 8007ee4:	9301      	str	r3, [sp, #4]
 8007ee6:	e752      	b.n	8007d8e <_dtoa_r+0x6ae>
 8007ee8:	2300      	movs	r3, #0
 8007eea:	e77b      	b.n	8007de4 <_dtoa_r+0x704>
 8007eec:	9b02      	ldr	r3, [sp, #8]
 8007eee:	e779      	b.n	8007de4 <_dtoa_r+0x704>
 8007ef0:	920b      	str	r2, [sp, #44]	@ 0x2c
 8007ef2:	e778      	b.n	8007de6 <_dtoa_r+0x706>
 8007ef4:	2300      	movs	r3, #0
 8007ef6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007ef8:	e779      	b.n	8007dee <_dtoa_r+0x70e>
 8007efa:	d093      	beq.n	8007e24 <_dtoa_r+0x744>
 8007efc:	9b04      	ldr	r3, [sp, #16]
 8007efe:	321c      	adds	r2, #28
 8007f00:	4413      	add	r3, r2
 8007f02:	9304      	str	r3, [sp, #16]
 8007f04:	9b06      	ldr	r3, [sp, #24]
 8007f06:	4416      	add	r6, r2
 8007f08:	4413      	add	r3, r2
 8007f0a:	e78a      	b.n	8007e22 <_dtoa_r+0x742>
 8007f0c:	4602      	mov	r2, r0
 8007f0e:	e7f5      	b.n	8007efc <_dtoa_r+0x81c>
 8007f10:	f1ba 0f00 	cmp.w	sl, #0
 8007f14:	f8cd 8014 	str.w	r8, [sp, #20]
 8007f18:	46d3      	mov	fp, sl
 8007f1a:	dc21      	bgt.n	8007f60 <_dtoa_r+0x880>
 8007f1c:	9b07      	ldr	r3, [sp, #28]
 8007f1e:	2b02      	cmp	r3, #2
 8007f20:	dd1e      	ble.n	8007f60 <_dtoa_r+0x880>
 8007f22:	f1bb 0f00 	cmp.w	fp, #0
 8007f26:	f47f addc 	bne.w	8007ae2 <_dtoa_r+0x402>
 8007f2a:	4621      	mov	r1, r4
 8007f2c:	465b      	mov	r3, fp
 8007f2e:	2205      	movs	r2, #5
 8007f30:	4648      	mov	r0, r9
 8007f32:	f000 fa95 	bl	8008460 <__multadd>
 8007f36:	4601      	mov	r1, r0
 8007f38:	4604      	mov	r4, r0
 8007f3a:	9801      	ldr	r0, [sp, #4]
 8007f3c:	f000 fca0 	bl	8008880 <__mcmp>
 8007f40:	2800      	cmp	r0, #0
 8007f42:	f77f adce 	ble.w	8007ae2 <_dtoa_r+0x402>
 8007f46:	463e      	mov	r6, r7
 8007f48:	2331      	movs	r3, #49	@ 0x31
 8007f4a:	f806 3b01 	strb.w	r3, [r6], #1
 8007f4e:	9b05      	ldr	r3, [sp, #20]
 8007f50:	3301      	adds	r3, #1
 8007f52:	9305      	str	r3, [sp, #20]
 8007f54:	e5c9      	b.n	8007aea <_dtoa_r+0x40a>
 8007f56:	f8cd 8014 	str.w	r8, [sp, #20]
 8007f5a:	4654      	mov	r4, sl
 8007f5c:	4625      	mov	r5, r4
 8007f5e:	e7f2      	b.n	8007f46 <_dtoa_r+0x866>
 8007f60:	9b08      	ldr	r3, [sp, #32]
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	f000 8102 	beq.w	800816c <_dtoa_r+0xa8c>
 8007f68:	2e00      	cmp	r6, #0
 8007f6a:	dd05      	ble.n	8007f78 <_dtoa_r+0x898>
 8007f6c:	4629      	mov	r1, r5
 8007f6e:	4632      	mov	r2, r6
 8007f70:	4648      	mov	r0, r9
 8007f72:	f000 fc19 	bl	80087a8 <__lshift>
 8007f76:	4605      	mov	r5, r0
 8007f78:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d058      	beq.n	8008030 <_dtoa_r+0x950>
 8007f7e:	6869      	ldr	r1, [r5, #4]
 8007f80:	4648      	mov	r0, r9
 8007f82:	f000 fa0b 	bl	800839c <_Balloc>
 8007f86:	4606      	mov	r6, r0
 8007f88:	b928      	cbnz	r0, 8007f96 <_dtoa_r+0x8b6>
 8007f8a:	4b82      	ldr	r3, [pc, #520]	@ (8008194 <_dtoa_r+0xab4>)
 8007f8c:	4602      	mov	r2, r0
 8007f8e:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007f92:	f7ff bbbe 	b.w	8007712 <_dtoa_r+0x32>
 8007f96:	692a      	ldr	r2, [r5, #16]
 8007f98:	3202      	adds	r2, #2
 8007f9a:	0092      	lsls	r2, r2, #2
 8007f9c:	f105 010c 	add.w	r1, r5, #12
 8007fa0:	300c      	adds	r0, #12
 8007fa2:	f7ff fb06 	bl	80075b2 <memcpy>
 8007fa6:	2201      	movs	r2, #1
 8007fa8:	4631      	mov	r1, r6
 8007faa:	4648      	mov	r0, r9
 8007fac:	f000 fbfc 	bl	80087a8 <__lshift>
 8007fb0:	1c7b      	adds	r3, r7, #1
 8007fb2:	9304      	str	r3, [sp, #16]
 8007fb4:	eb07 030b 	add.w	r3, r7, fp
 8007fb8:	9309      	str	r3, [sp, #36]	@ 0x24
 8007fba:	9b02      	ldr	r3, [sp, #8]
 8007fbc:	f003 0301 	and.w	r3, r3, #1
 8007fc0:	46a8      	mov	r8, r5
 8007fc2:	9308      	str	r3, [sp, #32]
 8007fc4:	4605      	mov	r5, r0
 8007fc6:	9b04      	ldr	r3, [sp, #16]
 8007fc8:	9801      	ldr	r0, [sp, #4]
 8007fca:	4621      	mov	r1, r4
 8007fcc:	f103 3bff 	add.w	fp, r3, #4294967295
 8007fd0:	f7ff fafd 	bl	80075ce <quorem>
 8007fd4:	4641      	mov	r1, r8
 8007fd6:	9002      	str	r0, [sp, #8]
 8007fd8:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8007fdc:	9801      	ldr	r0, [sp, #4]
 8007fde:	f000 fc4f 	bl	8008880 <__mcmp>
 8007fe2:	462a      	mov	r2, r5
 8007fe4:	9006      	str	r0, [sp, #24]
 8007fe6:	4621      	mov	r1, r4
 8007fe8:	4648      	mov	r0, r9
 8007fea:	f000 fc65 	bl	80088b8 <__mdiff>
 8007fee:	68c2      	ldr	r2, [r0, #12]
 8007ff0:	4606      	mov	r6, r0
 8007ff2:	b9fa      	cbnz	r2, 8008034 <_dtoa_r+0x954>
 8007ff4:	4601      	mov	r1, r0
 8007ff6:	9801      	ldr	r0, [sp, #4]
 8007ff8:	f000 fc42 	bl	8008880 <__mcmp>
 8007ffc:	4602      	mov	r2, r0
 8007ffe:	4631      	mov	r1, r6
 8008000:	4648      	mov	r0, r9
 8008002:	920a      	str	r2, [sp, #40]	@ 0x28
 8008004:	f000 fa0a 	bl	800841c <_Bfree>
 8008008:	9b07      	ldr	r3, [sp, #28]
 800800a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800800c:	9e04      	ldr	r6, [sp, #16]
 800800e:	ea42 0103 	orr.w	r1, r2, r3
 8008012:	9b08      	ldr	r3, [sp, #32]
 8008014:	4319      	orrs	r1, r3
 8008016:	d10f      	bne.n	8008038 <_dtoa_r+0x958>
 8008018:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800801c:	d028      	beq.n	8008070 <_dtoa_r+0x990>
 800801e:	9b06      	ldr	r3, [sp, #24]
 8008020:	2b00      	cmp	r3, #0
 8008022:	dd02      	ble.n	800802a <_dtoa_r+0x94a>
 8008024:	9b02      	ldr	r3, [sp, #8]
 8008026:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 800802a:	f88b a000 	strb.w	sl, [fp]
 800802e:	e55e      	b.n	8007aee <_dtoa_r+0x40e>
 8008030:	4628      	mov	r0, r5
 8008032:	e7bd      	b.n	8007fb0 <_dtoa_r+0x8d0>
 8008034:	2201      	movs	r2, #1
 8008036:	e7e2      	b.n	8007ffe <_dtoa_r+0x91e>
 8008038:	9b06      	ldr	r3, [sp, #24]
 800803a:	2b00      	cmp	r3, #0
 800803c:	db04      	blt.n	8008048 <_dtoa_r+0x968>
 800803e:	9907      	ldr	r1, [sp, #28]
 8008040:	430b      	orrs	r3, r1
 8008042:	9908      	ldr	r1, [sp, #32]
 8008044:	430b      	orrs	r3, r1
 8008046:	d120      	bne.n	800808a <_dtoa_r+0x9aa>
 8008048:	2a00      	cmp	r2, #0
 800804a:	ddee      	ble.n	800802a <_dtoa_r+0x94a>
 800804c:	9901      	ldr	r1, [sp, #4]
 800804e:	2201      	movs	r2, #1
 8008050:	4648      	mov	r0, r9
 8008052:	f000 fba9 	bl	80087a8 <__lshift>
 8008056:	4621      	mov	r1, r4
 8008058:	9001      	str	r0, [sp, #4]
 800805a:	f000 fc11 	bl	8008880 <__mcmp>
 800805e:	2800      	cmp	r0, #0
 8008060:	dc03      	bgt.n	800806a <_dtoa_r+0x98a>
 8008062:	d1e2      	bne.n	800802a <_dtoa_r+0x94a>
 8008064:	f01a 0f01 	tst.w	sl, #1
 8008068:	d0df      	beq.n	800802a <_dtoa_r+0x94a>
 800806a:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800806e:	d1d9      	bne.n	8008024 <_dtoa_r+0x944>
 8008070:	2339      	movs	r3, #57	@ 0x39
 8008072:	f88b 3000 	strb.w	r3, [fp]
 8008076:	4633      	mov	r3, r6
 8008078:	461e      	mov	r6, r3
 800807a:	3b01      	subs	r3, #1
 800807c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008080:	2a39      	cmp	r2, #57	@ 0x39
 8008082:	d052      	beq.n	800812a <_dtoa_r+0xa4a>
 8008084:	3201      	adds	r2, #1
 8008086:	701a      	strb	r2, [r3, #0]
 8008088:	e531      	b.n	8007aee <_dtoa_r+0x40e>
 800808a:	2a00      	cmp	r2, #0
 800808c:	dd07      	ble.n	800809e <_dtoa_r+0x9be>
 800808e:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8008092:	d0ed      	beq.n	8008070 <_dtoa_r+0x990>
 8008094:	f10a 0301 	add.w	r3, sl, #1
 8008098:	f88b 3000 	strb.w	r3, [fp]
 800809c:	e527      	b.n	8007aee <_dtoa_r+0x40e>
 800809e:	9b04      	ldr	r3, [sp, #16]
 80080a0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80080a2:	f803 ac01 	strb.w	sl, [r3, #-1]
 80080a6:	4293      	cmp	r3, r2
 80080a8:	d029      	beq.n	80080fe <_dtoa_r+0xa1e>
 80080aa:	9901      	ldr	r1, [sp, #4]
 80080ac:	2300      	movs	r3, #0
 80080ae:	220a      	movs	r2, #10
 80080b0:	4648      	mov	r0, r9
 80080b2:	f000 f9d5 	bl	8008460 <__multadd>
 80080b6:	45a8      	cmp	r8, r5
 80080b8:	9001      	str	r0, [sp, #4]
 80080ba:	f04f 0300 	mov.w	r3, #0
 80080be:	f04f 020a 	mov.w	r2, #10
 80080c2:	4641      	mov	r1, r8
 80080c4:	4648      	mov	r0, r9
 80080c6:	d107      	bne.n	80080d8 <_dtoa_r+0x9f8>
 80080c8:	f000 f9ca 	bl	8008460 <__multadd>
 80080cc:	4680      	mov	r8, r0
 80080ce:	4605      	mov	r5, r0
 80080d0:	9b04      	ldr	r3, [sp, #16]
 80080d2:	3301      	adds	r3, #1
 80080d4:	9304      	str	r3, [sp, #16]
 80080d6:	e776      	b.n	8007fc6 <_dtoa_r+0x8e6>
 80080d8:	f000 f9c2 	bl	8008460 <__multadd>
 80080dc:	4629      	mov	r1, r5
 80080de:	4680      	mov	r8, r0
 80080e0:	2300      	movs	r3, #0
 80080e2:	220a      	movs	r2, #10
 80080e4:	4648      	mov	r0, r9
 80080e6:	f000 f9bb 	bl	8008460 <__multadd>
 80080ea:	4605      	mov	r5, r0
 80080ec:	e7f0      	b.n	80080d0 <_dtoa_r+0x9f0>
 80080ee:	f1bb 0f00 	cmp.w	fp, #0
 80080f2:	bfcc      	ite	gt
 80080f4:	465e      	movgt	r6, fp
 80080f6:	2601      	movle	r6, #1
 80080f8:	443e      	add	r6, r7
 80080fa:	f04f 0800 	mov.w	r8, #0
 80080fe:	9901      	ldr	r1, [sp, #4]
 8008100:	2201      	movs	r2, #1
 8008102:	4648      	mov	r0, r9
 8008104:	f000 fb50 	bl	80087a8 <__lshift>
 8008108:	4621      	mov	r1, r4
 800810a:	9001      	str	r0, [sp, #4]
 800810c:	f000 fbb8 	bl	8008880 <__mcmp>
 8008110:	2800      	cmp	r0, #0
 8008112:	dcb0      	bgt.n	8008076 <_dtoa_r+0x996>
 8008114:	d102      	bne.n	800811c <_dtoa_r+0xa3c>
 8008116:	f01a 0f01 	tst.w	sl, #1
 800811a:	d1ac      	bne.n	8008076 <_dtoa_r+0x996>
 800811c:	4633      	mov	r3, r6
 800811e:	461e      	mov	r6, r3
 8008120:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008124:	2a30      	cmp	r2, #48	@ 0x30
 8008126:	d0fa      	beq.n	800811e <_dtoa_r+0xa3e>
 8008128:	e4e1      	b.n	8007aee <_dtoa_r+0x40e>
 800812a:	429f      	cmp	r7, r3
 800812c:	d1a4      	bne.n	8008078 <_dtoa_r+0x998>
 800812e:	9b05      	ldr	r3, [sp, #20]
 8008130:	3301      	adds	r3, #1
 8008132:	9305      	str	r3, [sp, #20]
 8008134:	2331      	movs	r3, #49	@ 0x31
 8008136:	703b      	strb	r3, [r7, #0]
 8008138:	e4d9      	b.n	8007aee <_dtoa_r+0x40e>
 800813a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800813c:	4f16      	ldr	r7, [pc, #88]	@ (8008198 <_dtoa_r+0xab8>)
 800813e:	b11b      	cbz	r3, 8008148 <_dtoa_r+0xa68>
 8008140:	f107 0308 	add.w	r3, r7, #8
 8008144:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8008146:	6013      	str	r3, [r2, #0]
 8008148:	4638      	mov	r0, r7
 800814a:	b011      	add	sp, #68	@ 0x44
 800814c:	ecbd 8b02 	vpop	{d8}
 8008150:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008154:	9b07      	ldr	r3, [sp, #28]
 8008156:	2b01      	cmp	r3, #1
 8008158:	f77f ae2c 	ble.w	8007db4 <_dtoa_r+0x6d4>
 800815c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800815e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008160:	2001      	movs	r0, #1
 8008162:	e64c      	b.n	8007dfe <_dtoa_r+0x71e>
 8008164:	f1bb 0f00 	cmp.w	fp, #0
 8008168:	f77f aed8 	ble.w	8007f1c <_dtoa_r+0x83c>
 800816c:	463e      	mov	r6, r7
 800816e:	9801      	ldr	r0, [sp, #4]
 8008170:	4621      	mov	r1, r4
 8008172:	f7ff fa2c 	bl	80075ce <quorem>
 8008176:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800817a:	f806 ab01 	strb.w	sl, [r6], #1
 800817e:	1bf2      	subs	r2, r6, r7
 8008180:	4593      	cmp	fp, r2
 8008182:	ddb4      	ble.n	80080ee <_dtoa_r+0xa0e>
 8008184:	9901      	ldr	r1, [sp, #4]
 8008186:	2300      	movs	r3, #0
 8008188:	220a      	movs	r2, #10
 800818a:	4648      	mov	r0, r9
 800818c:	f000 f968 	bl	8008460 <__multadd>
 8008190:	9001      	str	r0, [sp, #4]
 8008192:	e7ec      	b.n	800816e <_dtoa_r+0xa8e>
 8008194:	08009740 	.word	0x08009740
 8008198:	080096c4 	.word	0x080096c4

0800819c <_free_r>:
 800819c:	b538      	push	{r3, r4, r5, lr}
 800819e:	4605      	mov	r5, r0
 80081a0:	2900      	cmp	r1, #0
 80081a2:	d041      	beq.n	8008228 <_free_r+0x8c>
 80081a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80081a8:	1f0c      	subs	r4, r1, #4
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	bfb8      	it	lt
 80081ae:	18e4      	addlt	r4, r4, r3
 80081b0:	f000 f8e8 	bl	8008384 <__malloc_lock>
 80081b4:	4a1d      	ldr	r2, [pc, #116]	@ (800822c <_free_r+0x90>)
 80081b6:	6813      	ldr	r3, [r2, #0]
 80081b8:	b933      	cbnz	r3, 80081c8 <_free_r+0x2c>
 80081ba:	6063      	str	r3, [r4, #4]
 80081bc:	6014      	str	r4, [r2, #0]
 80081be:	4628      	mov	r0, r5
 80081c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80081c4:	f000 b8e4 	b.w	8008390 <__malloc_unlock>
 80081c8:	42a3      	cmp	r3, r4
 80081ca:	d908      	bls.n	80081de <_free_r+0x42>
 80081cc:	6820      	ldr	r0, [r4, #0]
 80081ce:	1821      	adds	r1, r4, r0
 80081d0:	428b      	cmp	r3, r1
 80081d2:	bf01      	itttt	eq
 80081d4:	6819      	ldreq	r1, [r3, #0]
 80081d6:	685b      	ldreq	r3, [r3, #4]
 80081d8:	1809      	addeq	r1, r1, r0
 80081da:	6021      	streq	r1, [r4, #0]
 80081dc:	e7ed      	b.n	80081ba <_free_r+0x1e>
 80081de:	461a      	mov	r2, r3
 80081e0:	685b      	ldr	r3, [r3, #4]
 80081e2:	b10b      	cbz	r3, 80081e8 <_free_r+0x4c>
 80081e4:	42a3      	cmp	r3, r4
 80081e6:	d9fa      	bls.n	80081de <_free_r+0x42>
 80081e8:	6811      	ldr	r1, [r2, #0]
 80081ea:	1850      	adds	r0, r2, r1
 80081ec:	42a0      	cmp	r0, r4
 80081ee:	d10b      	bne.n	8008208 <_free_r+0x6c>
 80081f0:	6820      	ldr	r0, [r4, #0]
 80081f2:	4401      	add	r1, r0
 80081f4:	1850      	adds	r0, r2, r1
 80081f6:	4283      	cmp	r3, r0
 80081f8:	6011      	str	r1, [r2, #0]
 80081fa:	d1e0      	bne.n	80081be <_free_r+0x22>
 80081fc:	6818      	ldr	r0, [r3, #0]
 80081fe:	685b      	ldr	r3, [r3, #4]
 8008200:	6053      	str	r3, [r2, #4]
 8008202:	4408      	add	r0, r1
 8008204:	6010      	str	r0, [r2, #0]
 8008206:	e7da      	b.n	80081be <_free_r+0x22>
 8008208:	d902      	bls.n	8008210 <_free_r+0x74>
 800820a:	230c      	movs	r3, #12
 800820c:	602b      	str	r3, [r5, #0]
 800820e:	e7d6      	b.n	80081be <_free_r+0x22>
 8008210:	6820      	ldr	r0, [r4, #0]
 8008212:	1821      	adds	r1, r4, r0
 8008214:	428b      	cmp	r3, r1
 8008216:	bf04      	itt	eq
 8008218:	6819      	ldreq	r1, [r3, #0]
 800821a:	685b      	ldreq	r3, [r3, #4]
 800821c:	6063      	str	r3, [r4, #4]
 800821e:	bf04      	itt	eq
 8008220:	1809      	addeq	r1, r1, r0
 8008222:	6021      	streq	r1, [r4, #0]
 8008224:	6054      	str	r4, [r2, #4]
 8008226:	e7ca      	b.n	80081be <_free_r+0x22>
 8008228:	bd38      	pop	{r3, r4, r5, pc}
 800822a:	bf00      	nop
 800822c:	24000690 	.word	0x24000690

08008230 <malloc>:
 8008230:	4b02      	ldr	r3, [pc, #8]	@ (800823c <malloc+0xc>)
 8008232:	4601      	mov	r1, r0
 8008234:	6818      	ldr	r0, [r3, #0]
 8008236:	f000 b825 	b.w	8008284 <_malloc_r>
 800823a:	bf00      	nop
 800823c:	2400001c 	.word	0x2400001c

08008240 <sbrk_aligned>:
 8008240:	b570      	push	{r4, r5, r6, lr}
 8008242:	4e0f      	ldr	r6, [pc, #60]	@ (8008280 <sbrk_aligned+0x40>)
 8008244:	460c      	mov	r4, r1
 8008246:	6831      	ldr	r1, [r6, #0]
 8008248:	4605      	mov	r5, r0
 800824a:	b911      	cbnz	r1, 8008252 <sbrk_aligned+0x12>
 800824c:	f000 fe3e 	bl	8008ecc <_sbrk_r>
 8008250:	6030      	str	r0, [r6, #0]
 8008252:	4621      	mov	r1, r4
 8008254:	4628      	mov	r0, r5
 8008256:	f000 fe39 	bl	8008ecc <_sbrk_r>
 800825a:	1c43      	adds	r3, r0, #1
 800825c:	d103      	bne.n	8008266 <sbrk_aligned+0x26>
 800825e:	f04f 34ff 	mov.w	r4, #4294967295
 8008262:	4620      	mov	r0, r4
 8008264:	bd70      	pop	{r4, r5, r6, pc}
 8008266:	1cc4      	adds	r4, r0, #3
 8008268:	f024 0403 	bic.w	r4, r4, #3
 800826c:	42a0      	cmp	r0, r4
 800826e:	d0f8      	beq.n	8008262 <sbrk_aligned+0x22>
 8008270:	1a21      	subs	r1, r4, r0
 8008272:	4628      	mov	r0, r5
 8008274:	f000 fe2a 	bl	8008ecc <_sbrk_r>
 8008278:	3001      	adds	r0, #1
 800827a:	d1f2      	bne.n	8008262 <sbrk_aligned+0x22>
 800827c:	e7ef      	b.n	800825e <sbrk_aligned+0x1e>
 800827e:	bf00      	nop
 8008280:	2400068c 	.word	0x2400068c

08008284 <_malloc_r>:
 8008284:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008288:	1ccd      	adds	r5, r1, #3
 800828a:	f025 0503 	bic.w	r5, r5, #3
 800828e:	3508      	adds	r5, #8
 8008290:	2d0c      	cmp	r5, #12
 8008292:	bf38      	it	cc
 8008294:	250c      	movcc	r5, #12
 8008296:	2d00      	cmp	r5, #0
 8008298:	4606      	mov	r6, r0
 800829a:	db01      	blt.n	80082a0 <_malloc_r+0x1c>
 800829c:	42a9      	cmp	r1, r5
 800829e:	d904      	bls.n	80082aa <_malloc_r+0x26>
 80082a0:	230c      	movs	r3, #12
 80082a2:	6033      	str	r3, [r6, #0]
 80082a4:	2000      	movs	r0, #0
 80082a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80082aa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008380 <_malloc_r+0xfc>
 80082ae:	f000 f869 	bl	8008384 <__malloc_lock>
 80082b2:	f8d8 3000 	ldr.w	r3, [r8]
 80082b6:	461c      	mov	r4, r3
 80082b8:	bb44      	cbnz	r4, 800830c <_malloc_r+0x88>
 80082ba:	4629      	mov	r1, r5
 80082bc:	4630      	mov	r0, r6
 80082be:	f7ff ffbf 	bl	8008240 <sbrk_aligned>
 80082c2:	1c43      	adds	r3, r0, #1
 80082c4:	4604      	mov	r4, r0
 80082c6:	d158      	bne.n	800837a <_malloc_r+0xf6>
 80082c8:	f8d8 4000 	ldr.w	r4, [r8]
 80082cc:	4627      	mov	r7, r4
 80082ce:	2f00      	cmp	r7, #0
 80082d0:	d143      	bne.n	800835a <_malloc_r+0xd6>
 80082d2:	2c00      	cmp	r4, #0
 80082d4:	d04b      	beq.n	800836e <_malloc_r+0xea>
 80082d6:	6823      	ldr	r3, [r4, #0]
 80082d8:	4639      	mov	r1, r7
 80082da:	4630      	mov	r0, r6
 80082dc:	eb04 0903 	add.w	r9, r4, r3
 80082e0:	f000 fdf4 	bl	8008ecc <_sbrk_r>
 80082e4:	4581      	cmp	r9, r0
 80082e6:	d142      	bne.n	800836e <_malloc_r+0xea>
 80082e8:	6821      	ldr	r1, [r4, #0]
 80082ea:	1a6d      	subs	r5, r5, r1
 80082ec:	4629      	mov	r1, r5
 80082ee:	4630      	mov	r0, r6
 80082f0:	f7ff ffa6 	bl	8008240 <sbrk_aligned>
 80082f4:	3001      	adds	r0, #1
 80082f6:	d03a      	beq.n	800836e <_malloc_r+0xea>
 80082f8:	6823      	ldr	r3, [r4, #0]
 80082fa:	442b      	add	r3, r5
 80082fc:	6023      	str	r3, [r4, #0]
 80082fe:	f8d8 3000 	ldr.w	r3, [r8]
 8008302:	685a      	ldr	r2, [r3, #4]
 8008304:	bb62      	cbnz	r2, 8008360 <_malloc_r+0xdc>
 8008306:	f8c8 7000 	str.w	r7, [r8]
 800830a:	e00f      	b.n	800832c <_malloc_r+0xa8>
 800830c:	6822      	ldr	r2, [r4, #0]
 800830e:	1b52      	subs	r2, r2, r5
 8008310:	d420      	bmi.n	8008354 <_malloc_r+0xd0>
 8008312:	2a0b      	cmp	r2, #11
 8008314:	d917      	bls.n	8008346 <_malloc_r+0xc2>
 8008316:	1961      	adds	r1, r4, r5
 8008318:	42a3      	cmp	r3, r4
 800831a:	6025      	str	r5, [r4, #0]
 800831c:	bf18      	it	ne
 800831e:	6059      	strne	r1, [r3, #4]
 8008320:	6863      	ldr	r3, [r4, #4]
 8008322:	bf08      	it	eq
 8008324:	f8c8 1000 	streq.w	r1, [r8]
 8008328:	5162      	str	r2, [r4, r5]
 800832a:	604b      	str	r3, [r1, #4]
 800832c:	4630      	mov	r0, r6
 800832e:	f000 f82f 	bl	8008390 <__malloc_unlock>
 8008332:	f104 000b 	add.w	r0, r4, #11
 8008336:	1d23      	adds	r3, r4, #4
 8008338:	f020 0007 	bic.w	r0, r0, #7
 800833c:	1ac2      	subs	r2, r0, r3
 800833e:	bf1c      	itt	ne
 8008340:	1a1b      	subne	r3, r3, r0
 8008342:	50a3      	strne	r3, [r4, r2]
 8008344:	e7af      	b.n	80082a6 <_malloc_r+0x22>
 8008346:	6862      	ldr	r2, [r4, #4]
 8008348:	42a3      	cmp	r3, r4
 800834a:	bf0c      	ite	eq
 800834c:	f8c8 2000 	streq.w	r2, [r8]
 8008350:	605a      	strne	r2, [r3, #4]
 8008352:	e7eb      	b.n	800832c <_malloc_r+0xa8>
 8008354:	4623      	mov	r3, r4
 8008356:	6864      	ldr	r4, [r4, #4]
 8008358:	e7ae      	b.n	80082b8 <_malloc_r+0x34>
 800835a:	463c      	mov	r4, r7
 800835c:	687f      	ldr	r7, [r7, #4]
 800835e:	e7b6      	b.n	80082ce <_malloc_r+0x4a>
 8008360:	461a      	mov	r2, r3
 8008362:	685b      	ldr	r3, [r3, #4]
 8008364:	42a3      	cmp	r3, r4
 8008366:	d1fb      	bne.n	8008360 <_malloc_r+0xdc>
 8008368:	2300      	movs	r3, #0
 800836a:	6053      	str	r3, [r2, #4]
 800836c:	e7de      	b.n	800832c <_malloc_r+0xa8>
 800836e:	230c      	movs	r3, #12
 8008370:	6033      	str	r3, [r6, #0]
 8008372:	4630      	mov	r0, r6
 8008374:	f000 f80c 	bl	8008390 <__malloc_unlock>
 8008378:	e794      	b.n	80082a4 <_malloc_r+0x20>
 800837a:	6005      	str	r5, [r0, #0]
 800837c:	e7d6      	b.n	800832c <_malloc_r+0xa8>
 800837e:	bf00      	nop
 8008380:	24000690 	.word	0x24000690

08008384 <__malloc_lock>:
 8008384:	4801      	ldr	r0, [pc, #4]	@ (800838c <__malloc_lock+0x8>)
 8008386:	f7ff b912 	b.w	80075ae <__retarget_lock_acquire_recursive>
 800838a:	bf00      	nop
 800838c:	24000688 	.word	0x24000688

08008390 <__malloc_unlock>:
 8008390:	4801      	ldr	r0, [pc, #4]	@ (8008398 <__malloc_unlock+0x8>)
 8008392:	f7ff b90d 	b.w	80075b0 <__retarget_lock_release_recursive>
 8008396:	bf00      	nop
 8008398:	24000688 	.word	0x24000688

0800839c <_Balloc>:
 800839c:	b570      	push	{r4, r5, r6, lr}
 800839e:	69c6      	ldr	r6, [r0, #28]
 80083a0:	4604      	mov	r4, r0
 80083a2:	460d      	mov	r5, r1
 80083a4:	b976      	cbnz	r6, 80083c4 <_Balloc+0x28>
 80083a6:	2010      	movs	r0, #16
 80083a8:	f7ff ff42 	bl	8008230 <malloc>
 80083ac:	4602      	mov	r2, r0
 80083ae:	61e0      	str	r0, [r4, #28]
 80083b0:	b920      	cbnz	r0, 80083bc <_Balloc+0x20>
 80083b2:	4b18      	ldr	r3, [pc, #96]	@ (8008414 <_Balloc+0x78>)
 80083b4:	4818      	ldr	r0, [pc, #96]	@ (8008418 <_Balloc+0x7c>)
 80083b6:	216b      	movs	r1, #107	@ 0x6b
 80083b8:	f000 fd98 	bl	8008eec <__assert_func>
 80083bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80083c0:	6006      	str	r6, [r0, #0]
 80083c2:	60c6      	str	r6, [r0, #12]
 80083c4:	69e6      	ldr	r6, [r4, #28]
 80083c6:	68f3      	ldr	r3, [r6, #12]
 80083c8:	b183      	cbz	r3, 80083ec <_Balloc+0x50>
 80083ca:	69e3      	ldr	r3, [r4, #28]
 80083cc:	68db      	ldr	r3, [r3, #12]
 80083ce:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80083d2:	b9b8      	cbnz	r0, 8008404 <_Balloc+0x68>
 80083d4:	2101      	movs	r1, #1
 80083d6:	fa01 f605 	lsl.w	r6, r1, r5
 80083da:	1d72      	adds	r2, r6, #5
 80083dc:	0092      	lsls	r2, r2, #2
 80083de:	4620      	mov	r0, r4
 80083e0:	f000 fda2 	bl	8008f28 <_calloc_r>
 80083e4:	b160      	cbz	r0, 8008400 <_Balloc+0x64>
 80083e6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80083ea:	e00e      	b.n	800840a <_Balloc+0x6e>
 80083ec:	2221      	movs	r2, #33	@ 0x21
 80083ee:	2104      	movs	r1, #4
 80083f0:	4620      	mov	r0, r4
 80083f2:	f000 fd99 	bl	8008f28 <_calloc_r>
 80083f6:	69e3      	ldr	r3, [r4, #28]
 80083f8:	60f0      	str	r0, [r6, #12]
 80083fa:	68db      	ldr	r3, [r3, #12]
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d1e4      	bne.n	80083ca <_Balloc+0x2e>
 8008400:	2000      	movs	r0, #0
 8008402:	bd70      	pop	{r4, r5, r6, pc}
 8008404:	6802      	ldr	r2, [r0, #0]
 8008406:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800840a:	2300      	movs	r3, #0
 800840c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008410:	e7f7      	b.n	8008402 <_Balloc+0x66>
 8008412:	bf00      	nop
 8008414:	080096d1 	.word	0x080096d1
 8008418:	08009751 	.word	0x08009751

0800841c <_Bfree>:
 800841c:	b570      	push	{r4, r5, r6, lr}
 800841e:	69c6      	ldr	r6, [r0, #28]
 8008420:	4605      	mov	r5, r0
 8008422:	460c      	mov	r4, r1
 8008424:	b976      	cbnz	r6, 8008444 <_Bfree+0x28>
 8008426:	2010      	movs	r0, #16
 8008428:	f7ff ff02 	bl	8008230 <malloc>
 800842c:	4602      	mov	r2, r0
 800842e:	61e8      	str	r0, [r5, #28]
 8008430:	b920      	cbnz	r0, 800843c <_Bfree+0x20>
 8008432:	4b09      	ldr	r3, [pc, #36]	@ (8008458 <_Bfree+0x3c>)
 8008434:	4809      	ldr	r0, [pc, #36]	@ (800845c <_Bfree+0x40>)
 8008436:	218f      	movs	r1, #143	@ 0x8f
 8008438:	f000 fd58 	bl	8008eec <__assert_func>
 800843c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008440:	6006      	str	r6, [r0, #0]
 8008442:	60c6      	str	r6, [r0, #12]
 8008444:	b13c      	cbz	r4, 8008456 <_Bfree+0x3a>
 8008446:	69eb      	ldr	r3, [r5, #28]
 8008448:	6862      	ldr	r2, [r4, #4]
 800844a:	68db      	ldr	r3, [r3, #12]
 800844c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008450:	6021      	str	r1, [r4, #0]
 8008452:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008456:	bd70      	pop	{r4, r5, r6, pc}
 8008458:	080096d1 	.word	0x080096d1
 800845c:	08009751 	.word	0x08009751

08008460 <__multadd>:
 8008460:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008464:	690d      	ldr	r5, [r1, #16]
 8008466:	4607      	mov	r7, r0
 8008468:	460c      	mov	r4, r1
 800846a:	461e      	mov	r6, r3
 800846c:	f101 0c14 	add.w	ip, r1, #20
 8008470:	2000      	movs	r0, #0
 8008472:	f8dc 3000 	ldr.w	r3, [ip]
 8008476:	b299      	uxth	r1, r3
 8008478:	fb02 6101 	mla	r1, r2, r1, r6
 800847c:	0c1e      	lsrs	r6, r3, #16
 800847e:	0c0b      	lsrs	r3, r1, #16
 8008480:	fb02 3306 	mla	r3, r2, r6, r3
 8008484:	b289      	uxth	r1, r1
 8008486:	3001      	adds	r0, #1
 8008488:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800848c:	4285      	cmp	r5, r0
 800848e:	f84c 1b04 	str.w	r1, [ip], #4
 8008492:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008496:	dcec      	bgt.n	8008472 <__multadd+0x12>
 8008498:	b30e      	cbz	r6, 80084de <__multadd+0x7e>
 800849a:	68a3      	ldr	r3, [r4, #8]
 800849c:	42ab      	cmp	r3, r5
 800849e:	dc19      	bgt.n	80084d4 <__multadd+0x74>
 80084a0:	6861      	ldr	r1, [r4, #4]
 80084a2:	4638      	mov	r0, r7
 80084a4:	3101      	adds	r1, #1
 80084a6:	f7ff ff79 	bl	800839c <_Balloc>
 80084aa:	4680      	mov	r8, r0
 80084ac:	b928      	cbnz	r0, 80084ba <__multadd+0x5a>
 80084ae:	4602      	mov	r2, r0
 80084b0:	4b0c      	ldr	r3, [pc, #48]	@ (80084e4 <__multadd+0x84>)
 80084b2:	480d      	ldr	r0, [pc, #52]	@ (80084e8 <__multadd+0x88>)
 80084b4:	21ba      	movs	r1, #186	@ 0xba
 80084b6:	f000 fd19 	bl	8008eec <__assert_func>
 80084ba:	6922      	ldr	r2, [r4, #16]
 80084bc:	3202      	adds	r2, #2
 80084be:	f104 010c 	add.w	r1, r4, #12
 80084c2:	0092      	lsls	r2, r2, #2
 80084c4:	300c      	adds	r0, #12
 80084c6:	f7ff f874 	bl	80075b2 <memcpy>
 80084ca:	4621      	mov	r1, r4
 80084cc:	4638      	mov	r0, r7
 80084ce:	f7ff ffa5 	bl	800841c <_Bfree>
 80084d2:	4644      	mov	r4, r8
 80084d4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80084d8:	3501      	adds	r5, #1
 80084da:	615e      	str	r6, [r3, #20]
 80084dc:	6125      	str	r5, [r4, #16]
 80084de:	4620      	mov	r0, r4
 80084e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80084e4:	08009740 	.word	0x08009740
 80084e8:	08009751 	.word	0x08009751

080084ec <__hi0bits>:
 80084ec:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80084f0:	4603      	mov	r3, r0
 80084f2:	bf36      	itet	cc
 80084f4:	0403      	lslcc	r3, r0, #16
 80084f6:	2000      	movcs	r0, #0
 80084f8:	2010      	movcc	r0, #16
 80084fa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80084fe:	bf3c      	itt	cc
 8008500:	021b      	lslcc	r3, r3, #8
 8008502:	3008      	addcc	r0, #8
 8008504:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008508:	bf3c      	itt	cc
 800850a:	011b      	lslcc	r3, r3, #4
 800850c:	3004      	addcc	r0, #4
 800850e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008512:	bf3c      	itt	cc
 8008514:	009b      	lslcc	r3, r3, #2
 8008516:	3002      	addcc	r0, #2
 8008518:	2b00      	cmp	r3, #0
 800851a:	db05      	blt.n	8008528 <__hi0bits+0x3c>
 800851c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008520:	f100 0001 	add.w	r0, r0, #1
 8008524:	bf08      	it	eq
 8008526:	2020      	moveq	r0, #32
 8008528:	4770      	bx	lr

0800852a <__lo0bits>:
 800852a:	6803      	ldr	r3, [r0, #0]
 800852c:	4602      	mov	r2, r0
 800852e:	f013 0007 	ands.w	r0, r3, #7
 8008532:	d00b      	beq.n	800854c <__lo0bits+0x22>
 8008534:	07d9      	lsls	r1, r3, #31
 8008536:	d421      	bmi.n	800857c <__lo0bits+0x52>
 8008538:	0798      	lsls	r0, r3, #30
 800853a:	bf49      	itett	mi
 800853c:	085b      	lsrmi	r3, r3, #1
 800853e:	089b      	lsrpl	r3, r3, #2
 8008540:	2001      	movmi	r0, #1
 8008542:	6013      	strmi	r3, [r2, #0]
 8008544:	bf5c      	itt	pl
 8008546:	6013      	strpl	r3, [r2, #0]
 8008548:	2002      	movpl	r0, #2
 800854a:	4770      	bx	lr
 800854c:	b299      	uxth	r1, r3
 800854e:	b909      	cbnz	r1, 8008554 <__lo0bits+0x2a>
 8008550:	0c1b      	lsrs	r3, r3, #16
 8008552:	2010      	movs	r0, #16
 8008554:	b2d9      	uxtb	r1, r3
 8008556:	b909      	cbnz	r1, 800855c <__lo0bits+0x32>
 8008558:	3008      	adds	r0, #8
 800855a:	0a1b      	lsrs	r3, r3, #8
 800855c:	0719      	lsls	r1, r3, #28
 800855e:	bf04      	itt	eq
 8008560:	091b      	lsreq	r3, r3, #4
 8008562:	3004      	addeq	r0, #4
 8008564:	0799      	lsls	r1, r3, #30
 8008566:	bf04      	itt	eq
 8008568:	089b      	lsreq	r3, r3, #2
 800856a:	3002      	addeq	r0, #2
 800856c:	07d9      	lsls	r1, r3, #31
 800856e:	d403      	bmi.n	8008578 <__lo0bits+0x4e>
 8008570:	085b      	lsrs	r3, r3, #1
 8008572:	f100 0001 	add.w	r0, r0, #1
 8008576:	d003      	beq.n	8008580 <__lo0bits+0x56>
 8008578:	6013      	str	r3, [r2, #0]
 800857a:	4770      	bx	lr
 800857c:	2000      	movs	r0, #0
 800857e:	4770      	bx	lr
 8008580:	2020      	movs	r0, #32
 8008582:	4770      	bx	lr

08008584 <__i2b>:
 8008584:	b510      	push	{r4, lr}
 8008586:	460c      	mov	r4, r1
 8008588:	2101      	movs	r1, #1
 800858a:	f7ff ff07 	bl	800839c <_Balloc>
 800858e:	4602      	mov	r2, r0
 8008590:	b928      	cbnz	r0, 800859e <__i2b+0x1a>
 8008592:	4b05      	ldr	r3, [pc, #20]	@ (80085a8 <__i2b+0x24>)
 8008594:	4805      	ldr	r0, [pc, #20]	@ (80085ac <__i2b+0x28>)
 8008596:	f240 1145 	movw	r1, #325	@ 0x145
 800859a:	f000 fca7 	bl	8008eec <__assert_func>
 800859e:	2301      	movs	r3, #1
 80085a0:	6144      	str	r4, [r0, #20]
 80085a2:	6103      	str	r3, [r0, #16]
 80085a4:	bd10      	pop	{r4, pc}
 80085a6:	bf00      	nop
 80085a8:	08009740 	.word	0x08009740
 80085ac:	08009751 	.word	0x08009751

080085b0 <__multiply>:
 80085b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085b4:	4617      	mov	r7, r2
 80085b6:	690a      	ldr	r2, [r1, #16]
 80085b8:	693b      	ldr	r3, [r7, #16]
 80085ba:	429a      	cmp	r2, r3
 80085bc:	bfa8      	it	ge
 80085be:	463b      	movge	r3, r7
 80085c0:	4689      	mov	r9, r1
 80085c2:	bfa4      	itt	ge
 80085c4:	460f      	movge	r7, r1
 80085c6:	4699      	movge	r9, r3
 80085c8:	693d      	ldr	r5, [r7, #16]
 80085ca:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80085ce:	68bb      	ldr	r3, [r7, #8]
 80085d0:	6879      	ldr	r1, [r7, #4]
 80085d2:	eb05 060a 	add.w	r6, r5, sl
 80085d6:	42b3      	cmp	r3, r6
 80085d8:	b085      	sub	sp, #20
 80085da:	bfb8      	it	lt
 80085dc:	3101      	addlt	r1, #1
 80085de:	f7ff fedd 	bl	800839c <_Balloc>
 80085e2:	b930      	cbnz	r0, 80085f2 <__multiply+0x42>
 80085e4:	4602      	mov	r2, r0
 80085e6:	4b41      	ldr	r3, [pc, #260]	@ (80086ec <__multiply+0x13c>)
 80085e8:	4841      	ldr	r0, [pc, #260]	@ (80086f0 <__multiply+0x140>)
 80085ea:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80085ee:	f000 fc7d 	bl	8008eec <__assert_func>
 80085f2:	f100 0414 	add.w	r4, r0, #20
 80085f6:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 80085fa:	4623      	mov	r3, r4
 80085fc:	2200      	movs	r2, #0
 80085fe:	4573      	cmp	r3, lr
 8008600:	d320      	bcc.n	8008644 <__multiply+0x94>
 8008602:	f107 0814 	add.w	r8, r7, #20
 8008606:	f109 0114 	add.w	r1, r9, #20
 800860a:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800860e:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8008612:	9302      	str	r3, [sp, #8]
 8008614:	1beb      	subs	r3, r5, r7
 8008616:	3b15      	subs	r3, #21
 8008618:	f023 0303 	bic.w	r3, r3, #3
 800861c:	3304      	adds	r3, #4
 800861e:	3715      	adds	r7, #21
 8008620:	42bd      	cmp	r5, r7
 8008622:	bf38      	it	cc
 8008624:	2304      	movcc	r3, #4
 8008626:	9301      	str	r3, [sp, #4]
 8008628:	9b02      	ldr	r3, [sp, #8]
 800862a:	9103      	str	r1, [sp, #12]
 800862c:	428b      	cmp	r3, r1
 800862e:	d80c      	bhi.n	800864a <__multiply+0x9a>
 8008630:	2e00      	cmp	r6, #0
 8008632:	dd03      	ble.n	800863c <__multiply+0x8c>
 8008634:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8008638:	2b00      	cmp	r3, #0
 800863a:	d055      	beq.n	80086e8 <__multiply+0x138>
 800863c:	6106      	str	r6, [r0, #16]
 800863e:	b005      	add	sp, #20
 8008640:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008644:	f843 2b04 	str.w	r2, [r3], #4
 8008648:	e7d9      	b.n	80085fe <__multiply+0x4e>
 800864a:	f8b1 a000 	ldrh.w	sl, [r1]
 800864e:	f1ba 0f00 	cmp.w	sl, #0
 8008652:	d01f      	beq.n	8008694 <__multiply+0xe4>
 8008654:	46c4      	mov	ip, r8
 8008656:	46a1      	mov	r9, r4
 8008658:	2700      	movs	r7, #0
 800865a:	f85c 2b04 	ldr.w	r2, [ip], #4
 800865e:	f8d9 3000 	ldr.w	r3, [r9]
 8008662:	fa1f fb82 	uxth.w	fp, r2
 8008666:	b29b      	uxth	r3, r3
 8008668:	fb0a 330b 	mla	r3, sl, fp, r3
 800866c:	443b      	add	r3, r7
 800866e:	f8d9 7000 	ldr.w	r7, [r9]
 8008672:	0c12      	lsrs	r2, r2, #16
 8008674:	0c3f      	lsrs	r7, r7, #16
 8008676:	fb0a 7202 	mla	r2, sl, r2, r7
 800867a:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800867e:	b29b      	uxth	r3, r3
 8008680:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008684:	4565      	cmp	r5, ip
 8008686:	f849 3b04 	str.w	r3, [r9], #4
 800868a:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800868e:	d8e4      	bhi.n	800865a <__multiply+0xaa>
 8008690:	9b01      	ldr	r3, [sp, #4]
 8008692:	50e7      	str	r7, [r4, r3]
 8008694:	9b03      	ldr	r3, [sp, #12]
 8008696:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800869a:	3104      	adds	r1, #4
 800869c:	f1b9 0f00 	cmp.w	r9, #0
 80086a0:	d020      	beq.n	80086e4 <__multiply+0x134>
 80086a2:	6823      	ldr	r3, [r4, #0]
 80086a4:	4647      	mov	r7, r8
 80086a6:	46a4      	mov	ip, r4
 80086a8:	f04f 0a00 	mov.w	sl, #0
 80086ac:	f8b7 b000 	ldrh.w	fp, [r7]
 80086b0:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 80086b4:	fb09 220b 	mla	r2, r9, fp, r2
 80086b8:	4452      	add	r2, sl
 80086ba:	b29b      	uxth	r3, r3
 80086bc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80086c0:	f84c 3b04 	str.w	r3, [ip], #4
 80086c4:	f857 3b04 	ldr.w	r3, [r7], #4
 80086c8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80086cc:	f8bc 3000 	ldrh.w	r3, [ip]
 80086d0:	fb09 330a 	mla	r3, r9, sl, r3
 80086d4:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 80086d8:	42bd      	cmp	r5, r7
 80086da:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80086de:	d8e5      	bhi.n	80086ac <__multiply+0xfc>
 80086e0:	9a01      	ldr	r2, [sp, #4]
 80086e2:	50a3      	str	r3, [r4, r2]
 80086e4:	3404      	adds	r4, #4
 80086e6:	e79f      	b.n	8008628 <__multiply+0x78>
 80086e8:	3e01      	subs	r6, #1
 80086ea:	e7a1      	b.n	8008630 <__multiply+0x80>
 80086ec:	08009740 	.word	0x08009740
 80086f0:	08009751 	.word	0x08009751

080086f4 <__pow5mult>:
 80086f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80086f8:	4615      	mov	r5, r2
 80086fa:	f012 0203 	ands.w	r2, r2, #3
 80086fe:	4607      	mov	r7, r0
 8008700:	460e      	mov	r6, r1
 8008702:	d007      	beq.n	8008714 <__pow5mult+0x20>
 8008704:	4c25      	ldr	r4, [pc, #148]	@ (800879c <__pow5mult+0xa8>)
 8008706:	3a01      	subs	r2, #1
 8008708:	2300      	movs	r3, #0
 800870a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800870e:	f7ff fea7 	bl	8008460 <__multadd>
 8008712:	4606      	mov	r6, r0
 8008714:	10ad      	asrs	r5, r5, #2
 8008716:	d03d      	beq.n	8008794 <__pow5mult+0xa0>
 8008718:	69fc      	ldr	r4, [r7, #28]
 800871a:	b97c      	cbnz	r4, 800873c <__pow5mult+0x48>
 800871c:	2010      	movs	r0, #16
 800871e:	f7ff fd87 	bl	8008230 <malloc>
 8008722:	4602      	mov	r2, r0
 8008724:	61f8      	str	r0, [r7, #28]
 8008726:	b928      	cbnz	r0, 8008734 <__pow5mult+0x40>
 8008728:	4b1d      	ldr	r3, [pc, #116]	@ (80087a0 <__pow5mult+0xac>)
 800872a:	481e      	ldr	r0, [pc, #120]	@ (80087a4 <__pow5mult+0xb0>)
 800872c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008730:	f000 fbdc 	bl	8008eec <__assert_func>
 8008734:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008738:	6004      	str	r4, [r0, #0]
 800873a:	60c4      	str	r4, [r0, #12]
 800873c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008740:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008744:	b94c      	cbnz	r4, 800875a <__pow5mult+0x66>
 8008746:	f240 2171 	movw	r1, #625	@ 0x271
 800874a:	4638      	mov	r0, r7
 800874c:	f7ff ff1a 	bl	8008584 <__i2b>
 8008750:	2300      	movs	r3, #0
 8008752:	f8c8 0008 	str.w	r0, [r8, #8]
 8008756:	4604      	mov	r4, r0
 8008758:	6003      	str	r3, [r0, #0]
 800875a:	f04f 0900 	mov.w	r9, #0
 800875e:	07eb      	lsls	r3, r5, #31
 8008760:	d50a      	bpl.n	8008778 <__pow5mult+0x84>
 8008762:	4631      	mov	r1, r6
 8008764:	4622      	mov	r2, r4
 8008766:	4638      	mov	r0, r7
 8008768:	f7ff ff22 	bl	80085b0 <__multiply>
 800876c:	4631      	mov	r1, r6
 800876e:	4680      	mov	r8, r0
 8008770:	4638      	mov	r0, r7
 8008772:	f7ff fe53 	bl	800841c <_Bfree>
 8008776:	4646      	mov	r6, r8
 8008778:	106d      	asrs	r5, r5, #1
 800877a:	d00b      	beq.n	8008794 <__pow5mult+0xa0>
 800877c:	6820      	ldr	r0, [r4, #0]
 800877e:	b938      	cbnz	r0, 8008790 <__pow5mult+0x9c>
 8008780:	4622      	mov	r2, r4
 8008782:	4621      	mov	r1, r4
 8008784:	4638      	mov	r0, r7
 8008786:	f7ff ff13 	bl	80085b0 <__multiply>
 800878a:	6020      	str	r0, [r4, #0]
 800878c:	f8c0 9000 	str.w	r9, [r0]
 8008790:	4604      	mov	r4, r0
 8008792:	e7e4      	b.n	800875e <__pow5mult+0x6a>
 8008794:	4630      	mov	r0, r6
 8008796:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800879a:	bf00      	nop
 800879c:	08009804 	.word	0x08009804
 80087a0:	080096d1 	.word	0x080096d1
 80087a4:	08009751 	.word	0x08009751

080087a8 <__lshift>:
 80087a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80087ac:	460c      	mov	r4, r1
 80087ae:	6849      	ldr	r1, [r1, #4]
 80087b0:	6923      	ldr	r3, [r4, #16]
 80087b2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80087b6:	68a3      	ldr	r3, [r4, #8]
 80087b8:	4607      	mov	r7, r0
 80087ba:	4691      	mov	r9, r2
 80087bc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80087c0:	f108 0601 	add.w	r6, r8, #1
 80087c4:	42b3      	cmp	r3, r6
 80087c6:	db0b      	blt.n	80087e0 <__lshift+0x38>
 80087c8:	4638      	mov	r0, r7
 80087ca:	f7ff fde7 	bl	800839c <_Balloc>
 80087ce:	4605      	mov	r5, r0
 80087d0:	b948      	cbnz	r0, 80087e6 <__lshift+0x3e>
 80087d2:	4602      	mov	r2, r0
 80087d4:	4b28      	ldr	r3, [pc, #160]	@ (8008878 <__lshift+0xd0>)
 80087d6:	4829      	ldr	r0, [pc, #164]	@ (800887c <__lshift+0xd4>)
 80087d8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80087dc:	f000 fb86 	bl	8008eec <__assert_func>
 80087e0:	3101      	adds	r1, #1
 80087e2:	005b      	lsls	r3, r3, #1
 80087e4:	e7ee      	b.n	80087c4 <__lshift+0x1c>
 80087e6:	2300      	movs	r3, #0
 80087e8:	f100 0114 	add.w	r1, r0, #20
 80087ec:	f100 0210 	add.w	r2, r0, #16
 80087f0:	4618      	mov	r0, r3
 80087f2:	4553      	cmp	r3, sl
 80087f4:	db33      	blt.n	800885e <__lshift+0xb6>
 80087f6:	6920      	ldr	r0, [r4, #16]
 80087f8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80087fc:	f104 0314 	add.w	r3, r4, #20
 8008800:	f019 091f 	ands.w	r9, r9, #31
 8008804:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008808:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800880c:	d02b      	beq.n	8008866 <__lshift+0xbe>
 800880e:	f1c9 0e20 	rsb	lr, r9, #32
 8008812:	468a      	mov	sl, r1
 8008814:	2200      	movs	r2, #0
 8008816:	6818      	ldr	r0, [r3, #0]
 8008818:	fa00 f009 	lsl.w	r0, r0, r9
 800881c:	4310      	orrs	r0, r2
 800881e:	f84a 0b04 	str.w	r0, [sl], #4
 8008822:	f853 2b04 	ldr.w	r2, [r3], #4
 8008826:	459c      	cmp	ip, r3
 8008828:	fa22 f20e 	lsr.w	r2, r2, lr
 800882c:	d8f3      	bhi.n	8008816 <__lshift+0x6e>
 800882e:	ebac 0304 	sub.w	r3, ip, r4
 8008832:	3b15      	subs	r3, #21
 8008834:	f023 0303 	bic.w	r3, r3, #3
 8008838:	3304      	adds	r3, #4
 800883a:	f104 0015 	add.w	r0, r4, #21
 800883e:	4560      	cmp	r0, ip
 8008840:	bf88      	it	hi
 8008842:	2304      	movhi	r3, #4
 8008844:	50ca      	str	r2, [r1, r3]
 8008846:	b10a      	cbz	r2, 800884c <__lshift+0xa4>
 8008848:	f108 0602 	add.w	r6, r8, #2
 800884c:	3e01      	subs	r6, #1
 800884e:	4638      	mov	r0, r7
 8008850:	612e      	str	r6, [r5, #16]
 8008852:	4621      	mov	r1, r4
 8008854:	f7ff fde2 	bl	800841c <_Bfree>
 8008858:	4628      	mov	r0, r5
 800885a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800885e:	f842 0f04 	str.w	r0, [r2, #4]!
 8008862:	3301      	adds	r3, #1
 8008864:	e7c5      	b.n	80087f2 <__lshift+0x4a>
 8008866:	3904      	subs	r1, #4
 8008868:	f853 2b04 	ldr.w	r2, [r3], #4
 800886c:	f841 2f04 	str.w	r2, [r1, #4]!
 8008870:	459c      	cmp	ip, r3
 8008872:	d8f9      	bhi.n	8008868 <__lshift+0xc0>
 8008874:	e7ea      	b.n	800884c <__lshift+0xa4>
 8008876:	bf00      	nop
 8008878:	08009740 	.word	0x08009740
 800887c:	08009751 	.word	0x08009751

08008880 <__mcmp>:
 8008880:	690a      	ldr	r2, [r1, #16]
 8008882:	4603      	mov	r3, r0
 8008884:	6900      	ldr	r0, [r0, #16]
 8008886:	1a80      	subs	r0, r0, r2
 8008888:	b530      	push	{r4, r5, lr}
 800888a:	d10e      	bne.n	80088aa <__mcmp+0x2a>
 800888c:	3314      	adds	r3, #20
 800888e:	3114      	adds	r1, #20
 8008890:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008894:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008898:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800889c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80088a0:	4295      	cmp	r5, r2
 80088a2:	d003      	beq.n	80088ac <__mcmp+0x2c>
 80088a4:	d205      	bcs.n	80088b2 <__mcmp+0x32>
 80088a6:	f04f 30ff 	mov.w	r0, #4294967295
 80088aa:	bd30      	pop	{r4, r5, pc}
 80088ac:	42a3      	cmp	r3, r4
 80088ae:	d3f3      	bcc.n	8008898 <__mcmp+0x18>
 80088b0:	e7fb      	b.n	80088aa <__mcmp+0x2a>
 80088b2:	2001      	movs	r0, #1
 80088b4:	e7f9      	b.n	80088aa <__mcmp+0x2a>
	...

080088b8 <__mdiff>:
 80088b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088bc:	4689      	mov	r9, r1
 80088be:	4606      	mov	r6, r0
 80088c0:	4611      	mov	r1, r2
 80088c2:	4648      	mov	r0, r9
 80088c4:	4614      	mov	r4, r2
 80088c6:	f7ff ffdb 	bl	8008880 <__mcmp>
 80088ca:	1e05      	subs	r5, r0, #0
 80088cc:	d112      	bne.n	80088f4 <__mdiff+0x3c>
 80088ce:	4629      	mov	r1, r5
 80088d0:	4630      	mov	r0, r6
 80088d2:	f7ff fd63 	bl	800839c <_Balloc>
 80088d6:	4602      	mov	r2, r0
 80088d8:	b928      	cbnz	r0, 80088e6 <__mdiff+0x2e>
 80088da:	4b3f      	ldr	r3, [pc, #252]	@ (80089d8 <__mdiff+0x120>)
 80088dc:	f240 2137 	movw	r1, #567	@ 0x237
 80088e0:	483e      	ldr	r0, [pc, #248]	@ (80089dc <__mdiff+0x124>)
 80088e2:	f000 fb03 	bl	8008eec <__assert_func>
 80088e6:	2301      	movs	r3, #1
 80088e8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80088ec:	4610      	mov	r0, r2
 80088ee:	b003      	add	sp, #12
 80088f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088f4:	bfbc      	itt	lt
 80088f6:	464b      	movlt	r3, r9
 80088f8:	46a1      	movlt	r9, r4
 80088fa:	4630      	mov	r0, r6
 80088fc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008900:	bfba      	itte	lt
 8008902:	461c      	movlt	r4, r3
 8008904:	2501      	movlt	r5, #1
 8008906:	2500      	movge	r5, #0
 8008908:	f7ff fd48 	bl	800839c <_Balloc>
 800890c:	4602      	mov	r2, r0
 800890e:	b918      	cbnz	r0, 8008918 <__mdiff+0x60>
 8008910:	4b31      	ldr	r3, [pc, #196]	@ (80089d8 <__mdiff+0x120>)
 8008912:	f240 2145 	movw	r1, #581	@ 0x245
 8008916:	e7e3      	b.n	80088e0 <__mdiff+0x28>
 8008918:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800891c:	6926      	ldr	r6, [r4, #16]
 800891e:	60c5      	str	r5, [r0, #12]
 8008920:	f109 0310 	add.w	r3, r9, #16
 8008924:	f109 0514 	add.w	r5, r9, #20
 8008928:	f104 0e14 	add.w	lr, r4, #20
 800892c:	f100 0b14 	add.w	fp, r0, #20
 8008930:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008934:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008938:	9301      	str	r3, [sp, #4]
 800893a:	46d9      	mov	r9, fp
 800893c:	f04f 0c00 	mov.w	ip, #0
 8008940:	9b01      	ldr	r3, [sp, #4]
 8008942:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008946:	f853 af04 	ldr.w	sl, [r3, #4]!
 800894a:	9301      	str	r3, [sp, #4]
 800894c:	fa1f f38a 	uxth.w	r3, sl
 8008950:	4619      	mov	r1, r3
 8008952:	b283      	uxth	r3, r0
 8008954:	1acb      	subs	r3, r1, r3
 8008956:	0c00      	lsrs	r0, r0, #16
 8008958:	4463      	add	r3, ip
 800895a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800895e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008962:	b29b      	uxth	r3, r3
 8008964:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008968:	4576      	cmp	r6, lr
 800896a:	f849 3b04 	str.w	r3, [r9], #4
 800896e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008972:	d8e5      	bhi.n	8008940 <__mdiff+0x88>
 8008974:	1b33      	subs	r3, r6, r4
 8008976:	3b15      	subs	r3, #21
 8008978:	f023 0303 	bic.w	r3, r3, #3
 800897c:	3415      	adds	r4, #21
 800897e:	3304      	adds	r3, #4
 8008980:	42a6      	cmp	r6, r4
 8008982:	bf38      	it	cc
 8008984:	2304      	movcc	r3, #4
 8008986:	441d      	add	r5, r3
 8008988:	445b      	add	r3, fp
 800898a:	461e      	mov	r6, r3
 800898c:	462c      	mov	r4, r5
 800898e:	4544      	cmp	r4, r8
 8008990:	d30e      	bcc.n	80089b0 <__mdiff+0xf8>
 8008992:	f108 0103 	add.w	r1, r8, #3
 8008996:	1b49      	subs	r1, r1, r5
 8008998:	f021 0103 	bic.w	r1, r1, #3
 800899c:	3d03      	subs	r5, #3
 800899e:	45a8      	cmp	r8, r5
 80089a0:	bf38      	it	cc
 80089a2:	2100      	movcc	r1, #0
 80089a4:	440b      	add	r3, r1
 80089a6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80089aa:	b191      	cbz	r1, 80089d2 <__mdiff+0x11a>
 80089ac:	6117      	str	r7, [r2, #16]
 80089ae:	e79d      	b.n	80088ec <__mdiff+0x34>
 80089b0:	f854 1b04 	ldr.w	r1, [r4], #4
 80089b4:	46e6      	mov	lr, ip
 80089b6:	0c08      	lsrs	r0, r1, #16
 80089b8:	fa1c fc81 	uxtah	ip, ip, r1
 80089bc:	4471      	add	r1, lr
 80089be:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80089c2:	b289      	uxth	r1, r1
 80089c4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80089c8:	f846 1b04 	str.w	r1, [r6], #4
 80089cc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80089d0:	e7dd      	b.n	800898e <__mdiff+0xd6>
 80089d2:	3f01      	subs	r7, #1
 80089d4:	e7e7      	b.n	80089a6 <__mdiff+0xee>
 80089d6:	bf00      	nop
 80089d8:	08009740 	.word	0x08009740
 80089dc:	08009751 	.word	0x08009751

080089e0 <__d2b>:
 80089e0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80089e4:	460f      	mov	r7, r1
 80089e6:	2101      	movs	r1, #1
 80089e8:	ec59 8b10 	vmov	r8, r9, d0
 80089ec:	4616      	mov	r6, r2
 80089ee:	f7ff fcd5 	bl	800839c <_Balloc>
 80089f2:	4604      	mov	r4, r0
 80089f4:	b930      	cbnz	r0, 8008a04 <__d2b+0x24>
 80089f6:	4602      	mov	r2, r0
 80089f8:	4b23      	ldr	r3, [pc, #140]	@ (8008a88 <__d2b+0xa8>)
 80089fa:	4824      	ldr	r0, [pc, #144]	@ (8008a8c <__d2b+0xac>)
 80089fc:	f240 310f 	movw	r1, #783	@ 0x30f
 8008a00:	f000 fa74 	bl	8008eec <__assert_func>
 8008a04:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008a08:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008a0c:	b10d      	cbz	r5, 8008a12 <__d2b+0x32>
 8008a0e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008a12:	9301      	str	r3, [sp, #4]
 8008a14:	f1b8 0300 	subs.w	r3, r8, #0
 8008a18:	d023      	beq.n	8008a62 <__d2b+0x82>
 8008a1a:	4668      	mov	r0, sp
 8008a1c:	9300      	str	r3, [sp, #0]
 8008a1e:	f7ff fd84 	bl	800852a <__lo0bits>
 8008a22:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008a26:	b1d0      	cbz	r0, 8008a5e <__d2b+0x7e>
 8008a28:	f1c0 0320 	rsb	r3, r0, #32
 8008a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8008a30:	430b      	orrs	r3, r1
 8008a32:	40c2      	lsrs	r2, r0
 8008a34:	6163      	str	r3, [r4, #20]
 8008a36:	9201      	str	r2, [sp, #4]
 8008a38:	9b01      	ldr	r3, [sp, #4]
 8008a3a:	61a3      	str	r3, [r4, #24]
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	bf0c      	ite	eq
 8008a40:	2201      	moveq	r2, #1
 8008a42:	2202      	movne	r2, #2
 8008a44:	6122      	str	r2, [r4, #16]
 8008a46:	b1a5      	cbz	r5, 8008a72 <__d2b+0x92>
 8008a48:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008a4c:	4405      	add	r5, r0
 8008a4e:	603d      	str	r5, [r7, #0]
 8008a50:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008a54:	6030      	str	r0, [r6, #0]
 8008a56:	4620      	mov	r0, r4
 8008a58:	b003      	add	sp, #12
 8008a5a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008a5e:	6161      	str	r1, [r4, #20]
 8008a60:	e7ea      	b.n	8008a38 <__d2b+0x58>
 8008a62:	a801      	add	r0, sp, #4
 8008a64:	f7ff fd61 	bl	800852a <__lo0bits>
 8008a68:	9b01      	ldr	r3, [sp, #4]
 8008a6a:	6163      	str	r3, [r4, #20]
 8008a6c:	3020      	adds	r0, #32
 8008a6e:	2201      	movs	r2, #1
 8008a70:	e7e8      	b.n	8008a44 <__d2b+0x64>
 8008a72:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008a76:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008a7a:	6038      	str	r0, [r7, #0]
 8008a7c:	6918      	ldr	r0, [r3, #16]
 8008a7e:	f7ff fd35 	bl	80084ec <__hi0bits>
 8008a82:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008a86:	e7e5      	b.n	8008a54 <__d2b+0x74>
 8008a88:	08009740 	.word	0x08009740
 8008a8c:	08009751 	.word	0x08009751

08008a90 <__ssputs_r>:
 8008a90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a94:	688e      	ldr	r6, [r1, #8]
 8008a96:	461f      	mov	r7, r3
 8008a98:	42be      	cmp	r6, r7
 8008a9a:	680b      	ldr	r3, [r1, #0]
 8008a9c:	4682      	mov	sl, r0
 8008a9e:	460c      	mov	r4, r1
 8008aa0:	4690      	mov	r8, r2
 8008aa2:	d82d      	bhi.n	8008b00 <__ssputs_r+0x70>
 8008aa4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008aa8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008aac:	d026      	beq.n	8008afc <__ssputs_r+0x6c>
 8008aae:	6965      	ldr	r5, [r4, #20]
 8008ab0:	6909      	ldr	r1, [r1, #16]
 8008ab2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008ab6:	eba3 0901 	sub.w	r9, r3, r1
 8008aba:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008abe:	1c7b      	adds	r3, r7, #1
 8008ac0:	444b      	add	r3, r9
 8008ac2:	106d      	asrs	r5, r5, #1
 8008ac4:	429d      	cmp	r5, r3
 8008ac6:	bf38      	it	cc
 8008ac8:	461d      	movcc	r5, r3
 8008aca:	0553      	lsls	r3, r2, #21
 8008acc:	d527      	bpl.n	8008b1e <__ssputs_r+0x8e>
 8008ace:	4629      	mov	r1, r5
 8008ad0:	f7ff fbd8 	bl	8008284 <_malloc_r>
 8008ad4:	4606      	mov	r6, r0
 8008ad6:	b360      	cbz	r0, 8008b32 <__ssputs_r+0xa2>
 8008ad8:	6921      	ldr	r1, [r4, #16]
 8008ada:	464a      	mov	r2, r9
 8008adc:	f7fe fd69 	bl	80075b2 <memcpy>
 8008ae0:	89a3      	ldrh	r3, [r4, #12]
 8008ae2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008ae6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008aea:	81a3      	strh	r3, [r4, #12]
 8008aec:	6126      	str	r6, [r4, #16]
 8008aee:	6165      	str	r5, [r4, #20]
 8008af0:	444e      	add	r6, r9
 8008af2:	eba5 0509 	sub.w	r5, r5, r9
 8008af6:	6026      	str	r6, [r4, #0]
 8008af8:	60a5      	str	r5, [r4, #8]
 8008afa:	463e      	mov	r6, r7
 8008afc:	42be      	cmp	r6, r7
 8008afe:	d900      	bls.n	8008b02 <__ssputs_r+0x72>
 8008b00:	463e      	mov	r6, r7
 8008b02:	6820      	ldr	r0, [r4, #0]
 8008b04:	4632      	mov	r2, r6
 8008b06:	4641      	mov	r1, r8
 8008b08:	f000 f9c6 	bl	8008e98 <memmove>
 8008b0c:	68a3      	ldr	r3, [r4, #8]
 8008b0e:	1b9b      	subs	r3, r3, r6
 8008b10:	60a3      	str	r3, [r4, #8]
 8008b12:	6823      	ldr	r3, [r4, #0]
 8008b14:	4433      	add	r3, r6
 8008b16:	6023      	str	r3, [r4, #0]
 8008b18:	2000      	movs	r0, #0
 8008b1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b1e:	462a      	mov	r2, r5
 8008b20:	f000 fa28 	bl	8008f74 <_realloc_r>
 8008b24:	4606      	mov	r6, r0
 8008b26:	2800      	cmp	r0, #0
 8008b28:	d1e0      	bne.n	8008aec <__ssputs_r+0x5c>
 8008b2a:	6921      	ldr	r1, [r4, #16]
 8008b2c:	4650      	mov	r0, sl
 8008b2e:	f7ff fb35 	bl	800819c <_free_r>
 8008b32:	230c      	movs	r3, #12
 8008b34:	f8ca 3000 	str.w	r3, [sl]
 8008b38:	89a3      	ldrh	r3, [r4, #12]
 8008b3a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008b3e:	81a3      	strh	r3, [r4, #12]
 8008b40:	f04f 30ff 	mov.w	r0, #4294967295
 8008b44:	e7e9      	b.n	8008b1a <__ssputs_r+0x8a>
	...

08008b48 <_svfiprintf_r>:
 8008b48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b4c:	4698      	mov	r8, r3
 8008b4e:	898b      	ldrh	r3, [r1, #12]
 8008b50:	061b      	lsls	r3, r3, #24
 8008b52:	b09d      	sub	sp, #116	@ 0x74
 8008b54:	4607      	mov	r7, r0
 8008b56:	460d      	mov	r5, r1
 8008b58:	4614      	mov	r4, r2
 8008b5a:	d510      	bpl.n	8008b7e <_svfiprintf_r+0x36>
 8008b5c:	690b      	ldr	r3, [r1, #16]
 8008b5e:	b973      	cbnz	r3, 8008b7e <_svfiprintf_r+0x36>
 8008b60:	2140      	movs	r1, #64	@ 0x40
 8008b62:	f7ff fb8f 	bl	8008284 <_malloc_r>
 8008b66:	6028      	str	r0, [r5, #0]
 8008b68:	6128      	str	r0, [r5, #16]
 8008b6a:	b930      	cbnz	r0, 8008b7a <_svfiprintf_r+0x32>
 8008b6c:	230c      	movs	r3, #12
 8008b6e:	603b      	str	r3, [r7, #0]
 8008b70:	f04f 30ff 	mov.w	r0, #4294967295
 8008b74:	b01d      	add	sp, #116	@ 0x74
 8008b76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b7a:	2340      	movs	r3, #64	@ 0x40
 8008b7c:	616b      	str	r3, [r5, #20]
 8008b7e:	2300      	movs	r3, #0
 8008b80:	9309      	str	r3, [sp, #36]	@ 0x24
 8008b82:	2320      	movs	r3, #32
 8008b84:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008b88:	f8cd 800c 	str.w	r8, [sp, #12]
 8008b8c:	2330      	movs	r3, #48	@ 0x30
 8008b8e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008d2c <_svfiprintf_r+0x1e4>
 8008b92:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008b96:	f04f 0901 	mov.w	r9, #1
 8008b9a:	4623      	mov	r3, r4
 8008b9c:	469a      	mov	sl, r3
 8008b9e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008ba2:	b10a      	cbz	r2, 8008ba8 <_svfiprintf_r+0x60>
 8008ba4:	2a25      	cmp	r2, #37	@ 0x25
 8008ba6:	d1f9      	bne.n	8008b9c <_svfiprintf_r+0x54>
 8008ba8:	ebba 0b04 	subs.w	fp, sl, r4
 8008bac:	d00b      	beq.n	8008bc6 <_svfiprintf_r+0x7e>
 8008bae:	465b      	mov	r3, fp
 8008bb0:	4622      	mov	r2, r4
 8008bb2:	4629      	mov	r1, r5
 8008bb4:	4638      	mov	r0, r7
 8008bb6:	f7ff ff6b 	bl	8008a90 <__ssputs_r>
 8008bba:	3001      	adds	r0, #1
 8008bbc:	f000 80a7 	beq.w	8008d0e <_svfiprintf_r+0x1c6>
 8008bc0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008bc2:	445a      	add	r2, fp
 8008bc4:	9209      	str	r2, [sp, #36]	@ 0x24
 8008bc6:	f89a 3000 	ldrb.w	r3, [sl]
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	f000 809f 	beq.w	8008d0e <_svfiprintf_r+0x1c6>
 8008bd0:	2300      	movs	r3, #0
 8008bd2:	f04f 32ff 	mov.w	r2, #4294967295
 8008bd6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008bda:	f10a 0a01 	add.w	sl, sl, #1
 8008bde:	9304      	str	r3, [sp, #16]
 8008be0:	9307      	str	r3, [sp, #28]
 8008be2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008be6:	931a      	str	r3, [sp, #104]	@ 0x68
 8008be8:	4654      	mov	r4, sl
 8008bea:	2205      	movs	r2, #5
 8008bec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008bf0:	484e      	ldr	r0, [pc, #312]	@ (8008d2c <_svfiprintf_r+0x1e4>)
 8008bf2:	f7f7 fb75 	bl	80002e0 <memchr>
 8008bf6:	9a04      	ldr	r2, [sp, #16]
 8008bf8:	b9d8      	cbnz	r0, 8008c32 <_svfiprintf_r+0xea>
 8008bfa:	06d0      	lsls	r0, r2, #27
 8008bfc:	bf44      	itt	mi
 8008bfe:	2320      	movmi	r3, #32
 8008c00:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008c04:	0711      	lsls	r1, r2, #28
 8008c06:	bf44      	itt	mi
 8008c08:	232b      	movmi	r3, #43	@ 0x2b
 8008c0a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008c0e:	f89a 3000 	ldrb.w	r3, [sl]
 8008c12:	2b2a      	cmp	r3, #42	@ 0x2a
 8008c14:	d015      	beq.n	8008c42 <_svfiprintf_r+0xfa>
 8008c16:	9a07      	ldr	r2, [sp, #28]
 8008c18:	4654      	mov	r4, sl
 8008c1a:	2000      	movs	r0, #0
 8008c1c:	f04f 0c0a 	mov.w	ip, #10
 8008c20:	4621      	mov	r1, r4
 8008c22:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008c26:	3b30      	subs	r3, #48	@ 0x30
 8008c28:	2b09      	cmp	r3, #9
 8008c2a:	d94b      	bls.n	8008cc4 <_svfiprintf_r+0x17c>
 8008c2c:	b1b0      	cbz	r0, 8008c5c <_svfiprintf_r+0x114>
 8008c2e:	9207      	str	r2, [sp, #28]
 8008c30:	e014      	b.n	8008c5c <_svfiprintf_r+0x114>
 8008c32:	eba0 0308 	sub.w	r3, r0, r8
 8008c36:	fa09 f303 	lsl.w	r3, r9, r3
 8008c3a:	4313      	orrs	r3, r2
 8008c3c:	9304      	str	r3, [sp, #16]
 8008c3e:	46a2      	mov	sl, r4
 8008c40:	e7d2      	b.n	8008be8 <_svfiprintf_r+0xa0>
 8008c42:	9b03      	ldr	r3, [sp, #12]
 8008c44:	1d19      	adds	r1, r3, #4
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	9103      	str	r1, [sp, #12]
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	bfbb      	ittet	lt
 8008c4e:	425b      	neglt	r3, r3
 8008c50:	f042 0202 	orrlt.w	r2, r2, #2
 8008c54:	9307      	strge	r3, [sp, #28]
 8008c56:	9307      	strlt	r3, [sp, #28]
 8008c58:	bfb8      	it	lt
 8008c5a:	9204      	strlt	r2, [sp, #16]
 8008c5c:	7823      	ldrb	r3, [r4, #0]
 8008c5e:	2b2e      	cmp	r3, #46	@ 0x2e
 8008c60:	d10a      	bne.n	8008c78 <_svfiprintf_r+0x130>
 8008c62:	7863      	ldrb	r3, [r4, #1]
 8008c64:	2b2a      	cmp	r3, #42	@ 0x2a
 8008c66:	d132      	bne.n	8008cce <_svfiprintf_r+0x186>
 8008c68:	9b03      	ldr	r3, [sp, #12]
 8008c6a:	1d1a      	adds	r2, r3, #4
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	9203      	str	r2, [sp, #12]
 8008c70:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008c74:	3402      	adds	r4, #2
 8008c76:	9305      	str	r3, [sp, #20]
 8008c78:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008d3c <_svfiprintf_r+0x1f4>
 8008c7c:	7821      	ldrb	r1, [r4, #0]
 8008c7e:	2203      	movs	r2, #3
 8008c80:	4650      	mov	r0, sl
 8008c82:	f7f7 fb2d 	bl	80002e0 <memchr>
 8008c86:	b138      	cbz	r0, 8008c98 <_svfiprintf_r+0x150>
 8008c88:	9b04      	ldr	r3, [sp, #16]
 8008c8a:	eba0 000a 	sub.w	r0, r0, sl
 8008c8e:	2240      	movs	r2, #64	@ 0x40
 8008c90:	4082      	lsls	r2, r0
 8008c92:	4313      	orrs	r3, r2
 8008c94:	3401      	adds	r4, #1
 8008c96:	9304      	str	r3, [sp, #16]
 8008c98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c9c:	4824      	ldr	r0, [pc, #144]	@ (8008d30 <_svfiprintf_r+0x1e8>)
 8008c9e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008ca2:	2206      	movs	r2, #6
 8008ca4:	f7f7 fb1c 	bl	80002e0 <memchr>
 8008ca8:	2800      	cmp	r0, #0
 8008caa:	d036      	beq.n	8008d1a <_svfiprintf_r+0x1d2>
 8008cac:	4b21      	ldr	r3, [pc, #132]	@ (8008d34 <_svfiprintf_r+0x1ec>)
 8008cae:	bb1b      	cbnz	r3, 8008cf8 <_svfiprintf_r+0x1b0>
 8008cb0:	9b03      	ldr	r3, [sp, #12]
 8008cb2:	3307      	adds	r3, #7
 8008cb4:	f023 0307 	bic.w	r3, r3, #7
 8008cb8:	3308      	adds	r3, #8
 8008cba:	9303      	str	r3, [sp, #12]
 8008cbc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008cbe:	4433      	add	r3, r6
 8008cc0:	9309      	str	r3, [sp, #36]	@ 0x24
 8008cc2:	e76a      	b.n	8008b9a <_svfiprintf_r+0x52>
 8008cc4:	fb0c 3202 	mla	r2, ip, r2, r3
 8008cc8:	460c      	mov	r4, r1
 8008cca:	2001      	movs	r0, #1
 8008ccc:	e7a8      	b.n	8008c20 <_svfiprintf_r+0xd8>
 8008cce:	2300      	movs	r3, #0
 8008cd0:	3401      	adds	r4, #1
 8008cd2:	9305      	str	r3, [sp, #20]
 8008cd4:	4619      	mov	r1, r3
 8008cd6:	f04f 0c0a 	mov.w	ip, #10
 8008cda:	4620      	mov	r0, r4
 8008cdc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008ce0:	3a30      	subs	r2, #48	@ 0x30
 8008ce2:	2a09      	cmp	r2, #9
 8008ce4:	d903      	bls.n	8008cee <_svfiprintf_r+0x1a6>
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d0c6      	beq.n	8008c78 <_svfiprintf_r+0x130>
 8008cea:	9105      	str	r1, [sp, #20]
 8008cec:	e7c4      	b.n	8008c78 <_svfiprintf_r+0x130>
 8008cee:	fb0c 2101 	mla	r1, ip, r1, r2
 8008cf2:	4604      	mov	r4, r0
 8008cf4:	2301      	movs	r3, #1
 8008cf6:	e7f0      	b.n	8008cda <_svfiprintf_r+0x192>
 8008cf8:	ab03      	add	r3, sp, #12
 8008cfa:	9300      	str	r3, [sp, #0]
 8008cfc:	462a      	mov	r2, r5
 8008cfe:	4b0e      	ldr	r3, [pc, #56]	@ (8008d38 <_svfiprintf_r+0x1f0>)
 8008d00:	a904      	add	r1, sp, #16
 8008d02:	4638      	mov	r0, r7
 8008d04:	f7fd fef4 	bl	8006af0 <_printf_float>
 8008d08:	1c42      	adds	r2, r0, #1
 8008d0a:	4606      	mov	r6, r0
 8008d0c:	d1d6      	bne.n	8008cbc <_svfiprintf_r+0x174>
 8008d0e:	89ab      	ldrh	r3, [r5, #12]
 8008d10:	065b      	lsls	r3, r3, #25
 8008d12:	f53f af2d 	bmi.w	8008b70 <_svfiprintf_r+0x28>
 8008d16:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008d18:	e72c      	b.n	8008b74 <_svfiprintf_r+0x2c>
 8008d1a:	ab03      	add	r3, sp, #12
 8008d1c:	9300      	str	r3, [sp, #0]
 8008d1e:	462a      	mov	r2, r5
 8008d20:	4b05      	ldr	r3, [pc, #20]	@ (8008d38 <_svfiprintf_r+0x1f0>)
 8008d22:	a904      	add	r1, sp, #16
 8008d24:	4638      	mov	r0, r7
 8008d26:	f7fe f96b 	bl	8007000 <_printf_i>
 8008d2a:	e7ed      	b.n	8008d08 <_svfiprintf_r+0x1c0>
 8008d2c:	080097aa 	.word	0x080097aa
 8008d30:	080097b4 	.word	0x080097b4
 8008d34:	08006af1 	.word	0x08006af1
 8008d38:	08008a91 	.word	0x08008a91
 8008d3c:	080097b0 	.word	0x080097b0

08008d40 <__sflush_r>:
 8008d40:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008d44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d48:	0716      	lsls	r6, r2, #28
 8008d4a:	4605      	mov	r5, r0
 8008d4c:	460c      	mov	r4, r1
 8008d4e:	d454      	bmi.n	8008dfa <__sflush_r+0xba>
 8008d50:	684b      	ldr	r3, [r1, #4]
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	dc02      	bgt.n	8008d5c <__sflush_r+0x1c>
 8008d56:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	dd48      	ble.n	8008dee <__sflush_r+0xae>
 8008d5c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008d5e:	2e00      	cmp	r6, #0
 8008d60:	d045      	beq.n	8008dee <__sflush_r+0xae>
 8008d62:	2300      	movs	r3, #0
 8008d64:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008d68:	682f      	ldr	r7, [r5, #0]
 8008d6a:	6a21      	ldr	r1, [r4, #32]
 8008d6c:	602b      	str	r3, [r5, #0]
 8008d6e:	d030      	beq.n	8008dd2 <__sflush_r+0x92>
 8008d70:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008d72:	89a3      	ldrh	r3, [r4, #12]
 8008d74:	0759      	lsls	r1, r3, #29
 8008d76:	d505      	bpl.n	8008d84 <__sflush_r+0x44>
 8008d78:	6863      	ldr	r3, [r4, #4]
 8008d7a:	1ad2      	subs	r2, r2, r3
 8008d7c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008d7e:	b10b      	cbz	r3, 8008d84 <__sflush_r+0x44>
 8008d80:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008d82:	1ad2      	subs	r2, r2, r3
 8008d84:	2300      	movs	r3, #0
 8008d86:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008d88:	6a21      	ldr	r1, [r4, #32]
 8008d8a:	4628      	mov	r0, r5
 8008d8c:	47b0      	blx	r6
 8008d8e:	1c43      	adds	r3, r0, #1
 8008d90:	89a3      	ldrh	r3, [r4, #12]
 8008d92:	d106      	bne.n	8008da2 <__sflush_r+0x62>
 8008d94:	6829      	ldr	r1, [r5, #0]
 8008d96:	291d      	cmp	r1, #29
 8008d98:	d82b      	bhi.n	8008df2 <__sflush_r+0xb2>
 8008d9a:	4a2a      	ldr	r2, [pc, #168]	@ (8008e44 <__sflush_r+0x104>)
 8008d9c:	40ca      	lsrs	r2, r1
 8008d9e:	07d6      	lsls	r6, r2, #31
 8008da0:	d527      	bpl.n	8008df2 <__sflush_r+0xb2>
 8008da2:	2200      	movs	r2, #0
 8008da4:	6062      	str	r2, [r4, #4]
 8008da6:	04d9      	lsls	r1, r3, #19
 8008da8:	6922      	ldr	r2, [r4, #16]
 8008daa:	6022      	str	r2, [r4, #0]
 8008dac:	d504      	bpl.n	8008db8 <__sflush_r+0x78>
 8008dae:	1c42      	adds	r2, r0, #1
 8008db0:	d101      	bne.n	8008db6 <__sflush_r+0x76>
 8008db2:	682b      	ldr	r3, [r5, #0]
 8008db4:	b903      	cbnz	r3, 8008db8 <__sflush_r+0x78>
 8008db6:	6560      	str	r0, [r4, #84]	@ 0x54
 8008db8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008dba:	602f      	str	r7, [r5, #0]
 8008dbc:	b1b9      	cbz	r1, 8008dee <__sflush_r+0xae>
 8008dbe:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008dc2:	4299      	cmp	r1, r3
 8008dc4:	d002      	beq.n	8008dcc <__sflush_r+0x8c>
 8008dc6:	4628      	mov	r0, r5
 8008dc8:	f7ff f9e8 	bl	800819c <_free_r>
 8008dcc:	2300      	movs	r3, #0
 8008dce:	6363      	str	r3, [r4, #52]	@ 0x34
 8008dd0:	e00d      	b.n	8008dee <__sflush_r+0xae>
 8008dd2:	2301      	movs	r3, #1
 8008dd4:	4628      	mov	r0, r5
 8008dd6:	47b0      	blx	r6
 8008dd8:	4602      	mov	r2, r0
 8008dda:	1c50      	adds	r0, r2, #1
 8008ddc:	d1c9      	bne.n	8008d72 <__sflush_r+0x32>
 8008dde:	682b      	ldr	r3, [r5, #0]
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d0c6      	beq.n	8008d72 <__sflush_r+0x32>
 8008de4:	2b1d      	cmp	r3, #29
 8008de6:	d001      	beq.n	8008dec <__sflush_r+0xac>
 8008de8:	2b16      	cmp	r3, #22
 8008dea:	d11e      	bne.n	8008e2a <__sflush_r+0xea>
 8008dec:	602f      	str	r7, [r5, #0]
 8008dee:	2000      	movs	r0, #0
 8008df0:	e022      	b.n	8008e38 <__sflush_r+0xf8>
 8008df2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008df6:	b21b      	sxth	r3, r3
 8008df8:	e01b      	b.n	8008e32 <__sflush_r+0xf2>
 8008dfa:	690f      	ldr	r7, [r1, #16]
 8008dfc:	2f00      	cmp	r7, #0
 8008dfe:	d0f6      	beq.n	8008dee <__sflush_r+0xae>
 8008e00:	0793      	lsls	r3, r2, #30
 8008e02:	680e      	ldr	r6, [r1, #0]
 8008e04:	bf08      	it	eq
 8008e06:	694b      	ldreq	r3, [r1, #20]
 8008e08:	600f      	str	r7, [r1, #0]
 8008e0a:	bf18      	it	ne
 8008e0c:	2300      	movne	r3, #0
 8008e0e:	eba6 0807 	sub.w	r8, r6, r7
 8008e12:	608b      	str	r3, [r1, #8]
 8008e14:	f1b8 0f00 	cmp.w	r8, #0
 8008e18:	dde9      	ble.n	8008dee <__sflush_r+0xae>
 8008e1a:	6a21      	ldr	r1, [r4, #32]
 8008e1c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008e1e:	4643      	mov	r3, r8
 8008e20:	463a      	mov	r2, r7
 8008e22:	4628      	mov	r0, r5
 8008e24:	47b0      	blx	r6
 8008e26:	2800      	cmp	r0, #0
 8008e28:	dc08      	bgt.n	8008e3c <__sflush_r+0xfc>
 8008e2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e2e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008e32:	81a3      	strh	r3, [r4, #12]
 8008e34:	f04f 30ff 	mov.w	r0, #4294967295
 8008e38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e3c:	4407      	add	r7, r0
 8008e3e:	eba8 0800 	sub.w	r8, r8, r0
 8008e42:	e7e7      	b.n	8008e14 <__sflush_r+0xd4>
 8008e44:	20400001 	.word	0x20400001

08008e48 <_fflush_r>:
 8008e48:	b538      	push	{r3, r4, r5, lr}
 8008e4a:	690b      	ldr	r3, [r1, #16]
 8008e4c:	4605      	mov	r5, r0
 8008e4e:	460c      	mov	r4, r1
 8008e50:	b913      	cbnz	r3, 8008e58 <_fflush_r+0x10>
 8008e52:	2500      	movs	r5, #0
 8008e54:	4628      	mov	r0, r5
 8008e56:	bd38      	pop	{r3, r4, r5, pc}
 8008e58:	b118      	cbz	r0, 8008e62 <_fflush_r+0x1a>
 8008e5a:	6a03      	ldr	r3, [r0, #32]
 8008e5c:	b90b      	cbnz	r3, 8008e62 <_fflush_r+0x1a>
 8008e5e:	f7fe fa79 	bl	8007354 <__sinit>
 8008e62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d0f3      	beq.n	8008e52 <_fflush_r+0xa>
 8008e6a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008e6c:	07d0      	lsls	r0, r2, #31
 8008e6e:	d404      	bmi.n	8008e7a <_fflush_r+0x32>
 8008e70:	0599      	lsls	r1, r3, #22
 8008e72:	d402      	bmi.n	8008e7a <_fflush_r+0x32>
 8008e74:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008e76:	f7fe fb9a 	bl	80075ae <__retarget_lock_acquire_recursive>
 8008e7a:	4628      	mov	r0, r5
 8008e7c:	4621      	mov	r1, r4
 8008e7e:	f7ff ff5f 	bl	8008d40 <__sflush_r>
 8008e82:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008e84:	07da      	lsls	r2, r3, #31
 8008e86:	4605      	mov	r5, r0
 8008e88:	d4e4      	bmi.n	8008e54 <_fflush_r+0xc>
 8008e8a:	89a3      	ldrh	r3, [r4, #12]
 8008e8c:	059b      	lsls	r3, r3, #22
 8008e8e:	d4e1      	bmi.n	8008e54 <_fflush_r+0xc>
 8008e90:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008e92:	f7fe fb8d 	bl	80075b0 <__retarget_lock_release_recursive>
 8008e96:	e7dd      	b.n	8008e54 <_fflush_r+0xc>

08008e98 <memmove>:
 8008e98:	4288      	cmp	r0, r1
 8008e9a:	b510      	push	{r4, lr}
 8008e9c:	eb01 0402 	add.w	r4, r1, r2
 8008ea0:	d902      	bls.n	8008ea8 <memmove+0x10>
 8008ea2:	4284      	cmp	r4, r0
 8008ea4:	4623      	mov	r3, r4
 8008ea6:	d807      	bhi.n	8008eb8 <memmove+0x20>
 8008ea8:	1e43      	subs	r3, r0, #1
 8008eaa:	42a1      	cmp	r1, r4
 8008eac:	d008      	beq.n	8008ec0 <memmove+0x28>
 8008eae:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008eb2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008eb6:	e7f8      	b.n	8008eaa <memmove+0x12>
 8008eb8:	4402      	add	r2, r0
 8008eba:	4601      	mov	r1, r0
 8008ebc:	428a      	cmp	r2, r1
 8008ebe:	d100      	bne.n	8008ec2 <memmove+0x2a>
 8008ec0:	bd10      	pop	{r4, pc}
 8008ec2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008ec6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008eca:	e7f7      	b.n	8008ebc <memmove+0x24>

08008ecc <_sbrk_r>:
 8008ecc:	b538      	push	{r3, r4, r5, lr}
 8008ece:	4d06      	ldr	r5, [pc, #24]	@ (8008ee8 <_sbrk_r+0x1c>)
 8008ed0:	2300      	movs	r3, #0
 8008ed2:	4604      	mov	r4, r0
 8008ed4:	4608      	mov	r0, r1
 8008ed6:	602b      	str	r3, [r5, #0]
 8008ed8:	f7f8 f83e 	bl	8000f58 <_sbrk>
 8008edc:	1c43      	adds	r3, r0, #1
 8008ede:	d102      	bne.n	8008ee6 <_sbrk_r+0x1a>
 8008ee0:	682b      	ldr	r3, [r5, #0]
 8008ee2:	b103      	cbz	r3, 8008ee6 <_sbrk_r+0x1a>
 8008ee4:	6023      	str	r3, [r4, #0]
 8008ee6:	bd38      	pop	{r3, r4, r5, pc}
 8008ee8:	24000684 	.word	0x24000684

08008eec <__assert_func>:
 8008eec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008eee:	4614      	mov	r4, r2
 8008ef0:	461a      	mov	r2, r3
 8008ef2:	4b09      	ldr	r3, [pc, #36]	@ (8008f18 <__assert_func+0x2c>)
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	4605      	mov	r5, r0
 8008ef8:	68d8      	ldr	r0, [r3, #12]
 8008efa:	b14c      	cbz	r4, 8008f10 <__assert_func+0x24>
 8008efc:	4b07      	ldr	r3, [pc, #28]	@ (8008f1c <__assert_func+0x30>)
 8008efe:	9100      	str	r1, [sp, #0]
 8008f00:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008f04:	4906      	ldr	r1, [pc, #24]	@ (8008f20 <__assert_func+0x34>)
 8008f06:	462b      	mov	r3, r5
 8008f08:	f000 f870 	bl	8008fec <fiprintf>
 8008f0c:	f000 f880 	bl	8009010 <abort>
 8008f10:	4b04      	ldr	r3, [pc, #16]	@ (8008f24 <__assert_func+0x38>)
 8008f12:	461c      	mov	r4, r3
 8008f14:	e7f3      	b.n	8008efe <__assert_func+0x12>
 8008f16:	bf00      	nop
 8008f18:	2400001c 	.word	0x2400001c
 8008f1c:	080097c5 	.word	0x080097c5
 8008f20:	080097d2 	.word	0x080097d2
 8008f24:	08009800 	.word	0x08009800

08008f28 <_calloc_r>:
 8008f28:	b570      	push	{r4, r5, r6, lr}
 8008f2a:	fba1 5402 	umull	r5, r4, r1, r2
 8008f2e:	b934      	cbnz	r4, 8008f3e <_calloc_r+0x16>
 8008f30:	4629      	mov	r1, r5
 8008f32:	f7ff f9a7 	bl	8008284 <_malloc_r>
 8008f36:	4606      	mov	r6, r0
 8008f38:	b928      	cbnz	r0, 8008f46 <_calloc_r+0x1e>
 8008f3a:	4630      	mov	r0, r6
 8008f3c:	bd70      	pop	{r4, r5, r6, pc}
 8008f3e:	220c      	movs	r2, #12
 8008f40:	6002      	str	r2, [r0, #0]
 8008f42:	2600      	movs	r6, #0
 8008f44:	e7f9      	b.n	8008f3a <_calloc_r+0x12>
 8008f46:	462a      	mov	r2, r5
 8008f48:	4621      	mov	r1, r4
 8008f4a:	f7fe fab2 	bl	80074b2 <memset>
 8008f4e:	e7f4      	b.n	8008f3a <_calloc_r+0x12>

08008f50 <__ascii_mbtowc>:
 8008f50:	b082      	sub	sp, #8
 8008f52:	b901      	cbnz	r1, 8008f56 <__ascii_mbtowc+0x6>
 8008f54:	a901      	add	r1, sp, #4
 8008f56:	b142      	cbz	r2, 8008f6a <__ascii_mbtowc+0x1a>
 8008f58:	b14b      	cbz	r3, 8008f6e <__ascii_mbtowc+0x1e>
 8008f5a:	7813      	ldrb	r3, [r2, #0]
 8008f5c:	600b      	str	r3, [r1, #0]
 8008f5e:	7812      	ldrb	r2, [r2, #0]
 8008f60:	1e10      	subs	r0, r2, #0
 8008f62:	bf18      	it	ne
 8008f64:	2001      	movne	r0, #1
 8008f66:	b002      	add	sp, #8
 8008f68:	4770      	bx	lr
 8008f6a:	4610      	mov	r0, r2
 8008f6c:	e7fb      	b.n	8008f66 <__ascii_mbtowc+0x16>
 8008f6e:	f06f 0001 	mvn.w	r0, #1
 8008f72:	e7f8      	b.n	8008f66 <__ascii_mbtowc+0x16>

08008f74 <_realloc_r>:
 8008f74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f78:	4607      	mov	r7, r0
 8008f7a:	4614      	mov	r4, r2
 8008f7c:	460d      	mov	r5, r1
 8008f7e:	b921      	cbnz	r1, 8008f8a <_realloc_r+0x16>
 8008f80:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008f84:	4611      	mov	r1, r2
 8008f86:	f7ff b97d 	b.w	8008284 <_malloc_r>
 8008f8a:	b92a      	cbnz	r2, 8008f98 <_realloc_r+0x24>
 8008f8c:	f7ff f906 	bl	800819c <_free_r>
 8008f90:	4625      	mov	r5, r4
 8008f92:	4628      	mov	r0, r5
 8008f94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f98:	f000 f841 	bl	800901e <_malloc_usable_size_r>
 8008f9c:	4284      	cmp	r4, r0
 8008f9e:	4606      	mov	r6, r0
 8008fa0:	d802      	bhi.n	8008fa8 <_realloc_r+0x34>
 8008fa2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008fa6:	d8f4      	bhi.n	8008f92 <_realloc_r+0x1e>
 8008fa8:	4621      	mov	r1, r4
 8008faa:	4638      	mov	r0, r7
 8008fac:	f7ff f96a 	bl	8008284 <_malloc_r>
 8008fb0:	4680      	mov	r8, r0
 8008fb2:	b908      	cbnz	r0, 8008fb8 <_realloc_r+0x44>
 8008fb4:	4645      	mov	r5, r8
 8008fb6:	e7ec      	b.n	8008f92 <_realloc_r+0x1e>
 8008fb8:	42b4      	cmp	r4, r6
 8008fba:	4622      	mov	r2, r4
 8008fbc:	4629      	mov	r1, r5
 8008fbe:	bf28      	it	cs
 8008fc0:	4632      	movcs	r2, r6
 8008fc2:	f7fe faf6 	bl	80075b2 <memcpy>
 8008fc6:	4629      	mov	r1, r5
 8008fc8:	4638      	mov	r0, r7
 8008fca:	f7ff f8e7 	bl	800819c <_free_r>
 8008fce:	e7f1      	b.n	8008fb4 <_realloc_r+0x40>

08008fd0 <__ascii_wctomb>:
 8008fd0:	4603      	mov	r3, r0
 8008fd2:	4608      	mov	r0, r1
 8008fd4:	b141      	cbz	r1, 8008fe8 <__ascii_wctomb+0x18>
 8008fd6:	2aff      	cmp	r2, #255	@ 0xff
 8008fd8:	d904      	bls.n	8008fe4 <__ascii_wctomb+0x14>
 8008fda:	228a      	movs	r2, #138	@ 0x8a
 8008fdc:	601a      	str	r2, [r3, #0]
 8008fde:	f04f 30ff 	mov.w	r0, #4294967295
 8008fe2:	4770      	bx	lr
 8008fe4:	700a      	strb	r2, [r1, #0]
 8008fe6:	2001      	movs	r0, #1
 8008fe8:	4770      	bx	lr
	...

08008fec <fiprintf>:
 8008fec:	b40e      	push	{r1, r2, r3}
 8008fee:	b503      	push	{r0, r1, lr}
 8008ff0:	4601      	mov	r1, r0
 8008ff2:	ab03      	add	r3, sp, #12
 8008ff4:	4805      	ldr	r0, [pc, #20]	@ (800900c <fiprintf+0x20>)
 8008ff6:	f853 2b04 	ldr.w	r2, [r3], #4
 8008ffa:	6800      	ldr	r0, [r0, #0]
 8008ffc:	9301      	str	r3, [sp, #4]
 8008ffe:	f000 f83f 	bl	8009080 <_vfiprintf_r>
 8009002:	b002      	add	sp, #8
 8009004:	f85d eb04 	ldr.w	lr, [sp], #4
 8009008:	b003      	add	sp, #12
 800900a:	4770      	bx	lr
 800900c:	2400001c 	.word	0x2400001c

08009010 <abort>:
 8009010:	b508      	push	{r3, lr}
 8009012:	2006      	movs	r0, #6
 8009014:	f000 fa08 	bl	8009428 <raise>
 8009018:	2001      	movs	r0, #1
 800901a:	f7f7 ff25 	bl	8000e68 <_exit>

0800901e <_malloc_usable_size_r>:
 800901e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009022:	1f18      	subs	r0, r3, #4
 8009024:	2b00      	cmp	r3, #0
 8009026:	bfbc      	itt	lt
 8009028:	580b      	ldrlt	r3, [r1, r0]
 800902a:	18c0      	addlt	r0, r0, r3
 800902c:	4770      	bx	lr

0800902e <__sfputc_r>:
 800902e:	6893      	ldr	r3, [r2, #8]
 8009030:	3b01      	subs	r3, #1
 8009032:	2b00      	cmp	r3, #0
 8009034:	b410      	push	{r4}
 8009036:	6093      	str	r3, [r2, #8]
 8009038:	da08      	bge.n	800904c <__sfputc_r+0x1e>
 800903a:	6994      	ldr	r4, [r2, #24]
 800903c:	42a3      	cmp	r3, r4
 800903e:	db01      	blt.n	8009044 <__sfputc_r+0x16>
 8009040:	290a      	cmp	r1, #10
 8009042:	d103      	bne.n	800904c <__sfputc_r+0x1e>
 8009044:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009048:	f000 b932 	b.w	80092b0 <__swbuf_r>
 800904c:	6813      	ldr	r3, [r2, #0]
 800904e:	1c58      	adds	r0, r3, #1
 8009050:	6010      	str	r0, [r2, #0]
 8009052:	7019      	strb	r1, [r3, #0]
 8009054:	4608      	mov	r0, r1
 8009056:	f85d 4b04 	ldr.w	r4, [sp], #4
 800905a:	4770      	bx	lr

0800905c <__sfputs_r>:
 800905c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800905e:	4606      	mov	r6, r0
 8009060:	460f      	mov	r7, r1
 8009062:	4614      	mov	r4, r2
 8009064:	18d5      	adds	r5, r2, r3
 8009066:	42ac      	cmp	r4, r5
 8009068:	d101      	bne.n	800906e <__sfputs_r+0x12>
 800906a:	2000      	movs	r0, #0
 800906c:	e007      	b.n	800907e <__sfputs_r+0x22>
 800906e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009072:	463a      	mov	r2, r7
 8009074:	4630      	mov	r0, r6
 8009076:	f7ff ffda 	bl	800902e <__sfputc_r>
 800907a:	1c43      	adds	r3, r0, #1
 800907c:	d1f3      	bne.n	8009066 <__sfputs_r+0xa>
 800907e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009080 <_vfiprintf_r>:
 8009080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009084:	460d      	mov	r5, r1
 8009086:	b09d      	sub	sp, #116	@ 0x74
 8009088:	4614      	mov	r4, r2
 800908a:	4698      	mov	r8, r3
 800908c:	4606      	mov	r6, r0
 800908e:	b118      	cbz	r0, 8009098 <_vfiprintf_r+0x18>
 8009090:	6a03      	ldr	r3, [r0, #32]
 8009092:	b90b      	cbnz	r3, 8009098 <_vfiprintf_r+0x18>
 8009094:	f7fe f95e 	bl	8007354 <__sinit>
 8009098:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800909a:	07d9      	lsls	r1, r3, #31
 800909c:	d405      	bmi.n	80090aa <_vfiprintf_r+0x2a>
 800909e:	89ab      	ldrh	r3, [r5, #12]
 80090a0:	059a      	lsls	r2, r3, #22
 80090a2:	d402      	bmi.n	80090aa <_vfiprintf_r+0x2a>
 80090a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80090a6:	f7fe fa82 	bl	80075ae <__retarget_lock_acquire_recursive>
 80090aa:	89ab      	ldrh	r3, [r5, #12]
 80090ac:	071b      	lsls	r3, r3, #28
 80090ae:	d501      	bpl.n	80090b4 <_vfiprintf_r+0x34>
 80090b0:	692b      	ldr	r3, [r5, #16]
 80090b2:	b99b      	cbnz	r3, 80090dc <_vfiprintf_r+0x5c>
 80090b4:	4629      	mov	r1, r5
 80090b6:	4630      	mov	r0, r6
 80090b8:	f000 f938 	bl	800932c <__swsetup_r>
 80090bc:	b170      	cbz	r0, 80090dc <_vfiprintf_r+0x5c>
 80090be:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80090c0:	07dc      	lsls	r4, r3, #31
 80090c2:	d504      	bpl.n	80090ce <_vfiprintf_r+0x4e>
 80090c4:	f04f 30ff 	mov.w	r0, #4294967295
 80090c8:	b01d      	add	sp, #116	@ 0x74
 80090ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090ce:	89ab      	ldrh	r3, [r5, #12]
 80090d0:	0598      	lsls	r0, r3, #22
 80090d2:	d4f7      	bmi.n	80090c4 <_vfiprintf_r+0x44>
 80090d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80090d6:	f7fe fa6b 	bl	80075b0 <__retarget_lock_release_recursive>
 80090da:	e7f3      	b.n	80090c4 <_vfiprintf_r+0x44>
 80090dc:	2300      	movs	r3, #0
 80090de:	9309      	str	r3, [sp, #36]	@ 0x24
 80090e0:	2320      	movs	r3, #32
 80090e2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80090e6:	f8cd 800c 	str.w	r8, [sp, #12]
 80090ea:	2330      	movs	r3, #48	@ 0x30
 80090ec:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800929c <_vfiprintf_r+0x21c>
 80090f0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80090f4:	f04f 0901 	mov.w	r9, #1
 80090f8:	4623      	mov	r3, r4
 80090fa:	469a      	mov	sl, r3
 80090fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009100:	b10a      	cbz	r2, 8009106 <_vfiprintf_r+0x86>
 8009102:	2a25      	cmp	r2, #37	@ 0x25
 8009104:	d1f9      	bne.n	80090fa <_vfiprintf_r+0x7a>
 8009106:	ebba 0b04 	subs.w	fp, sl, r4
 800910a:	d00b      	beq.n	8009124 <_vfiprintf_r+0xa4>
 800910c:	465b      	mov	r3, fp
 800910e:	4622      	mov	r2, r4
 8009110:	4629      	mov	r1, r5
 8009112:	4630      	mov	r0, r6
 8009114:	f7ff ffa2 	bl	800905c <__sfputs_r>
 8009118:	3001      	adds	r0, #1
 800911a:	f000 80a7 	beq.w	800926c <_vfiprintf_r+0x1ec>
 800911e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009120:	445a      	add	r2, fp
 8009122:	9209      	str	r2, [sp, #36]	@ 0x24
 8009124:	f89a 3000 	ldrb.w	r3, [sl]
 8009128:	2b00      	cmp	r3, #0
 800912a:	f000 809f 	beq.w	800926c <_vfiprintf_r+0x1ec>
 800912e:	2300      	movs	r3, #0
 8009130:	f04f 32ff 	mov.w	r2, #4294967295
 8009134:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009138:	f10a 0a01 	add.w	sl, sl, #1
 800913c:	9304      	str	r3, [sp, #16]
 800913e:	9307      	str	r3, [sp, #28]
 8009140:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009144:	931a      	str	r3, [sp, #104]	@ 0x68
 8009146:	4654      	mov	r4, sl
 8009148:	2205      	movs	r2, #5
 800914a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800914e:	4853      	ldr	r0, [pc, #332]	@ (800929c <_vfiprintf_r+0x21c>)
 8009150:	f7f7 f8c6 	bl	80002e0 <memchr>
 8009154:	9a04      	ldr	r2, [sp, #16]
 8009156:	b9d8      	cbnz	r0, 8009190 <_vfiprintf_r+0x110>
 8009158:	06d1      	lsls	r1, r2, #27
 800915a:	bf44      	itt	mi
 800915c:	2320      	movmi	r3, #32
 800915e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009162:	0713      	lsls	r3, r2, #28
 8009164:	bf44      	itt	mi
 8009166:	232b      	movmi	r3, #43	@ 0x2b
 8009168:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800916c:	f89a 3000 	ldrb.w	r3, [sl]
 8009170:	2b2a      	cmp	r3, #42	@ 0x2a
 8009172:	d015      	beq.n	80091a0 <_vfiprintf_r+0x120>
 8009174:	9a07      	ldr	r2, [sp, #28]
 8009176:	4654      	mov	r4, sl
 8009178:	2000      	movs	r0, #0
 800917a:	f04f 0c0a 	mov.w	ip, #10
 800917e:	4621      	mov	r1, r4
 8009180:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009184:	3b30      	subs	r3, #48	@ 0x30
 8009186:	2b09      	cmp	r3, #9
 8009188:	d94b      	bls.n	8009222 <_vfiprintf_r+0x1a2>
 800918a:	b1b0      	cbz	r0, 80091ba <_vfiprintf_r+0x13a>
 800918c:	9207      	str	r2, [sp, #28]
 800918e:	e014      	b.n	80091ba <_vfiprintf_r+0x13a>
 8009190:	eba0 0308 	sub.w	r3, r0, r8
 8009194:	fa09 f303 	lsl.w	r3, r9, r3
 8009198:	4313      	orrs	r3, r2
 800919a:	9304      	str	r3, [sp, #16]
 800919c:	46a2      	mov	sl, r4
 800919e:	e7d2      	b.n	8009146 <_vfiprintf_r+0xc6>
 80091a0:	9b03      	ldr	r3, [sp, #12]
 80091a2:	1d19      	adds	r1, r3, #4
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	9103      	str	r1, [sp, #12]
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	bfbb      	ittet	lt
 80091ac:	425b      	neglt	r3, r3
 80091ae:	f042 0202 	orrlt.w	r2, r2, #2
 80091b2:	9307      	strge	r3, [sp, #28]
 80091b4:	9307      	strlt	r3, [sp, #28]
 80091b6:	bfb8      	it	lt
 80091b8:	9204      	strlt	r2, [sp, #16]
 80091ba:	7823      	ldrb	r3, [r4, #0]
 80091bc:	2b2e      	cmp	r3, #46	@ 0x2e
 80091be:	d10a      	bne.n	80091d6 <_vfiprintf_r+0x156>
 80091c0:	7863      	ldrb	r3, [r4, #1]
 80091c2:	2b2a      	cmp	r3, #42	@ 0x2a
 80091c4:	d132      	bne.n	800922c <_vfiprintf_r+0x1ac>
 80091c6:	9b03      	ldr	r3, [sp, #12]
 80091c8:	1d1a      	adds	r2, r3, #4
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	9203      	str	r2, [sp, #12]
 80091ce:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80091d2:	3402      	adds	r4, #2
 80091d4:	9305      	str	r3, [sp, #20]
 80091d6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80092ac <_vfiprintf_r+0x22c>
 80091da:	7821      	ldrb	r1, [r4, #0]
 80091dc:	2203      	movs	r2, #3
 80091de:	4650      	mov	r0, sl
 80091e0:	f7f7 f87e 	bl	80002e0 <memchr>
 80091e4:	b138      	cbz	r0, 80091f6 <_vfiprintf_r+0x176>
 80091e6:	9b04      	ldr	r3, [sp, #16]
 80091e8:	eba0 000a 	sub.w	r0, r0, sl
 80091ec:	2240      	movs	r2, #64	@ 0x40
 80091ee:	4082      	lsls	r2, r0
 80091f0:	4313      	orrs	r3, r2
 80091f2:	3401      	adds	r4, #1
 80091f4:	9304      	str	r3, [sp, #16]
 80091f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80091fa:	4829      	ldr	r0, [pc, #164]	@ (80092a0 <_vfiprintf_r+0x220>)
 80091fc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009200:	2206      	movs	r2, #6
 8009202:	f7f7 f86d 	bl	80002e0 <memchr>
 8009206:	2800      	cmp	r0, #0
 8009208:	d03f      	beq.n	800928a <_vfiprintf_r+0x20a>
 800920a:	4b26      	ldr	r3, [pc, #152]	@ (80092a4 <_vfiprintf_r+0x224>)
 800920c:	bb1b      	cbnz	r3, 8009256 <_vfiprintf_r+0x1d6>
 800920e:	9b03      	ldr	r3, [sp, #12]
 8009210:	3307      	adds	r3, #7
 8009212:	f023 0307 	bic.w	r3, r3, #7
 8009216:	3308      	adds	r3, #8
 8009218:	9303      	str	r3, [sp, #12]
 800921a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800921c:	443b      	add	r3, r7
 800921e:	9309      	str	r3, [sp, #36]	@ 0x24
 8009220:	e76a      	b.n	80090f8 <_vfiprintf_r+0x78>
 8009222:	fb0c 3202 	mla	r2, ip, r2, r3
 8009226:	460c      	mov	r4, r1
 8009228:	2001      	movs	r0, #1
 800922a:	e7a8      	b.n	800917e <_vfiprintf_r+0xfe>
 800922c:	2300      	movs	r3, #0
 800922e:	3401      	adds	r4, #1
 8009230:	9305      	str	r3, [sp, #20]
 8009232:	4619      	mov	r1, r3
 8009234:	f04f 0c0a 	mov.w	ip, #10
 8009238:	4620      	mov	r0, r4
 800923a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800923e:	3a30      	subs	r2, #48	@ 0x30
 8009240:	2a09      	cmp	r2, #9
 8009242:	d903      	bls.n	800924c <_vfiprintf_r+0x1cc>
 8009244:	2b00      	cmp	r3, #0
 8009246:	d0c6      	beq.n	80091d6 <_vfiprintf_r+0x156>
 8009248:	9105      	str	r1, [sp, #20]
 800924a:	e7c4      	b.n	80091d6 <_vfiprintf_r+0x156>
 800924c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009250:	4604      	mov	r4, r0
 8009252:	2301      	movs	r3, #1
 8009254:	e7f0      	b.n	8009238 <_vfiprintf_r+0x1b8>
 8009256:	ab03      	add	r3, sp, #12
 8009258:	9300      	str	r3, [sp, #0]
 800925a:	462a      	mov	r2, r5
 800925c:	4b12      	ldr	r3, [pc, #72]	@ (80092a8 <_vfiprintf_r+0x228>)
 800925e:	a904      	add	r1, sp, #16
 8009260:	4630      	mov	r0, r6
 8009262:	f7fd fc45 	bl	8006af0 <_printf_float>
 8009266:	4607      	mov	r7, r0
 8009268:	1c78      	adds	r0, r7, #1
 800926a:	d1d6      	bne.n	800921a <_vfiprintf_r+0x19a>
 800926c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800926e:	07d9      	lsls	r1, r3, #31
 8009270:	d405      	bmi.n	800927e <_vfiprintf_r+0x1fe>
 8009272:	89ab      	ldrh	r3, [r5, #12]
 8009274:	059a      	lsls	r2, r3, #22
 8009276:	d402      	bmi.n	800927e <_vfiprintf_r+0x1fe>
 8009278:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800927a:	f7fe f999 	bl	80075b0 <__retarget_lock_release_recursive>
 800927e:	89ab      	ldrh	r3, [r5, #12]
 8009280:	065b      	lsls	r3, r3, #25
 8009282:	f53f af1f 	bmi.w	80090c4 <_vfiprintf_r+0x44>
 8009286:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009288:	e71e      	b.n	80090c8 <_vfiprintf_r+0x48>
 800928a:	ab03      	add	r3, sp, #12
 800928c:	9300      	str	r3, [sp, #0]
 800928e:	462a      	mov	r2, r5
 8009290:	4b05      	ldr	r3, [pc, #20]	@ (80092a8 <_vfiprintf_r+0x228>)
 8009292:	a904      	add	r1, sp, #16
 8009294:	4630      	mov	r0, r6
 8009296:	f7fd feb3 	bl	8007000 <_printf_i>
 800929a:	e7e4      	b.n	8009266 <_vfiprintf_r+0x1e6>
 800929c:	080097aa 	.word	0x080097aa
 80092a0:	080097b4 	.word	0x080097b4
 80092a4:	08006af1 	.word	0x08006af1
 80092a8:	0800905d 	.word	0x0800905d
 80092ac:	080097b0 	.word	0x080097b0

080092b0 <__swbuf_r>:
 80092b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092b2:	460e      	mov	r6, r1
 80092b4:	4614      	mov	r4, r2
 80092b6:	4605      	mov	r5, r0
 80092b8:	b118      	cbz	r0, 80092c2 <__swbuf_r+0x12>
 80092ba:	6a03      	ldr	r3, [r0, #32]
 80092bc:	b90b      	cbnz	r3, 80092c2 <__swbuf_r+0x12>
 80092be:	f7fe f849 	bl	8007354 <__sinit>
 80092c2:	69a3      	ldr	r3, [r4, #24]
 80092c4:	60a3      	str	r3, [r4, #8]
 80092c6:	89a3      	ldrh	r3, [r4, #12]
 80092c8:	071a      	lsls	r2, r3, #28
 80092ca:	d501      	bpl.n	80092d0 <__swbuf_r+0x20>
 80092cc:	6923      	ldr	r3, [r4, #16]
 80092ce:	b943      	cbnz	r3, 80092e2 <__swbuf_r+0x32>
 80092d0:	4621      	mov	r1, r4
 80092d2:	4628      	mov	r0, r5
 80092d4:	f000 f82a 	bl	800932c <__swsetup_r>
 80092d8:	b118      	cbz	r0, 80092e2 <__swbuf_r+0x32>
 80092da:	f04f 37ff 	mov.w	r7, #4294967295
 80092de:	4638      	mov	r0, r7
 80092e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80092e2:	6823      	ldr	r3, [r4, #0]
 80092e4:	6922      	ldr	r2, [r4, #16]
 80092e6:	1a98      	subs	r0, r3, r2
 80092e8:	6963      	ldr	r3, [r4, #20]
 80092ea:	b2f6      	uxtb	r6, r6
 80092ec:	4283      	cmp	r3, r0
 80092ee:	4637      	mov	r7, r6
 80092f0:	dc05      	bgt.n	80092fe <__swbuf_r+0x4e>
 80092f2:	4621      	mov	r1, r4
 80092f4:	4628      	mov	r0, r5
 80092f6:	f7ff fda7 	bl	8008e48 <_fflush_r>
 80092fa:	2800      	cmp	r0, #0
 80092fc:	d1ed      	bne.n	80092da <__swbuf_r+0x2a>
 80092fe:	68a3      	ldr	r3, [r4, #8]
 8009300:	3b01      	subs	r3, #1
 8009302:	60a3      	str	r3, [r4, #8]
 8009304:	6823      	ldr	r3, [r4, #0]
 8009306:	1c5a      	adds	r2, r3, #1
 8009308:	6022      	str	r2, [r4, #0]
 800930a:	701e      	strb	r6, [r3, #0]
 800930c:	6962      	ldr	r2, [r4, #20]
 800930e:	1c43      	adds	r3, r0, #1
 8009310:	429a      	cmp	r2, r3
 8009312:	d004      	beq.n	800931e <__swbuf_r+0x6e>
 8009314:	89a3      	ldrh	r3, [r4, #12]
 8009316:	07db      	lsls	r3, r3, #31
 8009318:	d5e1      	bpl.n	80092de <__swbuf_r+0x2e>
 800931a:	2e0a      	cmp	r6, #10
 800931c:	d1df      	bne.n	80092de <__swbuf_r+0x2e>
 800931e:	4621      	mov	r1, r4
 8009320:	4628      	mov	r0, r5
 8009322:	f7ff fd91 	bl	8008e48 <_fflush_r>
 8009326:	2800      	cmp	r0, #0
 8009328:	d0d9      	beq.n	80092de <__swbuf_r+0x2e>
 800932a:	e7d6      	b.n	80092da <__swbuf_r+0x2a>

0800932c <__swsetup_r>:
 800932c:	b538      	push	{r3, r4, r5, lr}
 800932e:	4b29      	ldr	r3, [pc, #164]	@ (80093d4 <__swsetup_r+0xa8>)
 8009330:	4605      	mov	r5, r0
 8009332:	6818      	ldr	r0, [r3, #0]
 8009334:	460c      	mov	r4, r1
 8009336:	b118      	cbz	r0, 8009340 <__swsetup_r+0x14>
 8009338:	6a03      	ldr	r3, [r0, #32]
 800933a:	b90b      	cbnz	r3, 8009340 <__swsetup_r+0x14>
 800933c:	f7fe f80a 	bl	8007354 <__sinit>
 8009340:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009344:	0719      	lsls	r1, r3, #28
 8009346:	d422      	bmi.n	800938e <__swsetup_r+0x62>
 8009348:	06da      	lsls	r2, r3, #27
 800934a:	d407      	bmi.n	800935c <__swsetup_r+0x30>
 800934c:	2209      	movs	r2, #9
 800934e:	602a      	str	r2, [r5, #0]
 8009350:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009354:	81a3      	strh	r3, [r4, #12]
 8009356:	f04f 30ff 	mov.w	r0, #4294967295
 800935a:	e033      	b.n	80093c4 <__swsetup_r+0x98>
 800935c:	0758      	lsls	r0, r3, #29
 800935e:	d512      	bpl.n	8009386 <__swsetup_r+0x5a>
 8009360:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009362:	b141      	cbz	r1, 8009376 <__swsetup_r+0x4a>
 8009364:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009368:	4299      	cmp	r1, r3
 800936a:	d002      	beq.n	8009372 <__swsetup_r+0x46>
 800936c:	4628      	mov	r0, r5
 800936e:	f7fe ff15 	bl	800819c <_free_r>
 8009372:	2300      	movs	r3, #0
 8009374:	6363      	str	r3, [r4, #52]	@ 0x34
 8009376:	89a3      	ldrh	r3, [r4, #12]
 8009378:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800937c:	81a3      	strh	r3, [r4, #12]
 800937e:	2300      	movs	r3, #0
 8009380:	6063      	str	r3, [r4, #4]
 8009382:	6923      	ldr	r3, [r4, #16]
 8009384:	6023      	str	r3, [r4, #0]
 8009386:	89a3      	ldrh	r3, [r4, #12]
 8009388:	f043 0308 	orr.w	r3, r3, #8
 800938c:	81a3      	strh	r3, [r4, #12]
 800938e:	6923      	ldr	r3, [r4, #16]
 8009390:	b94b      	cbnz	r3, 80093a6 <__swsetup_r+0x7a>
 8009392:	89a3      	ldrh	r3, [r4, #12]
 8009394:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009398:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800939c:	d003      	beq.n	80093a6 <__swsetup_r+0x7a>
 800939e:	4621      	mov	r1, r4
 80093a0:	4628      	mov	r0, r5
 80093a2:	f000 f883 	bl	80094ac <__smakebuf_r>
 80093a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80093aa:	f013 0201 	ands.w	r2, r3, #1
 80093ae:	d00a      	beq.n	80093c6 <__swsetup_r+0x9a>
 80093b0:	2200      	movs	r2, #0
 80093b2:	60a2      	str	r2, [r4, #8]
 80093b4:	6962      	ldr	r2, [r4, #20]
 80093b6:	4252      	negs	r2, r2
 80093b8:	61a2      	str	r2, [r4, #24]
 80093ba:	6922      	ldr	r2, [r4, #16]
 80093bc:	b942      	cbnz	r2, 80093d0 <__swsetup_r+0xa4>
 80093be:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80093c2:	d1c5      	bne.n	8009350 <__swsetup_r+0x24>
 80093c4:	bd38      	pop	{r3, r4, r5, pc}
 80093c6:	0799      	lsls	r1, r3, #30
 80093c8:	bf58      	it	pl
 80093ca:	6962      	ldrpl	r2, [r4, #20]
 80093cc:	60a2      	str	r2, [r4, #8]
 80093ce:	e7f4      	b.n	80093ba <__swsetup_r+0x8e>
 80093d0:	2000      	movs	r0, #0
 80093d2:	e7f7      	b.n	80093c4 <__swsetup_r+0x98>
 80093d4:	2400001c 	.word	0x2400001c

080093d8 <_raise_r>:
 80093d8:	291f      	cmp	r1, #31
 80093da:	b538      	push	{r3, r4, r5, lr}
 80093dc:	4605      	mov	r5, r0
 80093de:	460c      	mov	r4, r1
 80093e0:	d904      	bls.n	80093ec <_raise_r+0x14>
 80093e2:	2316      	movs	r3, #22
 80093e4:	6003      	str	r3, [r0, #0]
 80093e6:	f04f 30ff 	mov.w	r0, #4294967295
 80093ea:	bd38      	pop	{r3, r4, r5, pc}
 80093ec:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80093ee:	b112      	cbz	r2, 80093f6 <_raise_r+0x1e>
 80093f0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80093f4:	b94b      	cbnz	r3, 800940a <_raise_r+0x32>
 80093f6:	4628      	mov	r0, r5
 80093f8:	f000 f830 	bl	800945c <_getpid_r>
 80093fc:	4622      	mov	r2, r4
 80093fe:	4601      	mov	r1, r0
 8009400:	4628      	mov	r0, r5
 8009402:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009406:	f000 b817 	b.w	8009438 <_kill_r>
 800940a:	2b01      	cmp	r3, #1
 800940c:	d00a      	beq.n	8009424 <_raise_r+0x4c>
 800940e:	1c59      	adds	r1, r3, #1
 8009410:	d103      	bne.n	800941a <_raise_r+0x42>
 8009412:	2316      	movs	r3, #22
 8009414:	6003      	str	r3, [r0, #0]
 8009416:	2001      	movs	r0, #1
 8009418:	e7e7      	b.n	80093ea <_raise_r+0x12>
 800941a:	2100      	movs	r1, #0
 800941c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009420:	4620      	mov	r0, r4
 8009422:	4798      	blx	r3
 8009424:	2000      	movs	r0, #0
 8009426:	e7e0      	b.n	80093ea <_raise_r+0x12>

08009428 <raise>:
 8009428:	4b02      	ldr	r3, [pc, #8]	@ (8009434 <raise+0xc>)
 800942a:	4601      	mov	r1, r0
 800942c:	6818      	ldr	r0, [r3, #0]
 800942e:	f7ff bfd3 	b.w	80093d8 <_raise_r>
 8009432:	bf00      	nop
 8009434:	2400001c 	.word	0x2400001c

08009438 <_kill_r>:
 8009438:	b538      	push	{r3, r4, r5, lr}
 800943a:	4d07      	ldr	r5, [pc, #28]	@ (8009458 <_kill_r+0x20>)
 800943c:	2300      	movs	r3, #0
 800943e:	4604      	mov	r4, r0
 8009440:	4608      	mov	r0, r1
 8009442:	4611      	mov	r1, r2
 8009444:	602b      	str	r3, [r5, #0]
 8009446:	f7f7 fcff 	bl	8000e48 <_kill>
 800944a:	1c43      	adds	r3, r0, #1
 800944c:	d102      	bne.n	8009454 <_kill_r+0x1c>
 800944e:	682b      	ldr	r3, [r5, #0]
 8009450:	b103      	cbz	r3, 8009454 <_kill_r+0x1c>
 8009452:	6023      	str	r3, [r4, #0]
 8009454:	bd38      	pop	{r3, r4, r5, pc}
 8009456:	bf00      	nop
 8009458:	24000684 	.word	0x24000684

0800945c <_getpid_r>:
 800945c:	f7f7 bcec 	b.w	8000e38 <_getpid>

08009460 <__swhatbuf_r>:
 8009460:	b570      	push	{r4, r5, r6, lr}
 8009462:	460c      	mov	r4, r1
 8009464:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009468:	2900      	cmp	r1, #0
 800946a:	b096      	sub	sp, #88	@ 0x58
 800946c:	4615      	mov	r5, r2
 800946e:	461e      	mov	r6, r3
 8009470:	da0d      	bge.n	800948e <__swhatbuf_r+0x2e>
 8009472:	89a3      	ldrh	r3, [r4, #12]
 8009474:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009478:	f04f 0100 	mov.w	r1, #0
 800947c:	bf14      	ite	ne
 800947e:	2340      	movne	r3, #64	@ 0x40
 8009480:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009484:	2000      	movs	r0, #0
 8009486:	6031      	str	r1, [r6, #0]
 8009488:	602b      	str	r3, [r5, #0]
 800948a:	b016      	add	sp, #88	@ 0x58
 800948c:	bd70      	pop	{r4, r5, r6, pc}
 800948e:	466a      	mov	r2, sp
 8009490:	f000 f848 	bl	8009524 <_fstat_r>
 8009494:	2800      	cmp	r0, #0
 8009496:	dbec      	blt.n	8009472 <__swhatbuf_r+0x12>
 8009498:	9901      	ldr	r1, [sp, #4]
 800949a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800949e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80094a2:	4259      	negs	r1, r3
 80094a4:	4159      	adcs	r1, r3
 80094a6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80094aa:	e7eb      	b.n	8009484 <__swhatbuf_r+0x24>

080094ac <__smakebuf_r>:
 80094ac:	898b      	ldrh	r3, [r1, #12]
 80094ae:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80094b0:	079d      	lsls	r5, r3, #30
 80094b2:	4606      	mov	r6, r0
 80094b4:	460c      	mov	r4, r1
 80094b6:	d507      	bpl.n	80094c8 <__smakebuf_r+0x1c>
 80094b8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80094bc:	6023      	str	r3, [r4, #0]
 80094be:	6123      	str	r3, [r4, #16]
 80094c0:	2301      	movs	r3, #1
 80094c2:	6163      	str	r3, [r4, #20]
 80094c4:	b003      	add	sp, #12
 80094c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80094c8:	ab01      	add	r3, sp, #4
 80094ca:	466a      	mov	r2, sp
 80094cc:	f7ff ffc8 	bl	8009460 <__swhatbuf_r>
 80094d0:	9f00      	ldr	r7, [sp, #0]
 80094d2:	4605      	mov	r5, r0
 80094d4:	4639      	mov	r1, r7
 80094d6:	4630      	mov	r0, r6
 80094d8:	f7fe fed4 	bl	8008284 <_malloc_r>
 80094dc:	b948      	cbnz	r0, 80094f2 <__smakebuf_r+0x46>
 80094de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80094e2:	059a      	lsls	r2, r3, #22
 80094e4:	d4ee      	bmi.n	80094c4 <__smakebuf_r+0x18>
 80094e6:	f023 0303 	bic.w	r3, r3, #3
 80094ea:	f043 0302 	orr.w	r3, r3, #2
 80094ee:	81a3      	strh	r3, [r4, #12]
 80094f0:	e7e2      	b.n	80094b8 <__smakebuf_r+0xc>
 80094f2:	89a3      	ldrh	r3, [r4, #12]
 80094f4:	6020      	str	r0, [r4, #0]
 80094f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80094fa:	81a3      	strh	r3, [r4, #12]
 80094fc:	9b01      	ldr	r3, [sp, #4]
 80094fe:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009502:	b15b      	cbz	r3, 800951c <__smakebuf_r+0x70>
 8009504:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009508:	4630      	mov	r0, r6
 800950a:	f000 f81d 	bl	8009548 <_isatty_r>
 800950e:	b128      	cbz	r0, 800951c <__smakebuf_r+0x70>
 8009510:	89a3      	ldrh	r3, [r4, #12]
 8009512:	f023 0303 	bic.w	r3, r3, #3
 8009516:	f043 0301 	orr.w	r3, r3, #1
 800951a:	81a3      	strh	r3, [r4, #12]
 800951c:	89a3      	ldrh	r3, [r4, #12]
 800951e:	431d      	orrs	r5, r3
 8009520:	81a5      	strh	r5, [r4, #12]
 8009522:	e7cf      	b.n	80094c4 <__smakebuf_r+0x18>

08009524 <_fstat_r>:
 8009524:	b538      	push	{r3, r4, r5, lr}
 8009526:	4d07      	ldr	r5, [pc, #28]	@ (8009544 <_fstat_r+0x20>)
 8009528:	2300      	movs	r3, #0
 800952a:	4604      	mov	r4, r0
 800952c:	4608      	mov	r0, r1
 800952e:	4611      	mov	r1, r2
 8009530:	602b      	str	r3, [r5, #0]
 8009532:	f7f7 fce9 	bl	8000f08 <_fstat>
 8009536:	1c43      	adds	r3, r0, #1
 8009538:	d102      	bne.n	8009540 <_fstat_r+0x1c>
 800953a:	682b      	ldr	r3, [r5, #0]
 800953c:	b103      	cbz	r3, 8009540 <_fstat_r+0x1c>
 800953e:	6023      	str	r3, [r4, #0]
 8009540:	bd38      	pop	{r3, r4, r5, pc}
 8009542:	bf00      	nop
 8009544:	24000684 	.word	0x24000684

08009548 <_isatty_r>:
 8009548:	b538      	push	{r3, r4, r5, lr}
 800954a:	4d06      	ldr	r5, [pc, #24]	@ (8009564 <_isatty_r+0x1c>)
 800954c:	2300      	movs	r3, #0
 800954e:	4604      	mov	r4, r0
 8009550:	4608      	mov	r0, r1
 8009552:	602b      	str	r3, [r5, #0]
 8009554:	f7f7 fce8 	bl	8000f28 <_isatty>
 8009558:	1c43      	adds	r3, r0, #1
 800955a:	d102      	bne.n	8009562 <_isatty_r+0x1a>
 800955c:	682b      	ldr	r3, [r5, #0]
 800955e:	b103      	cbz	r3, 8009562 <_isatty_r+0x1a>
 8009560:	6023      	str	r3, [r4, #0]
 8009562:	bd38      	pop	{r3, r4, r5, pc}
 8009564:	24000684 	.word	0x24000684

08009568 <_init>:
 8009568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800956a:	bf00      	nop
 800956c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800956e:	bc08      	pop	{r3}
 8009570:	469e      	mov	lr, r3
 8009572:	4770      	bx	lr

08009574 <_fini>:
 8009574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009576:	bf00      	nop
 8009578:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800957a:	bc08      	pop	{r3}
 800957c:	469e      	mov	lr, r3
 800957e:	4770      	bx	lr
