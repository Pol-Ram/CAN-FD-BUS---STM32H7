
Tx_Floats.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d308  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000464  0800d5a8  0800d5a8  0000e5a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800da0c  0800da0c  0000ea0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800da14  0800da14  0000ea14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800da18  0800da18  0000ea18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000001dc  24000000  0800da1c  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000550  240001dc  0800dbf8  0000f1dc  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2400072c  0800dbf8  0000f72c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000f1dc  2**0
                  CONTENTS, READONLY
 10 .debug_info   000215cd  00000000  00000000  0000f20a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000336b  00000000  00000000  000307d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001b48  00000000  00000000  00033b48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 0000156c  00000000  00000000  00035690  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003c013  00000000  00000000  00036bfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00020aa7  00000000  00000000  00072c0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00187b6b  00000000  00000000  000936b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  0021b221  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00008808  00000000  00000000  0021b264  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000067  00000000  00000000  00223a6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001dc 	.word	0x240001dc
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800d590 	.word	0x0800d590

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001e0 	.word	0x240001e0
 80002dc:	0800d590 	.word	0x0800d590

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b988 	b.w	80006b8 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	468e      	mov	lr, r1
 80003c8:	4604      	mov	r4, r0
 80003ca:	4688      	mov	r8, r1
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d14a      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d962      	bls.n	800049c <__udivmoddi4+0xdc>
 80003d6:	fab2 f682 	clz	r6, r2
 80003da:	b14e      	cbz	r6, 80003f0 <__udivmoddi4+0x30>
 80003dc:	f1c6 0320 	rsb	r3, r6, #32
 80003e0:	fa01 f806 	lsl.w	r8, r1, r6
 80003e4:	fa20 f303 	lsr.w	r3, r0, r3
 80003e8:	40b7      	lsls	r7, r6
 80003ea:	ea43 0808 	orr.w	r8, r3, r8
 80003ee:	40b4      	lsls	r4, r6
 80003f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003f4:	fa1f fc87 	uxth.w	ip, r7
 80003f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80003fc:	0c23      	lsrs	r3, r4, #16
 80003fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000402:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000406:	fb01 f20c 	mul.w	r2, r1, ip
 800040a:	429a      	cmp	r2, r3
 800040c:	d909      	bls.n	8000422 <__udivmoddi4+0x62>
 800040e:	18fb      	adds	r3, r7, r3
 8000410:	f101 30ff 	add.w	r0, r1, #4294967295
 8000414:	f080 80ea 	bcs.w	80005ec <__udivmoddi4+0x22c>
 8000418:	429a      	cmp	r2, r3
 800041a:	f240 80e7 	bls.w	80005ec <__udivmoddi4+0x22c>
 800041e:	3902      	subs	r1, #2
 8000420:	443b      	add	r3, r7
 8000422:	1a9a      	subs	r2, r3, r2
 8000424:	b2a3      	uxth	r3, r4
 8000426:	fbb2 f0fe 	udiv	r0, r2, lr
 800042a:	fb0e 2210 	mls	r2, lr, r0, r2
 800042e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000432:	fb00 fc0c 	mul.w	ip, r0, ip
 8000436:	459c      	cmp	ip, r3
 8000438:	d909      	bls.n	800044e <__udivmoddi4+0x8e>
 800043a:	18fb      	adds	r3, r7, r3
 800043c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000440:	f080 80d6 	bcs.w	80005f0 <__udivmoddi4+0x230>
 8000444:	459c      	cmp	ip, r3
 8000446:	f240 80d3 	bls.w	80005f0 <__udivmoddi4+0x230>
 800044a:	443b      	add	r3, r7
 800044c:	3802      	subs	r0, #2
 800044e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000452:	eba3 030c 	sub.w	r3, r3, ip
 8000456:	2100      	movs	r1, #0
 8000458:	b11d      	cbz	r5, 8000462 <__udivmoddi4+0xa2>
 800045a:	40f3      	lsrs	r3, r6
 800045c:	2200      	movs	r2, #0
 800045e:	e9c5 3200 	strd	r3, r2, [r5]
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d905      	bls.n	8000476 <__udivmoddi4+0xb6>
 800046a:	b10d      	cbz	r5, 8000470 <__udivmoddi4+0xb0>
 800046c:	e9c5 0100 	strd	r0, r1, [r5]
 8000470:	2100      	movs	r1, #0
 8000472:	4608      	mov	r0, r1
 8000474:	e7f5      	b.n	8000462 <__udivmoddi4+0xa2>
 8000476:	fab3 f183 	clz	r1, r3
 800047a:	2900      	cmp	r1, #0
 800047c:	d146      	bne.n	800050c <__udivmoddi4+0x14c>
 800047e:	4573      	cmp	r3, lr
 8000480:	d302      	bcc.n	8000488 <__udivmoddi4+0xc8>
 8000482:	4282      	cmp	r2, r0
 8000484:	f200 8105 	bhi.w	8000692 <__udivmoddi4+0x2d2>
 8000488:	1a84      	subs	r4, r0, r2
 800048a:	eb6e 0203 	sbc.w	r2, lr, r3
 800048e:	2001      	movs	r0, #1
 8000490:	4690      	mov	r8, r2
 8000492:	2d00      	cmp	r5, #0
 8000494:	d0e5      	beq.n	8000462 <__udivmoddi4+0xa2>
 8000496:	e9c5 4800 	strd	r4, r8, [r5]
 800049a:	e7e2      	b.n	8000462 <__udivmoddi4+0xa2>
 800049c:	2a00      	cmp	r2, #0
 800049e:	f000 8090 	beq.w	80005c2 <__udivmoddi4+0x202>
 80004a2:	fab2 f682 	clz	r6, r2
 80004a6:	2e00      	cmp	r6, #0
 80004a8:	f040 80a4 	bne.w	80005f4 <__udivmoddi4+0x234>
 80004ac:	1a8a      	subs	r2, r1, r2
 80004ae:	0c03      	lsrs	r3, r0, #16
 80004b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004b4:	b280      	uxth	r0, r0
 80004b6:	b2bc      	uxth	r4, r7
 80004b8:	2101      	movs	r1, #1
 80004ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80004be:	fb0e 221c 	mls	r2, lr, ip, r2
 80004c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004c6:	fb04 f20c 	mul.w	r2, r4, ip
 80004ca:	429a      	cmp	r2, r3
 80004cc:	d907      	bls.n	80004de <__udivmoddi4+0x11e>
 80004ce:	18fb      	adds	r3, r7, r3
 80004d0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80004d4:	d202      	bcs.n	80004dc <__udivmoddi4+0x11c>
 80004d6:	429a      	cmp	r2, r3
 80004d8:	f200 80e0 	bhi.w	800069c <__udivmoddi4+0x2dc>
 80004dc:	46c4      	mov	ip, r8
 80004de:	1a9b      	subs	r3, r3, r2
 80004e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80004e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80004e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80004ec:	fb02 f404 	mul.w	r4, r2, r4
 80004f0:	429c      	cmp	r4, r3
 80004f2:	d907      	bls.n	8000504 <__udivmoddi4+0x144>
 80004f4:	18fb      	adds	r3, r7, r3
 80004f6:	f102 30ff 	add.w	r0, r2, #4294967295
 80004fa:	d202      	bcs.n	8000502 <__udivmoddi4+0x142>
 80004fc:	429c      	cmp	r4, r3
 80004fe:	f200 80ca 	bhi.w	8000696 <__udivmoddi4+0x2d6>
 8000502:	4602      	mov	r2, r0
 8000504:	1b1b      	subs	r3, r3, r4
 8000506:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800050a:	e7a5      	b.n	8000458 <__udivmoddi4+0x98>
 800050c:	f1c1 0620 	rsb	r6, r1, #32
 8000510:	408b      	lsls	r3, r1
 8000512:	fa22 f706 	lsr.w	r7, r2, r6
 8000516:	431f      	orrs	r7, r3
 8000518:	fa0e f401 	lsl.w	r4, lr, r1
 800051c:	fa20 f306 	lsr.w	r3, r0, r6
 8000520:	fa2e fe06 	lsr.w	lr, lr, r6
 8000524:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000528:	4323      	orrs	r3, r4
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	fa1f fc87 	uxth.w	ip, r7
 8000532:	fbbe f0f9 	udiv	r0, lr, r9
 8000536:	0c1c      	lsrs	r4, r3, #16
 8000538:	fb09 ee10 	mls	lr, r9, r0, lr
 800053c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000540:	fb00 fe0c 	mul.w	lr, r0, ip
 8000544:	45a6      	cmp	lr, r4
 8000546:	fa02 f201 	lsl.w	r2, r2, r1
 800054a:	d909      	bls.n	8000560 <__udivmoddi4+0x1a0>
 800054c:	193c      	adds	r4, r7, r4
 800054e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000552:	f080 809c 	bcs.w	800068e <__udivmoddi4+0x2ce>
 8000556:	45a6      	cmp	lr, r4
 8000558:	f240 8099 	bls.w	800068e <__udivmoddi4+0x2ce>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	eba4 040e 	sub.w	r4, r4, lr
 8000564:	fa1f fe83 	uxth.w	lr, r3
 8000568:	fbb4 f3f9 	udiv	r3, r4, r9
 800056c:	fb09 4413 	mls	r4, r9, r3, r4
 8000570:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000574:	fb03 fc0c 	mul.w	ip, r3, ip
 8000578:	45a4      	cmp	ip, r4
 800057a:	d908      	bls.n	800058e <__udivmoddi4+0x1ce>
 800057c:	193c      	adds	r4, r7, r4
 800057e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000582:	f080 8082 	bcs.w	800068a <__udivmoddi4+0x2ca>
 8000586:	45a4      	cmp	ip, r4
 8000588:	d97f      	bls.n	800068a <__udivmoddi4+0x2ca>
 800058a:	3b02      	subs	r3, #2
 800058c:	443c      	add	r4, r7
 800058e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000592:	eba4 040c 	sub.w	r4, r4, ip
 8000596:	fba0 ec02 	umull	lr, ip, r0, r2
 800059a:	4564      	cmp	r4, ip
 800059c:	4673      	mov	r3, lr
 800059e:	46e1      	mov	r9, ip
 80005a0:	d362      	bcc.n	8000668 <__udivmoddi4+0x2a8>
 80005a2:	d05f      	beq.n	8000664 <__udivmoddi4+0x2a4>
 80005a4:	b15d      	cbz	r5, 80005be <__udivmoddi4+0x1fe>
 80005a6:	ebb8 0203 	subs.w	r2, r8, r3
 80005aa:	eb64 0409 	sbc.w	r4, r4, r9
 80005ae:	fa04 f606 	lsl.w	r6, r4, r6
 80005b2:	fa22 f301 	lsr.w	r3, r2, r1
 80005b6:	431e      	orrs	r6, r3
 80005b8:	40cc      	lsrs	r4, r1
 80005ba:	e9c5 6400 	strd	r6, r4, [r5]
 80005be:	2100      	movs	r1, #0
 80005c0:	e74f      	b.n	8000462 <__udivmoddi4+0xa2>
 80005c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005c6:	0c01      	lsrs	r1, r0, #16
 80005c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005cc:	b280      	uxth	r0, r0
 80005ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005d2:	463b      	mov	r3, r7
 80005d4:	4638      	mov	r0, r7
 80005d6:	463c      	mov	r4, r7
 80005d8:	46b8      	mov	r8, r7
 80005da:	46be      	mov	lr, r7
 80005dc:	2620      	movs	r6, #32
 80005de:	fbb1 f1f7 	udiv	r1, r1, r7
 80005e2:	eba2 0208 	sub.w	r2, r2, r8
 80005e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005ea:	e766      	b.n	80004ba <__udivmoddi4+0xfa>
 80005ec:	4601      	mov	r1, r0
 80005ee:	e718      	b.n	8000422 <__udivmoddi4+0x62>
 80005f0:	4610      	mov	r0, r2
 80005f2:	e72c      	b.n	800044e <__udivmoddi4+0x8e>
 80005f4:	f1c6 0220 	rsb	r2, r6, #32
 80005f8:	fa2e f302 	lsr.w	r3, lr, r2
 80005fc:	40b7      	lsls	r7, r6
 80005fe:	40b1      	lsls	r1, r6
 8000600:	fa20 f202 	lsr.w	r2, r0, r2
 8000604:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000608:	430a      	orrs	r2, r1
 800060a:	fbb3 f8fe 	udiv	r8, r3, lr
 800060e:	b2bc      	uxth	r4, r7
 8000610:	fb0e 3318 	mls	r3, lr, r8, r3
 8000614:	0c11      	lsrs	r1, r2, #16
 8000616:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800061a:	fb08 f904 	mul.w	r9, r8, r4
 800061e:	40b0      	lsls	r0, r6
 8000620:	4589      	cmp	r9, r1
 8000622:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000626:	b280      	uxth	r0, r0
 8000628:	d93e      	bls.n	80006a8 <__udivmoddi4+0x2e8>
 800062a:	1879      	adds	r1, r7, r1
 800062c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000630:	d201      	bcs.n	8000636 <__udivmoddi4+0x276>
 8000632:	4589      	cmp	r9, r1
 8000634:	d81f      	bhi.n	8000676 <__udivmoddi4+0x2b6>
 8000636:	eba1 0109 	sub.w	r1, r1, r9
 800063a:	fbb1 f9fe 	udiv	r9, r1, lr
 800063e:	fb09 f804 	mul.w	r8, r9, r4
 8000642:	fb0e 1119 	mls	r1, lr, r9, r1
 8000646:	b292      	uxth	r2, r2
 8000648:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800064c:	4542      	cmp	r2, r8
 800064e:	d229      	bcs.n	80006a4 <__udivmoddi4+0x2e4>
 8000650:	18ba      	adds	r2, r7, r2
 8000652:	f109 31ff 	add.w	r1, r9, #4294967295
 8000656:	d2c4      	bcs.n	80005e2 <__udivmoddi4+0x222>
 8000658:	4542      	cmp	r2, r8
 800065a:	d2c2      	bcs.n	80005e2 <__udivmoddi4+0x222>
 800065c:	f1a9 0102 	sub.w	r1, r9, #2
 8000660:	443a      	add	r2, r7
 8000662:	e7be      	b.n	80005e2 <__udivmoddi4+0x222>
 8000664:	45f0      	cmp	r8, lr
 8000666:	d29d      	bcs.n	80005a4 <__udivmoddi4+0x1e4>
 8000668:	ebbe 0302 	subs.w	r3, lr, r2
 800066c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000670:	3801      	subs	r0, #1
 8000672:	46e1      	mov	r9, ip
 8000674:	e796      	b.n	80005a4 <__udivmoddi4+0x1e4>
 8000676:	eba7 0909 	sub.w	r9, r7, r9
 800067a:	4449      	add	r1, r9
 800067c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000680:	fbb1 f9fe 	udiv	r9, r1, lr
 8000684:	fb09 f804 	mul.w	r8, r9, r4
 8000688:	e7db      	b.n	8000642 <__udivmoddi4+0x282>
 800068a:	4673      	mov	r3, lr
 800068c:	e77f      	b.n	800058e <__udivmoddi4+0x1ce>
 800068e:	4650      	mov	r0, sl
 8000690:	e766      	b.n	8000560 <__udivmoddi4+0x1a0>
 8000692:	4608      	mov	r0, r1
 8000694:	e6fd      	b.n	8000492 <__udivmoddi4+0xd2>
 8000696:	443b      	add	r3, r7
 8000698:	3a02      	subs	r2, #2
 800069a:	e733      	b.n	8000504 <__udivmoddi4+0x144>
 800069c:	f1ac 0c02 	sub.w	ip, ip, #2
 80006a0:	443b      	add	r3, r7
 80006a2:	e71c      	b.n	80004de <__udivmoddi4+0x11e>
 80006a4:	4649      	mov	r1, r9
 80006a6:	e79c      	b.n	80005e2 <__udivmoddi4+0x222>
 80006a8:	eba1 0109 	sub.w	r1, r1, r9
 80006ac:	46c4      	mov	ip, r8
 80006ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80006b2:	fb09 f804 	mul.w	r8, r9, r4
 80006b6:	e7c4      	b.n	8000642 <__udivmoddi4+0x282>

080006b8 <__aeabi_idiv0>:
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop

080006bc <SendFloat>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void SendFloat(float value1,float value2,float value3,float value4,float value5,float value6,float value7)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b088      	sub	sp, #32
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	ed87 0a07 	vstr	s0, [r7, #28]
 80006c6:	edc7 0a06 	vstr	s1, [r7, #24]
 80006ca:	ed87 1a05 	vstr	s2, [r7, #20]
 80006ce:	edc7 1a04 	vstr	s3, [r7, #16]
 80006d2:	ed87 2a03 	vstr	s4, [r7, #12]
 80006d6:	edc7 2a02 	vstr	s5, [r7, #8]
 80006da:	ed87 3a01 	vstr	s6, [r7, #4]
    // Copiar los floats al buffer
    memcpy(&TxData[0],  &value1, sizeof(float));
 80006de:	69fb      	ldr	r3, [r7, #28]
 80006e0:	4a13      	ldr	r2, [pc, #76]	@ (8000730 <SendFloat+0x74>)
 80006e2:	6013      	str	r3, [r2, #0]
    memcpy(&TxData[4],  &value2, sizeof(float));
 80006e4:	69bb      	ldr	r3, [r7, #24]
 80006e6:	4a12      	ldr	r2, [pc, #72]	@ (8000730 <SendFloat+0x74>)
 80006e8:	6053      	str	r3, [r2, #4]
    memcpy(&TxData[8],  &value3, sizeof(float));
 80006ea:	697b      	ldr	r3, [r7, #20]
 80006ec:	4a10      	ldr	r2, [pc, #64]	@ (8000730 <SendFloat+0x74>)
 80006ee:	6093      	str	r3, [r2, #8]
    memcpy(&TxData[12], &value4, sizeof(float));
 80006f0:	693b      	ldr	r3, [r7, #16]
 80006f2:	4a0f      	ldr	r2, [pc, #60]	@ (8000730 <SendFloat+0x74>)
 80006f4:	60d3      	str	r3, [r2, #12]
    memcpy(&TxData[16], &value5, sizeof(float));
 80006f6:	68fb      	ldr	r3, [r7, #12]
 80006f8:	4a0d      	ldr	r2, [pc, #52]	@ (8000730 <SendFloat+0x74>)
 80006fa:	6113      	str	r3, [r2, #16]
    memcpy(&TxData[20], &value6, sizeof(float));
 80006fc:	68bb      	ldr	r3, [r7, #8]
 80006fe:	4a0c      	ldr	r2, [pc, #48]	@ (8000730 <SendFloat+0x74>)
 8000700:	6153      	str	r3, [r2, #20]
    memcpy(&TxData[24], &value7, sizeof(float));
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	4a0a      	ldr	r2, [pc, #40]	@ (8000730 <SendFloat+0x74>)
 8000706:	6193      	str	r3, [r2, #24]
    //memcpy(&TxData[28], &value8, sizeof(float));

    // Configurar el header (asegúrate de que esto ya está inicializado)
    TxHeader.DataLength = FDCAN_DLC_BYTES_32;  // 12 bytes
 8000708:	4b0a      	ldr	r3, [pc, #40]	@ (8000734 <SendFloat+0x78>)
 800070a:	220d      	movs	r2, #13
 800070c:	60da      	str	r2, [r3, #12]
    TxHeader.IdType = FDCAN_STANDARD_ID;       // ID estándar
 800070e:	4b09      	ldr	r3, [pc, #36]	@ (8000734 <SendFloat+0x78>)
 8000710:	2200      	movs	r2, #0
 8000712:	605a      	str	r2, [r3, #4]

    // Enviar
    if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData) != HAL_OK) {
 8000714:	4a06      	ldr	r2, [pc, #24]	@ (8000730 <SendFloat+0x74>)
 8000716:	4907      	ldr	r1, [pc, #28]	@ (8000734 <SendFloat+0x78>)
 8000718:	4807      	ldr	r0, [pc, #28]	@ (8000738 <SendFloat+0x7c>)
 800071a:	f003 fae2 	bl	8003ce2 <HAL_FDCAN_AddMessageToTxFifoQ>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <SendFloat+0x6c>
        // Manejar error de transmisión
        Error_Handler();
 8000724:	f000 fe6e 	bl	8001404 <Error_Handler>
    }
}
 8000728:	bf00      	nop
 800072a:	3720      	adds	r7, #32
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}
 8000730:	2400037c 	.word	0x2400037c
 8000734:	24000358 	.word	0x24000358
 8000738:	24000400 	.word	0x24000400

0800073c <HAL_GPIO_EXTI_Callback>:



// ***** CODE Interruption for RPM Sensor
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b084      	sub	sp, #16
 8000740:	af00      	add	r7, sp, #0
 8000742:	4603      	mov	r3, r0
 8000744:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == rpm_in_Pin)
 8000746:	88fb      	ldrh	r3, [r7, #6]
 8000748:	2b80      	cmp	r3, #128	@ 0x80
 800074a:	d111      	bne.n	8000770 <HAL_GPIO_EXTI_Callback+0x34>
    {
        uint32_t now = HAL_GetTick();
 800074c:	f001 fac6 	bl	8001cdc <HAL_GetTick>
 8000750:	60f8      	str	r0, [r7, #12]
        if (now - last_interrupt_time > debounce_ms)
 8000752:	4b09      	ldr	r3, [pc, #36]	@ (8000778 <HAL_GPIO_EXTI_Callback+0x3c>)
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	68fa      	ldr	r2, [r7, #12]
 8000758:	1ad3      	subs	r3, r2, r3
 800075a:	220a      	movs	r2, #10
 800075c:	4293      	cmp	r3, r2
 800075e:	d907      	bls.n	8000770 <HAL_GPIO_EXTI_Callback+0x34>
        {
            pulse_count++;
 8000760:	4b06      	ldr	r3, [pc, #24]	@ (800077c <HAL_GPIO_EXTI_Callback+0x40>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	3301      	adds	r3, #1
 8000766:	4a05      	ldr	r2, [pc, #20]	@ (800077c <HAL_GPIO_EXTI_Callback+0x40>)
 8000768:	6013      	str	r3, [r2, #0]
            last_interrupt_time = now;
 800076a:	4a03      	ldr	r2, [pc, #12]	@ (8000778 <HAL_GPIO_EXTI_Callback+0x3c>)
 800076c:	68fb      	ldr	r3, [r7, #12]
 800076e:	6013      	str	r3, [r2, #0]
        }
    }
}
 8000770:	bf00      	nop
 8000772:	3710      	adds	r7, #16
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}
 8000778:	24000228 	.word	0x24000228
 800077c:	2400021c 	.word	0x2400021c

08000780 <delay>:


// ***** CODE for Sensor DHT-11 Temperature Humidity Sensor

void delay (uint16_t delay)
{
 8000780:	b480      	push	{r7}
 8000782:	b083      	sub	sp, #12
 8000784:	af00      	add	r7, sp, #0
 8000786:	4603      	mov	r3, r0
 8000788:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim6,0);
 800078a:	4b09      	ldr	r3, [pc, #36]	@ (80007b0 <delay+0x30>)
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	2200      	movs	r2, #0
 8000790:	625a      	str	r2, [r3, #36]	@ 0x24
	while (__HAL_TIM_GET_COUNTER(&htim6) < delay);
 8000792:	bf00      	nop
 8000794:	4b06      	ldr	r3, [pc, #24]	@ (80007b0 <delay+0x30>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800079a:	88fb      	ldrh	r3, [r7, #6]
 800079c:	429a      	cmp	r2, r3
 800079e:	d3f9      	bcc.n	8000794 <delay+0x14>
}
 80007a0:	bf00      	nop
 80007a2:	bf00      	nop
 80007a4:	370c      	adds	r7, #12
 80007a6:	46bd      	mov	sp, r7
 80007a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ac:	4770      	bx	lr
 80007ae:	bf00      	nop
 80007b0:	240004f4 	.word	0x240004f4

080007b4 <Set_Pin_Output>:
uint8_t Presence = 0;
void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b088      	sub	sp, #32
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
 80007bc:	460b      	mov	r3, r1
 80007be:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c0:	f107 030c 	add.w	r3, r7, #12
 80007c4:	2200      	movs	r2, #0
 80007c6:	601a      	str	r2, [r3, #0]
 80007c8:	605a      	str	r2, [r3, #4]
 80007ca:	609a      	str	r2, [r3, #8]
 80007cc:	60da      	str	r2, [r3, #12]
 80007ce:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 80007d0:	887b      	ldrh	r3, [r7, #2]
 80007d2:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007d4:	2301      	movs	r3, #1
 80007d6:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007d8:	2300      	movs	r3, #0
 80007da:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80007dc:	f107 030c 	add.w	r3, r7, #12
 80007e0:	4619      	mov	r1, r3
 80007e2:	6878      	ldr	r0, [r7, #4]
 80007e4:	f004 f86a 	bl	80048bc <HAL_GPIO_Init>
}
 80007e8:	bf00      	nop
 80007ea:	3720      	adds	r7, #32
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}

080007f0 <Set_Pin_Input>:
void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b088      	sub	sp, #32
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
 80007f8:	460b      	mov	r3, r1
 80007fa:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007fc:	f107 030c 	add.w	r3, r7, #12
 8000800:	2200      	movs	r2, #0
 8000802:	601a      	str	r2, [r3, #0]
 8000804:	605a      	str	r2, [r3, #4]
 8000806:	609a      	str	r2, [r3, #8]
 8000808:	60da      	str	r2, [r3, #12]
 800080a:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 800080c:	887b      	ldrh	r3, [r7, #2]
 800080e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000810:	2300      	movs	r3, #0
 8000812:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000814:	2300      	movs	r3, #0
 8000816:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000818:	f107 030c 	add.w	r3, r7, #12
 800081c:	4619      	mov	r1, r3
 800081e:	6878      	ldr	r0, [r7, #4]
 8000820:	f004 f84c 	bl	80048bc <HAL_GPIO_Init>
}
 8000824:	bf00      	nop
 8000826:	3720      	adds	r7, #32
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}

0800082c <DHT_Start>:

void DHT_Start (void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0
	Set_Pin_Output (DHT_PORT, DHT_PIN);  // set the pin as output
 8000830:	2108      	movs	r1, #8
 8000832:	480d      	ldr	r0, [pc, #52]	@ (8000868 <DHT_Start+0x3c>)
 8000834:	f7ff ffbe 	bl	80007b4 <Set_Pin_Output>
	HAL_GPIO_WritePin (DHT_PORT, DHT_PIN, 0);   // pull the pin low
 8000838:	2200      	movs	r2, #0
 800083a:	2108      	movs	r1, #8
 800083c:	480a      	ldr	r0, [pc, #40]	@ (8000868 <DHT_Start+0x3c>)
 800083e:	f004 fa05 	bl	8004c4c <HAL_GPIO_WritePin>


	delay (18000);   // wait for 18ms
 8000842:	f244 6050 	movw	r0, #18000	@ 0x4650
 8000846:	f7ff ff9b 	bl	8000780 <delay>

    HAL_GPIO_WritePin (DHT_PORT, DHT_PIN, 1);   // pull the pin high
 800084a:	2201      	movs	r2, #1
 800084c:	2108      	movs	r1, #8
 800084e:	4806      	ldr	r0, [pc, #24]	@ (8000868 <DHT_Start+0x3c>)
 8000850:	f004 f9fc 	bl	8004c4c <HAL_GPIO_WritePin>
    delay (20);   // wait for 30us
 8000854:	2014      	movs	r0, #20
 8000856:	f7ff ff93 	bl	8000780 <delay>
	Set_Pin_Input(DHT_PORT, DHT_PIN);    // set as input
 800085a:	2108      	movs	r1, #8
 800085c:	4802      	ldr	r0, [pc, #8]	@ (8000868 <DHT_Start+0x3c>)
 800085e:	f7ff ffc7 	bl	80007f0 <Set_Pin_Input>
}
 8000862:	bf00      	nop
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	58020000 	.word	0x58020000

0800086c <DHT_Check_Response>:

uint8_t DHT_Check_Response (void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b082      	sub	sp, #8
 8000870:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 8000872:	2300      	movs	r3, #0
 8000874:	71fb      	strb	r3, [r7, #7]
	delay (40);
 8000876:	2028      	movs	r0, #40	@ 0x28
 8000878:	f7ff ff82 	bl	8000780 <delay>
	if (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)))
 800087c:	2108      	movs	r1, #8
 800087e:	4811      	ldr	r0, [pc, #68]	@ (80008c4 <DHT_Check_Response+0x58>)
 8000880:	f004 f9cc 	bl	8004c1c <HAL_GPIO_ReadPin>
 8000884:	4603      	mov	r3, r0
 8000886:	2b00      	cmp	r3, #0
 8000888:	d10e      	bne.n	80008a8 <DHT_Check_Response+0x3c>
	{
		delay (80);
 800088a:	2050      	movs	r0, #80	@ 0x50
 800088c:	f7ff ff78 	bl	8000780 <delay>
		if ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN))) Response = 1;
 8000890:	2108      	movs	r1, #8
 8000892:	480c      	ldr	r0, [pc, #48]	@ (80008c4 <DHT_Check_Response+0x58>)
 8000894:	f004 f9c2 	bl	8004c1c <HAL_GPIO_ReadPin>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d002      	beq.n	80008a4 <DHT_Check_Response+0x38>
 800089e:	2301      	movs	r3, #1
 80008a0:	71fb      	strb	r3, [r7, #7]
 80008a2:	e001      	b.n	80008a8 <DHT_Check_Response+0x3c>
		else Response = -1;
 80008a4:	23ff      	movs	r3, #255	@ 0xff
 80008a6:	71fb      	strb	r3, [r7, #7]
	}
	while ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));   // wait for the pin to go low
 80008a8:	bf00      	nop
 80008aa:	2108      	movs	r1, #8
 80008ac:	4805      	ldr	r0, [pc, #20]	@ (80008c4 <DHT_Check_Response+0x58>)
 80008ae:	f004 f9b5 	bl	8004c1c <HAL_GPIO_ReadPin>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d1f8      	bne.n	80008aa <DHT_Check_Response+0x3e>

	return Response;
 80008b8:	79fb      	ldrb	r3, [r7, #7]
}
 80008ba:	4618      	mov	r0, r3
 80008bc:	3708      	adds	r7, #8
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	58020000 	.word	0x58020000

080008c8 <DHT_Read>:

uint8_t DHT_Read (void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b082      	sub	sp, #8
 80008cc:	af00      	add	r7, sp, #0
    uint8_t i = 0, j = 0;
 80008ce:	2300      	movs	r3, #0
 80008d0:	71fb      	strb	r3, [r7, #7]
 80008d2:	2300      	movs	r3, #0
 80008d4:	71bb      	strb	r3, [r7, #6]
    for (j = 0; j < 8; j++)
 80008d6:	2300      	movs	r3, #0
 80008d8:	71bb      	strb	r3, [r7, #6]
 80008da:	e047      	b.n	800096c <DHT_Read+0xa4>
    {
        uint32_t timeout = 0;
 80008dc:	2300      	movs	r3, #0
 80008de:	603b      	str	r3, [r7, #0]
        while (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)) && timeout++ < 1000);
 80008e0:	bf00      	nop
 80008e2:	2108      	movs	r1, #8
 80008e4:	4825      	ldr	r0, [pc, #148]	@ (800097c <DHT_Read+0xb4>)
 80008e6:	f004 f999 	bl	8004c1c <HAL_GPIO_ReadPin>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d105      	bne.n	80008fc <DHT_Read+0x34>
 80008f0:	683b      	ldr	r3, [r7, #0]
 80008f2:	1c5a      	adds	r2, r3, #1
 80008f4:	603a      	str	r2, [r7, #0]
 80008f6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80008fa:	d3f2      	bcc.n	80008e2 <DHT_Read+0x1a>
        delay (40);
 80008fc:	2028      	movs	r0, #40	@ 0x28
 80008fe:	f7ff ff3f 	bl	8000780 <delay>
        if (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)))
 8000902:	2108      	movs	r1, #8
 8000904:	481d      	ldr	r0, [pc, #116]	@ (800097c <DHT_Read+0xb4>)
 8000906:	f004 f989 	bl	8004c1c <HAL_GPIO_ReadPin>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d10e      	bne.n	800092e <DHT_Read+0x66>
        {
            i &= ~(1 << (7 - j)); // Escribe 0 en el bit
 8000910:	79bb      	ldrb	r3, [r7, #6]
 8000912:	f1c3 0307 	rsb	r3, r3, #7
 8000916:	2201      	movs	r2, #1
 8000918:	fa02 f303 	lsl.w	r3, r2, r3
 800091c:	b25b      	sxtb	r3, r3
 800091e:	43db      	mvns	r3, r3
 8000920:	b25a      	sxtb	r2, r3
 8000922:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000926:	4013      	ands	r3, r2
 8000928:	b25b      	sxtb	r3, r3
 800092a:	71fb      	strb	r3, [r7, #7]
 800092c:	e00b      	b.n	8000946 <DHT_Read+0x7e>
        }
        else {
            i |= (1 << (7 - j));  // Escribe 1 en el bit
 800092e:	79bb      	ldrb	r3, [r7, #6]
 8000930:	f1c3 0307 	rsb	r3, r3, #7
 8000934:	2201      	movs	r2, #1
 8000936:	fa02 f303 	lsl.w	r3, r2, r3
 800093a:	b25a      	sxtb	r2, r3
 800093c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000940:	4313      	orrs	r3, r2
 8000942:	b25b      	sxtb	r3, r3
 8000944:	71fb      	strb	r3, [r7, #7]
        }

        timeout = 0;
 8000946:	2300      	movs	r3, #0
 8000948:	603b      	str	r3, [r7, #0]
        while ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)) && timeout++ < 1000);
 800094a:	bf00      	nop
 800094c:	2108      	movs	r1, #8
 800094e:	480b      	ldr	r0, [pc, #44]	@ (800097c <DHT_Read+0xb4>)
 8000950:	f004 f964 	bl	8004c1c <HAL_GPIO_ReadPin>
 8000954:	4603      	mov	r3, r0
 8000956:	2b00      	cmp	r3, #0
 8000958:	d005      	beq.n	8000966 <DHT_Read+0x9e>
 800095a:	683b      	ldr	r3, [r7, #0]
 800095c:	1c5a      	adds	r2, r3, #1
 800095e:	603a      	str	r2, [r7, #0]
 8000960:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000964:	d3f2      	bcc.n	800094c <DHT_Read+0x84>
    for (j = 0; j < 8; j++)
 8000966:	79bb      	ldrb	r3, [r7, #6]
 8000968:	3301      	adds	r3, #1
 800096a:	71bb      	strb	r3, [r7, #6]
 800096c:	79bb      	ldrb	r3, [r7, #6]
 800096e:	2b07      	cmp	r3, #7
 8000970:	d9b4      	bls.n	80008dc <DHT_Read+0x14>
    }
    return i;
 8000972:	79fb      	ldrb	r3, [r7, #7]
}
 8000974:	4618      	mov	r0, r3
 8000976:	3708      	adds	r7, #8
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}
 800097c:	58020000 	.word	0x58020000

08000980 <DHT_GetData>:

void DHT_GetData (DHT_DataTypedef *DHT_Data)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b082      	sub	sp, #8
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
    DHT_Start ();
 8000988:	f7ff ff50 	bl	800082c <DHT_Start>
	Presence = DHT_Check_Response ();
 800098c:	f7ff ff6e 	bl	800086c <DHT_Check_Response>
 8000990:	4603      	mov	r3, r0
 8000992:	461a      	mov	r2, r3
 8000994:	4b23      	ldr	r3, [pc, #140]	@ (8000a24 <DHT_GetData+0xa4>)
 8000996:	701a      	strb	r2, [r3, #0]
	Rh_byte1 = DHT_Read ();
 8000998:	f7ff ff96 	bl	80008c8 <DHT_Read>
 800099c:	4603      	mov	r3, r0
 800099e:	461a      	mov	r2, r3
 80009a0:	4b21      	ldr	r3, [pc, #132]	@ (8000a28 <DHT_GetData+0xa8>)
 80009a2:	701a      	strb	r2, [r3, #0]
	Rh_byte2 = DHT_Read ();
 80009a4:	f7ff ff90 	bl	80008c8 <DHT_Read>
 80009a8:	4603      	mov	r3, r0
 80009aa:	461a      	mov	r2, r3
 80009ac:	4b1f      	ldr	r3, [pc, #124]	@ (8000a2c <DHT_GetData+0xac>)
 80009ae:	701a      	strb	r2, [r3, #0]
	Temp_byte1 = DHT_Read ();
 80009b0:	f7ff ff8a 	bl	80008c8 <DHT_Read>
 80009b4:	4603      	mov	r3, r0
 80009b6:	461a      	mov	r2, r3
 80009b8:	4b1d      	ldr	r3, [pc, #116]	@ (8000a30 <DHT_GetData+0xb0>)
 80009ba:	701a      	strb	r2, [r3, #0]
	Temp_byte2 = DHT_Read ();
 80009bc:	f7ff ff84 	bl	80008c8 <DHT_Read>
 80009c0:	4603      	mov	r3, r0
 80009c2:	461a      	mov	r2, r3
 80009c4:	4b1b      	ldr	r3, [pc, #108]	@ (8000a34 <DHT_GetData+0xb4>)
 80009c6:	701a      	strb	r2, [r3, #0]
	SUM = DHT_Read();
 80009c8:	f7ff ff7e 	bl	80008c8 <DHT_Read>
 80009cc:	4603      	mov	r3, r0
 80009ce:	461a      	mov	r2, r3
 80009d0:	4b19      	ldr	r3, [pc, #100]	@ (8000a38 <DHT_GetData+0xb8>)
 80009d2:	801a      	strh	r2, [r3, #0]

	if (SUM == (Rh_byte1+Rh_byte2+Temp_byte1+Temp_byte2))
 80009d4:	4b18      	ldr	r3, [pc, #96]	@ (8000a38 <DHT_GetData+0xb8>)
 80009d6:	881b      	ldrh	r3, [r3, #0]
 80009d8:	4619      	mov	r1, r3
 80009da:	4b13      	ldr	r3, [pc, #76]	@ (8000a28 <DHT_GetData+0xa8>)
 80009dc:	781b      	ldrb	r3, [r3, #0]
 80009de:	461a      	mov	r2, r3
 80009e0:	4b12      	ldr	r3, [pc, #72]	@ (8000a2c <DHT_GetData+0xac>)
 80009e2:	781b      	ldrb	r3, [r3, #0]
 80009e4:	4413      	add	r3, r2
 80009e6:	4a12      	ldr	r2, [pc, #72]	@ (8000a30 <DHT_GetData+0xb0>)
 80009e8:	7812      	ldrb	r2, [r2, #0]
 80009ea:	4413      	add	r3, r2
 80009ec:	4a11      	ldr	r2, [pc, #68]	@ (8000a34 <DHT_GetData+0xb4>)
 80009ee:	7812      	ldrb	r2, [r2, #0]
 80009f0:	4413      	add	r3, r2
 80009f2:	4299      	cmp	r1, r3
 80009f4:	d111      	bne.n	8000a1a <DHT_GetData+0x9a>
	{
		DHT_Data->Temperature = Temp_byte1;
 80009f6:	4b0e      	ldr	r3, [pc, #56]	@ (8000a30 <DHT_GetData+0xb0>)
 80009f8:	781b      	ldrb	r3, [r3, #0]
 80009fa:	ee07 3a90 	vmov	s15, r3
 80009fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	edc3 7a00 	vstr	s15, [r3]
		DHT_Data->Humidity = Rh_byte1;
 8000a08:	4b07      	ldr	r3, [pc, #28]	@ (8000a28 <DHT_GetData+0xa8>)
 8000a0a:	781b      	ldrb	r3, [r3, #0]
 8000a0c:	ee07 3a90 	vmov	s15, r3
 8000a10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	edc3 7a01 	vstr	s15, [r3, #4]

	}
}
 8000a1a:	bf00      	nop
 8000a1c:	3708      	adds	r7, #8
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	240005d4 	.word	0x240005d4
 8000a28:	24000204 	.word	0x24000204
 8000a2c:	24000205 	.word	0x24000205
 8000a30:	24000206 	.word	0x24000206
 8000a34:	24000207 	.word	0x24000207
 8000a38:	24000208 	.word	0x24000208

08000a3c <read_register>:


// ***** CODE for Acceleration Sensor
uint8_t read_register(uint8_t reg) {
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b088      	sub	sp, #32
 8000a40:	af04      	add	r7, sp, #16
 8000a42:	4603      	mov	r3, r0
 8000a44:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    HAL_I2C_Mem_Read(&hi2c1, MMA8451_ADDR, reg, 1, &value, 1, HAL_MAX_DELAY);
 8000a46:	79fb      	ldrb	r3, [r7, #7]
 8000a48:	b29a      	uxth	r2, r3
 8000a4a:	f04f 33ff 	mov.w	r3, #4294967295
 8000a4e:	9302      	str	r3, [sp, #8]
 8000a50:	2301      	movs	r3, #1
 8000a52:	9301      	str	r3, [sp, #4]
 8000a54:	f107 030f 	add.w	r3, r7, #15
 8000a58:	9300      	str	r3, [sp, #0]
 8000a5a:	2301      	movs	r3, #1
 8000a5c:	213a      	movs	r1, #58	@ 0x3a
 8000a5e:	4804      	ldr	r0, [pc, #16]	@ (8000a70 <read_register+0x34>)
 8000a60:	f004 fad8 	bl	8005014 <HAL_I2C_Mem_Read>
    return value;
 8000a64:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a66:	4618      	mov	r0, r3
 8000a68:	3710      	adds	r7, #16
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	240004a0 	.word	0x240004a0

08000a74 <write_register>:

void write_register(uint8_t reg, uint8_t value) {
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b086      	sub	sp, #24
 8000a78:	af04      	add	r7, sp, #16
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	460a      	mov	r2, r1
 8000a7e:	71fb      	strb	r3, [r7, #7]
 8000a80:	4613      	mov	r3, r2
 8000a82:	71bb      	strb	r3, [r7, #6]
    HAL_I2C_Mem_Write(&hi2c1, MMA8451_ADDR, reg, 1, &value, 1, HAL_MAX_DELAY);
 8000a84:	79fb      	ldrb	r3, [r7, #7]
 8000a86:	b29a      	uxth	r2, r3
 8000a88:	f04f 33ff 	mov.w	r3, #4294967295
 8000a8c:	9302      	str	r3, [sp, #8]
 8000a8e:	2301      	movs	r3, #1
 8000a90:	9301      	str	r3, [sp, #4]
 8000a92:	1dbb      	adds	r3, r7, #6
 8000a94:	9300      	str	r3, [sp, #0]
 8000a96:	2301      	movs	r3, #1
 8000a98:	213a      	movs	r1, #58	@ 0x3a
 8000a9a:	4803      	ldr	r0, [pc, #12]	@ (8000aa8 <write_register+0x34>)
 8000a9c:	f004 f9a6 	bl	8004dec <HAL_I2C_Mem_Write>
}
 8000aa0:	bf00      	nop
 8000aa2:	3708      	adds	r7, #8
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	240004a0 	.word	0x240004a0

08000aac <convert_accel>:

int16_t convert_accel(uint8_t msb, uint8_t lsb) {
 8000aac:	b480      	push	{r7}
 8000aae:	b085      	sub	sp, #20
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	460a      	mov	r2, r1
 8000ab6:	71fb      	strb	r3, [r7, #7]
 8000ab8:	4613      	mov	r3, r2
 8000aba:	71bb      	strb	r3, [r7, #6]
    int16_t value = (msb << 8) | lsb;
 8000abc:	79fb      	ldrb	r3, [r7, #7]
 8000abe:	b21b      	sxth	r3, r3
 8000ac0:	021b      	lsls	r3, r3, #8
 8000ac2:	b21a      	sxth	r2, r3
 8000ac4:	79bb      	ldrb	r3, [r7, #6]
 8000ac6:	b21b      	sxth	r3, r3
 8000ac8:	4313      	orrs	r3, r2
 8000aca:	81fb      	strh	r3, [r7, #14]
    value = value >> 2;
 8000acc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000ad0:	109b      	asrs	r3, r3, #2
 8000ad2:	81fb      	strh	r3, [r7, #14]
    if (value & (1 << 13)) {
 8000ad4:	89fb      	ldrh	r3, [r7, #14]
 8000ad6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d005      	beq.n	8000aea <convert_accel+0x3e>
        value |= 0xC000;
 8000ade:	89fb      	ldrh	r3, [r7, #14]
 8000ae0:	ea6f 4383 	mvn.w	r3, r3, lsl #18
 8000ae4:	ea6f 4393 	mvn.w	r3, r3, lsr #18
 8000ae8:	81fb      	strh	r3, [r7, #14]
    }
    return value;
 8000aea:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8000aee:	4618      	mov	r0, r3
 8000af0:	3714      	adds	r7, #20
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr
	...

08000afc <read_accel>:

void read_accel(int16_t *x, int16_t *y, int16_t *z) {
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b08a      	sub	sp, #40	@ 0x28
 8000b00:	af04      	add	r7, sp, #16
 8000b02:	60f8      	str	r0, [r7, #12]
 8000b04:	60b9      	str	r1, [r7, #8]
 8000b06:	607a      	str	r2, [r7, #4]
    uint8_t data[6];
    HAL_I2C_Mem_Read(&hi2c1, MMA8451_ADDR, OUT_X_MSB, 1, data, 6, HAL_MAX_DELAY);
 8000b08:	f04f 33ff 	mov.w	r3, #4294967295
 8000b0c:	9302      	str	r3, [sp, #8]
 8000b0e:	2306      	movs	r3, #6
 8000b10:	9301      	str	r3, [sp, #4]
 8000b12:	f107 0310 	add.w	r3, r7, #16
 8000b16:	9300      	str	r3, [sp, #0]
 8000b18:	2301      	movs	r3, #1
 8000b1a:	2201      	movs	r2, #1
 8000b1c:	213a      	movs	r1, #58	@ 0x3a
 8000b1e:	4812      	ldr	r0, [pc, #72]	@ (8000b68 <read_accel+0x6c>)
 8000b20:	f004 fa78 	bl	8005014 <HAL_I2C_Mem_Read>

    *x = convert_accel(data[0], data[1]);
 8000b24:	7c3b      	ldrb	r3, [r7, #16]
 8000b26:	7c7a      	ldrb	r2, [r7, #17]
 8000b28:	4611      	mov	r1, r2
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	f7ff ffbe 	bl	8000aac <convert_accel>
 8000b30:	4603      	mov	r3, r0
 8000b32:	461a      	mov	r2, r3
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	801a      	strh	r2, [r3, #0]
    *y = convert_accel(data[2], data[3]);
 8000b38:	7cbb      	ldrb	r3, [r7, #18]
 8000b3a:	7cfa      	ldrb	r2, [r7, #19]
 8000b3c:	4611      	mov	r1, r2
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f7ff ffb4 	bl	8000aac <convert_accel>
 8000b44:	4603      	mov	r3, r0
 8000b46:	461a      	mov	r2, r3
 8000b48:	68bb      	ldr	r3, [r7, #8]
 8000b4a:	801a      	strh	r2, [r3, #0]
    *z = convert_accel(data[4], data[5]);
 8000b4c:	7d3b      	ldrb	r3, [r7, #20]
 8000b4e:	7d7a      	ldrb	r2, [r7, #21]
 8000b50:	4611      	mov	r1, r2
 8000b52:	4618      	mov	r0, r3
 8000b54:	f7ff ffaa 	bl	8000aac <convert_accel>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	461a      	mov	r2, r3
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	801a      	strh	r2, [r3, #0]
}
 8000b60:	bf00      	nop
 8000b62:	3718      	adds	r7, #24
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	240004a0 	.word	0x240004a0
 8000b6c:	00000000 	.word	0x00000000

08000b70 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b096      	sub	sp, #88	@ 0x58
 8000b74:	af0e      	add	r7, sp, #56	@ 0x38
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b76:	f001 f82b 	bl	8001bd0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b7a:	f000 f975 	bl	8000e68 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b7e:	f000 fb93 	bl	80012a8 <MX_GPIO_Init>
  MX_FDCAN1_Init();
 8000b82:	f000 fa69 	bl	8001058 <MX_FDCAN1_Init>
  MX_USART3_UART_Init();
 8000b86:	f000 fb43 	bl	8001210 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 8000b8a:	f000 facb 	bl	8001124 <MX_I2C1_Init>
  MX_TIM6_Init();
 8000b8e:	f000 fb09 	bl	80011a4 <MX_TIM6_Init>
  MX_ADC1_Init();
 8000b92:	f000 f9e5 	bl	8000f60 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  //RPM flag
  last_time = HAL_GetTick();
 8000b96:	f001 f8a1 	bl	8001cdc <HAL_GetTick>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	4a9c      	ldr	r2, [pc, #624]	@ (8000e10 <main+0x2a0>)
 8000b9e:	6013      	str	r3, [r2, #0]
  //Timer 6 flag start DHT-11
  HAL_TIM_Base_Start(&htim6);
 8000ba0:	489c      	ldr	r0, [pc, #624]	@ (8000e14 <main+0x2a4>)
 8000ba2:	f008 fc21 	bl	80093e8 <HAL_TIM_Base_Start>


  HAL_FDCAN_Start(&hfdcan1);
 8000ba6:	489c      	ldr	r0, [pc, #624]	@ (8000e18 <main+0x2a8>)
 8000ba8:	f003 f870 	bl	8003c8c <HAL_FDCAN_Start>
  HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0);
 8000bac:	2200      	movs	r2, #0
 8000bae:	2101      	movs	r1, #1
 8000bb0:	4899      	ldr	r0, [pc, #612]	@ (8000e18 <main+0x2a8>)
 8000bb2:	f003 f8f1 	bl	8003d98 <HAL_FDCAN_ActivateNotification>

  // Configurar header de transmisión
  TxHeader.Identifier = ID_NODE_A_TX;
 8000bb6:	4b99      	ldr	r3, [pc, #612]	@ (8000e1c <main+0x2ac>)
 8000bb8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000bbc:	601a      	str	r2, [r3, #0]
  TxHeader.IdType = FDCAN_STANDARD_ID;
 8000bbe:	4b97      	ldr	r3, [pc, #604]	@ (8000e1c <main+0x2ac>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	605a      	str	r2, [r3, #4]
  TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8000bc4:	4b95      	ldr	r3, [pc, #596]	@ (8000e1c <main+0x2ac>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	609a      	str	r2, [r3, #8]
  TxHeader.DataLength = FDCAN_DLC_BYTES_64;
 8000bca:	4b94      	ldr	r3, [pc, #592]	@ (8000e1c <main+0x2ac>)
 8000bcc:	220f      	movs	r2, #15
 8000bce:	60da      	str	r2, [r3, #12]
  TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8000bd0:	4b92      	ldr	r3, [pc, #584]	@ (8000e1c <main+0x2ac>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	611a      	str	r2, [r3, #16]
  TxHeader.BitRateSwitch = FDCAN_BRS_ON;
 8000bd6:	4b91      	ldr	r3, [pc, #580]	@ (8000e1c <main+0x2ac>)
 8000bd8:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8000bdc:	615a      	str	r2, [r3, #20]
  TxHeader.FDFormat = FDCAN_FD_CAN;
 8000bde:	4b8f      	ldr	r3, [pc, #572]	@ (8000e1c <main+0x2ac>)
 8000be0:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8000be4:	619a      	str	r2, [r3, #24]
  TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8000be6:	4b8d      	ldr	r3, [pc, #564]	@ (8000e1c <main+0x2ac>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	61da      	str	r2, [r3, #28]
  TxHeader.MessageMarker = 0;
 8000bec:	4b8b      	ldr	r3, [pc, #556]	@ (8000e1c <main+0x2ac>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	621a      	str	r2, [r3, #32]


  //Acceration starter
  int16_t ax, ay, az;
  uint8_t who_am_i = read_register(WHO_AM_I_REG);
 8000bf2:	200d      	movs	r0, #13
 8000bf4:	f7ff ff22 	bl	8000a3c <read_register>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	77fb      	strb	r3, [r7, #31]
  if (who_am_i != 0x1A) {  // El valor esperado para MMA8451
 8000bfc:	7ffb      	ldrb	r3, [r7, #31]
 8000bfe:	2b1a      	cmp	r3, #26
 8000c00:	d001      	beq.n	8000c06 <main+0x96>
      Error_Handler();
 8000c02:	f000 fbff 	bl	8001404 <Error_Handler>
  }
  // Config. Acceleration
  write_register(CTRL_REG1, 0x01);  // Activar a 800Hz en modo activo
 8000c06:	2101      	movs	r1, #1
 8000c08:	202a      	movs	r0, #42	@ 0x2a
 8000c0a:	f7ff ff33 	bl	8000a74 <write_register>
  HAL_Delay(10);
 8000c0e:	200a      	movs	r0, #10
 8000c10:	f001 f870 	bl	8001cf4 <HAL_Delay>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

      //Angle ADC1
	  HAL_ADC_Start(&hadc1);
 8000c14:	4882      	ldr	r0, [pc, #520]	@ (8000e20 <main+0x2b0>)
 8000c16:	f001 fca5 	bl	8002564 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 10);
 8000c1a:	210a      	movs	r1, #10
 8000c1c:	4880      	ldr	r0, [pc, #512]	@ (8000e20 <main+0x2b0>)
 8000c1e:	f001 fd9f 	bl	8002760 <HAL_ADC_PollForConversion>
	  ADC_VAL=HAL_ADC_GetValue(&hadc1);
 8000c22:	487f      	ldr	r0, [pc, #508]	@ (8000e20 <main+0x2b0>)
 8000c24:	f001 fe90 	bl	8002948 <HAL_ADC_GetValue>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	b29a      	uxth	r2, r3
 8000c2c:	4b7d      	ldr	r3, [pc, #500]	@ (8000e24 <main+0x2b4>)
 8000c2e:	801a      	strh	r2, [r3, #0]
	  HAL_ADC_Stop(&hadc1);
 8000c30:	487b      	ldr	r0, [pc, #492]	@ (8000e20 <main+0x2b0>)
 8000c32:	f001 fd61 	bl	80026f8 <HAL_ADC_Stop>
	  voltage = (float)(ADC_VAL*3.3f)/ 65535.0f;
 8000c36:	4b7b      	ldr	r3, [pc, #492]	@ (8000e24 <main+0x2b4>)
 8000c38:	881b      	ldrh	r3, [r3, #0]
 8000c3a:	ee07 3a90 	vmov	s15, r3
 8000c3e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c42:	ed9f 7a79 	vldr	s14, [pc, #484]	@ 8000e28 <main+0x2b8>
 8000c46:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000c4a:	eddf 6a78 	vldr	s13, [pc, #480]	@ 8000e2c <main+0x2bc>
 8000c4e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000c52:	4b77      	ldr	r3, [pc, #476]	@ (8000e30 <main+0x2c0>)
 8000c54:	edc3 7a00 	vstr	s15, [r3]
	  angle = (voltage*235)/3.3;
 8000c58:	4b75      	ldr	r3, [pc, #468]	@ (8000e30 <main+0x2c0>)
 8000c5a:	edd3 7a00 	vldr	s15, [r3]
 8000c5e:	ed9f 7a75 	vldr	s14, [pc, #468]	@ 8000e34 <main+0x2c4>
 8000c62:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c66:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000c6a:	ed9f 5b67 	vldr	d5, [pc, #412]	@ 8000e08 <main+0x298>
 8000c6e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000c72:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000c76:	4b70      	ldr	r3, [pc, #448]	@ (8000e38 <main+0x2c8>)
 8000c78:	edc3 7a00 	vstr	s15, [r3]

	  //DHT_11 Start
      DHT_GetData(&DHT11_Data);
 8000c7c:	486f      	ldr	r0, [pc, #444]	@ (8000e3c <main+0x2cc>)
 8000c7e:	f7ff fe7f 	bl	8000980 <DHT_GetData>
      Temperature = DHT11_Data.Temperature;
 8000c82:	4b6e      	ldr	r3, [pc, #440]	@ (8000e3c <main+0x2cc>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	4a6e      	ldr	r2, [pc, #440]	@ (8000e40 <main+0x2d0>)
 8000c88:	6013      	str	r3, [r2, #0]
      Humidity = DHT11_Data.Humidity;
 8000c8a:	4b6c      	ldr	r3, [pc, #432]	@ (8000e3c <main+0x2cc>)
 8000c8c:	685b      	ldr	r3, [r3, #4]
 8000c8e:	4a6d      	ldr	r2, [pc, #436]	@ (8000e44 <main+0x2d4>)
 8000c90:	6013      	str	r3, [r2, #0]

	  //Read accel
	  read_accel(&ax, &ay, &az);
 8000c92:	1dba      	adds	r2, r7, #6
 8000c94:	f107 0108 	add.w	r1, r7, #8
 8000c98:	f107 030a 	add.w	r3, r7, #10
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f7ff ff2d 	bl	8000afc <read_accel>
	  float ax_ms2 = ax / 4096.0f * 9.81f;
 8000ca2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000ca6:	ee07 3a90 	vmov	s15, r3
 8000caa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000cae:	eddf 6a66 	vldr	s13, [pc, #408]	@ 8000e48 <main+0x2d8>
 8000cb2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000cb6:	ed9f 7a65 	vldr	s14, [pc, #404]	@ 8000e4c <main+0x2dc>
 8000cba:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000cbe:	edc7 7a06 	vstr	s15, [r7, #24]
	  float ay_ms2 = ay / 4096.0f * 9.81f;
 8000cc2:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000cc6:	ee07 3a90 	vmov	s15, r3
 8000cca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000cce:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8000e48 <main+0x2d8>
 8000cd2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000cd6:	ed9f 7a5d 	vldr	s14, [pc, #372]	@ 8000e4c <main+0x2dc>
 8000cda:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000cde:	edc7 7a05 	vstr	s15, [r7, #20]
	  float az_ms2 = az / 4096.0f * 9.81f;
 8000ce2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ce6:	ee07 3a90 	vmov	s15, r3
 8000cea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000cee:	eddf 6a56 	vldr	s13, [pc, #344]	@ 8000e48 <main+0x2d8>
 8000cf2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000cf6:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 8000e4c <main+0x2dc>
 8000cfa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000cfe:	edc7 7a04 	vstr	s15, [r7, #16]

	  //Function RPM
	  uint32_t now = HAL_GetTick();
 8000d02:	f000 ffeb 	bl	8001cdc <HAL_GetTick>
 8000d06:	60f8      	str	r0, [r7, #12]
	  if (now - last_time >= 1000) // Cada 1 segundo
 8000d08:	4b41      	ldr	r3, [pc, #260]	@ (8000e10 <main+0x2a0>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	68fa      	ldr	r2, [r7, #12]
 8000d0e:	1ad3      	subs	r3, r2, r3
 8000d10:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000d14:	d30e      	bcc.n	8000d34 <main+0x1c4>
	  {
		  rpm = pulse_count * 60;
 8000d16:	4b4e      	ldr	r3, [pc, #312]	@ (8000e50 <main+0x2e0>)
 8000d18:	681a      	ldr	r2, [r3, #0]
 8000d1a:	4613      	mov	r3, r2
 8000d1c:	011b      	lsls	r3, r3, #4
 8000d1e:	1a9b      	subs	r3, r3, r2
 8000d20:	009b      	lsls	r3, r3, #2
 8000d22:	461a      	mov	r2, r3
 8000d24:	4b4b      	ldr	r3, [pc, #300]	@ (8000e54 <main+0x2e4>)
 8000d26:	601a      	str	r2, [r3, #0]
		  pulse_count = 0;
 8000d28:	4b49      	ldr	r3, [pc, #292]	@ (8000e50 <main+0x2e0>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	601a      	str	r2, [r3, #0]
		  last_time = now;
 8000d2e:	4a38      	ldr	r2, [pc, #224]	@ (8000e10 <main+0x2a0>)
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	6013      	str	r3, [r2, #0]
	  }



	 if ( (Node_ID == NODE_A_ID)  )
 8000d34:	4b48      	ldr	r3, [pc, #288]	@ (8000e58 <main+0x2e8>)
 8000d36:	781b      	ldrb	r3, [r3, #0]
 8000d38:	2b01      	cmp	r3, #1
 8000d3a:	d122      	bne.n	8000d82 <main+0x212>
	  {
		  SendFloat(Temperature,Humidity,ax_ms2,ay_ms2,az_ms2,angle,rpm);
 8000d3c:	4b40      	ldr	r3, [pc, #256]	@ (8000e40 <main+0x2d0>)
 8000d3e:	edd3 7a00 	vldr	s15, [r3]
 8000d42:	4b40      	ldr	r3, [pc, #256]	@ (8000e44 <main+0x2d4>)
 8000d44:	ed93 7a00 	vldr	s14, [r3]
 8000d48:	4b3b      	ldr	r3, [pc, #236]	@ (8000e38 <main+0x2c8>)
 8000d4a:	edd3 6a00 	vldr	s13, [r3]
 8000d4e:	4b41      	ldr	r3, [pc, #260]	@ (8000e54 <main+0x2e4>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	ee06 3a10 	vmov	s12, r3
 8000d56:	eeb8 6a46 	vcvt.f32.u32	s12, s12
 8000d5a:	eeb0 3a46 	vmov.f32	s6, s12
 8000d5e:	eef0 2a66 	vmov.f32	s5, s13
 8000d62:	ed97 2a04 	vldr	s4, [r7, #16]
 8000d66:	edd7 1a05 	vldr	s3, [r7, #20]
 8000d6a:	ed97 1a06 	vldr	s2, [r7, #24]
 8000d6e:	eef0 0a47 	vmov.f32	s1, s14
 8000d72:	eeb0 0a67 	vmov.f32	s0, s15
 8000d76:	f7ff fca1 	bl	80006bc <SendFloat>
		  HAL_Delay(1000);
 8000d7a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000d7e:	f000 ffb9 	bl	8001cf4 <HAL_Delay>
	  // Cambiar el valor para el próximo envío (opcional)
	  //float1 += 0.1f;
	  }


	  snprintf(msg, sizeof(msg), "Temp: %.2f, Humidity: %.2f \r\n  Ax: %.2f,  Ay: %.2f, Az: %.2f \r\n Angle: %.2f, RPM: %lu \r\n", Temperature,Humidity,ax_ms2,ay_ms2,az_ms2,angle,rpm);
 8000d82:	4b2f      	ldr	r3, [pc, #188]	@ (8000e40 <main+0x2d0>)
 8000d84:	edd3 7a00 	vldr	s15, [r3]
 8000d88:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000d8c:	4b2d      	ldr	r3, [pc, #180]	@ (8000e44 <main+0x2d4>)
 8000d8e:	edd3 6a00 	vldr	s13, [r3]
 8000d92:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8000d96:	edd7 5a06 	vldr	s11, [r7, #24]
 8000d9a:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
 8000d9e:	edd7 4a05 	vldr	s9, [r7, #20]
 8000da2:	eeb7 4ae4 	vcvt.f64.f32	d4, s9
 8000da6:	edd7 3a04 	vldr	s7, [r7, #16]
 8000daa:	eeb7 3ae3 	vcvt.f64.f32	d3, s7
 8000dae:	4b22      	ldr	r3, [pc, #136]	@ (8000e38 <main+0x2c8>)
 8000db0:	edd3 2a00 	vldr	s5, [r3]
 8000db4:	eeb7 2ae2 	vcvt.f64.f32	d2, s5
 8000db8:	4b26      	ldr	r3, [pc, #152]	@ (8000e54 <main+0x2e4>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	930c      	str	r3, [sp, #48]	@ 0x30
 8000dbe:	ed8d 2b0a 	vstr	d2, [sp, #40]	@ 0x28
 8000dc2:	ed8d 3b08 	vstr	d3, [sp, #32]
 8000dc6:	ed8d 4b06 	vstr	d4, [sp, #24]
 8000dca:	ed8d 5b04 	vstr	d5, [sp, #16]
 8000dce:	ed8d 6b02 	vstr	d6, [sp, #8]
 8000dd2:	ed8d 7b00 	vstr	d7, [sp]
 8000dd6:	4a21      	ldr	r2, [pc, #132]	@ (8000e5c <main+0x2ec>)
 8000dd8:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8000ddc:	4820      	ldr	r0, [pc, #128]	@ (8000e60 <main+0x2f0>)
 8000dde:	f00a fb03 	bl	800b3e8 <sniprintf>
	  HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000de2:	481f      	ldr	r0, [pc, #124]	@ (8000e60 <main+0x2f0>)
 8000de4:	f7ff facc 	bl	8000380 <strlen>
 8000de8:	4603      	mov	r3, r0
 8000dea:	b29a      	uxth	r2, r3
 8000dec:	f04f 33ff 	mov.w	r3, #4294967295
 8000df0:	491b      	ldr	r1, [pc, #108]	@ (8000e60 <main+0x2f0>)
 8000df2:	481c      	ldr	r0, [pc, #112]	@ (8000e64 <main+0x2f4>)
 8000df4:	f008 fce6 	bl	80097c4 <HAL_UART_Transmit>

	  HAL_Delay(1000);
 8000df8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000dfc:	f000 ff7a 	bl	8001cf4 <HAL_Delay>
  {
 8000e00:	e708      	b.n	8000c14 <main+0xa4>
 8000e02:	bf00      	nop
 8000e04:	f3af 8000 	nop.w
 8000e08:	66666666 	.word	0x66666666
 8000e0c:	400a6666 	.word	0x400a6666
 8000e10:	24000220 	.word	0x24000220
 8000e14:	240004f4 	.word	0x240004f4
 8000e18:	24000400 	.word	0x24000400
 8000e1c:	24000358 	.word	0x24000358
 8000e20:	2400039c 	.word	0x2400039c
 8000e24:	240001f8 	.word	0x240001f8
 8000e28:	40533333 	.word	0x40533333
 8000e2c:	477fff00 	.word	0x477fff00
 8000e30:	240001fc 	.word	0x240001fc
 8000e34:	436b0000 	.word	0x436b0000
 8000e38:	24000200 	.word	0x24000200
 8000e3c:	24000214 	.word	0x24000214
 8000e40:	2400020c 	.word	0x2400020c
 8000e44:	24000210 	.word	0x24000210
 8000e48:	45800000 	.word	0x45800000
 8000e4c:	411cf5c3 	.word	0x411cf5c3
 8000e50:	2400021c 	.word	0x2400021c
 8000e54:	24000224 	.word	0x24000224
 8000e58:	24000000 	.word	0x24000000
 8000e5c:	0800d5a8 	.word	0x0800d5a8
 8000e60:	2400022c 	.word	0x2400022c
 8000e64:	24000540 	.word	0x24000540

08000e68 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b09c      	sub	sp, #112	@ 0x70
 8000e6c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e6e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e72:	224c      	movs	r2, #76	@ 0x4c
 8000e74:	2100      	movs	r1, #0
 8000e76:	4618      	mov	r0, r3
 8000e78:	f00a fb2f 	bl	800b4da <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e7c:	1d3b      	adds	r3, r7, #4
 8000e7e:	2220      	movs	r2, #32
 8000e80:	2100      	movs	r1, #0
 8000e82:	4618      	mov	r0, r3
 8000e84:	f00a fb29 	bl	800b4da <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000e88:	2002      	movs	r0, #2
 8000e8a:	f004 fd37 	bl	80058fc <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000e8e:	2300      	movs	r3, #0
 8000e90:	603b      	str	r3, [r7, #0]
 8000e92:	4b31      	ldr	r3, [pc, #196]	@ (8000f58 <SystemClock_Config+0xf0>)
 8000e94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e96:	4a30      	ldr	r2, [pc, #192]	@ (8000f58 <SystemClock_Config+0xf0>)
 8000e98:	f023 0301 	bic.w	r3, r3, #1
 8000e9c:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000e9e:	4b2e      	ldr	r3, [pc, #184]	@ (8000f58 <SystemClock_Config+0xf0>)
 8000ea0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ea2:	f003 0301 	and.w	r3, r3, #1
 8000ea6:	603b      	str	r3, [r7, #0]
 8000ea8:	4b2c      	ldr	r3, [pc, #176]	@ (8000f5c <SystemClock_Config+0xf4>)
 8000eaa:	699b      	ldr	r3, [r3, #24]
 8000eac:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000eb0:	4a2a      	ldr	r2, [pc, #168]	@ (8000f5c <SystemClock_Config+0xf4>)
 8000eb2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000eb6:	6193      	str	r3, [r2, #24]
 8000eb8:	4b28      	ldr	r3, [pc, #160]	@ (8000f5c <SystemClock_Config+0xf4>)
 8000eba:	699b      	ldr	r3, [r3, #24]
 8000ebc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000ec0:	603b      	str	r3, [r7, #0]
 8000ec2:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000ec4:	bf00      	nop
 8000ec6:	4b25      	ldr	r3, [pc, #148]	@ (8000f5c <SystemClock_Config+0xf4>)
 8000ec8:	699b      	ldr	r3, [r3, #24]
 8000eca:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000ece:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000ed2:	d1f8      	bne.n	8000ec6 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ed4:	2302      	movs	r3, #2
 8000ed6:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000ed8:	2301      	movs	r3, #1
 8000eda:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000edc:	2340      	movs	r3, #64	@ 0x40
 8000ede:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ee0:	2302      	movs	r3, #2
 8000ee2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000ee8:	2304      	movs	r3, #4
 8000eea:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000eec:	230a      	movs	r3, #10
 8000eee:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000ef0:	2302      	movs	r3, #2
 8000ef2:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000ef4:	2304      	movs	r3, #4
 8000ef6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000ef8:	2302      	movs	r3, #2
 8000efa:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000efc:	230c      	movs	r3, #12
 8000efe:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8000f00:	2302      	movs	r3, #2
 8000f02:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000f04:	2300      	movs	r3, #0
 8000f06:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f08:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f004 fd2f 	bl	8005970 <HAL_RCC_OscConfig>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d001      	beq.n	8000f1c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000f18:	f000 fa74 	bl	8001404 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f1c:	233f      	movs	r3, #63	@ 0x3f
 8000f1e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000f20:	2300      	movs	r3, #0
 8000f22:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000f24:	2300      	movs	r3, #0
 8000f26:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000f30:	2340      	movs	r3, #64	@ 0x40
 8000f32:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000f34:	2300      	movs	r3, #0
 8000f36:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000f3c:	1d3b      	adds	r3, r7, #4
 8000f3e:	2101      	movs	r1, #1
 8000f40:	4618      	mov	r0, r3
 8000f42:	f005 f96f 	bl	8006224 <HAL_RCC_ClockConfig>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d001      	beq.n	8000f50 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8000f4c:	f000 fa5a 	bl	8001404 <Error_Handler>
  }
}
 8000f50:	bf00      	nop
 8000f52:	3770      	adds	r7, #112	@ 0x70
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	58000400 	.word	0x58000400
 8000f5c:	58024800 	.word	0x58024800

08000f60 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b08a      	sub	sp, #40	@ 0x28
 8000f64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000f66:	f107 031c 	add.w	r3, r7, #28
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	601a      	str	r2, [r3, #0]
 8000f6e:	605a      	str	r2, [r3, #4]
 8000f70:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000f72:	463b      	mov	r3, r7
 8000f74:	2200      	movs	r2, #0
 8000f76:	601a      	str	r2, [r3, #0]
 8000f78:	605a      	str	r2, [r3, #4]
 8000f7a:	609a      	str	r2, [r3, #8]
 8000f7c:	60da      	str	r2, [r3, #12]
 8000f7e:	611a      	str	r2, [r3, #16]
 8000f80:	615a      	str	r2, [r3, #20]
 8000f82:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000f84:	4b31      	ldr	r3, [pc, #196]	@ (800104c <MX_ADC1_Init+0xec>)
 8000f86:	4a32      	ldr	r2, [pc, #200]	@ (8001050 <MX_ADC1_Init+0xf0>)
 8000f88:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000f8a:	4b30      	ldr	r3, [pc, #192]	@ (800104c <MX_ADC1_Init+0xec>)
 8000f8c:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000f90:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000f92:	4b2e      	ldr	r3, [pc, #184]	@ (800104c <MX_ADC1_Init+0xec>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000f98:	4b2c      	ldr	r3, [pc, #176]	@ (800104c <MX_ADC1_Init+0xec>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f9e:	4b2b      	ldr	r3, [pc, #172]	@ (800104c <MX_ADC1_Init+0xec>)
 8000fa0:	2204      	movs	r2, #4
 8000fa2:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000fa4:	4b29      	ldr	r3, [pc, #164]	@ (800104c <MX_ADC1_Init+0xec>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000faa:	4b28      	ldr	r3, [pc, #160]	@ (800104c <MX_ADC1_Init+0xec>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8000fb0:	4b26      	ldr	r3, [pc, #152]	@ (800104c <MX_ADC1_Init+0xec>)
 8000fb2:	2201      	movs	r2, #1
 8000fb4:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000fb6:	4b25      	ldr	r3, [pc, #148]	@ (800104c <MX_ADC1_Init+0xec>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000fbc:	4b23      	ldr	r3, [pc, #140]	@ (800104c <MX_ADC1_Init+0xec>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000fc2:	4b22      	ldr	r3, [pc, #136]	@ (800104c <MX_ADC1_Init+0xec>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000fc8:	4b20      	ldr	r3, [pc, #128]	@ (800104c <MX_ADC1_Init+0xec>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000fce:	4b1f      	ldr	r3, [pc, #124]	@ (800104c <MX_ADC1_Init+0xec>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000fd4:	4b1d      	ldr	r3, [pc, #116]	@ (800104c <MX_ADC1_Init+0xec>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000fda:	4b1c      	ldr	r3, [pc, #112]	@ (800104c <MX_ADC1_Init+0xec>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Oversampling.Ratio = 1;
 8000fe2:	4b1a      	ldr	r3, [pc, #104]	@ (800104c <MX_ADC1_Init+0xec>)
 8000fe4:	2201      	movs	r2, #1
 8000fe6:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000fe8:	4818      	ldr	r0, [pc, #96]	@ (800104c <MX_ADC1_Init+0xec>)
 8000fea:	f001 f919 	bl	8002220 <HAL_ADC_Init>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d001      	beq.n	8000ff8 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000ff4:	f000 fa06 	bl	8001404 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000ffc:	f107 031c 	add.w	r3, r7, #28
 8001000:	4619      	mov	r1, r3
 8001002:	4812      	ldr	r0, [pc, #72]	@ (800104c <MX_ADC1_Init+0xec>)
 8001004:	f002 fa76 	bl	80034f4 <HAL_ADCEx_MultiModeConfigChannel>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d001      	beq.n	8001012 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800100e:	f000 f9f9 	bl	8001404 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001012:	4b10      	ldr	r3, [pc, #64]	@ (8001054 <MX_ADC1_Init+0xf4>)
 8001014:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001016:	2306      	movs	r3, #6
 8001018:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800101a:	2300      	movs	r3, #0
 800101c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800101e:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8001022:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001024:	2304      	movs	r3, #4
 8001026:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001028:	2300      	movs	r3, #0
 800102a:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 800102c:	2300      	movs	r3, #0
 800102e:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001030:	463b      	mov	r3, r7
 8001032:	4619      	mov	r1, r3
 8001034:	4805      	ldr	r0, [pc, #20]	@ (800104c <MX_ADC1_Init+0xec>)
 8001036:	f001 fc95 	bl	8002964 <HAL_ADC_ConfigChannel>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d001      	beq.n	8001044 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8001040:	f000 f9e0 	bl	8001404 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001044:	bf00      	nop
 8001046:	3728      	adds	r7, #40	@ 0x28
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	2400039c 	.word	0x2400039c
 8001050:	40022000 	.word	0x40022000
 8001054:	2a000400 	.word	0x2a000400

08001058 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 800105c:	4b2f      	ldr	r3, [pc, #188]	@ (800111c <MX_FDCAN1_Init+0xc4>)
 800105e:	4a30      	ldr	r2, [pc, #192]	@ (8001120 <MX_FDCAN1_Init+0xc8>)
 8001060:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_BRS;
 8001062:	4b2e      	ldr	r3, [pc, #184]	@ (800111c <MX_FDCAN1_Init+0xc4>)
 8001064:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8001068:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 800106a:	4b2c      	ldr	r3, [pc, #176]	@ (800111c <MX_FDCAN1_Init+0xc4>)
 800106c:	2200      	movs	r2, #0
 800106e:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 8001070:	4b2a      	ldr	r3, [pc, #168]	@ (800111c <MX_FDCAN1_Init+0xc4>)
 8001072:	2201      	movs	r2, #1
 8001074:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8001076:	4b29      	ldr	r3, [pc, #164]	@ (800111c <MX_FDCAN1_Init+0xc4>)
 8001078:	2200      	movs	r2, #0
 800107a:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 800107c:	4b27      	ldr	r3, [pc, #156]	@ (800111c <MX_FDCAN1_Init+0xc4>)
 800107e:	2200      	movs	r2, #0
 8001080:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8001082:	4b26      	ldr	r3, [pc, #152]	@ (800111c <MX_FDCAN1_Init+0xc4>)
 8001084:	2201      	movs	r2, #1
 8001086:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 11;
 8001088:	4b24      	ldr	r3, [pc, #144]	@ (800111c <MX_FDCAN1_Init+0xc4>)
 800108a:	220b      	movs	r2, #11
 800108c:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 68;
 800108e:	4b23      	ldr	r3, [pc, #140]	@ (800111c <MX_FDCAN1_Init+0xc4>)
 8001090:	2244      	movs	r2, #68	@ 0x44
 8001092:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 11;
 8001094:	4b21      	ldr	r3, [pc, #132]	@ (800111c <MX_FDCAN1_Init+0xc4>)
 8001096:	220b      	movs	r2, #11
 8001098:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 16;
 800109a:	4b20      	ldr	r3, [pc, #128]	@ (800111c <MX_FDCAN1_Init+0xc4>)
 800109c:	2210      	movs	r2, #16
 800109e:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 2;
 80010a0:	4b1e      	ldr	r3, [pc, #120]	@ (800111c <MX_FDCAN1_Init+0xc4>)
 80010a2:	2202      	movs	r2, #2
 80010a4:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 2;
 80010a6:	4b1d      	ldr	r3, [pc, #116]	@ (800111c <MX_FDCAN1_Init+0xc4>)
 80010a8:	2202      	movs	r2, #2
 80010aa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 2;
 80010ac:	4b1b      	ldr	r3, [pc, #108]	@ (800111c <MX_FDCAN1_Init+0xc4>)
 80010ae:	2202      	movs	r2, #2
 80010b0:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 80010b2:	4b1a      	ldr	r3, [pc, #104]	@ (800111c <MX_FDCAN1_Init+0xc4>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.StdFiltersNbr = 1;
 80010b8:	4b18      	ldr	r3, [pc, #96]	@ (800111c <MX_FDCAN1_Init+0xc4>)
 80010ba:	2201      	movs	r2, #1
 80010bc:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 80010be:	4b17      	ldr	r3, [pc, #92]	@ (800111c <MX_FDCAN1_Init+0xc4>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 80010c4:	4b15      	ldr	r3, [pc, #84]	@ (800111c <MX_FDCAN1_Init+0xc4>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_32;
 80010ca:	4b14      	ldr	r3, [pc, #80]	@ (800111c <MX_FDCAN1_Init+0xc4>)
 80010cc:	220a      	movs	r2, #10
 80010ce:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 80010d0:	4b12      	ldr	r3, [pc, #72]	@ (800111c <MX_FDCAN1_Init+0xc4>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_32;
 80010d6:	4b11      	ldr	r3, [pc, #68]	@ (800111c <MX_FDCAN1_Init+0xc4>)
 80010d8:	220a      	movs	r2, #10
 80010da:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 80010dc:	4b0f      	ldr	r3, [pc, #60]	@ (800111c <MX_FDCAN1_Init+0xc4>)
 80010de:	2200      	movs	r2, #0
 80010e0:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_32;
 80010e2:	4b0e      	ldr	r3, [pc, #56]	@ (800111c <MX_FDCAN1_Init+0xc4>)
 80010e4:	220a      	movs	r2, #10
 80010e6:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 80010e8:	4b0c      	ldr	r3, [pc, #48]	@ (800111c <MX_FDCAN1_Init+0xc4>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 80010ee:	4b0b      	ldr	r3, [pc, #44]	@ (800111c <MX_FDCAN1_Init+0xc4>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 1;
 80010f4:	4b09      	ldr	r3, [pc, #36]	@ (800111c <MX_FDCAN1_Init+0xc4>)
 80010f6:	2201      	movs	r2, #1
 80010f8:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80010fa:	4b08      	ldr	r3, [pc, #32]	@ (800111c <MX_FDCAN1_Init+0xc4>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_32;
 8001100:	4b06      	ldr	r3, [pc, #24]	@ (800111c <MX_FDCAN1_Init+0xc4>)
 8001102:	220a      	movs	r2, #10
 8001104:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8001106:	4805      	ldr	r0, [pc, #20]	@ (800111c <MX_FDCAN1_Init+0xc4>)
 8001108:	f002 fbe2 	bl	80038d0 <HAL_FDCAN_Init>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d001      	beq.n	8001116 <MX_FDCAN1_Init+0xbe>
  {
    Error_Handler();
 8001112:	f000 f977 	bl	8001404 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8001116:	bf00      	nop
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	24000400 	.word	0x24000400
 8001120:	4000a000 	.word	0x4000a000

08001124 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001128:	4b1b      	ldr	r3, [pc, #108]	@ (8001198 <MX_I2C1_Init+0x74>)
 800112a:	4a1c      	ldr	r2, [pc, #112]	@ (800119c <MX_I2C1_Init+0x78>)
 800112c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 800112e:	4b1a      	ldr	r3, [pc, #104]	@ (8001198 <MX_I2C1_Init+0x74>)
 8001130:	4a1b      	ldr	r2, [pc, #108]	@ (80011a0 <MX_I2C1_Init+0x7c>)
 8001132:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001134:	4b18      	ldr	r3, [pc, #96]	@ (8001198 <MX_I2C1_Init+0x74>)
 8001136:	2200      	movs	r2, #0
 8001138:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800113a:	4b17      	ldr	r3, [pc, #92]	@ (8001198 <MX_I2C1_Init+0x74>)
 800113c:	2201      	movs	r2, #1
 800113e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001140:	4b15      	ldr	r3, [pc, #84]	@ (8001198 <MX_I2C1_Init+0x74>)
 8001142:	2200      	movs	r2, #0
 8001144:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001146:	4b14      	ldr	r3, [pc, #80]	@ (8001198 <MX_I2C1_Init+0x74>)
 8001148:	2200      	movs	r2, #0
 800114a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800114c:	4b12      	ldr	r3, [pc, #72]	@ (8001198 <MX_I2C1_Init+0x74>)
 800114e:	2200      	movs	r2, #0
 8001150:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001152:	4b11      	ldr	r3, [pc, #68]	@ (8001198 <MX_I2C1_Init+0x74>)
 8001154:	2200      	movs	r2, #0
 8001156:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001158:	4b0f      	ldr	r3, [pc, #60]	@ (8001198 <MX_I2C1_Init+0x74>)
 800115a:	2200      	movs	r2, #0
 800115c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800115e:	480e      	ldr	r0, [pc, #56]	@ (8001198 <MX_I2C1_Init+0x74>)
 8001160:	f003 fda8 	bl	8004cb4 <HAL_I2C_Init>
 8001164:	4603      	mov	r3, r0
 8001166:	2b00      	cmp	r3, #0
 8001168:	d001      	beq.n	800116e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800116a:	f000 f94b 	bl	8001404 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800116e:	2100      	movs	r1, #0
 8001170:	4809      	ldr	r0, [pc, #36]	@ (8001198 <MX_I2C1_Init+0x74>)
 8001172:	f004 fb2b 	bl	80057cc <HAL_I2CEx_ConfigAnalogFilter>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d001      	beq.n	8001180 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800117c:	f000 f942 	bl	8001404 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001180:	2100      	movs	r1, #0
 8001182:	4805      	ldr	r0, [pc, #20]	@ (8001198 <MX_I2C1_Init+0x74>)
 8001184:	f004 fb6d 	bl	8005862 <HAL_I2CEx_ConfigDigitalFilter>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d001      	beq.n	8001192 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800118e:	f000 f939 	bl	8001404 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001192:	bf00      	nop
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	240004a0 	.word	0x240004a0
 800119c:	40005400 	.word	0x40005400
 80011a0:	00707cbb 	.word	0x00707cbb

080011a4 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b084      	sub	sp, #16
 80011a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011aa:	1d3b      	adds	r3, r7, #4
 80011ac:	2200      	movs	r2, #0
 80011ae:	601a      	str	r2, [r3, #0]
 80011b0:	605a      	str	r2, [r3, #4]
 80011b2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80011b4:	4b14      	ldr	r3, [pc, #80]	@ (8001208 <MX_TIM6_Init+0x64>)
 80011b6:	4a15      	ldr	r2, [pc, #84]	@ (800120c <MX_TIM6_Init+0x68>)
 80011b8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 64-1;
 80011ba:	4b13      	ldr	r3, [pc, #76]	@ (8001208 <MX_TIM6_Init+0x64>)
 80011bc:	223f      	movs	r2, #63	@ 0x3f
 80011be:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011c0:	4b11      	ldr	r3, [pc, #68]	@ (8001208 <MX_TIM6_Init+0x64>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 0xffff-1;
 80011c6:	4b10      	ldr	r3, [pc, #64]	@ (8001208 <MX_TIM6_Init+0x64>)
 80011c8:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80011cc:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011ce:	4b0e      	ldr	r3, [pc, #56]	@ (8001208 <MX_TIM6_Init+0x64>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80011d4:	480c      	ldr	r0, [pc, #48]	@ (8001208 <MX_TIM6_Init+0x64>)
 80011d6:	f008 f8af 	bl	8009338 <HAL_TIM_Base_Init>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d001      	beq.n	80011e4 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80011e0:	f000 f910 	bl	8001404 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011e4:	2300      	movs	r3, #0
 80011e6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011e8:	2300      	movs	r3, #0
 80011ea:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80011ec:	1d3b      	adds	r3, r7, #4
 80011ee:	4619      	mov	r1, r3
 80011f0:	4805      	ldr	r0, [pc, #20]	@ (8001208 <MX_TIM6_Init+0x64>)
 80011f2:	f008 fa09 	bl	8009608 <HAL_TIMEx_MasterConfigSynchronization>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d001      	beq.n	8001200 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80011fc:	f000 f902 	bl	8001404 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001200:	bf00      	nop
 8001202:	3710      	adds	r7, #16
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	240004f4 	.word	0x240004f4
 800120c:	40001000 	.word	0x40001000

08001210 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001214:	4b22      	ldr	r3, [pc, #136]	@ (80012a0 <MX_USART3_UART_Init+0x90>)
 8001216:	4a23      	ldr	r2, [pc, #140]	@ (80012a4 <MX_USART3_UART_Init+0x94>)
 8001218:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800121a:	4b21      	ldr	r3, [pc, #132]	@ (80012a0 <MX_USART3_UART_Init+0x90>)
 800121c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001220:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001222:	4b1f      	ldr	r3, [pc, #124]	@ (80012a0 <MX_USART3_UART_Init+0x90>)
 8001224:	2200      	movs	r2, #0
 8001226:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001228:	4b1d      	ldr	r3, [pc, #116]	@ (80012a0 <MX_USART3_UART_Init+0x90>)
 800122a:	2200      	movs	r2, #0
 800122c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800122e:	4b1c      	ldr	r3, [pc, #112]	@ (80012a0 <MX_USART3_UART_Init+0x90>)
 8001230:	2200      	movs	r2, #0
 8001232:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001234:	4b1a      	ldr	r3, [pc, #104]	@ (80012a0 <MX_USART3_UART_Init+0x90>)
 8001236:	220c      	movs	r2, #12
 8001238:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800123a:	4b19      	ldr	r3, [pc, #100]	@ (80012a0 <MX_USART3_UART_Init+0x90>)
 800123c:	2200      	movs	r2, #0
 800123e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001240:	4b17      	ldr	r3, [pc, #92]	@ (80012a0 <MX_USART3_UART_Init+0x90>)
 8001242:	2200      	movs	r2, #0
 8001244:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001246:	4b16      	ldr	r3, [pc, #88]	@ (80012a0 <MX_USART3_UART_Init+0x90>)
 8001248:	2200      	movs	r2, #0
 800124a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800124c:	4b14      	ldr	r3, [pc, #80]	@ (80012a0 <MX_USART3_UART_Init+0x90>)
 800124e:	2200      	movs	r2, #0
 8001250:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001252:	4b13      	ldr	r3, [pc, #76]	@ (80012a0 <MX_USART3_UART_Init+0x90>)
 8001254:	2200      	movs	r2, #0
 8001256:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001258:	4811      	ldr	r0, [pc, #68]	@ (80012a0 <MX_USART3_UART_Init+0x90>)
 800125a:	f008 fa63 	bl	8009724 <HAL_UART_Init>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d001      	beq.n	8001268 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001264:	f000 f8ce 	bl	8001404 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001268:	2100      	movs	r1, #0
 800126a:	480d      	ldr	r0, [pc, #52]	@ (80012a0 <MX_USART3_UART_Init+0x90>)
 800126c:	f009 faf9 	bl	800a862 <HAL_UARTEx_SetTxFifoThreshold>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d001      	beq.n	800127a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001276:	f000 f8c5 	bl	8001404 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800127a:	2100      	movs	r1, #0
 800127c:	4808      	ldr	r0, [pc, #32]	@ (80012a0 <MX_USART3_UART_Init+0x90>)
 800127e:	f009 fb2e 	bl	800a8de <HAL_UARTEx_SetRxFifoThreshold>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d001      	beq.n	800128c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001288:	f000 f8bc 	bl	8001404 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800128c:	4804      	ldr	r0, [pc, #16]	@ (80012a0 <MX_USART3_UART_Init+0x90>)
 800128e:	f009 faaf 	bl	800a7f0 <HAL_UARTEx_DisableFifoMode>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d001      	beq.n	800129c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001298:	f000 f8b4 	bl	8001404 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800129c:	bf00      	nop
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	24000540 	.word	0x24000540
 80012a4:	40004800 	.word	0x40004800

080012a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b08a      	sub	sp, #40	@ 0x28
 80012ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ae:	f107 0314 	add.w	r3, r7, #20
 80012b2:	2200      	movs	r2, #0
 80012b4:	601a      	str	r2, [r3, #0]
 80012b6:	605a      	str	r2, [r3, #4]
 80012b8:	609a      	str	r2, [r3, #8]
 80012ba:	60da      	str	r2, [r3, #12]
 80012bc:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012be:	4b4c      	ldr	r3, [pc, #304]	@ (80013f0 <MX_GPIO_Init+0x148>)
 80012c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012c4:	4a4a      	ldr	r2, [pc, #296]	@ (80013f0 <MX_GPIO_Init+0x148>)
 80012c6:	f043 0304 	orr.w	r3, r3, #4
 80012ca:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80012ce:	4b48      	ldr	r3, [pc, #288]	@ (80013f0 <MX_GPIO_Init+0x148>)
 80012d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012d4:	f003 0304 	and.w	r3, r3, #4
 80012d8:	613b      	str	r3, [r7, #16]
 80012da:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012dc:	4b44      	ldr	r3, [pc, #272]	@ (80013f0 <MX_GPIO_Init+0x148>)
 80012de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012e2:	4a43      	ldr	r2, [pc, #268]	@ (80013f0 <MX_GPIO_Init+0x148>)
 80012e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80012e8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80012ec:	4b40      	ldr	r3, [pc, #256]	@ (80013f0 <MX_GPIO_Init+0x148>)
 80012ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80012f6:	60fb      	str	r3, [r7, #12]
 80012f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012fa:	4b3d      	ldr	r3, [pc, #244]	@ (80013f0 <MX_GPIO_Init+0x148>)
 80012fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001300:	4a3b      	ldr	r2, [pc, #236]	@ (80013f0 <MX_GPIO_Init+0x148>)
 8001302:	f043 0301 	orr.w	r3, r3, #1
 8001306:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800130a:	4b39      	ldr	r3, [pc, #228]	@ (80013f0 <MX_GPIO_Init+0x148>)
 800130c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001310:	f003 0301 	and.w	r3, r3, #1
 8001314:	60bb      	str	r3, [r7, #8]
 8001316:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001318:	4b35      	ldr	r3, [pc, #212]	@ (80013f0 <MX_GPIO_Init+0x148>)
 800131a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800131e:	4a34      	ldr	r2, [pc, #208]	@ (80013f0 <MX_GPIO_Init+0x148>)
 8001320:	f043 0302 	orr.w	r3, r3, #2
 8001324:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001328:	4b31      	ldr	r3, [pc, #196]	@ (80013f0 <MX_GPIO_Init+0x148>)
 800132a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800132e:	f003 0302 	and.w	r3, r3, #2
 8001332:	607b      	str	r3, [r7, #4]
 8001334:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001336:	4b2e      	ldr	r3, [pc, #184]	@ (80013f0 <MX_GPIO_Init+0x148>)
 8001338:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800133c:	4a2c      	ldr	r2, [pc, #176]	@ (80013f0 <MX_GPIO_Init+0x148>)
 800133e:	f043 0308 	orr.w	r3, r3, #8
 8001342:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001346:	4b2a      	ldr	r3, [pc, #168]	@ (80013f0 <MX_GPIO_Init+0x148>)
 8001348:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800134c:	f003 0308 	and.w	r3, r3, #8
 8001350:	603b      	str	r3, [r7, #0]
 8001352:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Output_GPIO_Port, Output_Pin, GPIO_PIN_RESET);
 8001354:	2200      	movs	r2, #0
 8001356:	2108      	movs	r1, #8
 8001358:	4826      	ldr	r0, [pc, #152]	@ (80013f4 <MX_GPIO_Init+0x14c>)
 800135a:	f003 fc77 	bl	8004c4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800135e:	2200      	movs	r2, #0
 8001360:	f244 0181 	movw	r1, #16513	@ 0x4081
 8001364:	4824      	ldr	r0, [pc, #144]	@ (80013f8 <MX_GPIO_Init+0x150>)
 8001366:	f003 fc71 	bl	8004c4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800136a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800136e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001370:	2300      	movs	r3, #0
 8001372:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001374:	2300      	movs	r3, #0
 8001376:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001378:	f107 0314 	add.w	r3, r7, #20
 800137c:	4619      	mov	r1, r3
 800137e:	481f      	ldr	r0, [pc, #124]	@ (80013fc <MX_GPIO_Init+0x154>)
 8001380:	f003 fa9c 	bl	80048bc <HAL_GPIO_Init>

  /*Configure GPIO pin : Output_Pin */
  GPIO_InitStruct.Pin = Output_Pin;
 8001384:	2308      	movs	r3, #8
 8001386:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001388:	2301      	movs	r3, #1
 800138a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138c:	2300      	movs	r3, #0
 800138e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001390:	2300      	movs	r3, #0
 8001392:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Output_GPIO_Port, &GPIO_InitStruct);
 8001394:	f107 0314 	add.w	r3, r7, #20
 8001398:	4619      	mov	r1, r3
 800139a:	4816      	ldr	r0, [pc, #88]	@ (80013f4 <MX_GPIO_Init+0x14c>)
 800139c:	f003 fa8e 	bl	80048bc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80013a0:	f244 0381 	movw	r3, #16513	@ 0x4081
 80013a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013a6:	2301      	movs	r3, #1
 80013a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013aa:	2300      	movs	r3, #0
 80013ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ae:	2300      	movs	r3, #0
 80013b0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013b2:	f107 0314 	add.w	r3, r7, #20
 80013b6:	4619      	mov	r1, r3
 80013b8:	480f      	ldr	r0, [pc, #60]	@ (80013f8 <MX_GPIO_Init+0x150>)
 80013ba:	f003 fa7f 	bl	80048bc <HAL_GPIO_Init>

  /*Configure GPIO pin : rpm_in_Pin */
  GPIO_InitStruct.Pin = rpm_in_Pin;
 80013be:	2380      	movs	r3, #128	@ 0x80
 80013c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013c2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80013c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c8:	2300      	movs	r3, #0
 80013ca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(rpm_in_GPIO_Port, &GPIO_InitStruct);
 80013cc:	f107 0314 	add.w	r3, r7, #20
 80013d0:	4619      	mov	r1, r3
 80013d2:	480b      	ldr	r0, [pc, #44]	@ (8001400 <MX_GPIO_Init+0x158>)
 80013d4:	f003 fa72 	bl	80048bc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(rpm_in_EXTI_IRQn, 0, 0);
 80013d8:	2200      	movs	r2, #0
 80013da:	2100      	movs	r1, #0
 80013dc:	2017      	movs	r0, #23
 80013de:	f002 fa42 	bl	8003866 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(rpm_in_EXTI_IRQn);
 80013e2:	2017      	movs	r0, #23
 80013e4:	f002 fa59 	bl	800389a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80013e8:	bf00      	nop
 80013ea:	3728      	adds	r7, #40	@ 0x28
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	58024400 	.word	0x58024400
 80013f4:	58020000 	.word	0x58020000
 80013f8:	58020400 	.word	0x58020400
 80013fc:	58020800 	.word	0x58020800
 8001400:	58020c00 	.word	0x58020c00

08001404 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001408:	b672      	cpsid	i
}
 800140a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800140c:	bf00      	nop
 800140e:	e7fd      	b.n	800140c <Error_Handler+0x8>

08001410 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001410:	b480      	push	{r7}
 8001412:	b083      	sub	sp, #12
 8001414:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001416:	4b0a      	ldr	r3, [pc, #40]	@ (8001440 <HAL_MspInit+0x30>)
 8001418:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800141c:	4a08      	ldr	r2, [pc, #32]	@ (8001440 <HAL_MspInit+0x30>)
 800141e:	f043 0302 	orr.w	r3, r3, #2
 8001422:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001426:	4b06      	ldr	r3, [pc, #24]	@ (8001440 <HAL_MspInit+0x30>)
 8001428:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800142c:	f003 0302 	and.w	r3, r3, #2
 8001430:	607b      	str	r3, [r7, #4]
 8001432:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001434:	bf00      	nop
 8001436:	370c      	adds	r7, #12
 8001438:	46bd      	mov	sp, r7
 800143a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143e:	4770      	bx	lr
 8001440:	58024400 	.word	0x58024400

08001444 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b0ba      	sub	sp, #232	@ 0xe8
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800144c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001450:	2200      	movs	r2, #0
 8001452:	601a      	str	r2, [r3, #0]
 8001454:	605a      	str	r2, [r3, #4]
 8001456:	609a      	str	r2, [r3, #8]
 8001458:	60da      	str	r2, [r3, #12]
 800145a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800145c:	f107 0310 	add.w	r3, r7, #16
 8001460:	22c0      	movs	r2, #192	@ 0xc0
 8001462:	2100      	movs	r1, #0
 8001464:	4618      	mov	r0, r3
 8001466:	f00a f838 	bl	800b4da <memset>
  if(hadc->Instance==ADC1)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4a2b      	ldr	r2, [pc, #172]	@ (800151c <HAL_ADC_MspInit+0xd8>)
 8001470:	4293      	cmp	r3, r2
 8001472:	d14f      	bne.n	8001514 <HAL_ADC_MspInit+0xd0>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001474:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001478:	f04f 0300 	mov.w	r3, #0
 800147c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 4;
 8001480:	2304      	movs	r3, #4
 8001482:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 10;
 8001484:	230a      	movs	r3, #10
 8001486:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8001488:	2302      	movs	r3, #2
 800148a:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 4;
 800148c:	2304      	movs	r3, #4
 800148e:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001490:	2302      	movs	r3, #2
 8001492:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001494:	23c0      	movs	r3, #192	@ 0xc0
 8001496:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8001498:	2320      	movs	r3, #32
 800149a:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0.0;
 800149c:	2300      	movs	r3, #0
 800149e:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80014a0:	2300      	movs	r3, #0
 80014a2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014a6:	f107 0310 	add.w	r3, r7, #16
 80014aa:	4618      	mov	r0, r3
 80014ac:	f005 fa46 	bl	800693c <HAL_RCCEx_PeriphCLKConfig>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d001      	beq.n	80014ba <HAL_ADC_MspInit+0x76>
    {
      Error_Handler();
 80014b6:	f7ff ffa5 	bl	8001404 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80014ba:	4b19      	ldr	r3, [pc, #100]	@ (8001520 <HAL_ADC_MspInit+0xdc>)
 80014bc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80014c0:	4a17      	ldr	r2, [pc, #92]	@ (8001520 <HAL_ADC_MspInit+0xdc>)
 80014c2:	f043 0320 	orr.w	r3, r3, #32
 80014c6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80014ca:	4b15      	ldr	r3, [pc, #84]	@ (8001520 <HAL_ADC_MspInit+0xdc>)
 80014cc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80014d0:	f003 0320 	and.w	r3, r3, #32
 80014d4:	60fb      	str	r3, [r7, #12]
 80014d6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014d8:	4b11      	ldr	r3, [pc, #68]	@ (8001520 <HAL_ADC_MspInit+0xdc>)
 80014da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014de:	4a10      	ldr	r2, [pc, #64]	@ (8001520 <HAL_ADC_MspInit+0xdc>)
 80014e0:	f043 0304 	orr.w	r3, r3, #4
 80014e4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80014e8:	4b0d      	ldr	r3, [pc, #52]	@ (8001520 <HAL_ADC_MspInit+0xdc>)
 80014ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014ee:	f003 0304 	and.w	r3, r3, #4
 80014f2:	60bb      	str	r3, [r7, #8]
 80014f4:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_INP10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80014f6:	2301      	movs	r3, #1
 80014f8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014fc:	2303      	movs	r3, #3
 80014fe:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001502:	2300      	movs	r3, #0
 8001504:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001508:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800150c:	4619      	mov	r1, r3
 800150e:	4805      	ldr	r0, [pc, #20]	@ (8001524 <HAL_ADC_MspInit+0xe0>)
 8001510:	f003 f9d4 	bl	80048bc <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001514:	bf00      	nop
 8001516:	37e8      	adds	r7, #232	@ 0xe8
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}
 800151c:	40022000 	.word	0x40022000
 8001520:	58024400 	.word	0x58024400
 8001524:	58020800 	.word	0x58020800

08001528 <HAL_FDCAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hfdcan: FDCAN handle pointer
  * @retval None
  */
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b0ba      	sub	sp, #232	@ 0xe8
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001530:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001534:	2200      	movs	r2, #0
 8001536:	601a      	str	r2, [r3, #0]
 8001538:	605a      	str	r2, [r3, #4]
 800153a:	609a      	str	r2, [r3, #8]
 800153c:	60da      	str	r2, [r3, #12]
 800153e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001540:	f107 0310 	add.w	r3, r7, #16
 8001544:	22c0      	movs	r2, #192	@ 0xc0
 8001546:	2100      	movs	r1, #0
 8001548:	4618      	mov	r0, r3
 800154a:	f009 ffc6 	bl	800b4da <memset>
  if(hfdcan->Instance==FDCAN1)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4a2b      	ldr	r2, [pc, #172]	@ (8001600 <HAL_FDCAN_MspInit+0xd8>)
 8001554:	4293      	cmp	r3, r2
 8001556:	d14e      	bne.n	80015f6 <HAL_FDCAN_MspInit+0xce>

    /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001558:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800155c:	f04f 0300 	mov.w	r3, #0
 8001560:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8001564:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8001568:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800156c:	f107 0310 	add.w	r3, r7, #16
 8001570:	4618      	mov	r0, r3
 8001572:	f005 f9e3 	bl	800693c <HAL_RCCEx_PeriphCLKConfig>
 8001576:	4603      	mov	r3, r0
 8001578:	2b00      	cmp	r3, #0
 800157a:	d001      	beq.n	8001580 <HAL_FDCAN_MspInit+0x58>
    {
      Error_Handler();
 800157c:	f7ff ff42 	bl	8001404 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8001580:	4b20      	ldr	r3, [pc, #128]	@ (8001604 <HAL_FDCAN_MspInit+0xdc>)
 8001582:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8001586:	4a1f      	ldr	r2, [pc, #124]	@ (8001604 <HAL_FDCAN_MspInit+0xdc>)
 8001588:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800158c:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 8001590:	4b1c      	ldr	r3, [pc, #112]	@ (8001604 <HAL_FDCAN_MspInit+0xdc>)
 8001592:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8001596:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800159a:	60fb      	str	r3, [r7, #12]
 800159c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800159e:	4b19      	ldr	r3, [pc, #100]	@ (8001604 <HAL_FDCAN_MspInit+0xdc>)
 80015a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015a4:	4a17      	ldr	r2, [pc, #92]	@ (8001604 <HAL_FDCAN_MspInit+0xdc>)
 80015a6:	f043 0308 	orr.w	r3, r3, #8
 80015aa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80015ae:	4b15      	ldr	r3, [pc, #84]	@ (8001604 <HAL_FDCAN_MspInit+0xdc>)
 80015b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015b4:	f003 0308 	and.w	r3, r3, #8
 80015b8:	60bb      	str	r3, [r7, #8]
 80015ba:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80015bc:	2303      	movs	r3, #3
 80015be:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c2:	2302      	movs	r3, #2
 80015c4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c8:	2300      	movs	r3, #0
 80015ca:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ce:	2300      	movs	r3, #0
 80015d0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80015d4:	2309      	movs	r3, #9
 80015d6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015da:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80015de:	4619      	mov	r1, r3
 80015e0:	4809      	ldr	r0, [pc, #36]	@ (8001608 <HAL_FDCAN_MspInit+0xe0>)
 80015e2:	f003 f96b 	bl	80048bc <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 80015e6:	2200      	movs	r2, #0
 80015e8:	2100      	movs	r1, #0
 80015ea:	2013      	movs	r0, #19
 80015ec:	f002 f93b 	bl	8003866 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 80015f0:	2013      	movs	r0, #19
 80015f2:	f002 f952 	bl	800389a <HAL_NVIC_EnableIRQ>

    /* USER CODE END FDCAN1_MspInit 1 */

  }

}
 80015f6:	bf00      	nop
 80015f8:	37e8      	adds	r7, #232	@ 0xe8
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	4000a000 	.word	0x4000a000
 8001604:	58024400 	.word	0x58024400
 8001608:	58020c00 	.word	0x58020c00

0800160c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b0ba      	sub	sp, #232	@ 0xe8
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001614:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001618:	2200      	movs	r2, #0
 800161a:	601a      	str	r2, [r3, #0]
 800161c:	605a      	str	r2, [r3, #4]
 800161e:	609a      	str	r2, [r3, #8]
 8001620:	60da      	str	r2, [r3, #12]
 8001622:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001624:	f107 0310 	add.w	r3, r7, #16
 8001628:	22c0      	movs	r2, #192	@ 0xc0
 800162a:	2100      	movs	r1, #0
 800162c:	4618      	mov	r0, r3
 800162e:	f009 ff54 	bl	800b4da <memset>
  if(hi2c->Instance==I2C1)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4a27      	ldr	r2, [pc, #156]	@ (80016d4 <HAL_I2C_MspInit+0xc8>)
 8001638:	4293      	cmp	r3, r2
 800163a:	d146      	bne.n	80016ca <HAL_I2C_MspInit+0xbe>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800163c:	f04f 0208 	mov.w	r2, #8
 8001640:	f04f 0300 	mov.w	r3, #0
 8001644:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8001648:	2300      	movs	r3, #0
 800164a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800164e:	f107 0310 	add.w	r3, r7, #16
 8001652:	4618      	mov	r0, r3
 8001654:	f005 f972 	bl	800693c <HAL_RCCEx_PeriphCLKConfig>
 8001658:	4603      	mov	r3, r0
 800165a:	2b00      	cmp	r3, #0
 800165c:	d001      	beq.n	8001662 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 800165e:	f7ff fed1 	bl	8001404 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001662:	4b1d      	ldr	r3, [pc, #116]	@ (80016d8 <HAL_I2C_MspInit+0xcc>)
 8001664:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001668:	4a1b      	ldr	r2, [pc, #108]	@ (80016d8 <HAL_I2C_MspInit+0xcc>)
 800166a:	f043 0302 	orr.w	r3, r3, #2
 800166e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001672:	4b19      	ldr	r3, [pc, #100]	@ (80016d8 <HAL_I2C_MspInit+0xcc>)
 8001674:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001678:	f003 0302 	and.w	r3, r3, #2
 800167c:	60fb      	str	r3, [r7, #12]
 800167e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001680:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001684:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001688:	2312      	movs	r3, #18
 800168a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168e:	2300      	movs	r3, #0
 8001690:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001694:	2300      	movs	r3, #0
 8001696:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800169a:	2304      	movs	r3, #4
 800169c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016a0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80016a4:	4619      	mov	r1, r3
 80016a6:	480d      	ldr	r0, [pc, #52]	@ (80016dc <HAL_I2C_MspInit+0xd0>)
 80016a8:	f003 f908 	bl	80048bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80016ac:	4b0a      	ldr	r3, [pc, #40]	@ (80016d8 <HAL_I2C_MspInit+0xcc>)
 80016ae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80016b2:	4a09      	ldr	r2, [pc, #36]	@ (80016d8 <HAL_I2C_MspInit+0xcc>)
 80016b4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80016b8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80016bc:	4b06      	ldr	r3, [pc, #24]	@ (80016d8 <HAL_I2C_MspInit+0xcc>)
 80016be:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80016c2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80016c6:	60bb      	str	r3, [r7, #8]
 80016c8:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 80016ca:	bf00      	nop
 80016cc:	37e8      	adds	r7, #232	@ 0xe8
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	40005400 	.word	0x40005400
 80016d8:	58024400 	.word	0x58024400
 80016dc:	58020400 	.word	0x58020400

080016e0 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b085      	sub	sp, #20
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a0b      	ldr	r2, [pc, #44]	@ (800171c <HAL_TIM_Base_MspInit+0x3c>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d10e      	bne.n	8001710 <HAL_TIM_Base_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM6_MspInit 0 */

    /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80016f2:	4b0b      	ldr	r3, [pc, #44]	@ (8001720 <HAL_TIM_Base_MspInit+0x40>)
 80016f4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80016f8:	4a09      	ldr	r2, [pc, #36]	@ (8001720 <HAL_TIM_Base_MspInit+0x40>)
 80016fa:	f043 0310 	orr.w	r3, r3, #16
 80016fe:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001702:	4b07      	ldr	r3, [pc, #28]	@ (8001720 <HAL_TIM_Base_MspInit+0x40>)
 8001704:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001708:	f003 0310 	and.w	r3, r3, #16
 800170c:	60fb      	str	r3, [r7, #12]
 800170e:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM6_MspInit 1 */

  }

}
 8001710:	bf00      	nop
 8001712:	3714      	adds	r7, #20
 8001714:	46bd      	mov	sp, r7
 8001716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171a:	4770      	bx	lr
 800171c:	40001000 	.word	0x40001000
 8001720:	58024400 	.word	0x58024400

08001724 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b0ba      	sub	sp, #232	@ 0xe8
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800172c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001730:	2200      	movs	r2, #0
 8001732:	601a      	str	r2, [r3, #0]
 8001734:	605a      	str	r2, [r3, #4]
 8001736:	609a      	str	r2, [r3, #8]
 8001738:	60da      	str	r2, [r3, #12]
 800173a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800173c:	f107 0310 	add.w	r3, r7, #16
 8001740:	22c0      	movs	r2, #192	@ 0xc0
 8001742:	2100      	movs	r1, #0
 8001744:	4618      	mov	r0, r3
 8001746:	f009 fec8 	bl	800b4da <memset>
  if(huart->Instance==USART3)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4a27      	ldr	r2, [pc, #156]	@ (80017ec <HAL_UART_MspInit+0xc8>)
 8001750:	4293      	cmp	r3, r2
 8001752:	d146      	bne.n	80017e2 <HAL_UART_MspInit+0xbe>

    /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001754:	f04f 0202 	mov.w	r2, #2
 8001758:	f04f 0300 	mov.w	r3, #0
 800175c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001760:	2300      	movs	r3, #0
 8001762:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001766:	f107 0310 	add.w	r3, r7, #16
 800176a:	4618      	mov	r0, r3
 800176c:	f005 f8e6 	bl	800693c <HAL_RCCEx_PeriphCLKConfig>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	d001      	beq.n	800177a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001776:	f7ff fe45 	bl	8001404 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800177a:	4b1d      	ldr	r3, [pc, #116]	@ (80017f0 <HAL_UART_MspInit+0xcc>)
 800177c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001780:	4a1b      	ldr	r2, [pc, #108]	@ (80017f0 <HAL_UART_MspInit+0xcc>)
 8001782:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001786:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800178a:	4b19      	ldr	r3, [pc, #100]	@ (80017f0 <HAL_UART_MspInit+0xcc>)
 800178c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001790:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001794:	60fb      	str	r3, [r7, #12]
 8001796:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001798:	4b15      	ldr	r3, [pc, #84]	@ (80017f0 <HAL_UART_MspInit+0xcc>)
 800179a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800179e:	4a14      	ldr	r2, [pc, #80]	@ (80017f0 <HAL_UART_MspInit+0xcc>)
 80017a0:	f043 0308 	orr.w	r3, r3, #8
 80017a4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80017a8:	4b11      	ldr	r3, [pc, #68]	@ (80017f0 <HAL_UART_MspInit+0xcc>)
 80017aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017ae:	f003 0308 	and.w	r3, r3, #8
 80017b2:	60bb      	str	r3, [r7, #8]
 80017b4:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80017b6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80017ba:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017be:	2302      	movs	r3, #2
 80017c0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c4:	2300      	movs	r3, #0
 80017c6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ca:	2300      	movs	r3, #0
 80017cc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80017d0:	2307      	movs	r3, #7
 80017d2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017d6:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80017da:	4619      	mov	r1, r3
 80017dc:	4805      	ldr	r0, [pc, #20]	@ (80017f4 <HAL_UART_MspInit+0xd0>)
 80017de:	f003 f86d 	bl	80048bc <HAL_GPIO_Init>

    /* USER CODE END USART3_MspInit 1 */

  }

}
 80017e2:	bf00      	nop
 80017e4:	37e8      	adds	r7, #232	@ 0xe8
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	40004800 	.word	0x40004800
 80017f0:	58024400 	.word	0x58024400
 80017f4:	58020c00 	.word	0x58020c00

080017f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017f8:	b480      	push	{r7}
 80017fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80017fc:	bf00      	nop
 80017fe:	e7fd      	b.n	80017fc <NMI_Handler+0x4>

08001800 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001804:	bf00      	nop
 8001806:	e7fd      	b.n	8001804 <HardFault_Handler+0x4>

08001808 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001808:	b480      	push	{r7}
 800180a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800180c:	bf00      	nop
 800180e:	e7fd      	b.n	800180c <MemManage_Handler+0x4>

08001810 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001814:	bf00      	nop
 8001816:	e7fd      	b.n	8001814 <BusFault_Handler+0x4>

08001818 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001818:	b480      	push	{r7}
 800181a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800181c:	bf00      	nop
 800181e:	e7fd      	b.n	800181c <UsageFault_Handler+0x4>

08001820 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001820:	b480      	push	{r7}
 8001822:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001824:	bf00      	nop
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr

0800182e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800182e:	b480      	push	{r7}
 8001830:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001832:	bf00      	nop
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr

0800183c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800183c:	b480      	push	{r7}
 800183e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001840:	bf00      	nop
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr

0800184a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800184a:	b580      	push	{r7, lr}
 800184c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800184e:	f000 fa31 	bl	8001cb4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001852:	bf00      	nop
 8001854:	bd80      	pop	{r7, pc}
	...

08001858 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 800185c:	4802      	ldr	r0, [pc, #8]	@ (8001868 <FDCAN1_IT0_IRQHandler+0x10>)
 800185e:	f002 fb15 	bl	8003e8c <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8001862:	bf00      	nop
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	24000400 	.word	0x24000400

0800186c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(rpm_in_Pin);
 8001870:	2080      	movs	r0, #128	@ 0x80
 8001872:	f003 fa04 	bl	8004c7e <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001876:	bf00      	nop
 8001878:	bd80      	pop	{r7, pc}

0800187a <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800187a:	b480      	push	{r7}
 800187c:	af00      	add	r7, sp, #0
  return 1;
 800187e:	2301      	movs	r3, #1
}
 8001880:	4618      	mov	r0, r3
 8001882:	46bd      	mov	sp, r7
 8001884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001888:	4770      	bx	lr

0800188a <_kill>:

int _kill(int pid, int sig)
{
 800188a:	b580      	push	{r7, lr}
 800188c:	b082      	sub	sp, #8
 800188e:	af00      	add	r7, sp, #0
 8001890:	6078      	str	r0, [r7, #4]
 8001892:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001894:	f009 fe74 	bl	800b580 <__errno>
 8001898:	4603      	mov	r3, r0
 800189a:	2216      	movs	r2, #22
 800189c:	601a      	str	r2, [r3, #0]
  return -1;
 800189e:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	3708      	adds	r7, #8
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}

080018aa <_exit>:

void _exit (int status)
{
 80018aa:	b580      	push	{r7, lr}
 80018ac:	b082      	sub	sp, #8
 80018ae:	af00      	add	r7, sp, #0
 80018b0:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80018b2:	f04f 31ff 	mov.w	r1, #4294967295
 80018b6:	6878      	ldr	r0, [r7, #4]
 80018b8:	f7ff ffe7 	bl	800188a <_kill>
  while (1) {}    /* Make sure we hang here */
 80018bc:	bf00      	nop
 80018be:	e7fd      	b.n	80018bc <_exit+0x12>

080018c0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b086      	sub	sp, #24
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	60f8      	str	r0, [r7, #12]
 80018c8:	60b9      	str	r1, [r7, #8]
 80018ca:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018cc:	2300      	movs	r3, #0
 80018ce:	617b      	str	r3, [r7, #20]
 80018d0:	e00a      	b.n	80018e8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80018d2:	f3af 8000 	nop.w
 80018d6:	4601      	mov	r1, r0
 80018d8:	68bb      	ldr	r3, [r7, #8]
 80018da:	1c5a      	adds	r2, r3, #1
 80018dc:	60ba      	str	r2, [r7, #8]
 80018de:	b2ca      	uxtb	r2, r1
 80018e0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018e2:	697b      	ldr	r3, [r7, #20]
 80018e4:	3301      	adds	r3, #1
 80018e6:	617b      	str	r3, [r7, #20]
 80018e8:	697a      	ldr	r2, [r7, #20]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	429a      	cmp	r2, r3
 80018ee:	dbf0      	blt.n	80018d2 <_read+0x12>
  }

  return len;
 80018f0:	687b      	ldr	r3, [r7, #4]
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	3718      	adds	r7, #24
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}

080018fa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80018fa:	b580      	push	{r7, lr}
 80018fc:	b086      	sub	sp, #24
 80018fe:	af00      	add	r7, sp, #0
 8001900:	60f8      	str	r0, [r7, #12]
 8001902:	60b9      	str	r1, [r7, #8]
 8001904:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001906:	2300      	movs	r3, #0
 8001908:	617b      	str	r3, [r7, #20]
 800190a:	e009      	b.n	8001920 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800190c:	68bb      	ldr	r3, [r7, #8]
 800190e:	1c5a      	adds	r2, r3, #1
 8001910:	60ba      	str	r2, [r7, #8]
 8001912:	781b      	ldrb	r3, [r3, #0]
 8001914:	4618      	mov	r0, r3
 8001916:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800191a:	697b      	ldr	r3, [r7, #20]
 800191c:	3301      	adds	r3, #1
 800191e:	617b      	str	r3, [r7, #20]
 8001920:	697a      	ldr	r2, [r7, #20]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	429a      	cmp	r2, r3
 8001926:	dbf1      	blt.n	800190c <_write+0x12>
  }
  return len;
 8001928:	687b      	ldr	r3, [r7, #4]
}
 800192a:	4618      	mov	r0, r3
 800192c:	3718      	adds	r7, #24
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}

08001932 <_close>:

int _close(int file)
{
 8001932:	b480      	push	{r7}
 8001934:	b083      	sub	sp, #12
 8001936:	af00      	add	r7, sp, #0
 8001938:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800193a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800193e:	4618      	mov	r0, r3
 8001940:	370c      	adds	r7, #12
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr

0800194a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800194a:	b480      	push	{r7}
 800194c:	b083      	sub	sp, #12
 800194e:	af00      	add	r7, sp, #0
 8001950:	6078      	str	r0, [r7, #4]
 8001952:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800195a:	605a      	str	r2, [r3, #4]
  return 0;
 800195c:	2300      	movs	r3, #0
}
 800195e:	4618      	mov	r0, r3
 8001960:	370c      	adds	r7, #12
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr

0800196a <_isatty>:

int _isatty(int file)
{
 800196a:	b480      	push	{r7}
 800196c:	b083      	sub	sp, #12
 800196e:	af00      	add	r7, sp, #0
 8001970:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001972:	2301      	movs	r3, #1
}
 8001974:	4618      	mov	r0, r3
 8001976:	370c      	adds	r7, #12
 8001978:	46bd      	mov	sp, r7
 800197a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197e:	4770      	bx	lr

08001980 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001980:	b480      	push	{r7}
 8001982:	b085      	sub	sp, #20
 8001984:	af00      	add	r7, sp, #0
 8001986:	60f8      	str	r0, [r7, #12]
 8001988:	60b9      	str	r1, [r7, #8]
 800198a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800198c:	2300      	movs	r3, #0
}
 800198e:	4618      	mov	r0, r3
 8001990:	3714      	adds	r7, #20
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr
	...

0800199c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b086      	sub	sp, #24
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019a4:	4a14      	ldr	r2, [pc, #80]	@ (80019f8 <_sbrk+0x5c>)
 80019a6:	4b15      	ldr	r3, [pc, #84]	@ (80019fc <_sbrk+0x60>)
 80019a8:	1ad3      	subs	r3, r2, r3
 80019aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019b0:	4b13      	ldr	r3, [pc, #76]	@ (8001a00 <_sbrk+0x64>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d102      	bne.n	80019be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019b8:	4b11      	ldr	r3, [pc, #68]	@ (8001a00 <_sbrk+0x64>)
 80019ba:	4a12      	ldr	r2, [pc, #72]	@ (8001a04 <_sbrk+0x68>)
 80019bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019be:	4b10      	ldr	r3, [pc, #64]	@ (8001a00 <_sbrk+0x64>)
 80019c0:	681a      	ldr	r2, [r3, #0]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	4413      	add	r3, r2
 80019c6:	693a      	ldr	r2, [r7, #16]
 80019c8:	429a      	cmp	r2, r3
 80019ca:	d207      	bcs.n	80019dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019cc:	f009 fdd8 	bl	800b580 <__errno>
 80019d0:	4603      	mov	r3, r0
 80019d2:	220c      	movs	r2, #12
 80019d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019d6:	f04f 33ff 	mov.w	r3, #4294967295
 80019da:	e009      	b.n	80019f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019dc:	4b08      	ldr	r3, [pc, #32]	@ (8001a00 <_sbrk+0x64>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019e2:	4b07      	ldr	r3, [pc, #28]	@ (8001a00 <_sbrk+0x64>)
 80019e4:	681a      	ldr	r2, [r3, #0]
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	4413      	add	r3, r2
 80019ea:	4a05      	ldr	r2, [pc, #20]	@ (8001a00 <_sbrk+0x64>)
 80019ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019ee:	68fb      	ldr	r3, [r7, #12]
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	3718      	adds	r7, #24
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	24080000 	.word	0x24080000
 80019fc:	00000400 	.word	0x00000400
 8001a00:	240005d8 	.word	0x240005d8
 8001a04:	24000730 	.word	0x24000730

08001a08 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001a0c:	4b43      	ldr	r3, [pc, #268]	@ (8001b1c <SystemInit+0x114>)
 8001a0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a12:	4a42      	ldr	r2, [pc, #264]	@ (8001b1c <SystemInit+0x114>)
 8001a14:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001a18:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001a1c:	4b40      	ldr	r3, [pc, #256]	@ (8001b20 <SystemInit+0x118>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f003 030f 	and.w	r3, r3, #15
 8001a24:	2b06      	cmp	r3, #6
 8001a26:	d807      	bhi.n	8001a38 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001a28:	4b3d      	ldr	r3, [pc, #244]	@ (8001b20 <SystemInit+0x118>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f023 030f 	bic.w	r3, r3, #15
 8001a30:	4a3b      	ldr	r2, [pc, #236]	@ (8001b20 <SystemInit+0x118>)
 8001a32:	f043 0307 	orr.w	r3, r3, #7
 8001a36:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001a38:	4b3a      	ldr	r3, [pc, #232]	@ (8001b24 <SystemInit+0x11c>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a39      	ldr	r2, [pc, #228]	@ (8001b24 <SystemInit+0x11c>)
 8001a3e:	f043 0301 	orr.w	r3, r3, #1
 8001a42:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001a44:	4b37      	ldr	r3, [pc, #220]	@ (8001b24 <SystemInit+0x11c>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001a4a:	4b36      	ldr	r3, [pc, #216]	@ (8001b24 <SystemInit+0x11c>)
 8001a4c:	681a      	ldr	r2, [r3, #0]
 8001a4e:	4935      	ldr	r1, [pc, #212]	@ (8001b24 <SystemInit+0x11c>)
 8001a50:	4b35      	ldr	r3, [pc, #212]	@ (8001b28 <SystemInit+0x120>)
 8001a52:	4013      	ands	r3, r2
 8001a54:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001a56:	4b32      	ldr	r3, [pc, #200]	@ (8001b20 <SystemInit+0x118>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f003 0308 	and.w	r3, r3, #8
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d007      	beq.n	8001a72 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001a62:	4b2f      	ldr	r3, [pc, #188]	@ (8001b20 <SystemInit+0x118>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f023 030f 	bic.w	r3, r3, #15
 8001a6a:	4a2d      	ldr	r2, [pc, #180]	@ (8001b20 <SystemInit+0x118>)
 8001a6c:	f043 0307 	orr.w	r3, r3, #7
 8001a70:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001a72:	4b2c      	ldr	r3, [pc, #176]	@ (8001b24 <SystemInit+0x11c>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001a78:	4b2a      	ldr	r3, [pc, #168]	@ (8001b24 <SystemInit+0x11c>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001a7e:	4b29      	ldr	r3, [pc, #164]	@ (8001b24 <SystemInit+0x11c>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001a84:	4b27      	ldr	r3, [pc, #156]	@ (8001b24 <SystemInit+0x11c>)
 8001a86:	4a29      	ldr	r2, [pc, #164]	@ (8001b2c <SystemInit+0x124>)
 8001a88:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001a8a:	4b26      	ldr	r3, [pc, #152]	@ (8001b24 <SystemInit+0x11c>)
 8001a8c:	4a28      	ldr	r2, [pc, #160]	@ (8001b30 <SystemInit+0x128>)
 8001a8e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001a90:	4b24      	ldr	r3, [pc, #144]	@ (8001b24 <SystemInit+0x11c>)
 8001a92:	4a28      	ldr	r2, [pc, #160]	@ (8001b34 <SystemInit+0x12c>)
 8001a94:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001a96:	4b23      	ldr	r3, [pc, #140]	@ (8001b24 <SystemInit+0x11c>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001a9c:	4b21      	ldr	r3, [pc, #132]	@ (8001b24 <SystemInit+0x11c>)
 8001a9e:	4a25      	ldr	r2, [pc, #148]	@ (8001b34 <SystemInit+0x12c>)
 8001aa0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001aa2:	4b20      	ldr	r3, [pc, #128]	@ (8001b24 <SystemInit+0x11c>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001aa8:	4b1e      	ldr	r3, [pc, #120]	@ (8001b24 <SystemInit+0x11c>)
 8001aaa:	4a22      	ldr	r2, [pc, #136]	@ (8001b34 <SystemInit+0x12c>)
 8001aac:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001aae:	4b1d      	ldr	r3, [pc, #116]	@ (8001b24 <SystemInit+0x11c>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001ab4:	4b1b      	ldr	r3, [pc, #108]	@ (8001b24 <SystemInit+0x11c>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a1a      	ldr	r2, [pc, #104]	@ (8001b24 <SystemInit+0x11c>)
 8001aba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001abe:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001ac0:	4b18      	ldr	r3, [pc, #96]	@ (8001b24 <SystemInit+0x11c>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001ac6:	4b1c      	ldr	r3, [pc, #112]	@ (8001b38 <SystemInit+0x130>)
 8001ac8:	681a      	ldr	r2, [r3, #0]
 8001aca:	4b1c      	ldr	r3, [pc, #112]	@ (8001b3c <SystemInit+0x134>)
 8001acc:	4013      	ands	r3, r2
 8001ace:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001ad2:	d202      	bcs.n	8001ada <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001ad4:	4b1a      	ldr	r3, [pc, #104]	@ (8001b40 <SystemInit+0x138>)
 8001ad6:	2201      	movs	r2, #1
 8001ad8:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8001ada:	4b12      	ldr	r3, [pc, #72]	@ (8001b24 <SystemInit+0x11c>)
 8001adc:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001ae0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d113      	bne.n	8001b10 <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8001ae8:	4b0e      	ldr	r3, [pc, #56]	@ (8001b24 <SystemInit+0x11c>)
 8001aea:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001aee:	4a0d      	ldr	r2, [pc, #52]	@ (8001b24 <SystemInit+0x11c>)
 8001af0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001af4:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001af8:	4b12      	ldr	r3, [pc, #72]	@ (8001b44 <SystemInit+0x13c>)
 8001afa:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001afe:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8001b00:	4b08      	ldr	r3, [pc, #32]	@ (8001b24 <SystemInit+0x11c>)
 8001b02:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001b06:	4a07      	ldr	r2, [pc, #28]	@ (8001b24 <SystemInit+0x11c>)
 8001b08:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001b0c:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001b10:	bf00      	nop
 8001b12:	46bd      	mov	sp, r7
 8001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b18:	4770      	bx	lr
 8001b1a:	bf00      	nop
 8001b1c:	e000ed00 	.word	0xe000ed00
 8001b20:	52002000 	.word	0x52002000
 8001b24:	58024400 	.word	0x58024400
 8001b28:	eaf6ed7f 	.word	0xeaf6ed7f
 8001b2c:	02020200 	.word	0x02020200
 8001b30:	01ff0000 	.word	0x01ff0000
 8001b34:	01010280 	.word	0x01010280
 8001b38:	5c001000 	.word	0x5c001000
 8001b3c:	ffff0000 	.word	0xffff0000
 8001b40:	51008108 	.word	0x51008108
 8001b44:	52004000 	.word	0x52004000

08001b48 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8001b4c:	4b09      	ldr	r3, [pc, #36]	@ (8001b74 <ExitRun0Mode+0x2c>)
 8001b4e:	68db      	ldr	r3, [r3, #12]
 8001b50:	4a08      	ldr	r2, [pc, #32]	@ (8001b74 <ExitRun0Mode+0x2c>)
 8001b52:	f043 0302 	orr.w	r3, r3, #2
 8001b56:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8001b58:	bf00      	nop
 8001b5a:	4b06      	ldr	r3, [pc, #24]	@ (8001b74 <ExitRun0Mode+0x2c>)
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d0f9      	beq.n	8001b5a <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8001b66:	bf00      	nop
 8001b68:	bf00      	nop
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b70:	4770      	bx	lr
 8001b72:	bf00      	nop
 8001b74:	58024800 	.word	0x58024800

08001b78 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001b78:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8001bb4 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8001b7c:	f7ff ffe4 	bl	8001b48 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001b80:	f7ff ff42 	bl	8001a08 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b84:	480c      	ldr	r0, [pc, #48]	@ (8001bb8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001b86:	490d      	ldr	r1, [pc, #52]	@ (8001bbc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001b88:	4a0d      	ldr	r2, [pc, #52]	@ (8001bc0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001b8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b8c:	e002      	b.n	8001b94 <LoopCopyDataInit>

08001b8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b92:	3304      	adds	r3, #4

08001b94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b98:	d3f9      	bcc.n	8001b8e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b9a:	4a0a      	ldr	r2, [pc, #40]	@ (8001bc4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001b9c:	4c0a      	ldr	r4, [pc, #40]	@ (8001bc8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001b9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ba0:	e001      	b.n	8001ba6 <LoopFillZerobss>

08001ba2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ba2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ba4:	3204      	adds	r2, #4

08001ba6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ba6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ba8:	d3fb      	bcc.n	8001ba2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001baa:	f009 fcef 	bl	800b58c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001bae:	f7fe ffdf 	bl	8000b70 <main>
  bx  lr
 8001bb2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001bb4:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001bb8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001bbc:	240001dc 	.word	0x240001dc
  ldr r2, =_sidata
 8001bc0:	0800da1c 	.word	0x0800da1c
  ldr r2, =_sbss
 8001bc4:	240001dc 	.word	0x240001dc
  ldr r4, =_ebss
 8001bc8:	2400072c 	.word	0x2400072c

08001bcc <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001bcc:	e7fe      	b.n	8001bcc <ADC3_IRQHandler>
	...

08001bd0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b082      	sub	sp, #8
 8001bd4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bd6:	2003      	movs	r0, #3
 8001bd8:	f001 fe3a 	bl	8003850 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001bdc:	f004 fcd8 	bl	8006590 <HAL_RCC_GetSysClockFreq>
 8001be0:	4602      	mov	r2, r0
 8001be2:	4b15      	ldr	r3, [pc, #84]	@ (8001c38 <HAL_Init+0x68>)
 8001be4:	699b      	ldr	r3, [r3, #24]
 8001be6:	0a1b      	lsrs	r3, r3, #8
 8001be8:	f003 030f 	and.w	r3, r3, #15
 8001bec:	4913      	ldr	r1, [pc, #76]	@ (8001c3c <HAL_Init+0x6c>)
 8001bee:	5ccb      	ldrb	r3, [r1, r3]
 8001bf0:	f003 031f 	and.w	r3, r3, #31
 8001bf4:	fa22 f303 	lsr.w	r3, r2, r3
 8001bf8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001bfa:	4b0f      	ldr	r3, [pc, #60]	@ (8001c38 <HAL_Init+0x68>)
 8001bfc:	699b      	ldr	r3, [r3, #24]
 8001bfe:	f003 030f 	and.w	r3, r3, #15
 8001c02:	4a0e      	ldr	r2, [pc, #56]	@ (8001c3c <HAL_Init+0x6c>)
 8001c04:	5cd3      	ldrb	r3, [r2, r3]
 8001c06:	f003 031f 	and.w	r3, r3, #31
 8001c0a:	687a      	ldr	r2, [r7, #4]
 8001c0c:	fa22 f303 	lsr.w	r3, r2, r3
 8001c10:	4a0b      	ldr	r2, [pc, #44]	@ (8001c40 <HAL_Init+0x70>)
 8001c12:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001c14:	4a0b      	ldr	r2, [pc, #44]	@ (8001c44 <HAL_Init+0x74>)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c1a:	2000      	movs	r0, #0
 8001c1c:	f000 f814 	bl	8001c48 <HAL_InitTick>
 8001c20:	4603      	mov	r3, r0
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d001      	beq.n	8001c2a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001c26:	2301      	movs	r3, #1
 8001c28:	e002      	b.n	8001c30 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001c2a:	f7ff fbf1 	bl	8001410 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c2e:	2300      	movs	r3, #0
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	3708      	adds	r7, #8
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}
 8001c38:	58024400 	.word	0x58024400
 8001c3c:	0800d650 	.word	0x0800d650
 8001c40:	24000008 	.word	0x24000008
 8001c44:	24000004 	.word	0x24000004

08001c48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b082      	sub	sp, #8
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001c50:	4b15      	ldr	r3, [pc, #84]	@ (8001ca8 <HAL_InitTick+0x60>)
 8001c52:	781b      	ldrb	r3, [r3, #0]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d101      	bne.n	8001c5c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	e021      	b.n	8001ca0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001c5c:	4b13      	ldr	r3, [pc, #76]	@ (8001cac <HAL_InitTick+0x64>)
 8001c5e:	681a      	ldr	r2, [r3, #0]
 8001c60:	4b11      	ldr	r3, [pc, #68]	@ (8001ca8 <HAL_InitTick+0x60>)
 8001c62:	781b      	ldrb	r3, [r3, #0]
 8001c64:	4619      	mov	r1, r3
 8001c66:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c72:	4618      	mov	r0, r3
 8001c74:	f001 fe1f 	bl	80038b6 <HAL_SYSTICK_Config>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d001      	beq.n	8001c82 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e00e      	b.n	8001ca0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2b0f      	cmp	r3, #15
 8001c86:	d80a      	bhi.n	8001c9e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c88:	2200      	movs	r2, #0
 8001c8a:	6879      	ldr	r1, [r7, #4]
 8001c8c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c90:	f001 fde9 	bl	8003866 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c94:	4a06      	ldr	r2, [pc, #24]	@ (8001cb0 <HAL_InitTick+0x68>)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	e000      	b.n	8001ca0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001c9e:	2301      	movs	r3, #1
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	3708      	adds	r7, #8
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}
 8001ca8:	24000010 	.word	0x24000010
 8001cac:	24000004 	.word	0x24000004
 8001cb0:	2400000c 	.word	0x2400000c

08001cb4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001cb8:	4b06      	ldr	r3, [pc, #24]	@ (8001cd4 <HAL_IncTick+0x20>)
 8001cba:	781b      	ldrb	r3, [r3, #0]
 8001cbc:	461a      	mov	r2, r3
 8001cbe:	4b06      	ldr	r3, [pc, #24]	@ (8001cd8 <HAL_IncTick+0x24>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4413      	add	r3, r2
 8001cc4:	4a04      	ldr	r2, [pc, #16]	@ (8001cd8 <HAL_IncTick+0x24>)
 8001cc6:	6013      	str	r3, [r2, #0]
}
 8001cc8:	bf00      	nop
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd0:	4770      	bx	lr
 8001cd2:	bf00      	nop
 8001cd4:	24000010 	.word	0x24000010
 8001cd8:	240005dc 	.word	0x240005dc

08001cdc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	af00      	add	r7, sp, #0
  return uwTick;
 8001ce0:	4b03      	ldr	r3, [pc, #12]	@ (8001cf0 <HAL_GetTick+0x14>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cec:	4770      	bx	lr
 8001cee:	bf00      	nop
 8001cf0:	240005dc 	.word	0x240005dc

08001cf4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b084      	sub	sp, #16
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001cfc:	f7ff ffee 	bl	8001cdc <HAL_GetTick>
 8001d00:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d0c:	d005      	beq.n	8001d1a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d0e:	4b0a      	ldr	r3, [pc, #40]	@ (8001d38 <HAL_Delay+0x44>)
 8001d10:	781b      	ldrb	r3, [r3, #0]
 8001d12:	461a      	mov	r2, r3
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	4413      	add	r3, r2
 8001d18:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d1a:	bf00      	nop
 8001d1c:	f7ff ffde 	bl	8001cdc <HAL_GetTick>
 8001d20:	4602      	mov	r2, r0
 8001d22:	68bb      	ldr	r3, [r7, #8]
 8001d24:	1ad3      	subs	r3, r2, r3
 8001d26:	68fa      	ldr	r2, [r7, #12]
 8001d28:	429a      	cmp	r2, r3
 8001d2a:	d8f7      	bhi.n	8001d1c <HAL_Delay+0x28>
  {
  }
}
 8001d2c:	bf00      	nop
 8001d2e:	bf00      	nop
 8001d30:	3710      	adds	r7, #16
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	24000010 	.word	0x24000010

08001d3c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001d40:	4b03      	ldr	r3, [pc, #12]	@ (8001d50 <HAL_GetREVID+0x14>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	0c1b      	lsrs	r3, r3, #16
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4e:	4770      	bx	lr
 8001d50:	5c001000 	.word	0x5c001000

08001d54 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b083      	sub	sp, #12
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
 8001d5c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	689b      	ldr	r3, [r3, #8]
 8001d62:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	431a      	orrs	r2, r3
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	609a      	str	r2, [r3, #8]
}
 8001d6e:	bf00      	nop
 8001d70:	370c      	adds	r7, #12
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr

08001d7a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001d7a:	b480      	push	{r7}
 8001d7c:	b083      	sub	sp, #12
 8001d7e:	af00      	add	r7, sp, #0
 8001d80:	6078      	str	r0, [r7, #4]
 8001d82:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	689b      	ldr	r3, [r3, #8]
 8001d88:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	431a      	orrs	r2, r3
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	609a      	str	r2, [r3, #8]
}
 8001d94:	bf00      	nop
 8001d96:	370c      	adds	r7, #12
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9e:	4770      	bx	lr

08001da0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b083      	sub	sp, #12
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	689b      	ldr	r3, [r3, #8]
 8001dac:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001db0:	4618      	mov	r0, r3
 8001db2:	370c      	adds	r7, #12
 8001db4:	46bd      	mov	sp, r7
 8001db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dba:	4770      	bx	lr

08001dbc <LL_ADC_SetChannelPreselection>:
  *         @arg @ref LL_ADC_CHANNEL_18
  *         @arg @ref LL_ADC_CHANNEL_19
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelPreselection(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b087      	sub	sp, #28
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
 8001dc4:	6039      	str	r1, [r7, #0]
      /* ADC channels preselection */
      ADCx->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    ADCx->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d107      	bne.n	8001de0 <LL_ADC_SetChannelPreselection+0x24>
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	0e9b      	lsrs	r3, r3, #26
 8001dd4:	f003 031f 	and.w	r3, r3, #31
 8001dd8:	2201      	movs	r2, #1
 8001dda:	fa02 f303 	lsl.w	r3, r2, r3
 8001dde:	e015      	b.n	8001e0c <LL_ADC_SetChannelPreselection+0x50>
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001de4:	693b      	ldr	r3, [r7, #16]
 8001de6:	fa93 f3a3 	rbit	r3, r3
 8001dea:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d101      	bne.n	8001dfa <LL_ADC_SetChannelPreselection+0x3e>
  {
    return 32U;
 8001df6:	2320      	movs	r3, #32
 8001df8:	e003      	b.n	8001e02 <LL_ADC_SetChannelPreselection+0x46>
  }
  return __builtin_clz(value);
 8001dfa:	697b      	ldr	r3, [r7, #20]
 8001dfc:	fab3 f383 	clz	r3, r3
 8001e00:	b2db      	uxtb	r3, r3
 8001e02:	f003 031f 	and.w	r3, r3, #31
 8001e06:	2201      	movs	r2, #1
 8001e08:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0c:	687a      	ldr	r2, [r7, #4]
 8001e0e:	69d2      	ldr	r2, [r2, #28]
 8001e10:	431a      	orrs	r2, r3
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	61da      	str	r2, [r3, #28]
#endif /* ADC_VER_V5_V90 */
}
 8001e16:	bf00      	nop
 8001e18:	371c      	adds	r7, #28
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr

08001e22 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001e22:	b480      	push	{r7}
 8001e24:	b087      	sub	sp, #28
 8001e26:	af00      	add	r7, sp, #0
 8001e28:	60f8      	str	r0, [r7, #12]
 8001e2a:	60b9      	str	r1, [r7, #8]
 8001e2c:	607a      	str	r2, [r7, #4]
 8001e2e:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	3360      	adds	r3, #96	@ 0x60
 8001e34:	461a      	mov	r2, r3
 8001e36:	68bb      	ldr	r3, [r7, #8]
 8001e38:	009b      	lsls	r3, r3, #2
 8001e3a:	4413      	add	r3, r2
 8001e3c:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8001e3e:	697b      	ldr	r3, [r7, #20]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	430b      	orrs	r3, r1
 8001e50:	431a      	orrs	r2, r3
 8001e52:	697b      	ldr	r3, [r7, #20]
 8001e54:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001e56:	bf00      	nop
 8001e58:	371c      	adds	r7, #28
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e60:	4770      	bx	lr

08001e62 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001e62:	b480      	push	{r7}
 8001e64:	b085      	sub	sp, #20
 8001e66:	af00      	add	r7, sp, #0
 8001e68:	60f8      	str	r0, [r7, #12]
 8001e6a:	60b9      	str	r1, [r7, #8]
 8001e6c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	691b      	ldr	r3, [r3, #16]
 8001e72:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8001e76:	68bb      	ldr	r3, [r7, #8]
 8001e78:	f003 031f 	and.w	r3, r3, #31
 8001e7c:	6879      	ldr	r1, [r7, #4]
 8001e7e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e82:	431a      	orrs	r2, r3
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	611a      	str	r2, [r3, #16]
}
 8001e88:	bf00      	nop
 8001e8a:	3714      	adds	r7, #20
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e92:	4770      	bx	lr

08001e94 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b087      	sub	sp, #28
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	60f8      	str	r0, [r7, #12]
 8001e9c:	60b9      	str	r1, [r7, #8]
 8001e9e:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	3360      	adds	r3, #96	@ 0x60
 8001ea4:	461a      	mov	r2, r3
 8001ea6:	68bb      	ldr	r3, [r7, #8]
 8001ea8:	009b      	lsls	r3, r3, #2
 8001eaa:	4413      	add	r3, r2
 8001eac:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001eae:	697b      	ldr	r3, [r7, #20]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	431a      	orrs	r2, r3
 8001eba:	697b      	ldr	r3, [r7, #20]
 8001ebc:	601a      	str	r2, [r3, #0]
  }
}
 8001ebe:	bf00      	nop
 8001ec0:	371c      	adds	r7, #28
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec8:	4770      	bx	lr

08001eca <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001eca:	b480      	push	{r7}
 8001ecc:	b083      	sub	sp, #12
 8001ece:	af00      	add	r7, sp, #0
 8001ed0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	68db      	ldr	r3, [r3, #12]
 8001ed6:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d101      	bne.n	8001ee2 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e000      	b.n	8001ee4 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001ee2:	2300      	movs	r3, #0
}
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	370c      	adds	r7, #12
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eee:	4770      	bx	lr

08001ef0 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b087      	sub	sp, #28
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	60f8      	str	r0, [r7, #12]
 8001ef8:	60b9      	str	r1, [r7, #8]
 8001efa:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	3330      	adds	r3, #48	@ 0x30
 8001f00:	461a      	mov	r2, r3
 8001f02:	68bb      	ldr	r3, [r7, #8]
 8001f04:	0a1b      	lsrs	r3, r3, #8
 8001f06:	009b      	lsls	r3, r3, #2
 8001f08:	f003 030c 	and.w	r3, r3, #12
 8001f0c:	4413      	add	r3, r2
 8001f0e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	681a      	ldr	r2, [r3, #0]
 8001f14:	68bb      	ldr	r3, [r7, #8]
 8001f16:	f003 031f 	and.w	r3, r3, #31
 8001f1a:	211f      	movs	r1, #31
 8001f1c:	fa01 f303 	lsl.w	r3, r1, r3
 8001f20:	43db      	mvns	r3, r3
 8001f22:	401a      	ands	r2, r3
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	0e9b      	lsrs	r3, r3, #26
 8001f28:	f003 011f 	and.w	r1, r3, #31
 8001f2c:	68bb      	ldr	r3, [r7, #8]
 8001f2e:	f003 031f 	and.w	r3, r3, #31
 8001f32:	fa01 f303 	lsl.w	r3, r1, r3
 8001f36:	431a      	orrs	r2, r3
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001f3c:	bf00      	nop
 8001f3e:	371c      	adds	r7, #28
 8001f40:	46bd      	mov	sp, r7
 8001f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f46:	4770      	bx	lr

08001f48 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b087      	sub	sp, #28
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	60f8      	str	r0, [r7, #12]
 8001f50:	60b9      	str	r1, [r7, #8]
 8001f52:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	3314      	adds	r3, #20
 8001f58:	461a      	mov	r2, r3
 8001f5a:	68bb      	ldr	r3, [r7, #8]
 8001f5c:	0e5b      	lsrs	r3, r3, #25
 8001f5e:	009b      	lsls	r3, r3, #2
 8001f60:	f003 0304 	and.w	r3, r3, #4
 8001f64:	4413      	add	r3, r2
 8001f66:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	681a      	ldr	r2, [r3, #0]
 8001f6c:	68bb      	ldr	r3, [r7, #8]
 8001f6e:	0d1b      	lsrs	r3, r3, #20
 8001f70:	f003 031f 	and.w	r3, r3, #31
 8001f74:	2107      	movs	r1, #7
 8001f76:	fa01 f303 	lsl.w	r3, r1, r3
 8001f7a:	43db      	mvns	r3, r3
 8001f7c:	401a      	ands	r2, r3
 8001f7e:	68bb      	ldr	r3, [r7, #8]
 8001f80:	0d1b      	lsrs	r3, r3, #20
 8001f82:	f003 031f 	and.w	r3, r3, #31
 8001f86:	6879      	ldr	r1, [r7, #4]
 8001f88:	fa01 f303 	lsl.w	r3, r1, r3
 8001f8c:	431a      	orrs	r2, r3
 8001f8e:	697b      	ldr	r3, [r7, #20]
 8001f90:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001f92:	bf00      	nop
 8001f94:	371c      	adds	r7, #28
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr
	...

08001fa0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b085      	sub	sp, #20
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	60f8      	str	r0, [r7, #12]
 8001fa8:	60b9      	str	r1, [r7, #8]
 8001faa:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8001fb2:	68bb      	ldr	r3, [r7, #8]
 8001fb4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001fb8:	43db      	mvns	r3, r3
 8001fba:	401a      	ands	r2, r3
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	f003 0318 	and.w	r3, r3, #24
 8001fc2:	4908      	ldr	r1, [pc, #32]	@ (8001fe4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001fc4:	40d9      	lsrs	r1, r3
 8001fc6:	68bb      	ldr	r3, [r7, #8]
 8001fc8:	400b      	ands	r3, r1
 8001fca:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001fce:	431a      	orrs	r2, r3
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8001fd6:	bf00      	nop
 8001fd8:	3714      	adds	r7, #20
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe0:	4770      	bx	lr
 8001fe2:	bf00      	nop
 8001fe4:	000fffff 	.word	0x000fffff

08001fe8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b083      	sub	sp, #12
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	689b      	ldr	r3, [r3, #8]
 8001ff4:	f003 031f 	and.w	r3, r3, #31
}
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	370c      	adds	r7, #12
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002002:	4770      	bx	lr

08002004 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002004:	b480      	push	{r7}
 8002006:	b083      	sub	sp, #12
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	689b      	ldr	r3, [r3, #8]
 8002010:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 8002014:	4618      	mov	r0, r3
 8002016:	370c      	adds	r7, #12
 8002018:	46bd      	mov	sp, r7
 800201a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201e:	4770      	bx	lr

08002020 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002020:	b480      	push	{r7}
 8002022:	b083      	sub	sp, #12
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	689a      	ldr	r2, [r3, #8]
 800202c:	4b04      	ldr	r3, [pc, #16]	@ (8002040 <LL_ADC_DisableDeepPowerDown+0x20>)
 800202e:	4013      	ands	r3, r2
 8002030:	687a      	ldr	r2, [r7, #4]
 8002032:	6093      	str	r3, [r2, #8]
}
 8002034:	bf00      	nop
 8002036:	370c      	adds	r7, #12
 8002038:	46bd      	mov	sp, r7
 800203a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203e:	4770      	bx	lr
 8002040:	5fffffc0 	.word	0x5fffffc0

08002044 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002044:	b480      	push	{r7}
 8002046:	b083      	sub	sp, #12
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	689b      	ldr	r3, [r3, #8]
 8002050:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002054:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002058:	d101      	bne.n	800205e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800205a:	2301      	movs	r3, #1
 800205c:	e000      	b.n	8002060 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800205e:	2300      	movs	r3, #0
}
 8002060:	4618      	mov	r0, r3
 8002062:	370c      	adds	r7, #12
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr

0800206c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800206c:	b480      	push	{r7}
 800206e:	b083      	sub	sp, #12
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	689a      	ldr	r2, [r3, #8]
 8002078:	4b05      	ldr	r3, [pc, #20]	@ (8002090 <LL_ADC_EnableInternalRegulator+0x24>)
 800207a:	4013      	ands	r3, r2
 800207c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002084:	bf00      	nop
 8002086:	370c      	adds	r7, #12
 8002088:	46bd      	mov	sp, r7
 800208a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208e:	4770      	bx	lr
 8002090:	6fffffc0 	.word	0x6fffffc0

08002094 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002094:	b480      	push	{r7}
 8002096:	b083      	sub	sp, #12
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020a4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80020a8:	d101      	bne.n	80020ae <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80020aa:	2301      	movs	r3, #1
 80020ac:	e000      	b.n	80020b0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80020ae:	2300      	movs	r3, #0
}
 80020b0:	4618      	mov	r0, r3
 80020b2:	370c      	adds	r7, #12
 80020b4:	46bd      	mov	sp, r7
 80020b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ba:	4770      	bx	lr

080020bc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80020bc:	b480      	push	{r7}
 80020be:	b083      	sub	sp, #12
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	689a      	ldr	r2, [r3, #8]
 80020c8:	4b05      	ldr	r3, [pc, #20]	@ (80020e0 <LL_ADC_Enable+0x24>)
 80020ca:	4013      	ands	r3, r2
 80020cc:	f043 0201 	orr.w	r2, r3, #1
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80020d4:	bf00      	nop
 80020d6:	370c      	adds	r7, #12
 80020d8:	46bd      	mov	sp, r7
 80020da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020de:	4770      	bx	lr
 80020e0:	7fffffc0 	.word	0x7fffffc0

080020e4 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b083      	sub	sp, #12
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	689a      	ldr	r2, [r3, #8]
 80020f0:	4b05      	ldr	r3, [pc, #20]	@ (8002108 <LL_ADC_Disable+0x24>)
 80020f2:	4013      	ands	r3, r2
 80020f4:	f043 0202 	orr.w	r2, r3, #2
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80020fc:	bf00      	nop
 80020fe:	370c      	adds	r7, #12
 8002100:	46bd      	mov	sp, r7
 8002102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002106:	4770      	bx	lr
 8002108:	7fffffc0 	.word	0x7fffffc0

0800210c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800210c:	b480      	push	{r7}
 800210e:	b083      	sub	sp, #12
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	689b      	ldr	r3, [r3, #8]
 8002118:	f003 0301 	and.w	r3, r3, #1
 800211c:	2b01      	cmp	r3, #1
 800211e:	d101      	bne.n	8002124 <LL_ADC_IsEnabled+0x18>
 8002120:	2301      	movs	r3, #1
 8002122:	e000      	b.n	8002126 <LL_ADC_IsEnabled+0x1a>
 8002124:	2300      	movs	r3, #0
}
 8002126:	4618      	mov	r0, r3
 8002128:	370c      	adds	r7, #12
 800212a:	46bd      	mov	sp, r7
 800212c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002130:	4770      	bx	lr

08002132 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8002132:	b480      	push	{r7}
 8002134:	b083      	sub	sp, #12
 8002136:	af00      	add	r7, sp, #0
 8002138:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	689b      	ldr	r3, [r3, #8]
 800213e:	f003 0302 	and.w	r3, r3, #2
 8002142:	2b02      	cmp	r3, #2
 8002144:	d101      	bne.n	800214a <LL_ADC_IsDisableOngoing+0x18>
 8002146:	2301      	movs	r3, #1
 8002148:	e000      	b.n	800214c <LL_ADC_IsDisableOngoing+0x1a>
 800214a:	2300      	movs	r3, #0
}
 800214c:	4618      	mov	r0, r3
 800214e:	370c      	adds	r7, #12
 8002150:	46bd      	mov	sp, r7
 8002152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002156:	4770      	bx	lr

08002158 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002158:	b480      	push	{r7}
 800215a:	b083      	sub	sp, #12
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	689a      	ldr	r2, [r3, #8]
 8002164:	4b05      	ldr	r3, [pc, #20]	@ (800217c <LL_ADC_REG_StartConversion+0x24>)
 8002166:	4013      	ands	r3, r2
 8002168:	f043 0204 	orr.w	r2, r3, #4
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002170:	bf00      	nop
 8002172:	370c      	adds	r7, #12
 8002174:	46bd      	mov	sp, r7
 8002176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217a:	4770      	bx	lr
 800217c:	7fffffc0 	.word	0x7fffffc0

08002180 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8002180:	b480      	push	{r7}
 8002182:	b083      	sub	sp, #12
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	689a      	ldr	r2, [r3, #8]
 800218c:	4b05      	ldr	r3, [pc, #20]	@ (80021a4 <LL_ADC_REG_StopConversion+0x24>)
 800218e:	4013      	ands	r3, r2
 8002190:	f043 0210 	orr.w	r2, r3, #16
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8002198:	bf00      	nop
 800219a:	370c      	adds	r7, #12
 800219c:	46bd      	mov	sp, r7
 800219e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a2:	4770      	bx	lr
 80021a4:	7fffffc0 	.word	0x7fffffc0

080021a8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b083      	sub	sp, #12
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	689b      	ldr	r3, [r3, #8]
 80021b4:	f003 0304 	and.w	r3, r3, #4
 80021b8:	2b04      	cmp	r3, #4
 80021ba:	d101      	bne.n	80021c0 <LL_ADC_REG_IsConversionOngoing+0x18>
 80021bc:	2301      	movs	r3, #1
 80021be:	e000      	b.n	80021c2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80021c0:	2300      	movs	r3, #0
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	370c      	adds	r7, #12
 80021c6:	46bd      	mov	sp, r7
 80021c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021cc:	4770      	bx	lr
	...

080021d0 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b083      	sub	sp, #12
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	689a      	ldr	r2, [r3, #8]
 80021dc:	4b05      	ldr	r3, [pc, #20]	@ (80021f4 <LL_ADC_INJ_StopConversion+0x24>)
 80021de:	4013      	ands	r3, r2
 80021e0:	f043 0220 	orr.w	r2, r3, #32
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 80021e8:	bf00      	nop
 80021ea:	370c      	adds	r7, #12
 80021ec:	46bd      	mov	sp, r7
 80021ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f2:	4770      	bx	lr
 80021f4:	7fffffc0 	.word	0x7fffffc0

080021f8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b083      	sub	sp, #12
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	689b      	ldr	r3, [r3, #8]
 8002204:	f003 0308 	and.w	r3, r3, #8
 8002208:	2b08      	cmp	r3, #8
 800220a:	d101      	bne.n	8002210 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800220c:	2301      	movs	r3, #1
 800220e:	e000      	b.n	8002212 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002210:	2300      	movs	r3, #0
}
 8002212:	4618      	mov	r0, r3
 8002214:	370c      	adds	r7, #12
 8002216:	46bd      	mov	sp, r7
 8002218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221c:	4770      	bx	lr
	...

08002220 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002220:	b590      	push	{r4, r7, lr}
 8002222:	b089      	sub	sp, #36	@ 0x24
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002228:	2300      	movs	r3, #0
 800222a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800222c:	2300      	movs	r3, #0
 800222e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d101      	bne.n	800223a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	e18f      	b.n	800255a <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	68db      	ldr	r3, [r3, #12]
 800223e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002244:	2b00      	cmp	r3, #0
 8002246:	d109      	bne.n	800225c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002248:	6878      	ldr	r0, [r7, #4]
 800224a:	f7ff f8fb 	bl	8001444 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2200      	movs	r2, #0
 8002252:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2200      	movs	r2, #0
 8002258:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4618      	mov	r0, r3
 8002262:	f7ff feef 	bl	8002044 <LL_ADC_IsDeepPowerDownEnabled>
 8002266:	4603      	mov	r3, r0
 8002268:	2b00      	cmp	r3, #0
 800226a:	d004      	beq.n	8002276 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4618      	mov	r0, r3
 8002272:	f7ff fed5 	bl	8002020 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4618      	mov	r0, r3
 800227c:	f7ff ff0a 	bl	8002094 <LL_ADC_IsInternalRegulatorEnabled>
 8002280:	4603      	mov	r3, r0
 8002282:	2b00      	cmp	r3, #0
 8002284:	d114      	bne.n	80022b0 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4618      	mov	r0, r3
 800228c:	f7ff feee 	bl	800206c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002290:	4b87      	ldr	r3, [pc, #540]	@ (80024b0 <HAL_ADC_Init+0x290>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	099b      	lsrs	r3, r3, #6
 8002296:	4a87      	ldr	r2, [pc, #540]	@ (80024b4 <HAL_ADC_Init+0x294>)
 8002298:	fba2 2303 	umull	r2, r3, r2, r3
 800229c:	099b      	lsrs	r3, r3, #6
 800229e:	3301      	adds	r3, #1
 80022a0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80022a2:	e002      	b.n	80022aa <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80022a4:	68bb      	ldr	r3, [r7, #8]
 80022a6:	3b01      	subs	r3, #1
 80022a8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80022aa:	68bb      	ldr	r3, [r7, #8]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d1f9      	bne.n	80022a4 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4618      	mov	r0, r3
 80022b6:	f7ff feed 	bl	8002094 <LL_ADC_IsInternalRegulatorEnabled>
 80022ba:	4603      	mov	r3, r0
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d10d      	bne.n	80022dc <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022c4:	f043 0210 	orr.w	r2, r3, #16
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022d0:	f043 0201 	orr.w	r2, r3, #1
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80022d8:	2301      	movs	r3, #1
 80022da:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4618      	mov	r0, r3
 80022e2:	f7ff ff61 	bl	80021a8 <LL_ADC_REG_IsConversionOngoing>
 80022e6:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022ec:	f003 0310 	and.w	r3, r3, #16
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	f040 8129 	bne.w	8002548 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80022f6:	697b      	ldr	r3, [r7, #20]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	f040 8125 	bne.w	8002548 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002302:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002306:	f043 0202 	orr.w	r2, r3, #2
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4618      	mov	r0, r3
 8002314:	f7ff fefa 	bl	800210c <LL_ADC_IsEnabled>
 8002318:	4603      	mov	r3, r0
 800231a:	2b00      	cmp	r3, #0
 800231c:	d136      	bne.n	800238c <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4a65      	ldr	r2, [pc, #404]	@ (80024b8 <HAL_ADC_Init+0x298>)
 8002324:	4293      	cmp	r3, r2
 8002326:	d004      	beq.n	8002332 <HAL_ADC_Init+0x112>
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a63      	ldr	r2, [pc, #396]	@ (80024bc <HAL_ADC_Init+0x29c>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d10e      	bne.n	8002350 <HAL_ADC_Init+0x130>
 8002332:	4861      	ldr	r0, [pc, #388]	@ (80024b8 <HAL_ADC_Init+0x298>)
 8002334:	f7ff feea 	bl	800210c <LL_ADC_IsEnabled>
 8002338:	4604      	mov	r4, r0
 800233a:	4860      	ldr	r0, [pc, #384]	@ (80024bc <HAL_ADC_Init+0x29c>)
 800233c:	f7ff fee6 	bl	800210c <LL_ADC_IsEnabled>
 8002340:	4603      	mov	r3, r0
 8002342:	4323      	orrs	r3, r4
 8002344:	2b00      	cmp	r3, #0
 8002346:	bf0c      	ite	eq
 8002348:	2301      	moveq	r3, #1
 800234a:	2300      	movne	r3, #0
 800234c:	b2db      	uxtb	r3, r3
 800234e:	e008      	b.n	8002362 <HAL_ADC_Init+0x142>
 8002350:	485b      	ldr	r0, [pc, #364]	@ (80024c0 <HAL_ADC_Init+0x2a0>)
 8002352:	f7ff fedb 	bl	800210c <LL_ADC_IsEnabled>
 8002356:	4603      	mov	r3, r0
 8002358:	2b00      	cmp	r3, #0
 800235a:	bf0c      	ite	eq
 800235c:	2301      	moveq	r3, #1
 800235e:	2300      	movne	r3, #0
 8002360:	b2db      	uxtb	r3, r3
 8002362:	2b00      	cmp	r3, #0
 8002364:	d012      	beq.n	800238c <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4a53      	ldr	r2, [pc, #332]	@ (80024b8 <HAL_ADC_Init+0x298>)
 800236c:	4293      	cmp	r3, r2
 800236e:	d004      	beq.n	800237a <HAL_ADC_Init+0x15a>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a51      	ldr	r2, [pc, #324]	@ (80024bc <HAL_ADC_Init+0x29c>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d101      	bne.n	800237e <HAL_ADC_Init+0x15e>
 800237a:	4a52      	ldr	r2, [pc, #328]	@ (80024c4 <HAL_ADC_Init+0x2a4>)
 800237c:	e000      	b.n	8002380 <HAL_ADC_Init+0x160>
 800237e:	4a52      	ldr	r2, [pc, #328]	@ (80024c8 <HAL_ADC_Init+0x2a8>)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	4619      	mov	r1, r3
 8002386:	4610      	mov	r0, r2
 8002388:	f7ff fce4 	bl	8001d54 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 800238c:	f7ff fcd6 	bl	8001d3c <HAL_GetREVID>
 8002390:	4603      	mov	r3, r0
 8002392:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002396:	4293      	cmp	r3, r2
 8002398:	d914      	bls.n	80023c4 <HAL_ADC_Init+0x1a4>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	689b      	ldr	r3, [r3, #8]
 800239e:	2b10      	cmp	r3, #16
 80023a0:	d110      	bne.n	80023c4 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	7d5b      	ldrb	r3, [r3, #21]
 80023a6:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80023ac:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80023b2:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	7f1b      	ldrb	r3, [r3, #28]
 80023b8:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80023ba:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80023bc:	f043 030c 	orr.w	r3, r3, #12
 80023c0:	61bb      	str	r3, [r7, #24]
 80023c2:	e00d      	b.n	80023e0 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	7d5b      	ldrb	r3, [r3, #21]
 80023c8:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80023ce:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80023d4:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	7f1b      	ldrb	r3, [r3, #28]
 80023da:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80023dc:	4313      	orrs	r3, r2
 80023de:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	7f1b      	ldrb	r3, [r3, #28]
 80023e4:	2b01      	cmp	r3, #1
 80023e6:	d106      	bne.n	80023f6 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6a1b      	ldr	r3, [r3, #32]
 80023ec:	3b01      	subs	r3, #1
 80023ee:	045b      	lsls	r3, r3, #17
 80023f0:	69ba      	ldr	r2, [r7, #24]
 80023f2:	4313      	orrs	r3, r2
 80023f4:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d009      	beq.n	8002412 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002402:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800240a:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800240c:	69ba      	ldr	r2, [r7, #24]
 800240e:	4313      	orrs	r3, r2
 8002410:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	68da      	ldr	r2, [r3, #12]
 8002418:	4b2c      	ldr	r3, [pc, #176]	@ (80024cc <HAL_ADC_Init+0x2ac>)
 800241a:	4013      	ands	r3, r2
 800241c:	687a      	ldr	r2, [r7, #4]
 800241e:	6812      	ldr	r2, [r2, #0]
 8002420:	69b9      	ldr	r1, [r7, #24]
 8002422:	430b      	orrs	r3, r1
 8002424:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4618      	mov	r0, r3
 800242c:	f7ff febc 	bl	80021a8 <LL_ADC_REG_IsConversionOngoing>
 8002430:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4618      	mov	r0, r3
 8002438:	f7ff fede 	bl	80021f8 <LL_ADC_INJ_IsConversionOngoing>
 800243c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800243e:	693b      	ldr	r3, [r7, #16]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d15f      	bne.n	8002504 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d15c      	bne.n	8002504 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	7d1b      	ldrb	r3, [r3, #20]
 800244e:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 8002454:	4313      	orrs	r3, r2
 8002456:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	68da      	ldr	r2, [r3, #12]
 800245e:	4b1c      	ldr	r3, [pc, #112]	@ (80024d0 <HAL_ADC_Init+0x2b0>)
 8002460:	4013      	ands	r3, r2
 8002462:	687a      	ldr	r2, [r7, #4]
 8002464:	6812      	ldr	r2, [r2, #0]
 8002466:	69b9      	ldr	r1, [r7, #24]
 8002468:	430b      	orrs	r3, r1
 800246a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002472:	2b01      	cmp	r3, #1
 8002474:	d130      	bne.n	80024d8 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800247a:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	691a      	ldr	r2, [r3, #16]
 8002482:	4b14      	ldr	r3, [pc, #80]	@ (80024d4 <HAL_ADC_Init+0x2b4>)
 8002484:	4013      	ands	r3, r2
 8002486:	687a      	ldr	r2, [r7, #4]
 8002488:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800248a:	3a01      	subs	r2, #1
 800248c:	0411      	lsls	r1, r2, #16
 800248e:	687a      	ldr	r2, [r7, #4]
 8002490:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002492:	4311      	orrs	r1, r2
 8002494:	687a      	ldr	r2, [r7, #4]
 8002496:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002498:	4311      	orrs	r1, r2
 800249a:	687a      	ldr	r2, [r7, #4]
 800249c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800249e:	430a      	orrs	r2, r1
 80024a0:	431a      	orrs	r2, r3
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f042 0201 	orr.w	r2, r2, #1
 80024aa:	611a      	str	r2, [r3, #16]
 80024ac:	e01c      	b.n	80024e8 <HAL_ADC_Init+0x2c8>
 80024ae:	bf00      	nop
 80024b0:	24000004 	.word	0x24000004
 80024b4:	053e2d63 	.word	0x053e2d63
 80024b8:	40022000 	.word	0x40022000
 80024bc:	40022100 	.word	0x40022100
 80024c0:	58026000 	.word	0x58026000
 80024c4:	40022300 	.word	0x40022300
 80024c8:	58026300 	.word	0x58026300
 80024cc:	fff0c003 	.word	0xfff0c003
 80024d0:	ffffbffc 	.word	0xffffbffc
 80024d4:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	691a      	ldr	r2, [r3, #16]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f022 0201 	bic.w	r2, r2, #1
 80024e6:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	691b      	ldr	r3, [r3, #16]
 80024ee:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	430a      	orrs	r2, r1
 80024fc:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 80024fe:	6878      	ldr	r0, [r7, #4]
 8002500:	f000 fec6 	bl	8003290 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	68db      	ldr	r3, [r3, #12]
 8002508:	2b01      	cmp	r3, #1
 800250a:	d10c      	bne.n	8002526 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002512:	f023 010f 	bic.w	r1, r3, #15
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	699b      	ldr	r3, [r3, #24]
 800251a:	1e5a      	subs	r2, r3, #1
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	430a      	orrs	r2, r1
 8002522:	631a      	str	r2, [r3, #48]	@ 0x30
 8002524:	e007      	b.n	8002536 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f022 020f 	bic.w	r2, r2, #15
 8002534:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800253a:	f023 0303 	bic.w	r3, r3, #3
 800253e:	f043 0201 	orr.w	r2, r3, #1
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	655a      	str	r2, [r3, #84]	@ 0x54
 8002546:	e007      	b.n	8002558 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800254c:	f043 0210 	orr.w	r2, r3, #16
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002554:	2301      	movs	r3, #1
 8002556:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002558:	7ffb      	ldrb	r3, [r7, #31]
}
 800255a:	4618      	mov	r0, r3
 800255c:	3724      	adds	r7, #36	@ 0x24
 800255e:	46bd      	mov	sp, r7
 8002560:	bd90      	pop	{r4, r7, pc}
 8002562:	bf00      	nop

08002564 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b086      	sub	sp, #24
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a5c      	ldr	r2, [pc, #368]	@ (80026e4 <HAL_ADC_Start+0x180>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d004      	beq.n	8002580 <HAL_ADC_Start+0x1c>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a5b      	ldr	r2, [pc, #364]	@ (80026e8 <HAL_ADC_Start+0x184>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d101      	bne.n	8002584 <HAL_ADC_Start+0x20>
 8002580:	4b5a      	ldr	r3, [pc, #360]	@ (80026ec <HAL_ADC_Start+0x188>)
 8002582:	e000      	b.n	8002586 <HAL_ADC_Start+0x22>
 8002584:	4b5a      	ldr	r3, [pc, #360]	@ (80026f0 <HAL_ADC_Start+0x18c>)
 8002586:	4618      	mov	r0, r3
 8002588:	f7ff fd2e 	bl	8001fe8 <LL_ADC_GetMultimode>
 800258c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4618      	mov	r0, r3
 8002594:	f7ff fe08 	bl	80021a8 <LL_ADC_REG_IsConversionOngoing>
 8002598:	4603      	mov	r3, r0
 800259a:	2b00      	cmp	r3, #0
 800259c:	f040 809a 	bne.w	80026d4 <HAL_ADC_Start+0x170>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80025a6:	2b01      	cmp	r3, #1
 80025a8:	d101      	bne.n	80025ae <HAL_ADC_Start+0x4a>
 80025aa:	2302      	movs	r3, #2
 80025ac:	e095      	b.n	80026da <HAL_ADC_Start+0x176>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2201      	movs	r2, #1
 80025b2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80025b6:	6878      	ldr	r0, [r7, #4]
 80025b8:	f000 fd80 	bl	80030bc <ADC_Enable>
 80025bc:	4603      	mov	r3, r0
 80025be:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80025c0:	7dfb      	ldrb	r3, [r7, #23]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	f040 8081 	bne.w	80026ca <HAL_ADC_Start+0x166>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80025cc:	4b49      	ldr	r3, [pc, #292]	@ (80026f4 <HAL_ADC_Start+0x190>)
 80025ce:	4013      	ands	r3, r2
 80025d0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a42      	ldr	r2, [pc, #264]	@ (80026e8 <HAL_ADC_Start+0x184>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d002      	beq.n	80025e8 <HAL_ADC_Start+0x84>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	e000      	b.n	80025ea <HAL_ADC_Start+0x86>
 80025e8:	4b3e      	ldr	r3, [pc, #248]	@ (80026e4 <HAL_ADC_Start+0x180>)
 80025ea:	687a      	ldr	r2, [r7, #4]
 80025ec:	6812      	ldr	r2, [r2, #0]
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d002      	beq.n	80025f8 <HAL_ADC_Start+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d105      	bne.n	8002604 <HAL_ADC_Start+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025fc:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	655a      	str	r2, [r3, #84]	@ 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002608:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800260c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002610:	d106      	bne.n	8002620 <HAL_ADC_Start+0xbc>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002616:	f023 0206 	bic.w	r2, r3, #6
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	659a      	str	r2, [r3, #88]	@ 0x58
 800261e:	e002      	b.n	8002626 <HAL_ADC_Start+0xc2>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2200      	movs	r2, #0
 8002624:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	221c      	movs	r2, #28
 800262c:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2200      	movs	r2, #0
 8002632:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a2b      	ldr	r2, [pc, #172]	@ (80026e8 <HAL_ADC_Start+0x184>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d002      	beq.n	8002646 <HAL_ADC_Start+0xe2>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	e000      	b.n	8002648 <HAL_ADC_Start+0xe4>
 8002646:	4b27      	ldr	r3, [pc, #156]	@ (80026e4 <HAL_ADC_Start+0x180>)
 8002648:	687a      	ldr	r2, [r7, #4]
 800264a:	6812      	ldr	r2, [r2, #0]
 800264c:	4293      	cmp	r3, r2
 800264e:	d008      	beq.n	8002662 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002650:	693b      	ldr	r3, [r7, #16]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d005      	beq.n	8002662 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	2b05      	cmp	r3, #5
 800265a:	d002      	beq.n	8002662 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800265c:	693b      	ldr	r3, [r7, #16]
 800265e:	2b09      	cmp	r3, #9
 8002660:	d114      	bne.n	800268c <HAL_ADC_Start+0x128>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	68db      	ldr	r3, [r3, #12]
 8002668:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800266c:	2b00      	cmp	r3, #0
 800266e:	d007      	beq.n	8002680 <HAL_ADC_Start+0x11c>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002674:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002678:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4618      	mov	r0, r3
 8002686:	f7ff fd67 	bl	8002158 <LL_ADC_REG_StartConversion>
 800268a:	e025      	b.n	80026d8 <HAL_ADC_Start+0x174>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002690:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	655a      	str	r2, [r3, #84]	@ 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a12      	ldr	r2, [pc, #72]	@ (80026e8 <HAL_ADC_Start+0x184>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d002      	beq.n	80026a8 <HAL_ADC_Start+0x144>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	e000      	b.n	80026aa <HAL_ADC_Start+0x146>
 80026a8:	4b0e      	ldr	r3, [pc, #56]	@ (80026e4 <HAL_ADC_Start+0x180>)
 80026aa:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	68db      	ldr	r3, [r3, #12]
 80026b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d00f      	beq.n	80026d8 <HAL_ADC_Start+0x174>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026bc:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80026c0:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	655a      	str	r2, [r3, #84]	@ 0x54
 80026c8:	e006      	b.n	80026d8 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2200      	movs	r2, #0
 80026ce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 80026d2:	e001      	b.n	80026d8 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80026d4:	2302      	movs	r3, #2
 80026d6:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80026d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80026da:	4618      	mov	r0, r3
 80026dc:	3718      	adds	r7, #24
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}
 80026e2:	bf00      	nop
 80026e4:	40022000 	.word	0x40022000
 80026e8:	40022100 	.word	0x40022100
 80026ec:	40022300 	.word	0x40022300
 80026f0:	58026300 	.word	0x58026300
 80026f4:	fffff0fe 	.word	0xfffff0fe

080026f8 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b084      	sub	sp, #16
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002706:	2b01      	cmp	r3, #1
 8002708:	d101      	bne.n	800270e <HAL_ADC_Stop+0x16>
 800270a:	2302      	movs	r3, #2
 800270c:	e021      	b.n	8002752 <HAL_ADC_Stop+0x5a>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2201      	movs	r2, #1
 8002712:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8002716:	2103      	movs	r1, #3
 8002718:	6878      	ldr	r0, [r7, #4]
 800271a:	f000 fc13 	bl	8002f44 <ADC_ConversionStop>
 800271e:	4603      	mov	r3, r0
 8002720:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8002722:	7bfb      	ldrb	r3, [r7, #15]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d10f      	bne.n	8002748 <HAL_ADC_Stop+0x50>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8002728:	6878      	ldr	r0, [r7, #4]
 800272a:	f000 fd51 	bl	80031d0 <ADC_Disable>
 800272e:	4603      	mov	r3, r0
 8002730:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8002732:	7bfb      	ldrb	r3, [r7, #15]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d107      	bne.n	8002748 <HAL_ADC_Stop+0x50>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800273c:	4b07      	ldr	r3, [pc, #28]	@ (800275c <HAL_ADC_Stop+0x64>)
 800273e:	4013      	ands	r3, r2
 8002740:	f043 0201 	orr.w	r2, r3, #1
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2200      	movs	r2, #0
 800274c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002750:	7bfb      	ldrb	r3, [r7, #15]
}
 8002752:	4618      	mov	r0, r3
 8002754:	3710      	adds	r7, #16
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}
 800275a:	bf00      	nop
 800275c:	ffffeefe 	.word	0xffffeefe

08002760 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b088      	sub	sp, #32
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
 8002768:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a72      	ldr	r2, [pc, #456]	@ (8002938 <HAL_ADC_PollForConversion+0x1d8>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d004      	beq.n	800277e <HAL_ADC_PollForConversion+0x1e>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a70      	ldr	r2, [pc, #448]	@ (800293c <HAL_ADC_PollForConversion+0x1dc>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d101      	bne.n	8002782 <HAL_ADC_PollForConversion+0x22>
 800277e:	4b70      	ldr	r3, [pc, #448]	@ (8002940 <HAL_ADC_PollForConversion+0x1e0>)
 8002780:	e000      	b.n	8002784 <HAL_ADC_PollForConversion+0x24>
 8002782:	4b70      	ldr	r3, [pc, #448]	@ (8002944 <HAL_ADC_PollForConversion+0x1e4>)
 8002784:	4618      	mov	r0, r3
 8002786:	f7ff fc2f 	bl	8001fe8 <LL_ADC_GetMultimode>
 800278a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	691b      	ldr	r3, [r3, #16]
 8002790:	2b08      	cmp	r3, #8
 8002792:	d102      	bne.n	800279a <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8002794:	2308      	movs	r3, #8
 8002796:	61fb      	str	r3, [r7, #28]
 8002798:	e037      	b.n	800280a <HAL_ADC_PollForConversion+0xaa>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800279a:	697b      	ldr	r3, [r7, #20]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d005      	beq.n	80027ac <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	2b05      	cmp	r3, #5
 80027a4:	d002      	beq.n	80027ac <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	2b09      	cmp	r3, #9
 80027aa:	d111      	bne.n	80027d0 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	68db      	ldr	r3, [r3, #12]
 80027b2:	f003 0301 	and.w	r3, r3, #1
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d007      	beq.n	80027ca <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027be:	f043 0220 	orr.w	r2, r3, #32
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 80027c6:	2301      	movs	r3, #1
 80027c8:	e0b1      	b.n	800292e <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80027ca:	2304      	movs	r3, #4
 80027cc:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 80027ce:	e01c      	b.n	800280a <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4a58      	ldr	r2, [pc, #352]	@ (8002938 <HAL_ADC_PollForConversion+0x1d8>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d004      	beq.n	80027e4 <HAL_ADC_PollForConversion+0x84>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4a57      	ldr	r2, [pc, #348]	@ (800293c <HAL_ADC_PollForConversion+0x1dc>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d101      	bne.n	80027e8 <HAL_ADC_PollForConversion+0x88>
 80027e4:	4b56      	ldr	r3, [pc, #344]	@ (8002940 <HAL_ADC_PollForConversion+0x1e0>)
 80027e6:	e000      	b.n	80027ea <HAL_ADC_PollForConversion+0x8a>
 80027e8:	4b56      	ldr	r3, [pc, #344]	@ (8002944 <HAL_ADC_PollForConversion+0x1e4>)
 80027ea:	4618      	mov	r0, r3
 80027ec:	f7ff fc0a 	bl	8002004 <LL_ADC_GetMultiDMATransfer>
 80027f0:	4603      	mov	r3, r0
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d007      	beq.n	8002806 <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027fa:	f043 0220 	orr.w	r2, r3, #32
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 8002802:	2301      	movs	r3, #1
 8002804:	e093      	b.n	800292e <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002806:	2304      	movs	r3, #4
 8002808:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800280a:	f7ff fa67 	bl	8001cdc <HAL_GetTick>
 800280e:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002810:	e021      	b.n	8002856 <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002818:	d01d      	beq.n	8002856 <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800281a:	f7ff fa5f 	bl	8001cdc <HAL_GetTick>
 800281e:	4602      	mov	r2, r0
 8002820:	693b      	ldr	r3, [r7, #16]
 8002822:	1ad3      	subs	r3, r2, r3
 8002824:	683a      	ldr	r2, [r7, #0]
 8002826:	429a      	cmp	r2, r3
 8002828:	d302      	bcc.n	8002830 <HAL_ADC_PollForConversion+0xd0>
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d112      	bne.n	8002856 <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	681a      	ldr	r2, [r3, #0]
 8002836:	69fb      	ldr	r3, [r7, #28]
 8002838:	4013      	ands	r3, r2
 800283a:	2b00      	cmp	r3, #0
 800283c:	d10b      	bne.n	8002856 <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002842:	f043 0204 	orr.w	r2, r3, #4
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2200      	movs	r2, #0
 800284e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

          return HAL_TIMEOUT;
 8002852:	2303      	movs	r3, #3
 8002854:	e06b      	b.n	800292e <HAL_ADC_PollForConversion+0x1ce>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	681a      	ldr	r2, [r3, #0]
 800285c:	69fb      	ldr	r3, [r7, #28]
 800285e:	4013      	ands	r3, r2
 8002860:	2b00      	cmp	r3, #0
 8002862:	d0d6      	beq.n	8002812 <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002868:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4618      	mov	r0, r3
 8002876:	f7ff fb28 	bl	8001eca <LL_ADC_REG_IsTriggerSourceSWStart>
 800287a:	4603      	mov	r3, r0
 800287c:	2b00      	cmp	r3, #0
 800287e:	d01c      	beq.n	80028ba <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	7d5b      	ldrb	r3, [r3, #21]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d118      	bne.n	80028ba <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f003 0308 	and.w	r3, r3, #8
 8002892:	2b08      	cmp	r3, #8
 8002894:	d111      	bne.n	80028ba <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800289a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	655a      	str	r2, [r3, #84]	@ 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028a6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d105      	bne.n	80028ba <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028b2:	f043 0201 	orr.w	r2, r3, #1
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a1f      	ldr	r2, [pc, #124]	@ (800293c <HAL_ADC_PollForConversion+0x1dc>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d002      	beq.n	80028ca <HAL_ADC_PollForConversion+0x16a>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	e000      	b.n	80028cc <HAL_ADC_PollForConversion+0x16c>
 80028ca:	4b1b      	ldr	r3, [pc, #108]	@ (8002938 <HAL_ADC_PollForConversion+0x1d8>)
 80028cc:	687a      	ldr	r2, [r7, #4]
 80028ce:	6812      	ldr	r2, [r2, #0]
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d008      	beq.n	80028e6 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d005      	beq.n	80028e6 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	2b05      	cmp	r3, #5
 80028de:	d002      	beq.n	80028e6 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80028e0:	697b      	ldr	r3, [r7, #20]
 80028e2:	2b09      	cmp	r3, #9
 80028e4:	d104      	bne.n	80028f0 <HAL_ADC_PollForConversion+0x190>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	68db      	ldr	r3, [r3, #12]
 80028ec:	61bb      	str	r3, [r7, #24]
 80028ee:	e00c      	b.n	800290a <HAL_ADC_PollForConversion+0x1aa>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a11      	ldr	r2, [pc, #68]	@ (800293c <HAL_ADC_PollForConversion+0x1dc>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d002      	beq.n	8002900 <HAL_ADC_PollForConversion+0x1a0>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	e000      	b.n	8002902 <HAL_ADC_PollForConversion+0x1a2>
 8002900:	4b0d      	ldr	r3, [pc, #52]	@ (8002938 <HAL_ADC_PollForConversion+0x1d8>)
 8002902:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	68db      	ldr	r3, [r3, #12]
 8002908:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 800290a:	69fb      	ldr	r3, [r7, #28]
 800290c:	2b08      	cmp	r3, #8
 800290e:	d104      	bne.n	800291a <HAL_ADC_PollForConversion+0x1ba>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	2208      	movs	r2, #8
 8002916:	601a      	str	r2, [r3, #0]
 8002918:	e008      	b.n	800292c <HAL_ADC_PollForConversion+0x1cc>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 800291a:	69bb      	ldr	r3, [r7, #24]
 800291c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002920:	2b00      	cmp	r3, #0
 8002922:	d103      	bne.n	800292c <HAL_ADC_PollForConversion+0x1cc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	220c      	movs	r2, #12
 800292a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 800292c:	2300      	movs	r3, #0
}
 800292e:	4618      	mov	r0, r3
 8002930:	3720      	adds	r7, #32
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}
 8002936:	bf00      	nop
 8002938:	40022000 	.word	0x40022000
 800293c:	40022100 	.word	0x40022100
 8002940:	40022300 	.word	0x40022300
 8002944:	58026300 	.word	0x58026300

08002948 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8002948:	b480      	push	{r7}
 800294a:	b083      	sub	sp, #12
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8002956:	4618      	mov	r0, r3
 8002958:	370c      	adds	r7, #12
 800295a:	46bd      	mov	sp, r7
 800295c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002960:	4770      	bx	lr
	...

08002964 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002964:	b590      	push	{r4, r7, lr}
 8002966:	b08d      	sub	sp, #52	@ 0x34
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
 800296c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800296e:	2300      	movs	r3, #0
 8002970:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002974:	2300      	movs	r3, #0
 8002976:	60fb      	str	r3, [r7, #12]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	68db      	ldr	r3, [r3, #12]
 800297c:	4a65      	ldr	r2, [pc, #404]	@ (8002b14 <HAL_ADC_ConfigChannel+0x1b0>)
 800297e:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002986:	2b01      	cmp	r3, #1
 8002988:	d101      	bne.n	800298e <HAL_ADC_ConfigChannel+0x2a>
 800298a:	2302      	movs	r3, #2
 800298c:	e2c7      	b.n	8002f1e <HAL_ADC_ConfigChannel+0x5ba>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2201      	movs	r2, #1
 8002992:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4618      	mov	r0, r3
 800299c:	f7ff fc04 	bl	80021a8 <LL_ADC_REG_IsConversionOngoing>
 80029a0:	4603      	mov	r3, r0
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	f040 82ac 	bne.w	8002f00 <HAL_ADC_ConfigChannel+0x59c>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	db2c      	blt.n	8002a0a <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d108      	bne.n	80029ce <HAL_ADC_ConfigChannel+0x6a>
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	0e9b      	lsrs	r3, r3, #26
 80029c2:	f003 031f 	and.w	r3, r3, #31
 80029c6:	2201      	movs	r2, #1
 80029c8:	fa02 f303 	lsl.w	r3, r2, r3
 80029cc:	e016      	b.n	80029fc <HAL_ADC_ConfigChannel+0x98>
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029d4:	697b      	ldr	r3, [r7, #20]
 80029d6:	fa93 f3a3 	rbit	r3, r3
 80029da:	613b      	str	r3, [r7, #16]
  return result;
 80029dc:	693b      	ldr	r3, [r7, #16]
 80029de:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80029e0:	69bb      	ldr	r3, [r7, #24]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d101      	bne.n	80029ea <HAL_ADC_ConfigChannel+0x86>
    return 32U;
 80029e6:	2320      	movs	r3, #32
 80029e8:	e003      	b.n	80029f2 <HAL_ADC_ConfigChannel+0x8e>
  return __builtin_clz(value);
 80029ea:	69bb      	ldr	r3, [r7, #24]
 80029ec:	fab3 f383 	clz	r3, r3
 80029f0:	b2db      	uxtb	r3, r3
 80029f2:	f003 031f 	and.w	r3, r3, #31
 80029f6:	2201      	movs	r2, #1
 80029f8:	fa02 f303 	lsl.w	r3, r2, r3
 80029fc:	687a      	ldr	r2, [r7, #4]
 80029fe:	6812      	ldr	r2, [r2, #0]
 8002a00:	69d1      	ldr	r1, [r2, #28]
 8002a02:	687a      	ldr	r2, [r7, #4]
 8002a04:	6812      	ldr	r2, [r2, #0]
 8002a06:	430b      	orrs	r3, r1
 8002a08:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6818      	ldr	r0, [r3, #0]
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	6859      	ldr	r1, [r3, #4]
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	461a      	mov	r2, r3
 8002a18:	f7ff fa6a 	bl	8001ef0 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4618      	mov	r0, r3
 8002a22:	f7ff fbc1 	bl	80021a8 <LL_ADC_REG_IsConversionOngoing>
 8002a26:	62b8      	str	r0, [r7, #40]	@ 0x28
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	f7ff fbe3 	bl	80021f8 <LL_ADC_INJ_IsConversionOngoing>
 8002a32:	6278      	str	r0, [r7, #36]	@ 0x24
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002a34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	f040 80b8 	bne.w	8002bac <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002a3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	f040 80b4 	bne.w	8002bac <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6818      	ldr	r0, [r3, #0]
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	6819      	ldr	r1, [r3, #0]
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	689b      	ldr	r3, [r3, #8]
 8002a50:	461a      	mov	r2, r3
 8002a52:	f7ff fa79 	bl	8001f48 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002a56:	4b30      	ldr	r3, [pc, #192]	@ (8002b18 <HAL_ADC_ConfigChannel+0x1b4>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8002a5e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002a62:	d10b      	bne.n	8002a7c <HAL_ADC_ConfigChannel+0x118>
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	695a      	ldr	r2, [r3, #20]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	68db      	ldr	r3, [r3, #12]
 8002a6e:	089b      	lsrs	r3, r3, #2
 8002a70:	f003 0307 	and.w	r3, r3, #7
 8002a74:	005b      	lsls	r3, r3, #1
 8002a76:	fa02 f303 	lsl.w	r3, r2, r3
 8002a7a:	e01d      	b.n	8002ab8 <HAL_ADC_ConfigChannel+0x154>
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	68db      	ldr	r3, [r3, #12]
 8002a82:	f003 0310 	and.w	r3, r3, #16
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d10b      	bne.n	8002aa2 <HAL_ADC_ConfigChannel+0x13e>
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	695a      	ldr	r2, [r3, #20]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	68db      	ldr	r3, [r3, #12]
 8002a94:	089b      	lsrs	r3, r3, #2
 8002a96:	f003 0307 	and.w	r3, r3, #7
 8002a9a:	005b      	lsls	r3, r3, #1
 8002a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa0:	e00a      	b.n	8002ab8 <HAL_ADC_ConfigChannel+0x154>
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	695a      	ldr	r2, [r3, #20]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	68db      	ldr	r3, [r3, #12]
 8002aac:	089b      	lsrs	r3, r3, #2
 8002aae:	f003 0304 	and.w	r3, r3, #4
 8002ab2:	005b      	lsls	r3, r3, #1
 8002ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab8:	623b      	str	r3, [r7, #32]
      }

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	691b      	ldr	r3, [r3, #16]
 8002abe:	2b04      	cmp	r3, #4
 8002ac0:	d02c      	beq.n	8002b1c <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6818      	ldr	r0, [r3, #0]
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	6919      	ldr	r1, [r3, #16]
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	681a      	ldr	r2, [r3, #0]
 8002ace:	6a3b      	ldr	r3, [r7, #32]
 8002ad0:	f7ff f9a7 	bl	8001e22 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6818      	ldr	r0, [r3, #0]
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	6919      	ldr	r1, [r3, #16]
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	7e5b      	ldrb	r3, [r3, #25]
 8002ae0:	2b01      	cmp	r3, #1
 8002ae2:	d102      	bne.n	8002aea <HAL_ADC_ConfigChannel+0x186>
 8002ae4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8002ae8:	e000      	b.n	8002aec <HAL_ADC_ConfigChannel+0x188>
 8002aea:	2300      	movs	r3, #0
 8002aec:	461a      	mov	r2, r3
 8002aee:	f7ff f9d1 	bl	8001e94 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6818      	ldr	r0, [r3, #0]
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	6919      	ldr	r1, [r3, #16]
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	7e1b      	ldrb	r3, [r3, #24]
 8002afe:	2b01      	cmp	r3, #1
 8002b00:	d102      	bne.n	8002b08 <HAL_ADC_ConfigChannel+0x1a4>
 8002b02:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002b06:	e000      	b.n	8002b0a <HAL_ADC_ConfigChannel+0x1a6>
 8002b08:	2300      	movs	r3, #0
 8002b0a:	461a      	mov	r2, r3
 8002b0c:	f7ff f9a9 	bl	8001e62 <LL_ADC_SetDataRightShift>
 8002b10:	e04c      	b.n	8002bac <HAL_ADC_ConfigChannel+0x248>
 8002b12:	bf00      	nop
 8002b14:	47ff0000 	.word	0x47ff0000
 8002b18:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b22:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	069b      	lsls	r3, r3, #26
 8002b2c:	429a      	cmp	r2, r3
 8002b2e:	d107      	bne.n	8002b40 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002b3e:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002b46:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	069b      	lsls	r3, r3, #26
 8002b50:	429a      	cmp	r2, r3
 8002b52:	d107      	bne.n	8002b64 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002b62:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002b6a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	069b      	lsls	r3, r3, #26
 8002b74:	429a      	cmp	r2, r3
 8002b76:	d107      	bne.n	8002b88 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002b86:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002b8e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	069b      	lsls	r3, r3, #26
 8002b98:	429a      	cmp	r2, r3
 8002b9a:	d107      	bne.n	8002bac <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002baa:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	f7ff faab 	bl	800210c <LL_ADC_IsEnabled>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	f040 81aa 	bne.w	8002f12 <HAL_ADC_ConfigChannel+0x5ae>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6818      	ldr	r0, [r3, #0]
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	6819      	ldr	r1, [r3, #0]
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	68db      	ldr	r3, [r3, #12]
 8002bca:	461a      	mov	r2, r3
 8002bcc:	f7ff f9e8 	bl	8001fa0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	68db      	ldr	r3, [r3, #12]
 8002bd4:	4a87      	ldr	r2, [pc, #540]	@ (8002df4 <HAL_ADC_ConfigChannel+0x490>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	f040 809a 	bne.w	8002d10 <HAL_ADC_ConfigChannel+0x3ac>
      {
        /* Set ADC channel preselection of corresponding negative channel */
        LL_ADC_SetChannelPreselection(hadc->Instance, ADC_CHANNEL_DIFF_NEG_INPUT(hadc, sConfig->Channel));
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681a      	ldr	r2, [r3, #0]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4984      	ldr	r1, [pc, #528]	@ (8002df8 <HAL_ADC_ConfigChannel+0x494>)
 8002be6:	428b      	cmp	r3, r1
 8002be8:	d147      	bne.n	8002c7a <HAL_ADC_ConfigChannel+0x316>
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4983      	ldr	r1, [pc, #524]	@ (8002dfc <HAL_ADC_ConfigChannel+0x498>)
 8002bf0:	428b      	cmp	r3, r1
 8002bf2:	d040      	beq.n	8002c76 <HAL_ADC_ConfigChannel+0x312>
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4981      	ldr	r1, [pc, #516]	@ (8002e00 <HAL_ADC_ConfigChannel+0x49c>)
 8002bfa:	428b      	cmp	r3, r1
 8002bfc:	d039      	beq.n	8002c72 <HAL_ADC_ConfigChannel+0x30e>
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4980      	ldr	r1, [pc, #512]	@ (8002e04 <HAL_ADC_ConfigChannel+0x4a0>)
 8002c04:	428b      	cmp	r3, r1
 8002c06:	d032      	beq.n	8002c6e <HAL_ADC_ConfigChannel+0x30a>
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	497e      	ldr	r1, [pc, #504]	@ (8002e08 <HAL_ADC_ConfigChannel+0x4a4>)
 8002c0e:	428b      	cmp	r3, r1
 8002c10:	d02b      	beq.n	8002c6a <HAL_ADC_ConfigChannel+0x306>
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	497d      	ldr	r1, [pc, #500]	@ (8002e0c <HAL_ADC_ConfigChannel+0x4a8>)
 8002c18:	428b      	cmp	r3, r1
 8002c1a:	d024      	beq.n	8002c66 <HAL_ADC_ConfigChannel+0x302>
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	497b      	ldr	r1, [pc, #492]	@ (8002e10 <HAL_ADC_ConfigChannel+0x4ac>)
 8002c22:	428b      	cmp	r3, r1
 8002c24:	d01d      	beq.n	8002c62 <HAL_ADC_ConfigChannel+0x2fe>
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	497a      	ldr	r1, [pc, #488]	@ (8002e14 <HAL_ADC_ConfigChannel+0x4b0>)
 8002c2c:	428b      	cmp	r3, r1
 8002c2e:	d016      	beq.n	8002c5e <HAL_ADC_ConfigChannel+0x2fa>
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4978      	ldr	r1, [pc, #480]	@ (8002e18 <HAL_ADC_ConfigChannel+0x4b4>)
 8002c36:	428b      	cmp	r3, r1
 8002c38:	d00f      	beq.n	8002c5a <HAL_ADC_ConfigChannel+0x2f6>
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4977      	ldr	r1, [pc, #476]	@ (8002e1c <HAL_ADC_ConfigChannel+0x4b8>)
 8002c40:	428b      	cmp	r3, r1
 8002c42:	d008      	beq.n	8002c56 <HAL_ADC_ConfigChannel+0x2f2>
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4975      	ldr	r1, [pc, #468]	@ (8002e20 <HAL_ADC_ConfigChannel+0x4bc>)
 8002c4a:	428b      	cmp	r3, r1
 8002c4c:	d101      	bne.n	8002c52 <HAL_ADC_ConfigChannel+0x2ee>
 8002c4e:	4b75      	ldr	r3, [pc, #468]	@ (8002e24 <HAL_ADC_ConfigChannel+0x4c0>)
 8002c50:	e05a      	b.n	8002d08 <HAL_ADC_ConfigChannel+0x3a4>
 8002c52:	2300      	movs	r3, #0
 8002c54:	e058      	b.n	8002d08 <HAL_ADC_ConfigChannel+0x3a4>
 8002c56:	4b74      	ldr	r3, [pc, #464]	@ (8002e28 <HAL_ADC_ConfigChannel+0x4c4>)
 8002c58:	e056      	b.n	8002d08 <HAL_ADC_ConfigChannel+0x3a4>
 8002c5a:	4b74      	ldr	r3, [pc, #464]	@ (8002e2c <HAL_ADC_ConfigChannel+0x4c8>)
 8002c5c:	e054      	b.n	8002d08 <HAL_ADC_ConfigChannel+0x3a4>
 8002c5e:	4b6e      	ldr	r3, [pc, #440]	@ (8002e18 <HAL_ADC_ConfigChannel+0x4b4>)
 8002c60:	e052      	b.n	8002d08 <HAL_ADC_ConfigChannel+0x3a4>
 8002c62:	4b6c      	ldr	r3, [pc, #432]	@ (8002e14 <HAL_ADC_ConfigChannel+0x4b0>)
 8002c64:	e050      	b.n	8002d08 <HAL_ADC_ConfigChannel+0x3a4>
 8002c66:	4b72      	ldr	r3, [pc, #456]	@ (8002e30 <HAL_ADC_ConfigChannel+0x4cc>)
 8002c68:	e04e      	b.n	8002d08 <HAL_ADC_ConfigChannel+0x3a4>
 8002c6a:	4b72      	ldr	r3, [pc, #456]	@ (8002e34 <HAL_ADC_ConfigChannel+0x4d0>)
 8002c6c:	e04c      	b.n	8002d08 <HAL_ADC_ConfigChannel+0x3a4>
 8002c6e:	4b72      	ldr	r3, [pc, #456]	@ (8002e38 <HAL_ADC_ConfigChannel+0x4d4>)
 8002c70:	e04a      	b.n	8002d08 <HAL_ADC_ConfigChannel+0x3a4>
 8002c72:	4b72      	ldr	r3, [pc, #456]	@ (8002e3c <HAL_ADC_ConfigChannel+0x4d8>)
 8002c74:	e048      	b.n	8002d08 <HAL_ADC_ConfigChannel+0x3a4>
 8002c76:	2301      	movs	r3, #1
 8002c78:	e046      	b.n	8002d08 <HAL_ADC_ConfigChannel+0x3a4>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4970      	ldr	r1, [pc, #448]	@ (8002e40 <HAL_ADC_ConfigChannel+0x4dc>)
 8002c80:	428b      	cmp	r3, r1
 8002c82:	d140      	bne.n	8002d06 <HAL_ADC_ConfigChannel+0x3a2>
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	495c      	ldr	r1, [pc, #368]	@ (8002dfc <HAL_ADC_ConfigChannel+0x498>)
 8002c8a:	428b      	cmp	r3, r1
 8002c8c:	d039      	beq.n	8002d02 <HAL_ADC_ConfigChannel+0x39e>
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	495b      	ldr	r1, [pc, #364]	@ (8002e00 <HAL_ADC_ConfigChannel+0x49c>)
 8002c94:	428b      	cmp	r3, r1
 8002c96:	d032      	beq.n	8002cfe <HAL_ADC_ConfigChannel+0x39a>
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4959      	ldr	r1, [pc, #356]	@ (8002e04 <HAL_ADC_ConfigChannel+0x4a0>)
 8002c9e:	428b      	cmp	r3, r1
 8002ca0:	d02b      	beq.n	8002cfa <HAL_ADC_ConfigChannel+0x396>
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4958      	ldr	r1, [pc, #352]	@ (8002e08 <HAL_ADC_ConfigChannel+0x4a4>)
 8002ca8:	428b      	cmp	r3, r1
 8002caa:	d024      	beq.n	8002cf6 <HAL_ADC_ConfigChannel+0x392>
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4956      	ldr	r1, [pc, #344]	@ (8002e0c <HAL_ADC_ConfigChannel+0x4a8>)
 8002cb2:	428b      	cmp	r3, r1
 8002cb4:	d01d      	beq.n	8002cf2 <HAL_ADC_ConfigChannel+0x38e>
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4955      	ldr	r1, [pc, #340]	@ (8002e10 <HAL_ADC_ConfigChannel+0x4ac>)
 8002cbc:	428b      	cmp	r3, r1
 8002cbe:	d016      	beq.n	8002cee <HAL_ADC_ConfigChannel+0x38a>
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4953      	ldr	r1, [pc, #332]	@ (8002e14 <HAL_ADC_ConfigChannel+0x4b0>)
 8002cc6:	428b      	cmp	r3, r1
 8002cc8:	d00f      	beq.n	8002cea <HAL_ADC_ConfigChannel+0x386>
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4952      	ldr	r1, [pc, #328]	@ (8002e18 <HAL_ADC_ConfigChannel+0x4b4>)
 8002cd0:	428b      	cmp	r3, r1
 8002cd2:	d008      	beq.n	8002ce6 <HAL_ADC_ConfigChannel+0x382>
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4951      	ldr	r1, [pc, #324]	@ (8002e20 <HAL_ADC_ConfigChannel+0x4bc>)
 8002cda:	428b      	cmp	r3, r1
 8002cdc:	d101      	bne.n	8002ce2 <HAL_ADC_ConfigChannel+0x37e>
 8002cde:	4b51      	ldr	r3, [pc, #324]	@ (8002e24 <HAL_ADC_ConfigChannel+0x4c0>)
 8002ce0:	e012      	b.n	8002d08 <HAL_ADC_ConfigChannel+0x3a4>
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	e010      	b.n	8002d08 <HAL_ADC_ConfigChannel+0x3a4>
 8002ce6:	4b51      	ldr	r3, [pc, #324]	@ (8002e2c <HAL_ADC_ConfigChannel+0x4c8>)
 8002ce8:	e00e      	b.n	8002d08 <HAL_ADC_ConfigChannel+0x3a4>
 8002cea:	4b4b      	ldr	r3, [pc, #300]	@ (8002e18 <HAL_ADC_ConfigChannel+0x4b4>)
 8002cec:	e00c      	b.n	8002d08 <HAL_ADC_ConfigChannel+0x3a4>
 8002cee:	4b49      	ldr	r3, [pc, #292]	@ (8002e14 <HAL_ADC_ConfigChannel+0x4b0>)
 8002cf0:	e00a      	b.n	8002d08 <HAL_ADC_ConfigChannel+0x3a4>
 8002cf2:	4b4f      	ldr	r3, [pc, #316]	@ (8002e30 <HAL_ADC_ConfigChannel+0x4cc>)
 8002cf4:	e008      	b.n	8002d08 <HAL_ADC_ConfigChannel+0x3a4>
 8002cf6:	4b4f      	ldr	r3, [pc, #316]	@ (8002e34 <HAL_ADC_ConfigChannel+0x4d0>)
 8002cf8:	e006      	b.n	8002d08 <HAL_ADC_ConfigChannel+0x3a4>
 8002cfa:	4b4f      	ldr	r3, [pc, #316]	@ (8002e38 <HAL_ADC_ConfigChannel+0x4d4>)
 8002cfc:	e004      	b.n	8002d08 <HAL_ADC_ConfigChannel+0x3a4>
 8002cfe:	4b4f      	ldr	r3, [pc, #316]	@ (8002e3c <HAL_ADC_ConfigChannel+0x4d8>)
 8002d00:	e002      	b.n	8002d08 <HAL_ADC_ConfigChannel+0x3a4>
 8002d02:	2301      	movs	r3, #1
 8002d04:	e000      	b.n	8002d08 <HAL_ADC_ConfigChannel+0x3a4>
 8002d06:	2300      	movs	r3, #0
 8002d08:	4619      	mov	r1, r3
 8002d0a:	4610      	mov	r0, r2
 8002d0c:	f7ff f856 	bl	8001dbc <LL_ADC_SetChannelPreselection>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	f280 80fc 	bge.w	8002f12 <HAL_ADC_ConfigChannel+0x5ae>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4a36      	ldr	r2, [pc, #216]	@ (8002df8 <HAL_ADC_ConfigChannel+0x494>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d004      	beq.n	8002d2e <HAL_ADC_ConfigChannel+0x3ca>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a45      	ldr	r2, [pc, #276]	@ (8002e40 <HAL_ADC_ConfigChannel+0x4dc>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d101      	bne.n	8002d32 <HAL_ADC_ConfigChannel+0x3ce>
 8002d2e:	4b45      	ldr	r3, [pc, #276]	@ (8002e44 <HAL_ADC_ConfigChannel+0x4e0>)
 8002d30:	e000      	b.n	8002d34 <HAL_ADC_ConfigChannel+0x3d0>
 8002d32:	4b45      	ldr	r3, [pc, #276]	@ (8002e48 <HAL_ADC_ConfigChannel+0x4e4>)
 8002d34:	4618      	mov	r0, r3
 8002d36:	f7ff f833 	bl	8001da0 <LL_ADC_GetCommonPathInternalCh>
 8002d3a:	61f8      	str	r0, [r7, #28]

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a2d      	ldr	r2, [pc, #180]	@ (8002df8 <HAL_ADC_ConfigChannel+0x494>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d004      	beq.n	8002d50 <HAL_ADC_ConfigChannel+0x3ec>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a3d      	ldr	r2, [pc, #244]	@ (8002e40 <HAL_ADC_ConfigChannel+0x4dc>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d10e      	bne.n	8002d6e <HAL_ADC_ConfigChannel+0x40a>
 8002d50:	4829      	ldr	r0, [pc, #164]	@ (8002df8 <HAL_ADC_ConfigChannel+0x494>)
 8002d52:	f7ff f9db 	bl	800210c <LL_ADC_IsEnabled>
 8002d56:	4604      	mov	r4, r0
 8002d58:	4839      	ldr	r0, [pc, #228]	@ (8002e40 <HAL_ADC_ConfigChannel+0x4dc>)
 8002d5a:	f7ff f9d7 	bl	800210c <LL_ADC_IsEnabled>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	4323      	orrs	r3, r4
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	bf0c      	ite	eq
 8002d66:	2301      	moveq	r3, #1
 8002d68:	2300      	movne	r3, #0
 8002d6a:	b2db      	uxtb	r3, r3
 8002d6c:	e008      	b.n	8002d80 <HAL_ADC_ConfigChannel+0x41c>
 8002d6e:	4837      	ldr	r0, [pc, #220]	@ (8002e4c <HAL_ADC_ConfigChannel+0x4e8>)
 8002d70:	f7ff f9cc 	bl	800210c <LL_ADC_IsEnabled>
 8002d74:	4603      	mov	r3, r0
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	bf0c      	ite	eq
 8002d7a:	2301      	moveq	r3, #1
 8002d7c:	2300      	movne	r3, #0
 8002d7e:	b2db      	uxtb	r3, r3
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	f000 80b3 	beq.w	8002eec <HAL_ADC_ConfigChannel+0x588>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a31      	ldr	r2, [pc, #196]	@ (8002e50 <HAL_ADC_ConfigChannel+0x4ec>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d165      	bne.n	8002e5c <HAL_ADC_ConfigChannel+0x4f8>
 8002d90:	69fb      	ldr	r3, [r7, #28]
 8002d92:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d160      	bne.n	8002e5c <HAL_ADC_ConfigChannel+0x4f8>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a2b      	ldr	r2, [pc, #172]	@ (8002e4c <HAL_ADC_ConfigChannel+0x4e8>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	f040 80b6 	bne.w	8002f12 <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a13      	ldr	r2, [pc, #76]	@ (8002df8 <HAL_ADC_ConfigChannel+0x494>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d004      	beq.n	8002dba <HAL_ADC_ConfigChannel+0x456>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a22      	ldr	r2, [pc, #136]	@ (8002e40 <HAL_ADC_ConfigChannel+0x4dc>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d101      	bne.n	8002dbe <HAL_ADC_ConfigChannel+0x45a>
 8002dba:	4a22      	ldr	r2, [pc, #136]	@ (8002e44 <HAL_ADC_ConfigChannel+0x4e0>)
 8002dbc:	e000      	b.n	8002dc0 <HAL_ADC_ConfigChannel+0x45c>
 8002dbe:	4a22      	ldr	r2, [pc, #136]	@ (8002e48 <HAL_ADC_ConfigChannel+0x4e4>)
 8002dc0:	69fb      	ldr	r3, [r7, #28]
 8002dc2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002dc6:	4619      	mov	r1, r3
 8002dc8:	4610      	mov	r0, r2
 8002dca:	f7fe ffd6 	bl	8001d7a <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002dce:	4b21      	ldr	r3, [pc, #132]	@ (8002e54 <HAL_ADC_ConfigChannel+0x4f0>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	099b      	lsrs	r3, r3, #6
 8002dd4:	4a20      	ldr	r2, [pc, #128]	@ (8002e58 <HAL_ADC_ConfigChannel+0x4f4>)
 8002dd6:	fba2 2303 	umull	r2, r3, r2, r3
 8002dda:	099b      	lsrs	r3, r3, #6
 8002ddc:	3301      	adds	r3, #1
 8002dde:	005b      	lsls	r3, r3, #1
 8002de0:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 8002de2:	e002      	b.n	8002dea <HAL_ADC_ConfigChannel+0x486>
              {
                wait_loop_index--;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	3b01      	subs	r3, #1
 8002de8:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d1f9      	bne.n	8002de4 <HAL_ADC_ConfigChannel+0x480>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002df0:	e08f      	b.n	8002f12 <HAL_ADC_ConfigChannel+0x5ae>
 8002df2:	bf00      	nop
 8002df4:	47ff0000 	.word	0x47ff0000
 8002df8:	40022000 	.word	0x40022000
 8002dfc:	04300002 	.word	0x04300002
 8002e00:	08600004 	.word	0x08600004
 8002e04:	0c900008 	.word	0x0c900008
 8002e08:	10c00010 	.word	0x10c00010
 8002e0c:	14f00020 	.word	0x14f00020
 8002e10:	2a000400 	.word	0x2a000400
 8002e14:	2e300800 	.word	0x2e300800
 8002e18:	32601000 	.word	0x32601000
 8002e1c:	43210000 	.word	0x43210000
 8002e20:	4b840000 	.word	0x4b840000
 8002e24:	4fb80000 	.word	0x4fb80000
 8002e28:	47520000 	.word	0x47520000
 8002e2c:	36902000 	.word	0x36902000
 8002e30:	25b00200 	.word	0x25b00200
 8002e34:	21800100 	.word	0x21800100
 8002e38:	1d500080 	.word	0x1d500080
 8002e3c:	19200040 	.word	0x19200040
 8002e40:	40022100 	.word	0x40022100
 8002e44:	40022300 	.word	0x40022300
 8002e48:	58026300 	.word	0x58026300
 8002e4c:	58026000 	.word	0x58026000
 8002e50:	cb840000 	.word	0xcb840000
 8002e54:	24000004 	.word	0x24000004
 8002e58:	053e2d63 	.word	0x053e2d63
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a31      	ldr	r2, [pc, #196]	@ (8002f28 <HAL_ADC_ConfigChannel+0x5c4>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d11e      	bne.n	8002ea4 <HAL_ADC_ConfigChannel+0x540>
 8002e66:	69fb      	ldr	r3, [r7, #28]
 8002e68:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d119      	bne.n	8002ea4 <HAL_ADC_ConfigChannel+0x540>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a2d      	ldr	r2, [pc, #180]	@ (8002f2c <HAL_ADC_ConfigChannel+0x5c8>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d14b      	bne.n	8002f12 <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4a2c      	ldr	r2, [pc, #176]	@ (8002f30 <HAL_ADC_ConfigChannel+0x5cc>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d004      	beq.n	8002e8e <HAL_ADC_ConfigChannel+0x52a>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a2a      	ldr	r2, [pc, #168]	@ (8002f34 <HAL_ADC_ConfigChannel+0x5d0>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d101      	bne.n	8002e92 <HAL_ADC_ConfigChannel+0x52e>
 8002e8e:	4a2a      	ldr	r2, [pc, #168]	@ (8002f38 <HAL_ADC_ConfigChannel+0x5d4>)
 8002e90:	e000      	b.n	8002e94 <HAL_ADC_ConfigChannel+0x530>
 8002e92:	4a2a      	ldr	r2, [pc, #168]	@ (8002f3c <HAL_ADC_ConfigChannel+0x5d8>)
 8002e94:	69fb      	ldr	r3, [r7, #28]
 8002e96:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002e9a:	4619      	mov	r1, r3
 8002e9c:	4610      	mov	r0, r2
 8002e9e:	f7fe ff6c 	bl	8001d7a <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002ea2:	e036      	b.n	8002f12 <HAL_ADC_ConfigChannel+0x5ae>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a25      	ldr	r2, [pc, #148]	@ (8002f40 <HAL_ADC_ConfigChannel+0x5dc>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d131      	bne.n	8002f12 <HAL_ADC_ConfigChannel+0x5ae>
 8002eae:	69fb      	ldr	r3, [r7, #28]
 8002eb0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d12c      	bne.n	8002f12 <HAL_ADC_ConfigChannel+0x5ae>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a1b      	ldr	r2, [pc, #108]	@ (8002f2c <HAL_ADC_ConfigChannel+0x5c8>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d127      	bne.n	8002f12 <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4a1a      	ldr	r2, [pc, #104]	@ (8002f30 <HAL_ADC_ConfigChannel+0x5cc>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d004      	beq.n	8002ed6 <HAL_ADC_ConfigChannel+0x572>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a18      	ldr	r2, [pc, #96]	@ (8002f34 <HAL_ADC_ConfigChannel+0x5d0>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d101      	bne.n	8002eda <HAL_ADC_ConfigChannel+0x576>
 8002ed6:	4a18      	ldr	r2, [pc, #96]	@ (8002f38 <HAL_ADC_ConfigChannel+0x5d4>)
 8002ed8:	e000      	b.n	8002edc <HAL_ADC_ConfigChannel+0x578>
 8002eda:	4a18      	ldr	r2, [pc, #96]	@ (8002f3c <HAL_ADC_ConfigChannel+0x5d8>)
 8002edc:	69fb      	ldr	r3, [r7, #28]
 8002ede:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002ee2:	4619      	mov	r1, r3
 8002ee4:	4610      	mov	r0, r2
 8002ee6:	f7fe ff48 	bl	8001d7a <LL_ADC_SetCommonPathInternalCh>
 8002eea:	e012      	b.n	8002f12 <HAL_ADC_ConfigChannel+0x5ae>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ef0:	f043 0220 	orr.w	r2, r3, #32
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 8002ef8:	2301      	movs	r3, #1
 8002efa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8002efe:	e008      	b.n	8002f12 <HAL_ADC_ConfigChannel+0x5ae>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f04:	f043 0220 	orr.w	r2, r3, #32
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2200      	movs	r2, #0
 8002f16:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002f1a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8002f1e:	4618      	mov	r0, r3
 8002f20:	3734      	adds	r7, #52	@ 0x34
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd90      	pop	{r4, r7, pc}
 8002f26:	bf00      	nop
 8002f28:	c7520000 	.word	0xc7520000
 8002f2c:	58026000 	.word	0x58026000
 8002f30:	40022000 	.word	0x40022000
 8002f34:	40022100 	.word	0x40022100
 8002f38:	40022300 	.word	0x40022300
 8002f3c:	58026300 	.word	0x58026300
 8002f40:	cfb80000 	.word	0xcfb80000

08002f44 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b088      	sub	sp, #32
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
 8002f4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f7ff f924 	bl	80021a8 <LL_ADC_REG_IsConversionOngoing>
 8002f60:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4618      	mov	r0, r3
 8002f68:	f7ff f946 	bl	80021f8 <LL_ADC_INJ_IsConversionOngoing>
 8002f6c:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8002f6e:	693b      	ldr	r3, [r7, #16]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d103      	bne.n	8002f7c <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	f000 8098 	beq.w	80030ac <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	68db      	ldr	r3, [r3, #12]
 8002f82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d02a      	beq.n	8002fe0 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	7d5b      	ldrb	r3, [r3, #21]
 8002f8e:	2b01      	cmp	r3, #1
 8002f90:	d126      	bne.n	8002fe0 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	7d1b      	ldrb	r3, [r3, #20]
 8002f96:	2b01      	cmp	r3, #1
 8002f98:	d122      	bne.n	8002fe0 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002f9e:	e014      	b.n	8002fca <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8002fa0:	69fb      	ldr	r3, [r7, #28]
 8002fa2:	4a45      	ldr	r2, [pc, #276]	@ (80030b8 <ADC_ConversionStop+0x174>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d90d      	bls.n	8002fc4 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fac:	f043 0210 	orr.w	r2, r3, #16
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fb8:	f043 0201 	orr.w	r2, r3, #1
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	e074      	b.n	80030ae <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8002fc4:	69fb      	ldr	r3, [r7, #28]
 8002fc6:	3301      	adds	r3, #1
 8002fc8:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fd4:	2b40      	cmp	r3, #64	@ 0x40
 8002fd6:	d1e3      	bne.n	8002fa0 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	2240      	movs	r2, #64	@ 0x40
 8002fde:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8002fe0:	69bb      	ldr	r3, [r7, #24]
 8002fe2:	2b02      	cmp	r3, #2
 8002fe4:	d014      	beq.n	8003010 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4618      	mov	r0, r3
 8002fec:	f7ff f8dc 	bl	80021a8 <LL_ADC_REG_IsConversionOngoing>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d00c      	beq.n	8003010 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f7ff f899 	bl	8002132 <LL_ADC_IsDisableOngoing>
 8003000:	4603      	mov	r3, r0
 8003002:	2b00      	cmp	r3, #0
 8003004:	d104      	bne.n	8003010 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4618      	mov	r0, r3
 800300c:	f7ff f8b8 	bl	8002180 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8003010:	69bb      	ldr	r3, [r7, #24]
 8003012:	2b01      	cmp	r3, #1
 8003014:	d014      	beq.n	8003040 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4618      	mov	r0, r3
 800301c:	f7ff f8ec 	bl	80021f8 <LL_ADC_INJ_IsConversionOngoing>
 8003020:	4603      	mov	r3, r0
 8003022:	2b00      	cmp	r3, #0
 8003024:	d00c      	beq.n	8003040 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4618      	mov	r0, r3
 800302c:	f7ff f881 	bl	8002132 <LL_ADC_IsDisableOngoing>
 8003030:	4603      	mov	r3, r0
 8003032:	2b00      	cmp	r3, #0
 8003034:	d104      	bne.n	8003040 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4618      	mov	r0, r3
 800303c:	f7ff f8c8 	bl	80021d0 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8003040:	69bb      	ldr	r3, [r7, #24]
 8003042:	2b02      	cmp	r3, #2
 8003044:	d005      	beq.n	8003052 <ADC_ConversionStop+0x10e>
 8003046:	69bb      	ldr	r3, [r7, #24]
 8003048:	2b03      	cmp	r3, #3
 800304a:	d105      	bne.n	8003058 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 800304c:	230c      	movs	r3, #12
 800304e:	617b      	str	r3, [r7, #20]
        break;
 8003050:	e005      	b.n	800305e <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8003052:	2308      	movs	r3, #8
 8003054:	617b      	str	r3, [r7, #20]
        break;
 8003056:	e002      	b.n	800305e <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8003058:	2304      	movs	r3, #4
 800305a:	617b      	str	r3, [r7, #20]
        break;
 800305c:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800305e:	f7fe fe3d 	bl	8001cdc <HAL_GetTick>
 8003062:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003064:	e01b      	b.n	800309e <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003066:	f7fe fe39 	bl	8001cdc <HAL_GetTick>
 800306a:	4602      	mov	r2, r0
 800306c:	68bb      	ldr	r3, [r7, #8]
 800306e:	1ad3      	subs	r3, r2, r3
 8003070:	2b05      	cmp	r3, #5
 8003072:	d914      	bls.n	800309e <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	689a      	ldr	r2, [r3, #8]
 800307a:	697b      	ldr	r3, [r7, #20]
 800307c:	4013      	ands	r3, r2
 800307e:	2b00      	cmp	r3, #0
 8003080:	d00d      	beq.n	800309e <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003086:	f043 0210 	orr.w	r2, r3, #16
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003092:	f043 0201 	orr.w	r2, r3, #1
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800309a:	2301      	movs	r3, #1
 800309c:	e007      	b.n	80030ae <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	689a      	ldr	r2, [r3, #8]
 80030a4:	697b      	ldr	r3, [r7, #20]
 80030a6:	4013      	ands	r3, r2
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d1dc      	bne.n	8003066 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80030ac:	2300      	movs	r3, #0
}
 80030ae:	4618      	mov	r0, r3
 80030b0:	3720      	adds	r7, #32
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}
 80030b6:	bf00      	nop
 80030b8:	000cdbff 	.word	0x000cdbff

080030bc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b084      	sub	sp, #16
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4618      	mov	r0, r3
 80030ca:	f7ff f81f 	bl	800210c <LL_ADC_IsEnabled>
 80030ce:	4603      	mov	r3, r0
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d16e      	bne.n	80031b2 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	689a      	ldr	r2, [r3, #8]
 80030da:	4b38      	ldr	r3, [pc, #224]	@ (80031bc <ADC_Enable+0x100>)
 80030dc:	4013      	ands	r3, r2
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d00d      	beq.n	80030fe <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030e6:	f043 0210 	orr.w	r2, r3, #16
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030f2:	f043 0201 	orr.w	r2, r3, #1
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	e05a      	b.n	80031b4 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4618      	mov	r0, r3
 8003104:	f7fe ffda 	bl	80020bc <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003108:	f7fe fde8 	bl	8001cdc <HAL_GetTick>
 800310c:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4a2b      	ldr	r2, [pc, #172]	@ (80031c0 <ADC_Enable+0x104>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d004      	beq.n	8003122 <ADC_Enable+0x66>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a29      	ldr	r2, [pc, #164]	@ (80031c4 <ADC_Enable+0x108>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d101      	bne.n	8003126 <ADC_Enable+0x6a>
 8003122:	4b29      	ldr	r3, [pc, #164]	@ (80031c8 <ADC_Enable+0x10c>)
 8003124:	e000      	b.n	8003128 <ADC_Enable+0x6c>
 8003126:	4b29      	ldr	r3, [pc, #164]	@ (80031cc <ADC_Enable+0x110>)
 8003128:	4618      	mov	r0, r3
 800312a:	f7fe ff5d 	bl	8001fe8 <LL_ADC_GetMultimode>
 800312e:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a23      	ldr	r2, [pc, #140]	@ (80031c4 <ADC_Enable+0x108>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d002      	beq.n	8003140 <ADC_Enable+0x84>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	e000      	b.n	8003142 <ADC_Enable+0x86>
 8003140:	4b1f      	ldr	r3, [pc, #124]	@ (80031c0 <ADC_Enable+0x104>)
 8003142:	687a      	ldr	r2, [r7, #4]
 8003144:	6812      	ldr	r2, [r2, #0]
 8003146:	4293      	cmp	r3, r2
 8003148:	d02c      	beq.n	80031a4 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800314a:	68bb      	ldr	r3, [r7, #8]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d130      	bne.n	80031b2 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003150:	e028      	b.n	80031a4 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4618      	mov	r0, r3
 8003158:	f7fe ffd8 	bl	800210c <LL_ADC_IsEnabled>
 800315c:	4603      	mov	r3, r0
 800315e:	2b00      	cmp	r3, #0
 8003160:	d104      	bne.n	800316c <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4618      	mov	r0, r3
 8003168:	f7fe ffa8 	bl	80020bc <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800316c:	f7fe fdb6 	bl	8001cdc <HAL_GetTick>
 8003170:	4602      	mov	r2, r0
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	1ad3      	subs	r3, r2, r3
 8003176:	2b02      	cmp	r3, #2
 8003178:	d914      	bls.n	80031a4 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f003 0301 	and.w	r3, r3, #1
 8003184:	2b01      	cmp	r3, #1
 8003186:	d00d      	beq.n	80031a4 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800318c:	f043 0210 	orr.w	r2, r3, #16
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003198:	f043 0201 	orr.w	r2, r3, #1
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	659a      	str	r2, [r3, #88]	@ 0x58

            return HAL_ERROR;
 80031a0:	2301      	movs	r3, #1
 80031a2:	e007      	b.n	80031b4 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f003 0301 	and.w	r3, r3, #1
 80031ae:	2b01      	cmp	r3, #1
 80031b0:	d1cf      	bne.n	8003152 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80031b2:	2300      	movs	r3, #0
}
 80031b4:	4618      	mov	r0, r3
 80031b6:	3710      	adds	r7, #16
 80031b8:	46bd      	mov	sp, r7
 80031ba:	bd80      	pop	{r7, pc}
 80031bc:	8000003f 	.word	0x8000003f
 80031c0:	40022000 	.word	0x40022000
 80031c4:	40022100 	.word	0x40022100
 80031c8:	40022300 	.word	0x40022300
 80031cc:	58026300 	.word	0x58026300

080031d0 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b084      	sub	sp, #16
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4618      	mov	r0, r3
 80031de:	f7fe ffa8 	bl	8002132 <LL_ADC_IsDisableOngoing>
 80031e2:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4618      	mov	r0, r3
 80031ea:	f7fe ff8f 	bl	800210c <LL_ADC_IsEnabled>
 80031ee:	4603      	mov	r3, r0
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d047      	beq.n	8003284 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d144      	bne.n	8003284 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	689b      	ldr	r3, [r3, #8]
 8003200:	f003 030d 	and.w	r3, r3, #13
 8003204:	2b01      	cmp	r3, #1
 8003206:	d10c      	bne.n	8003222 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4618      	mov	r0, r3
 800320e:	f7fe ff69 	bl	80020e4 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	2203      	movs	r2, #3
 8003218:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800321a:	f7fe fd5f 	bl	8001cdc <HAL_GetTick>
 800321e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003220:	e029      	b.n	8003276 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003226:	f043 0210 	orr.w	r2, r3, #16
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003232:	f043 0201 	orr.w	r2, r3, #1
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 800323a:	2301      	movs	r3, #1
 800323c:	e023      	b.n	8003286 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800323e:	f7fe fd4d 	bl	8001cdc <HAL_GetTick>
 8003242:	4602      	mov	r2, r0
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	1ad3      	subs	r3, r2, r3
 8003248:	2b02      	cmp	r3, #2
 800324a:	d914      	bls.n	8003276 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	689b      	ldr	r3, [r3, #8]
 8003252:	f003 0301 	and.w	r3, r3, #1
 8003256:	2b00      	cmp	r3, #0
 8003258:	d00d      	beq.n	8003276 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800325e:	f043 0210 	orr.w	r2, r3, #16
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800326a:	f043 0201 	orr.w	r2, r3, #1
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8003272:	2301      	movs	r3, #1
 8003274:	e007      	b.n	8003286 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	689b      	ldr	r3, [r3, #8]
 800327c:	f003 0301 	and.w	r3, r3, #1
 8003280:	2b00      	cmp	r3, #0
 8003282:	d1dc      	bne.n	800323e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003284:	2300      	movs	r3, #0
}
 8003286:	4618      	mov	r0, r3
 8003288:	3710      	adds	r7, #16
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}
	...

08003290 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b084      	sub	sp, #16
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a7a      	ldr	r2, [pc, #488]	@ (8003488 <ADC_ConfigureBoostMode+0x1f8>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d004      	beq.n	80032ac <ADC_ConfigureBoostMode+0x1c>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a79      	ldr	r2, [pc, #484]	@ (800348c <ADC_ConfigureBoostMode+0x1fc>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d109      	bne.n	80032c0 <ADC_ConfigureBoostMode+0x30>
 80032ac:	4b78      	ldr	r3, [pc, #480]	@ (8003490 <ADC_ConfigureBoostMode+0x200>)
 80032ae:	689b      	ldr	r3, [r3, #8]
 80032b0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	bf14      	ite	ne
 80032b8:	2301      	movne	r3, #1
 80032ba:	2300      	moveq	r3, #0
 80032bc:	b2db      	uxtb	r3, r3
 80032be:	e008      	b.n	80032d2 <ADC_ConfigureBoostMode+0x42>
 80032c0:	4b74      	ldr	r3, [pc, #464]	@ (8003494 <ADC_ConfigureBoostMode+0x204>)
 80032c2:	689b      	ldr	r3, [r3, #8]
 80032c4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	bf14      	ite	ne
 80032cc:	2301      	movne	r3, #1
 80032ce:	2300      	moveq	r3, #0
 80032d0:	b2db      	uxtb	r3, r3
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d01c      	beq.n	8003310 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80032d6:	f003 fad5 	bl	8006884 <HAL_RCC_GetHCLKFreq>
 80032da:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80032e4:	d010      	beq.n	8003308 <ADC_ConfigureBoostMode+0x78>
 80032e6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80032ea:	d873      	bhi.n	80033d4 <ADC_ConfigureBoostMode+0x144>
 80032ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80032f0:	d002      	beq.n	80032f8 <ADC_ConfigureBoostMode+0x68>
 80032f2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80032f6:	d16d      	bne.n	80033d4 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	0c1b      	lsrs	r3, r3, #16
 80032fe:	68fa      	ldr	r2, [r7, #12]
 8003300:	fbb2 f3f3 	udiv	r3, r2, r3
 8003304:	60fb      	str	r3, [r7, #12]
        break;
 8003306:	e068      	b.n	80033da <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	089b      	lsrs	r3, r3, #2
 800330c:	60fb      	str	r3, [r7, #12]
        break;
 800330e:	e064      	b.n	80033da <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8003310:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8003314:	f04f 0100 	mov.w	r1, #0
 8003318:	f004 fd1a 	bl	8007d50 <HAL_RCCEx_GetPeriphCLKFreq>
 800331c:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8003326:	d051      	beq.n	80033cc <ADC_ConfigureBoostMode+0x13c>
 8003328:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 800332c:	d854      	bhi.n	80033d8 <ADC_ConfigureBoostMode+0x148>
 800332e:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8003332:	d047      	beq.n	80033c4 <ADC_ConfigureBoostMode+0x134>
 8003334:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8003338:	d84e      	bhi.n	80033d8 <ADC_ConfigureBoostMode+0x148>
 800333a:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 800333e:	d03d      	beq.n	80033bc <ADC_ConfigureBoostMode+0x12c>
 8003340:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8003344:	d848      	bhi.n	80033d8 <ADC_ConfigureBoostMode+0x148>
 8003346:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800334a:	d033      	beq.n	80033b4 <ADC_ConfigureBoostMode+0x124>
 800334c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003350:	d842      	bhi.n	80033d8 <ADC_ConfigureBoostMode+0x148>
 8003352:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8003356:	d029      	beq.n	80033ac <ADC_ConfigureBoostMode+0x11c>
 8003358:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 800335c:	d83c      	bhi.n	80033d8 <ADC_ConfigureBoostMode+0x148>
 800335e:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8003362:	d01a      	beq.n	800339a <ADC_ConfigureBoostMode+0x10a>
 8003364:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8003368:	d836      	bhi.n	80033d8 <ADC_ConfigureBoostMode+0x148>
 800336a:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800336e:	d014      	beq.n	800339a <ADC_ConfigureBoostMode+0x10a>
 8003370:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8003374:	d830      	bhi.n	80033d8 <ADC_ConfigureBoostMode+0x148>
 8003376:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800337a:	d00e      	beq.n	800339a <ADC_ConfigureBoostMode+0x10a>
 800337c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003380:	d82a      	bhi.n	80033d8 <ADC_ConfigureBoostMode+0x148>
 8003382:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003386:	d008      	beq.n	800339a <ADC_ConfigureBoostMode+0x10a>
 8003388:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800338c:	d824      	bhi.n	80033d8 <ADC_ConfigureBoostMode+0x148>
 800338e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003392:	d002      	beq.n	800339a <ADC_ConfigureBoostMode+0x10a>
 8003394:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003398:	d11e      	bne.n	80033d8 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	0c9b      	lsrs	r3, r3, #18
 80033a0:	005b      	lsls	r3, r3, #1
 80033a2:	68fa      	ldr	r2, [r7, #12]
 80033a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80033a8:	60fb      	str	r3, [r7, #12]
        break;
 80033aa:	e016      	b.n	80033da <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	091b      	lsrs	r3, r3, #4
 80033b0:	60fb      	str	r3, [r7, #12]
        break;
 80033b2:	e012      	b.n	80033da <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	095b      	lsrs	r3, r3, #5
 80033b8:	60fb      	str	r3, [r7, #12]
        break;
 80033ba:	e00e      	b.n	80033da <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	099b      	lsrs	r3, r3, #6
 80033c0:	60fb      	str	r3, [r7, #12]
        break;
 80033c2:	e00a      	b.n	80033da <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	09db      	lsrs	r3, r3, #7
 80033c8:	60fb      	str	r3, [r7, #12]
        break;
 80033ca:	e006      	b.n	80033da <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	0a1b      	lsrs	r3, r3, #8
 80033d0:	60fb      	str	r3, [r7, #12]
        break;
 80033d2:	e002      	b.n	80033da <ADC_ConfigureBoostMode+0x14a>
        break;
 80033d4:	bf00      	nop
 80033d6:	e000      	b.n	80033da <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 80033d8:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 80033da:	f7fe fcaf 	bl	8001d3c <HAL_GetREVID>
 80033de:	4603      	mov	r3, r0
 80033e0:	f241 0203 	movw	r2, #4099	@ 0x1003
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d815      	bhi.n	8003414 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	4a2b      	ldr	r2, [pc, #172]	@ (8003498 <ADC_ConfigureBoostMode+0x208>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d908      	bls.n	8003402 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	689a      	ldr	r2, [r3, #8]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80033fe:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8003400:	e03e      	b.n	8003480 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	689a      	ldr	r2, [r3, #8]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003410:	609a      	str	r2, [r3, #8]
}
 8003412:	e035      	b.n	8003480 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	085b      	lsrs	r3, r3, #1
 8003418:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	4a1f      	ldr	r2, [pc, #124]	@ (800349c <ADC_ConfigureBoostMode+0x20c>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d808      	bhi.n	8003434 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	689a      	ldr	r2, [r3, #8]
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8003430:	609a      	str	r2, [r3, #8]
}
 8003432:	e025      	b.n	8003480 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	4a1a      	ldr	r2, [pc, #104]	@ (80034a0 <ADC_ConfigureBoostMode+0x210>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d80a      	bhi.n	8003452 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	689b      	ldr	r3, [r3, #8]
 8003442:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800344e:	609a      	str	r2, [r3, #8]
}
 8003450:	e016      	b.n	8003480 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	4a13      	ldr	r2, [pc, #76]	@ (80034a4 <ADC_ConfigureBoostMode+0x214>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d80a      	bhi.n	8003470 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	689b      	ldr	r3, [r3, #8]
 8003460:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800346c:	609a      	str	r2, [r3, #8]
}
 800346e:	e007      	b.n	8003480 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	689a      	ldr	r2, [r3, #8]
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 800347e:	609a      	str	r2, [r3, #8]
}
 8003480:	bf00      	nop
 8003482:	3710      	adds	r7, #16
 8003484:	46bd      	mov	sp, r7
 8003486:	bd80      	pop	{r7, pc}
 8003488:	40022000 	.word	0x40022000
 800348c:	40022100 	.word	0x40022100
 8003490:	40022300 	.word	0x40022300
 8003494:	58026300 	.word	0x58026300
 8003498:	01312d00 	.word	0x01312d00
 800349c:	005f5e10 	.word	0x005f5e10
 80034a0:	00bebc20 	.word	0x00bebc20
 80034a4:	017d7840 	.word	0x017d7840

080034a8 <LL_ADC_IsEnabled>:
{
 80034a8:	b480      	push	{r7}
 80034aa:	b083      	sub	sp, #12
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	689b      	ldr	r3, [r3, #8]
 80034b4:	f003 0301 	and.w	r3, r3, #1
 80034b8:	2b01      	cmp	r3, #1
 80034ba:	d101      	bne.n	80034c0 <LL_ADC_IsEnabled+0x18>
 80034bc:	2301      	movs	r3, #1
 80034be:	e000      	b.n	80034c2 <LL_ADC_IsEnabled+0x1a>
 80034c0:	2300      	movs	r3, #0
}
 80034c2:	4618      	mov	r0, r3
 80034c4:	370c      	adds	r7, #12
 80034c6:	46bd      	mov	sp, r7
 80034c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034cc:	4770      	bx	lr

080034ce <LL_ADC_REG_IsConversionOngoing>:
{
 80034ce:	b480      	push	{r7}
 80034d0:	b083      	sub	sp, #12
 80034d2:	af00      	add	r7, sp, #0
 80034d4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	689b      	ldr	r3, [r3, #8]
 80034da:	f003 0304 	and.w	r3, r3, #4
 80034de:	2b04      	cmp	r3, #4
 80034e0:	d101      	bne.n	80034e6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80034e2:	2301      	movs	r3, #1
 80034e4:	e000      	b.n	80034e8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80034e6:	2300      	movs	r3, #0
}
 80034e8:	4618      	mov	r0, r3
 80034ea:	370c      	adds	r7, #12
 80034ec:	46bd      	mov	sp, r7
 80034ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f2:	4770      	bx	lr

080034f4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80034f4:	b590      	push	{r4, r7, lr}
 80034f6:	b09f      	sub	sp, #124	@ 0x7c
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
 80034fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80034fe:	2300      	movs	r3, #0
 8003500:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800350a:	2b01      	cmp	r3, #1
 800350c:	d101      	bne.n	8003512 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800350e:	2302      	movs	r3, #2
 8003510:	e0be      	b.n	8003690 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2201      	movs	r2, #1
 8003516:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 800351a:	2300      	movs	r3, #0
 800351c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 800351e:	2300      	movs	r3, #0
 8003520:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a5c      	ldr	r2, [pc, #368]	@ (8003698 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d102      	bne.n	8003532 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800352c:	4b5b      	ldr	r3, [pc, #364]	@ (800369c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800352e:	60bb      	str	r3, [r7, #8]
 8003530:	e001      	b.n	8003536 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003532:	2300      	movs	r3, #0
 8003534:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003536:	68bb      	ldr	r3, [r7, #8]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d10b      	bne.n	8003554 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003540:	f043 0220 	orr.w	r2, r3, #32
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2200      	movs	r2, #0
 800354c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8003550:	2301      	movs	r3, #1
 8003552:	e09d      	b.n	8003690 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003554:	68bb      	ldr	r3, [r7, #8]
 8003556:	4618      	mov	r0, r3
 8003558:	f7ff ffb9 	bl	80034ce <LL_ADC_REG_IsConversionOngoing>
 800355c:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4618      	mov	r0, r3
 8003564:	f7ff ffb3 	bl	80034ce <LL_ADC_REG_IsConversionOngoing>
 8003568:	4603      	mov	r3, r0
 800356a:	2b00      	cmp	r3, #0
 800356c:	d17f      	bne.n	800366e <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800356e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003570:	2b00      	cmp	r3, #0
 8003572:	d17c      	bne.n	800366e <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a47      	ldr	r2, [pc, #284]	@ (8003698 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d004      	beq.n	8003588 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a46      	ldr	r2, [pc, #280]	@ (800369c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d101      	bne.n	800358c <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8003588:	4b45      	ldr	r3, [pc, #276]	@ (80036a0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800358a:	e000      	b.n	800358e <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 800358c:	4b45      	ldr	r3, [pc, #276]	@ (80036a4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800358e:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d039      	beq.n	800360c <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8003598:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800359a:	689b      	ldr	r3, [r3, #8]
 800359c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	431a      	orrs	r2, r3
 80035a6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80035a8:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a3a      	ldr	r2, [pc, #232]	@ (8003698 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d004      	beq.n	80035be <HAL_ADCEx_MultiModeConfigChannel+0xca>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a38      	ldr	r2, [pc, #224]	@ (800369c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d10e      	bne.n	80035dc <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80035be:	4836      	ldr	r0, [pc, #216]	@ (8003698 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80035c0:	f7ff ff72 	bl	80034a8 <LL_ADC_IsEnabled>
 80035c4:	4604      	mov	r4, r0
 80035c6:	4835      	ldr	r0, [pc, #212]	@ (800369c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80035c8:	f7ff ff6e 	bl	80034a8 <LL_ADC_IsEnabled>
 80035cc:	4603      	mov	r3, r0
 80035ce:	4323      	orrs	r3, r4
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	bf0c      	ite	eq
 80035d4:	2301      	moveq	r3, #1
 80035d6:	2300      	movne	r3, #0
 80035d8:	b2db      	uxtb	r3, r3
 80035da:	e008      	b.n	80035ee <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 80035dc:	4832      	ldr	r0, [pc, #200]	@ (80036a8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80035de:	f7ff ff63 	bl	80034a8 <LL_ADC_IsEnabled>
 80035e2:	4603      	mov	r3, r0
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	bf0c      	ite	eq
 80035e8:	2301      	moveq	r3, #1
 80035ea:	2300      	movne	r3, #0
 80035ec:	b2db      	uxtb	r3, r3
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d047      	beq.n	8003682 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80035f2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80035f4:	689a      	ldr	r2, [r3, #8]
 80035f6:	4b2d      	ldr	r3, [pc, #180]	@ (80036ac <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80035f8:	4013      	ands	r3, r2
 80035fa:	683a      	ldr	r2, [r7, #0]
 80035fc:	6811      	ldr	r1, [r2, #0]
 80035fe:	683a      	ldr	r2, [r7, #0]
 8003600:	6892      	ldr	r2, [r2, #8]
 8003602:	430a      	orrs	r2, r1
 8003604:	431a      	orrs	r2, r3
 8003606:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003608:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800360a:	e03a      	b.n	8003682 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 800360c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800360e:	689b      	ldr	r3, [r3, #8]
 8003610:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003614:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003616:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a1e      	ldr	r2, [pc, #120]	@ (8003698 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d004      	beq.n	800362c <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4a1d      	ldr	r2, [pc, #116]	@ (800369c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d10e      	bne.n	800364a <HAL_ADCEx_MultiModeConfigChannel+0x156>
 800362c:	481a      	ldr	r0, [pc, #104]	@ (8003698 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800362e:	f7ff ff3b 	bl	80034a8 <LL_ADC_IsEnabled>
 8003632:	4604      	mov	r4, r0
 8003634:	4819      	ldr	r0, [pc, #100]	@ (800369c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003636:	f7ff ff37 	bl	80034a8 <LL_ADC_IsEnabled>
 800363a:	4603      	mov	r3, r0
 800363c:	4323      	orrs	r3, r4
 800363e:	2b00      	cmp	r3, #0
 8003640:	bf0c      	ite	eq
 8003642:	2301      	moveq	r3, #1
 8003644:	2300      	movne	r3, #0
 8003646:	b2db      	uxtb	r3, r3
 8003648:	e008      	b.n	800365c <HAL_ADCEx_MultiModeConfigChannel+0x168>
 800364a:	4817      	ldr	r0, [pc, #92]	@ (80036a8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 800364c:	f7ff ff2c 	bl	80034a8 <LL_ADC_IsEnabled>
 8003650:	4603      	mov	r3, r0
 8003652:	2b00      	cmp	r3, #0
 8003654:	bf0c      	ite	eq
 8003656:	2301      	moveq	r3, #1
 8003658:	2300      	movne	r3, #0
 800365a:	b2db      	uxtb	r3, r3
 800365c:	2b00      	cmp	r3, #0
 800365e:	d010      	beq.n	8003682 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003660:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003662:	689a      	ldr	r2, [r3, #8]
 8003664:	4b11      	ldr	r3, [pc, #68]	@ (80036ac <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8003666:	4013      	ands	r3, r2
 8003668:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800366a:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800366c:	e009      	b.n	8003682 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003672:	f043 0220 	orr.w	r2, r3, #32
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800367a:	2301      	movs	r3, #1
 800367c:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8003680:	e000      	b.n	8003684 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003682:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2200      	movs	r2, #0
 8003688:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800368c:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8003690:	4618      	mov	r0, r3
 8003692:	377c      	adds	r7, #124	@ 0x7c
 8003694:	46bd      	mov	sp, r7
 8003696:	bd90      	pop	{r4, r7, pc}
 8003698:	40022000 	.word	0x40022000
 800369c:	40022100 	.word	0x40022100
 80036a0:	40022300 	.word	0x40022300
 80036a4:	58026300 	.word	0x58026300
 80036a8:	58026000 	.word	0x58026000
 80036ac:	fffff0e0 	.word	0xfffff0e0

080036b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036b0:	b480      	push	{r7}
 80036b2:	b085      	sub	sp, #20
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	f003 0307 	and.w	r3, r3, #7
 80036be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80036c0:	4b0b      	ldr	r3, [pc, #44]	@ (80036f0 <__NVIC_SetPriorityGrouping+0x40>)
 80036c2:	68db      	ldr	r3, [r3, #12]
 80036c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80036c6:	68ba      	ldr	r2, [r7, #8]
 80036c8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80036cc:	4013      	ands	r3, r2
 80036ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80036d4:	68bb      	ldr	r3, [r7, #8]
 80036d6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80036d8:	4b06      	ldr	r3, [pc, #24]	@ (80036f4 <__NVIC_SetPriorityGrouping+0x44>)
 80036da:	4313      	orrs	r3, r2
 80036dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80036de:	4a04      	ldr	r2, [pc, #16]	@ (80036f0 <__NVIC_SetPriorityGrouping+0x40>)
 80036e0:	68bb      	ldr	r3, [r7, #8]
 80036e2:	60d3      	str	r3, [r2, #12]
}
 80036e4:	bf00      	nop
 80036e6:	3714      	adds	r7, #20
 80036e8:	46bd      	mov	sp, r7
 80036ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ee:	4770      	bx	lr
 80036f0:	e000ed00 	.word	0xe000ed00
 80036f4:	05fa0000 	.word	0x05fa0000

080036f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80036f8:	b480      	push	{r7}
 80036fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80036fc:	4b04      	ldr	r3, [pc, #16]	@ (8003710 <__NVIC_GetPriorityGrouping+0x18>)
 80036fe:	68db      	ldr	r3, [r3, #12]
 8003700:	0a1b      	lsrs	r3, r3, #8
 8003702:	f003 0307 	and.w	r3, r3, #7
}
 8003706:	4618      	mov	r0, r3
 8003708:	46bd      	mov	sp, r7
 800370a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370e:	4770      	bx	lr
 8003710:	e000ed00 	.word	0xe000ed00

08003714 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003714:	b480      	push	{r7}
 8003716:	b083      	sub	sp, #12
 8003718:	af00      	add	r7, sp, #0
 800371a:	4603      	mov	r3, r0
 800371c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800371e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003722:	2b00      	cmp	r3, #0
 8003724:	db0b      	blt.n	800373e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003726:	88fb      	ldrh	r3, [r7, #6]
 8003728:	f003 021f 	and.w	r2, r3, #31
 800372c:	4907      	ldr	r1, [pc, #28]	@ (800374c <__NVIC_EnableIRQ+0x38>)
 800372e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003732:	095b      	lsrs	r3, r3, #5
 8003734:	2001      	movs	r0, #1
 8003736:	fa00 f202 	lsl.w	r2, r0, r2
 800373a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800373e:	bf00      	nop
 8003740:	370c      	adds	r7, #12
 8003742:	46bd      	mov	sp, r7
 8003744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003748:	4770      	bx	lr
 800374a:	bf00      	nop
 800374c:	e000e100 	.word	0xe000e100

08003750 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003750:	b480      	push	{r7}
 8003752:	b083      	sub	sp, #12
 8003754:	af00      	add	r7, sp, #0
 8003756:	4603      	mov	r3, r0
 8003758:	6039      	str	r1, [r7, #0]
 800375a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800375c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003760:	2b00      	cmp	r3, #0
 8003762:	db0a      	blt.n	800377a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	b2da      	uxtb	r2, r3
 8003768:	490c      	ldr	r1, [pc, #48]	@ (800379c <__NVIC_SetPriority+0x4c>)
 800376a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800376e:	0112      	lsls	r2, r2, #4
 8003770:	b2d2      	uxtb	r2, r2
 8003772:	440b      	add	r3, r1
 8003774:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003778:	e00a      	b.n	8003790 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	b2da      	uxtb	r2, r3
 800377e:	4908      	ldr	r1, [pc, #32]	@ (80037a0 <__NVIC_SetPriority+0x50>)
 8003780:	88fb      	ldrh	r3, [r7, #6]
 8003782:	f003 030f 	and.w	r3, r3, #15
 8003786:	3b04      	subs	r3, #4
 8003788:	0112      	lsls	r2, r2, #4
 800378a:	b2d2      	uxtb	r2, r2
 800378c:	440b      	add	r3, r1
 800378e:	761a      	strb	r2, [r3, #24]
}
 8003790:	bf00      	nop
 8003792:	370c      	adds	r7, #12
 8003794:	46bd      	mov	sp, r7
 8003796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379a:	4770      	bx	lr
 800379c:	e000e100 	.word	0xe000e100
 80037a0:	e000ed00 	.word	0xe000ed00

080037a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80037a4:	b480      	push	{r7}
 80037a6:	b089      	sub	sp, #36	@ 0x24
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	60f8      	str	r0, [r7, #12]
 80037ac:	60b9      	str	r1, [r7, #8]
 80037ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	f003 0307 	and.w	r3, r3, #7
 80037b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80037b8:	69fb      	ldr	r3, [r7, #28]
 80037ba:	f1c3 0307 	rsb	r3, r3, #7
 80037be:	2b04      	cmp	r3, #4
 80037c0:	bf28      	it	cs
 80037c2:	2304      	movcs	r3, #4
 80037c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80037c6:	69fb      	ldr	r3, [r7, #28]
 80037c8:	3304      	adds	r3, #4
 80037ca:	2b06      	cmp	r3, #6
 80037cc:	d902      	bls.n	80037d4 <NVIC_EncodePriority+0x30>
 80037ce:	69fb      	ldr	r3, [r7, #28]
 80037d0:	3b03      	subs	r3, #3
 80037d2:	e000      	b.n	80037d6 <NVIC_EncodePriority+0x32>
 80037d4:	2300      	movs	r3, #0
 80037d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037d8:	f04f 32ff 	mov.w	r2, #4294967295
 80037dc:	69bb      	ldr	r3, [r7, #24]
 80037de:	fa02 f303 	lsl.w	r3, r2, r3
 80037e2:	43da      	mvns	r2, r3
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	401a      	ands	r2, r3
 80037e8:	697b      	ldr	r3, [r7, #20]
 80037ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80037ec:	f04f 31ff 	mov.w	r1, #4294967295
 80037f0:	697b      	ldr	r3, [r7, #20]
 80037f2:	fa01 f303 	lsl.w	r3, r1, r3
 80037f6:	43d9      	mvns	r1, r3
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037fc:	4313      	orrs	r3, r2
         );
}
 80037fe:	4618      	mov	r0, r3
 8003800:	3724      	adds	r7, #36	@ 0x24
 8003802:	46bd      	mov	sp, r7
 8003804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003808:	4770      	bx	lr
	...

0800380c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b082      	sub	sp, #8
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	3b01      	subs	r3, #1
 8003818:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800381c:	d301      	bcc.n	8003822 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800381e:	2301      	movs	r3, #1
 8003820:	e00f      	b.n	8003842 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003822:	4a0a      	ldr	r2, [pc, #40]	@ (800384c <SysTick_Config+0x40>)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	3b01      	subs	r3, #1
 8003828:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800382a:	210f      	movs	r1, #15
 800382c:	f04f 30ff 	mov.w	r0, #4294967295
 8003830:	f7ff ff8e 	bl	8003750 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003834:	4b05      	ldr	r3, [pc, #20]	@ (800384c <SysTick_Config+0x40>)
 8003836:	2200      	movs	r2, #0
 8003838:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800383a:	4b04      	ldr	r3, [pc, #16]	@ (800384c <SysTick_Config+0x40>)
 800383c:	2207      	movs	r2, #7
 800383e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003840:	2300      	movs	r3, #0
}
 8003842:	4618      	mov	r0, r3
 8003844:	3708      	adds	r7, #8
 8003846:	46bd      	mov	sp, r7
 8003848:	bd80      	pop	{r7, pc}
 800384a:	bf00      	nop
 800384c:	e000e010 	.word	0xe000e010

08003850 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b082      	sub	sp, #8
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003858:	6878      	ldr	r0, [r7, #4]
 800385a:	f7ff ff29 	bl	80036b0 <__NVIC_SetPriorityGrouping>
}
 800385e:	bf00      	nop
 8003860:	3708      	adds	r7, #8
 8003862:	46bd      	mov	sp, r7
 8003864:	bd80      	pop	{r7, pc}

08003866 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003866:	b580      	push	{r7, lr}
 8003868:	b086      	sub	sp, #24
 800386a:	af00      	add	r7, sp, #0
 800386c:	4603      	mov	r3, r0
 800386e:	60b9      	str	r1, [r7, #8]
 8003870:	607a      	str	r2, [r7, #4]
 8003872:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003874:	f7ff ff40 	bl	80036f8 <__NVIC_GetPriorityGrouping>
 8003878:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800387a:	687a      	ldr	r2, [r7, #4]
 800387c:	68b9      	ldr	r1, [r7, #8]
 800387e:	6978      	ldr	r0, [r7, #20]
 8003880:	f7ff ff90 	bl	80037a4 <NVIC_EncodePriority>
 8003884:	4602      	mov	r2, r0
 8003886:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800388a:	4611      	mov	r1, r2
 800388c:	4618      	mov	r0, r3
 800388e:	f7ff ff5f 	bl	8003750 <__NVIC_SetPriority>
}
 8003892:	bf00      	nop
 8003894:	3718      	adds	r7, #24
 8003896:	46bd      	mov	sp, r7
 8003898:	bd80      	pop	{r7, pc}

0800389a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800389a:	b580      	push	{r7, lr}
 800389c:	b082      	sub	sp, #8
 800389e:	af00      	add	r7, sp, #0
 80038a0:	4603      	mov	r3, r0
 80038a2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80038a4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80038a8:	4618      	mov	r0, r3
 80038aa:	f7ff ff33 	bl	8003714 <__NVIC_EnableIRQ>
}
 80038ae:	bf00      	nop
 80038b0:	3708      	adds	r7, #8
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bd80      	pop	{r7, pc}

080038b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80038b6:	b580      	push	{r7, lr}
 80038b8:	b082      	sub	sp, #8
 80038ba:	af00      	add	r7, sp, #0
 80038bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80038be:	6878      	ldr	r0, [r7, #4]
 80038c0:	f7ff ffa4 	bl	800380c <SysTick_Config>
 80038c4:	4603      	mov	r3, r0
}
 80038c6:	4618      	mov	r0, r3
 80038c8:	3708      	adds	r7, #8
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bd80      	pop	{r7, pc}
	...

080038d0 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b098      	sub	sp, #96	@ 0x60
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 80038d8:	4a84      	ldr	r2, [pc, #528]	@ (8003aec <HAL_FDCAN_Init+0x21c>)
 80038da:	f107 030c 	add.w	r3, r7, #12
 80038de:	4611      	mov	r1, r2
 80038e0:	224c      	movs	r2, #76	@ 0x4c
 80038e2:	4618      	mov	r0, r3
 80038e4:	f007 fe79 	bl	800b5da <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d101      	bne.n	80038f2 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 80038ee:	2301      	movs	r3, #1
 80038f0:	e1c6      	b.n	8003c80 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a7e      	ldr	r2, [pc, #504]	@ (8003af0 <HAL_FDCAN_Init+0x220>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d106      	bne.n	800390a <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8003904:	461a      	mov	r2, r3
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8003910:	b2db      	uxtb	r3, r3
 8003912:	2b00      	cmp	r3, #0
 8003914:	d106      	bne.n	8003924 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2200      	movs	r2, #0
 800391a:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800391e:	6878      	ldr	r0, [r7, #4]
 8003920:	f7fd fe02 	bl	8001528 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	699a      	ldr	r2, [r3, #24]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f022 0210 	bic.w	r2, r2, #16
 8003932:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003934:	f7fe f9d2 	bl	8001cdc <HAL_GetTick>
 8003938:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800393a:	e014      	b.n	8003966 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800393c:	f7fe f9ce 	bl	8001cdc <HAL_GetTick>
 8003940:	4602      	mov	r2, r0
 8003942:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003944:	1ad3      	subs	r3, r2, r3
 8003946:	2b0a      	cmp	r3, #10
 8003948:	d90d      	bls.n	8003966 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003950:	f043 0201 	orr.w	r2, r3, #1
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2203      	movs	r2, #3
 800395e:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 8003962:	2301      	movs	r3, #1
 8003964:	e18c      	b.n	8003c80 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	699b      	ldr	r3, [r3, #24]
 800396c:	f003 0308 	and.w	r3, r3, #8
 8003970:	2b08      	cmp	r3, #8
 8003972:	d0e3      	beq.n	800393c <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	699a      	ldr	r2, [r3, #24]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f042 0201 	orr.w	r2, r2, #1
 8003982:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003984:	f7fe f9aa 	bl	8001cdc <HAL_GetTick>
 8003988:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800398a:	e014      	b.n	80039b6 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800398c:	f7fe f9a6 	bl	8001cdc <HAL_GetTick>
 8003990:	4602      	mov	r2, r0
 8003992:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003994:	1ad3      	subs	r3, r2, r3
 8003996:	2b0a      	cmp	r3, #10
 8003998:	d90d      	bls.n	80039b6 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80039a0:	f043 0201 	orr.w	r2, r3, #1
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2203      	movs	r2, #3
 80039ae:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 80039b2:	2301      	movs	r3, #1
 80039b4:	e164      	b.n	8003c80 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	699b      	ldr	r3, [r3, #24]
 80039bc:	f003 0301 	and.w	r3, r3, #1
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d0e3      	beq.n	800398c <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	699a      	ldr	r2, [r3, #24]
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f042 0202 	orr.w	r2, r2, #2
 80039d2:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	7c1b      	ldrb	r3, [r3, #16]
 80039d8:	2b01      	cmp	r3, #1
 80039da:	d108      	bne.n	80039ee <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	699a      	ldr	r2, [r3, #24]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80039ea:	619a      	str	r2, [r3, #24]
 80039ec:	e007      	b.n	80039fe <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	699a      	ldr	r2, [r3, #24]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80039fc:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	7c5b      	ldrb	r3, [r3, #17]
 8003a02:	2b01      	cmp	r3, #1
 8003a04:	d108      	bne.n	8003a18 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	699a      	ldr	r2, [r3, #24]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003a14:	619a      	str	r2, [r3, #24]
 8003a16:	e007      	b.n	8003a28 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	699a      	ldr	r2, [r3, #24]
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003a26:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	7c9b      	ldrb	r3, [r3, #18]
 8003a2c:	2b01      	cmp	r3, #1
 8003a2e:	d108      	bne.n	8003a42 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	699a      	ldr	r2, [r3, #24]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003a3e:	619a      	str	r2, [r3, #24]
 8003a40:	e007      	b.n	8003a52 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	699a      	ldr	r2, [r3, #24]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003a50:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	699b      	ldr	r3, [r3, #24]
 8003a58:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	689a      	ldr	r2, [r3, #8]
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	430a      	orrs	r2, r1
 8003a66:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	699a      	ldr	r2, [r3, #24]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8003a76:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	691a      	ldr	r2, [r3, #16]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f022 0210 	bic.w	r2, r2, #16
 8003a86:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	68db      	ldr	r3, [r3, #12]
 8003a8c:	2b01      	cmp	r3, #1
 8003a8e:	d108      	bne.n	8003aa2 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	699a      	ldr	r2, [r3, #24]
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f042 0204 	orr.w	r2, r2, #4
 8003a9e:	619a      	str	r2, [r3, #24]
 8003aa0:	e030      	b.n	8003b04 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	68db      	ldr	r3, [r3, #12]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d02c      	beq.n	8003b04 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	68db      	ldr	r3, [r3, #12]
 8003aae:	2b02      	cmp	r3, #2
 8003ab0:	d020      	beq.n	8003af4 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	699a      	ldr	r2, [r3, #24]
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003ac0:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	691a      	ldr	r2, [r3, #16]
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f042 0210 	orr.w	r2, r2, #16
 8003ad0:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	68db      	ldr	r3, [r3, #12]
 8003ad6:	2b03      	cmp	r3, #3
 8003ad8:	d114      	bne.n	8003b04 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	699a      	ldr	r2, [r3, #24]
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f042 0220 	orr.w	r2, r2, #32
 8003ae8:	619a      	str	r2, [r3, #24]
 8003aea:	e00b      	b.n	8003b04 <HAL_FDCAN_Init+0x234>
 8003aec:	0800d604 	.word	0x0800d604
 8003af0:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	699a      	ldr	r2, [r3, #24]
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f042 0220 	orr.w	r2, r2, #32
 8003b02:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	699b      	ldr	r3, [r3, #24]
 8003b08:	3b01      	subs	r3, #1
 8003b0a:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	69db      	ldr	r3, [r3, #28]
 8003b10:	3b01      	subs	r3, #1
 8003b12:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003b14:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6a1b      	ldr	r3, [r3, #32]
 8003b1a:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003b1c:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	695b      	ldr	r3, [r3, #20]
 8003b24:	3b01      	subs	r3, #1
 8003b26:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8003b2c:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003b2e:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	689b      	ldr	r3, [r3, #8]
 8003b34:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003b38:	d115      	bne.n	8003b66 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b3e:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b44:	3b01      	subs	r3, #1
 8003b46:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003b48:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b4e:	3b01      	subs	r3, #1
 8003b50:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8003b52:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b5a:	3b01      	subs	r3, #1
 8003b5c:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8003b62:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003b64:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d00a      	beq.n	8003b84 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	430a      	orrs	r2, r1
 8003b80:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b8c:	4413      	add	r3, r2
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d011      	beq.n	8003bb6 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8003b9a:	f023 0107 	bic.w	r1, r3, #7
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003ba2:	009b      	lsls	r3, r3, #2
 8003ba4:	3360      	adds	r3, #96	@ 0x60
 8003ba6:	443b      	add	r3, r7
 8003ba8:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	430a      	orrs	r2, r1
 8003bb2:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d011      	beq.n	8003be2 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS,
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8003bc6:	f023 0107 	bic.w	r1, r3, #7
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bce:	009b      	lsls	r3, r3, #2
 8003bd0:	3360      	adds	r3, #96	@ 0x60
 8003bd2:	443b      	add	r3, r7
 8003bd4:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	430a      	orrs	r2, r1
 8003bde:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d012      	beq.n	8003c10 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS,
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8003bf2:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003bfa:	009b      	lsls	r3, r3, #2
 8003bfc:	3360      	adds	r3, #96	@ 0x60
 8003bfe:	443b      	add	r3, r7
 8003c00:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8003c04:	011a      	lsls	r2, r3, #4
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	430a      	orrs	r2, r1
 8003c0c:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d012      	beq.n	8003c3e <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS,
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8003c20:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c28:	009b      	lsls	r3, r3, #2
 8003c2a:	3360      	adds	r3, #96	@ 0x60
 8003c2c:	443b      	add	r3, r7
 8003c2e:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8003c32:	021a      	lsls	r2, r3, #8
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	430a      	orrs	r2, r1
 8003c3a:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4a11      	ldr	r2, [pc, #68]	@ (8003c88 <HAL_FDCAN_Init+0x3b8>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d107      	bne.n	8003c58 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	689a      	ldr	r2, [r3, #8]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	f022 0203 	bic.w	r2, r2, #3
 8003c56:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2200      	movs	r2, #0
 8003c64:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2201      	movs	r2, #1
 8003c6c:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8003c70:	6878      	ldr	r0, [r7, #4]
 8003c72:	f000 fc1f 	bl	80044b4 <FDCAN_CalcultateRamBlockAddresses>
 8003c76:	4603      	mov	r3, r0
 8003c78:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

  /* Return function status */
  return status;
 8003c7c:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
}
 8003c80:	4618      	mov	r0, r3
 8003c82:	3760      	adds	r7, #96	@ 0x60
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bd80      	pop	{r7, pc}
 8003c88:	4000a000 	.word	0x4000a000

08003c8c <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b083      	sub	sp, #12
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8003c9a:	b2db      	uxtb	r3, r3
 8003c9c:	2b01      	cmp	r3, #1
 8003c9e:	d111      	bne.n	8003cc4 <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2202      	movs	r2, #2
 8003ca4:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	699a      	ldr	r2, [r3, #24]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f022 0201 	bic.w	r2, r2, #1
 8003cb6:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Return function status */
    return HAL_OK;
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	e008      	b.n	8003cd6 <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003cca:	f043 0204 	orr.w	r2, r3, #4
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8003cd4:	2301      	movs	r3, #1
  }
}
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	370c      	adds	r7, #12
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce0:	4770      	bx	lr

08003ce2 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 8003ce2:	b580      	push	{r7, lr}
 8003ce4:	b086      	sub	sp, #24
 8003ce6:	af00      	add	r7, sp, #0
 8003ce8:	60f8      	str	r0, [r7, #12]
 8003cea:	60b9      	str	r1, [r7, #8]
 8003cec:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8003cf4:	b2db      	uxtb	r3, r3
 8003cf6:	2b02      	cmp	r3, #2
 8003cf8:	d141      	bne.n	8003d7e <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003d02:	f003 537c 	and.w	r3, r3, #1056964608	@ 0x3f000000
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d109      	bne.n	8003d1e <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003d10:	f043 0220 	orr.w	r2, r3, #32
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	e038      	b.n	8003d90 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8003d26:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d009      	beq.n	8003d42 <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003d34:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	e026      	b.n	8003d90 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8003d4a:	0c1b      	lsrs	r3, r3, #16
 8003d4c:	f003 031f 	and.w	r3, r3, #31
 8003d50:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8003d52:	697b      	ldr	r3, [r7, #20]
 8003d54:	687a      	ldr	r2, [r7, #4]
 8003d56:	68b9      	ldr	r1, [r7, #8]
 8003d58:	68f8      	ldr	r0, [r7, #12]
 8003d5a:	f000 fd31 	bl	80047c0 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	2101      	movs	r1, #1
 8003d64:	697a      	ldr	r2, [r7, #20]
 8003d66:	fa01 f202 	lsl.w	r2, r1, r2
 8003d6a:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8003d6e:	2201      	movs	r2, #1
 8003d70:	697b      	ldr	r3, [r7, #20]
 8003d72:	409a      	lsls	r2, r3
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    }

    /* Return function status */
    return HAL_OK;
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	e008      	b.n	8003d90 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003d84:	f043 0208 	orr.w	r2, r3, #8
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8003d8e:	2301      	movs	r3, #1
  }
}
 8003d90:	4618      	mov	r0, r3
 8003d92:	3718      	adds	r7, #24
 8003d94:	46bd      	mov	sp, r7
 8003d96:	bd80      	pop	{r7, pc}

08003d98 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	b087      	sub	sp, #28
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	60f8      	str	r0, [r7, #12]
 8003da0:	60b9      	str	r1, [r7, #8]
 8003da2:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8003daa:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8003dac:	7dfb      	ldrb	r3, [r7, #23]
 8003dae:	2b01      	cmp	r3, #1
 8003db0:	d002      	beq.n	8003db8 <HAL_FDCAN_ActivateNotification+0x20>
 8003db2:	7dfb      	ldrb	r3, [r7, #23]
 8003db4:	2b02      	cmp	r3, #2
 8003db6:	d155      	bne.n	8003e64 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003dbe:	68bb      	ldr	r3, [r7, #8]
 8003dc0:	4013      	ands	r3, r2
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d108      	bne.n	8003dd8 <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f042 0201 	orr.w	r2, r2, #1
 8003dd4:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003dd6:	e014      	b.n	8003e02 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003dde:	68bb      	ldr	r3, [r7, #8]
 8003de0:	4013      	ands	r3, r2
 8003de2:	68ba      	ldr	r2, [r7, #8]
 8003de4:	429a      	cmp	r2, r3
 8003de6:	d108      	bne.n	8003dfa <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f042 0202 	orr.w	r2, r2, #2
 8003df6:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003df8:	e003      	b.n	8003e02 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	2203      	movs	r2, #3
 8003e00:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8003e02:	68bb      	ldr	r3, [r7, #8]
 8003e04:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d009      	beq.n	8003e20 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	687a      	ldr	r2, [r7, #4]
 8003e1a:	430a      	orrs	r2, r1
 8003e1c:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d009      	beq.n	8003e3e <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f8d3 10e4 	ldr.w	r1, [r3, #228]	@ 0xe4
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	687a      	ldr	r2, [r7, #4]
 8003e38:	430a      	orrs	r2, r1
 8003e3a:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003e44:	68ba      	ldr	r2, [r7, #8]
 8003e46:	4b0f      	ldr	r3, [pc, #60]	@ (8003e84 <HAL_FDCAN_ActivateNotification+0xec>)
 8003e48:	4013      	ands	r3, r2
 8003e4a:	68fa      	ldr	r2, [r7, #12]
 8003e4c:	6812      	ldr	r2, [r2, #0]
 8003e4e:	430b      	orrs	r3, r1
 8003e50:	6553      	str	r3, [r2, #84]	@ 0x54
 8003e52:	4b0d      	ldr	r3, [pc, #52]	@ (8003e88 <HAL_FDCAN_ActivateNotification+0xf0>)
 8003e54:	695a      	ldr	r2, [r3, #20]
 8003e56:	68bb      	ldr	r3, [r7, #8]
 8003e58:	0f9b      	lsrs	r3, r3, #30
 8003e5a:	490b      	ldr	r1, [pc, #44]	@ (8003e88 <HAL_FDCAN_ActivateNotification+0xf0>)
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 8003e60:	2300      	movs	r3, #0
 8003e62:	e008      	b.n	8003e76 <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003e6a:	f043 0202 	orr.w	r2, r3, #2
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8003e74:	2301      	movs	r3, #1
  }
}
 8003e76:	4618      	mov	r0, r3
 8003e78:	371c      	adds	r7, #28
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e80:	4770      	bx	lr
 8003e82:	bf00      	nop
 8003e84:	3fcfffff 	.word	0x3fcfffff
 8003e88:	4000a800 	.word	0x4000a800

08003e8c <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b096      	sub	sp, #88	@ 0x58
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
  uint32_t itsourceIE;
  uint32_t itsourceTTIE;
  uint32_t itflagIR;
  uint32_t itflagTTIR;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 8003e94:	4b9a      	ldr	r3, [pc, #616]	@ (8004100 <HAL_FDCAN_IRQHandler+0x274>)
 8003e96:	691b      	ldr	r3, [r3, #16]
 8003e98:	079b      	lsls	r3, r3, #30
 8003e9a:	657b      	str	r3, [r7, #84]	@ 0x54
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 8003e9c:	4b98      	ldr	r3, [pc, #608]	@ (8004100 <HAL_FDCAN_IRQHandler+0x274>)
 8003e9e:	695b      	ldr	r3, [r3, #20]
 8003ea0:	079b      	lsls	r3, r3, #30
 8003ea2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003ea4:	4013      	ands	r3, r2
 8003ea6:	657b      	str	r3, [r7, #84]	@ 0x54
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003eae:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8003eb2:	653b      	str	r3, [r7, #80]	@ 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003eba:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8003ebc:	4013      	ands	r3, r2
 8003ebe:	653b      	str	r3, [r7, #80]	@ 0x50
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ec6:	f003 030f 	and.w	r3, r3, #15
 8003eca:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo0ITs &= hfdcan->Instance->IE;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ed2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003ed4:	4013      	ands	r3, r2
 8003ed6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ede:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003ee2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RxFifo1ITs &= hfdcan->Instance->IE;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003eea:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003eec:	4013      	ands	r3, r2
 8003eee:	64bb      	str	r3, [r7, #72]	@ 0x48
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ef6:	f003 5371 	and.w	r3, r3, #1010827264	@ 0x3c400000
 8003efa:	647b      	str	r3, [r7, #68]	@ 0x44
  Errors &= hfdcan->Instance->IE;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f02:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003f04:	4013      	ands	r3, r2
 8003f06:	647b      	str	r3, [r7, #68]	@ 0x44
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f0e:	f003 7360 	and.w	r3, r3, #58720256	@ 0x3800000
 8003f12:	643b      	str	r3, [r7, #64]	@ 0x40
  ErrorStatusITs &= hfdcan->Instance->IE;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f1a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003f1c:	4013      	ands	r3, r2
 8003f1e:	643b      	str	r3, [r7, #64]	@ 0x40
  itsourceIE = hfdcan->Instance->IE;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f26:	63fb      	str	r3, [r7, #60]	@ 0x3c
  itflagIR = hfdcan->Instance->IR;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f2e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8003f30:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f32:	0a1b      	lsrs	r3, r3, #8
 8003f34:	f003 0301 	and.w	r3, r3, #1
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d010      	beq.n	8003f5e <HAL_FDCAN_IRQHandler+0xd2>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8003f3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f3e:	0a1b      	lsrs	r3, r3, #8
 8003f40:	f003 0301 	and.w	r3, r3, #1
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d00a      	beq.n	8003f5e <HAL_FDCAN_IRQHandler+0xd2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003f50:	651a      	str	r2, [r3, #80]	@ 0x50
 8003f52:	4b6b      	ldr	r3, [pc, #428]	@ (8004100 <HAL_FDCAN_IRQHandler+0x274>)
 8003f54:	2200      	movs	r2, #0
 8003f56:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8003f58:	6878      	ldr	r0, [r7, #4]
 8003f5a:	f000 fa5f 	bl	800441c <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8003f5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f60:	0a9b      	lsrs	r3, r3, #10
 8003f62:	f003 0301 	and.w	r3, r3, #1
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d01d      	beq.n	8003fa6 <HAL_FDCAN_IRQHandler+0x11a>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8003f6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f6c:	0a9b      	lsrs	r3, r3, #10
 8003f6e:	f003 0301 	and.w	r3, r3, #1
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d017      	beq.n	8003fa6 <HAL_FDCAN_IRQHandler+0x11a>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8003f7e:	637b      	str	r3, [r7, #52]	@ 0x34
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003f88:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003f8a:	4013      	ands	r3, r2
 8003f8c:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003f96:	651a      	str	r2, [r3, #80]	@ 0x50
 8003f98:	4b59      	ldr	r3, [pc, #356]	@ (8004100 <HAL_FDCAN_IRQHandler+0x274>)
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8003f9e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8003fa0:	6878      	ldr	r0, [r7, #4]
 8003fa2:	f000 fa12 	bl	80043ca <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 8003fa6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d00d      	beq.n	8003fc8 <HAL_FDCAN_IRQHandler+0x13c>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681a      	ldr	r2, [r3, #0]
 8003fb0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003fb2:	4b54      	ldr	r3, [pc, #336]	@ (8004104 <HAL_FDCAN_IRQHandler+0x278>)
 8003fb4:	400b      	ands	r3, r1
 8003fb6:	6513      	str	r3, [r2, #80]	@ 0x50
 8003fb8:	4a51      	ldr	r2, [pc, #324]	@ (8004100 <HAL_FDCAN_IRQHandler+0x274>)
 8003fba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003fbc:	0f9b      	lsrs	r3, r3, #30
 8003fbe:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 8003fc0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003fc2:	6878      	ldr	r0, [r7, #4]
 8003fc4:	f000 f9c0 	bl	8004348 <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8003fc8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d00d      	beq.n	8003fea <HAL_FDCAN_IRQHandler+0x15e>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681a      	ldr	r2, [r3, #0]
 8003fd2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8003fd4:	4b4b      	ldr	r3, [pc, #300]	@ (8004104 <HAL_FDCAN_IRQHandler+0x278>)
 8003fd6:	400b      	ands	r3, r1
 8003fd8:	6513      	str	r3, [r2, #80]	@ 0x50
 8003fda:	4a49      	ldr	r2, [pc, #292]	@ (8004100 <HAL_FDCAN_IRQHandler+0x274>)
 8003fdc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003fde:	0f9b      	lsrs	r3, r3, #30
 8003fe0:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8003fe2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8003fe4:	6878      	ldr	r0, [r7, #4]
 8003fe6:	f000 f9ba 	bl	800435e <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8003fea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d00d      	beq.n	800400c <HAL_FDCAN_IRQHandler+0x180>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681a      	ldr	r2, [r3, #0]
 8003ff4:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8003ff6:	4b43      	ldr	r3, [pc, #268]	@ (8004104 <HAL_FDCAN_IRQHandler+0x278>)
 8003ff8:	400b      	ands	r3, r1
 8003ffa:	6513      	str	r3, [r2, #80]	@ 0x50
 8003ffc:	4a40      	ldr	r2, [pc, #256]	@ (8004100 <HAL_FDCAN_IRQHandler+0x274>)
 8003ffe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004000:	0f9b      	lsrs	r3, r3, #30
 8004002:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8004004:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8004006:	6878      	ldr	r0, [r7, #4]
 8004008:	f000 f9b4 	bl	8004374 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 800400c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800400e:	2b00      	cmp	r3, #0
 8004010:	d00d      	beq.n	800402e <HAL_FDCAN_IRQHandler+0x1a2>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681a      	ldr	r2, [r3, #0]
 8004016:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8004018:	4b3a      	ldr	r3, [pc, #232]	@ (8004104 <HAL_FDCAN_IRQHandler+0x278>)
 800401a:	400b      	ands	r3, r1
 800401c:	6513      	str	r3, [r2, #80]	@ 0x50
 800401e:	4a38      	ldr	r2, [pc, #224]	@ (8004100 <HAL_FDCAN_IRQHandler+0x274>)
 8004020:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004022:	0f9b      	lsrs	r3, r3, #30
 8004024:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8004026:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8004028:	6878      	ldr	r0, [r7, #4]
 800402a:	f000 f9ae 	bl	800438a <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 800402e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004030:	0adb      	lsrs	r3, r3, #11
 8004032:	f003 0301 	and.w	r3, r3, #1
 8004036:	2b00      	cmp	r3, #0
 8004038:	d010      	beq.n	800405c <HAL_FDCAN_IRQHandler+0x1d0>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 800403a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800403c:	0adb      	lsrs	r3, r3, #11
 800403e:	f003 0301 	and.w	r3, r3, #1
 8004042:	2b00      	cmp	r3, #0
 8004044:	d00a      	beq.n	800405c <HAL_FDCAN_IRQHandler+0x1d0>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800404e:	651a      	str	r2, [r3, #80]	@ 0x50
 8004050:	4b2b      	ldr	r3, [pc, #172]	@ (8004100 <HAL_FDCAN_IRQHandler+0x274>)
 8004052:	2200      	movs	r2, #0
 8004054:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8004056:	6878      	ldr	r0, [r7, #4]
 8004058:	f000 f9a2 	bl	80043a0 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_COMPLETE) != RESET)
 800405c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800405e:	0a5b      	lsrs	r3, r3, #9
 8004060:	f003 0301 	and.w	r3, r3, #1
 8004064:	2b00      	cmp	r3, #0
 8004066:	d01d      	beq.n	80040a4 <HAL_FDCAN_IRQHandler+0x218>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8004068:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800406a:	0a5b      	lsrs	r3, r3, #9
 800406c:	f003 0301 	and.w	r3, r3, #1
 8004070:	2b00      	cmp	r3, #0
 8004072:	d017      	beq.n	80040a4 <HAL_FDCAN_IRQHandler+0x218>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800407c:	633b      	str	r3, [r7, #48]	@ 0x30
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004086:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004088:	4013      	ands	r3, r2
 800408a:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004094:	651a      	str	r2, [r3, #80]	@ 0x50
 8004096:	4b1a      	ldr	r3, [pc, #104]	@ (8004100 <HAL_FDCAN_IRQHandler+0x274>)
 8004098:	2200      	movs	r2, #0
 800409a:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 800409c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800409e:	6878      	ldr	r0, [r7, #4]
 80040a0:	f000 f988 	bl	80043b4 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != RESET)
 80040a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80040a6:	0cdb      	lsrs	r3, r3, #19
 80040a8:	f003 0301 	and.w	r3, r3, #1
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d010      	beq.n	80040d2 <HAL_FDCAN_IRQHandler+0x246>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != RESET)
 80040b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040b2:	0cdb      	lsrs	r3, r3, #19
 80040b4:	f003 0301 	and.w	r3, r3, #1
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d00a      	beq.n	80040d2 <HAL_FDCAN_IRQHandler+0x246>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80040c4:	651a      	str	r2, [r3, #80]	@ 0x50
 80040c6:	4b0e      	ldr	r3, [pc, #56]	@ (8004100 <HAL_FDCAN_IRQHandler+0x274>)
 80040c8:	2200      	movs	r2, #0
 80040ca:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 80040cc:	6878      	ldr	r0, [r7, #4]
 80040ce:	f000 f987 	bl	80043e0 <HAL_FDCAN_RxBufferNewMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 80040d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80040d4:	0c1b      	lsrs	r3, r3, #16
 80040d6:	f003 0301 	and.w	r3, r3, #1
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d016      	beq.n	800410c <HAL_FDCAN_IRQHandler+0x280>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 80040de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040e0:	0c1b      	lsrs	r3, r3, #16
 80040e2:	f003 0301 	and.w	r3, r3, #1
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d010      	beq.n	800410c <HAL_FDCAN_IRQHandler+0x280>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80040f2:	651a      	str	r2, [r3, #80]	@ 0x50
 80040f4:	4b02      	ldr	r3, [pc, #8]	@ (8004100 <HAL_FDCAN_IRQHandler+0x274>)
 80040f6:	2200      	movs	r2, #0
 80040f8:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 80040fa:	6878      	ldr	r0, [r7, #4]
 80040fc:	e004      	b.n	8004108 <HAL_FDCAN_IRQHandler+0x27c>
 80040fe:	bf00      	nop
 8004100:	4000a800 	.word	0x4000a800
 8004104:	3fcfffff 	.word	0x3fcfffff
 8004108:	f000 f974 	bl	80043f4 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 800410c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800410e:	0c9b      	lsrs	r3, r3, #18
 8004110:	f003 0301 	and.w	r3, r3, #1
 8004114:	2b00      	cmp	r3, #0
 8004116:	d010      	beq.n	800413a <HAL_FDCAN_IRQHandler+0x2ae>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8004118:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800411a:	0c9b      	lsrs	r3, r3, #18
 800411c:	f003 0301 	and.w	r3, r3, #1
 8004120:	2b00      	cmp	r3, #0
 8004122:	d00a      	beq.n	800413a <HAL_FDCAN_IRQHandler+0x2ae>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800412c:	651a      	str	r2, [r3, #80]	@ 0x50
 800412e:	4b83      	ldr	r3, [pc, #524]	@ (800433c <HAL_FDCAN_IRQHandler+0x4b0>)
 8004130:	2200      	movs	r2, #0
 8004132:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8004134:	6878      	ldr	r0, [r7, #4]
 8004136:	f000 f967 	bl	8004408 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 800413a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800413c:	0c5b      	lsrs	r3, r3, #17
 800413e:	f003 0301 	and.w	r3, r3, #1
 8004142:	2b00      	cmp	r3, #0
 8004144:	d015      	beq.n	8004172 <HAL_FDCAN_IRQHandler+0x2e6>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8004146:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004148:	0c5b      	lsrs	r3, r3, #17
 800414a:	f003 0301 	and.w	r3, r3, #1
 800414e:	2b00      	cmp	r3, #0
 8004150:	d00f      	beq.n	8004172 <HAL_FDCAN_IRQHandler+0x2e6>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800415a:	651a      	str	r2, [r3, #80]	@ 0x50
 800415c:	4b77      	ldr	r3, [pc, #476]	@ (800433c <HAL_FDCAN_IRQHandler+0x4b0>)
 800415e:	2200      	movs	r2, #0
 8004160:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004168:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8004172:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004174:	2b00      	cmp	r3, #0
 8004176:	d00d      	beq.n	8004194 <HAL_FDCAN_IRQHandler+0x308>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681a      	ldr	r2, [r3, #0]
 800417c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800417e:	4b70      	ldr	r3, [pc, #448]	@ (8004340 <HAL_FDCAN_IRQHandler+0x4b4>)
 8004180:	400b      	ands	r3, r1
 8004182:	6513      	str	r3, [r2, #80]	@ 0x50
 8004184:	4a6d      	ldr	r2, [pc, #436]	@ (800433c <HAL_FDCAN_IRQHandler+0x4b0>)
 8004186:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004188:	0f9b      	lsrs	r3, r3, #30
 800418a:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 800418c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800418e:	6878      	ldr	r0, [r7, #4]
 8004190:	f000 f958 	bl	8004444 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8004194:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004196:	2b00      	cmp	r3, #0
 8004198:	d011      	beq.n	80041be <HAL_FDCAN_IRQHandler+0x332>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681a      	ldr	r2, [r3, #0]
 800419e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80041a0:	4b67      	ldr	r3, [pc, #412]	@ (8004340 <HAL_FDCAN_IRQHandler+0x4b4>)
 80041a2:	400b      	ands	r3, r1
 80041a4:	6513      	str	r3, [r2, #80]	@ 0x50
 80041a6:	4a65      	ldr	r2, [pc, #404]	@ (800433c <HAL_FDCAN_IRQHandler+0x4b0>)
 80041a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80041aa:	0f9b      	lsrs	r3, r3, #30
 80041ac:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 80041b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80041b6:	431a      	orrs	r2, r3
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4a60      	ldr	r2, [pc, #384]	@ (8004344 <HAL_FDCAN_IRQHandler+0x4b8>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	f040 80ac 	bne.w	8004322 <HAL_FDCAN_IRQHandler+0x496>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	689b      	ldr	r3, [r3, #8]
 80041d0:	f003 0303 	and.w	r3, r3, #3
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	f000 80a4 	beq.w	8004322 <HAL_FDCAN_IRQHandler+0x496>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	6a1b      	ldr	r3, [r3, #32]
 80041e0:	f003 030f 	and.w	r3, r3, #15
 80041e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041ec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80041ee:	4013      	ands	r3, r2
 80041f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	685b      	ldr	r3, [r3, #4]
 80041f6:	6a1b      	ldr	r3, [r3, #32]
 80041f8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80041fc:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004204:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004206:	4013      	ands	r3, r2
 8004208:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	685b      	ldr	r3, [r3, #4]
 800420e:	6a1b      	ldr	r3, [r3, #32]
 8004210:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8004214:	627b      	str	r3, [r7, #36]	@ 0x24
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800421c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800421e:	4013      	ands	r3, r2
 8004220:	627b      	str	r3, [r7, #36]	@ 0x24
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	6a1b      	ldr	r3, [r3, #32]
 8004228:	f403 43fc 	and.w	r3, r3, #32256	@ 0x7e00
 800422c:	623b      	str	r3, [r7, #32]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004234:	6a3a      	ldr	r2, [r7, #32]
 8004236:	4013      	ands	r3, r2
 8004238:	623b      	str	r3, [r7, #32]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	685b      	ldr	r3, [r3, #4]
 800423e:	6a1b      	ldr	r3, [r3, #32]
 8004240:	f403 23f0 	and.w	r3, r3, #491520	@ 0x78000
 8004244:	61fb      	str	r3, [r7, #28]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800424c:	69fa      	ldr	r2, [r7, #28]
 800424e:	4013      	ands	r3, r2
 8004250:	61fb      	str	r3, [r7, #28]
      itsourceTTIE = hfdcan->ttcan->TTIE;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004258:	61bb      	str	r3, [r7, #24]
      itflagTTIR = hfdcan->ttcan->TTIR;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	6a1b      	ldr	r3, [r3, #32]
 8004260:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 8004262:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004264:	2b00      	cmp	r3, #0
 8004266:	d007      	beq.n	8004278 <HAL_FDCAN_IRQHandler+0x3ec>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800426e:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 8004270:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004272:	6878      	ldr	r0, [r7, #4]
 8004274:	f000 f8f1 	bl	800445a <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 8004278:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800427a:	2b00      	cmp	r3, #0
 800427c:	d007      	beq.n	800428e <HAL_FDCAN_IRQHandler+0x402>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	685b      	ldr	r3, [r3, #4]
 8004282:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004284:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 8004286:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004288:	6878      	ldr	r0, [r7, #4]
 800428a:	f000 f8f1 	bl	8004470 <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (FDCAN_CHECK_IT_SOURCE(itsourceTTIE, FDCAN_TT_IT_STOP_WATCH) != RESET)
 800428e:	69bb      	ldr	r3, [r7, #24]
 8004290:	099b      	lsrs	r3, r3, #6
 8004292:	f003 0301 	and.w	r3, r3, #1
 8004296:	2b00      	cmp	r3, #0
 8004298:	d01a      	beq.n	80042d0 <HAL_FDCAN_IRQHandler+0x444>
      {
        if (FDCAN_CHECK_FLAG(itflagTTIR, FDCAN_TT_FLAG_STOP_WATCH) != RESET)
 800429a:	697b      	ldr	r3, [r7, #20]
 800429c:	099b      	lsrs	r3, r3, #6
 800429e:	f003 0301 	and.w	r3, r3, #1
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d014      	beq.n	80042d0 <HAL_FDCAN_IRQHandler+0x444>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	685b      	ldr	r3, [r3, #4]
 80042aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042ac:	0c1b      	lsrs	r3, r3, #16
 80042ae:	b29b      	uxth	r3, r3
 80042b0:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042b8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80042bc:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	2240      	movs	r2, #64	@ 0x40
 80042c4:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 80042c6:	68fa      	ldr	r2, [r7, #12]
 80042c8:	6939      	ldr	r1, [r7, #16]
 80042ca:	6878      	ldr	r0, [r7, #4]
 80042cc:	f000 f8db 	bl	8004486 <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 80042d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d007      	beq.n	80042e6 <HAL_FDCAN_IRQHandler+0x45a>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042dc:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 80042de:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80042e0:	6878      	ldr	r0, [r7, #4]
 80042e2:	f000 f8dc 	bl	800449e <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 80042e6:	6a3b      	ldr	r3, [r7, #32]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d00b      	beq.n	8004304 <HAL_FDCAN_IRQHandler+0x478>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	685b      	ldr	r3, [r3, #4]
 80042f0:	6a3a      	ldr	r2, [r7, #32]
 80042f2:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 80042fa:	6a3b      	ldr	r3, [r7, #32]
 80042fc:	431a      	orrs	r2, r3
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 8004304:	69fb      	ldr	r3, [r7, #28]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d00b      	beq.n	8004322 <HAL_FDCAN_IRQHandler+0x496>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	685b      	ldr	r3, [r3, #4]
 800430e:	69fa      	ldr	r2, [r7, #28]
 8004310:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8004318:	69fb      	ldr	r3, [r7, #28]
 800431a:	431a      	orrs	r2, r3
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004328:	2b00      	cmp	r3, #0
 800432a:	d002      	beq.n	8004332 <HAL_FDCAN_IRQHandler+0x4a6>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 800432c:	6878      	ldr	r0, [r7, #4]
 800432e:	f000 f87f 	bl	8004430 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8004332:	bf00      	nop
 8004334:	3758      	adds	r7, #88	@ 0x58
 8004336:	46bd      	mov	sp, r7
 8004338:	bd80      	pop	{r7, pc}
 800433a:	bf00      	nop
 800433c:	4000a800 	.word	0x4000a800
 8004340:	3fcfffff 	.word	0x3fcfffff
 8004344:	4000a000 	.word	0x4000a000

08004348 <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 8004348:	b480      	push	{r7}
 800434a:	b083      	sub	sp, #12
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
 8004350:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 8004352:	bf00      	nop
 8004354:	370c      	adds	r7, #12
 8004356:	46bd      	mov	sp, r7
 8004358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435c:	4770      	bx	lr

0800435e <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 800435e:	b480      	push	{r7}
 8004360:	b083      	sub	sp, #12
 8004362:	af00      	add	r7, sp, #0
 8004364:	6078      	str	r0, [r7, #4]
 8004366:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8004368:	bf00      	nop
 800436a:	370c      	adds	r7, #12
 800436c:	46bd      	mov	sp, r7
 800436e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004372:	4770      	bx	lr

08004374 <HAL_FDCAN_RxFifo0Callback>:
  * @param  RxFifo0ITs indicates which Rx FIFO 0 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo0_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8004374:	b480      	push	{r7}
 8004376:	b083      	sub	sp, #12
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
 800437c:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo0ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo0Callback could be implemented in the user file
   */
}
 800437e:	bf00      	nop
 8004380:	370c      	adds	r7, #12
 8004382:	46bd      	mov	sp, r7
 8004384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004388:	4770      	bx	lr

0800438a <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 800438a:	b480      	push	{r7}
 800438c:	b083      	sub	sp, #12
 800438e:	af00      	add	r7, sp, #0
 8004390:	6078      	str	r0, [r7, #4]
 8004392:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8004394:	bf00      	nop
 8004396:	370c      	adds	r7, #12
 8004398:	46bd      	mov	sp, r7
 800439a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439e:	4770      	bx	lr

080043a0 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80043a0:	b480      	push	{r7}
 80043a2:	b083      	sub	sp, #12
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 80043a8:	bf00      	nop
 80043aa:	370c      	adds	r7, #12
 80043ac:	46bd      	mov	sp, r7
 80043ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b2:	4770      	bx	lr

080043b4 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80043b4:	b480      	push	{r7}
 80043b6:	b083      	sub	sp, #12
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
 80043bc:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 80043be:	bf00      	nop
 80043c0:	370c      	adds	r7, #12
 80043c2:	46bd      	mov	sp, r7
 80043c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c8:	4770      	bx	lr

080043ca <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80043ca:	b480      	push	{r7}
 80043cc:	b083      	sub	sp, #12
 80043ce:	af00      	add	r7, sp, #0
 80043d0:	6078      	str	r0, [r7, #4]
 80043d2:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 80043d4:	bf00      	nop
 80043d6:	370c      	adds	r7, #12
 80043d8:	46bd      	mov	sp, r7
 80043da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043de:	4770      	bx	lr

080043e0 <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80043e0:	b480      	push	{r7}
 80043e2:	b083      	sub	sp, #12
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 80043e8:	bf00      	nop
 80043ea:	370c      	adds	r7, #12
 80043ec:	46bd      	mov	sp, r7
 80043ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f2:	4770      	bx	lr

080043f4 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80043f4:	b480      	push	{r7}
 80043f6:	b083      	sub	sp, #12
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 80043fc:	bf00      	nop
 80043fe:	370c      	adds	r7, #12
 8004400:	46bd      	mov	sp, r7
 8004402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004406:	4770      	bx	lr

08004408 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004408:	b480      	push	{r7}
 800440a:	b083      	sub	sp, #12
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8004410:	bf00      	nop
 8004412:	370c      	adds	r7, #12
 8004414:	46bd      	mov	sp, r7
 8004416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441a:	4770      	bx	lr

0800441c <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800441c:	b480      	push	{r7}
 800441e:	b083      	sub	sp, #12
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8004424:	bf00      	nop
 8004426:	370c      	adds	r7, #12
 8004428:	46bd      	mov	sp, r7
 800442a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442e:	4770      	bx	lr

08004430 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004430:	b480      	push	{r7}
 8004432:	b083      	sub	sp, #12
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8004438:	bf00      	nop
 800443a:	370c      	adds	r7, #12
 800443c:	46bd      	mov	sp, r7
 800443e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004442:	4770      	bx	lr

08004444 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8004444:	b480      	push	{r7}
 8004446:	b083      	sub	sp, #12
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
 800444c:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 800444e:	bf00      	nop
 8004450:	370c      	adds	r7, #12
 8004452:	46bd      	mov	sp, r7
 8004454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004458:	4770      	bx	lr

0800445a <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 800445a:	b480      	push	{r7}
 800445c:	b083      	sub	sp, #12
 800445e:	af00      	add	r7, sp, #0
 8004460:	6078      	str	r0, [r7, #4]
 8004462:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 8004464:	bf00      	nop
 8004466:	370c      	adds	r7, #12
 8004468:	46bd      	mov	sp, r7
 800446a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446e:	4770      	bx	lr

08004470 <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 8004470:	b480      	push	{r7}
 8004472:	b083      	sub	sp, #12
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
 8004478:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 800447a:	bf00      	nop
 800447c:	370c      	adds	r7, #12
 800447e:	46bd      	mov	sp, r7
 8004480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004484:	4770      	bx	lr

08004486 <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 8004486:	b480      	push	{r7}
 8004488:	b085      	sub	sp, #20
 800448a:	af00      	add	r7, sp, #0
 800448c:	60f8      	str	r0, [r7, #12]
 800448e:	60b9      	str	r1, [r7, #8]
 8004490:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 8004492:	bf00      	nop
 8004494:	3714      	adds	r7, #20
 8004496:	46bd      	mov	sp, r7
 8004498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449c:	4770      	bx	lr

0800449e <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 800449e:	b480      	push	{r7}
 80044a0:	b083      	sub	sp, #12
 80044a2:	af00      	add	r7, sp, #0
 80044a4:	6078      	str	r0, [r7, #4]
 80044a6:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 80044a8:	bf00      	nop
 80044aa:	370c      	adds	r7, #12
 80044ac:	46bd      	mov	sp, r7
 80044ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b2:	4770      	bx	lr

080044b4 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80044b4:	b480      	push	{r7}
 80044b6:	b085      	sub	sp, #20
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044c0:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 80044ca:	4ba7      	ldr	r3, [pc, #668]	@ (8004768 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80044cc:	4013      	ands	r3, r2
 80044ce:	68ba      	ldr	r2, [r7, #8]
 80044d0:	0091      	lsls	r1, r2, #2
 80044d2:	687a      	ldr	r2, [r7, #4]
 80044d4:	6812      	ldr	r2, [r2, #0]
 80044d6:	430b      	orrs	r3, r1
 80044d8:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80044e4:	f423 017f 	bic.w	r1, r3, #16711680	@ 0xff0000
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044ec:	041a      	lsls	r2, r3, #16
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	430a      	orrs	r2, r1
 80044f4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044fc:	68ba      	ldr	r2, [r7, #8]
 80044fe:	4413      	add	r3, r2
 8004500:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800450a:	4b97      	ldr	r3, [pc, #604]	@ (8004768 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800450c:	4013      	ands	r3, r2
 800450e:	68ba      	ldr	r2, [r7, #8]
 8004510:	0091      	lsls	r1, r2, #2
 8004512:	687a      	ldr	r2, [r7, #4]
 8004514:	6812      	ldr	r2, [r2, #0]
 8004516:	430b      	orrs	r3, r1
 8004518:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004524:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800452c:	041a      	lsls	r2, r3, #16
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	430a      	orrs	r2, r1
 8004534:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800453c:	005b      	lsls	r3, r3, #1
 800453e:	68ba      	ldr	r2, [r7, #8]
 8004540:	4413      	add	r3, r2
 8004542:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800454c:	4b86      	ldr	r3, [pc, #536]	@ (8004768 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800454e:	4013      	ands	r3, r2
 8004550:	68ba      	ldr	r2, [r7, #8]
 8004552:	0091      	lsls	r1, r2, #2
 8004554:	687a      	ldr	r2, [r7, #4]
 8004556:	6812      	ldr	r2, [r2, #0]
 8004558:	430b      	orrs	r3, r1
 800455a:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004566:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800456e:	041a      	lsls	r2, r3, #16
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	430a      	orrs	r2, r1
 8004576:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800457e:	687a      	ldr	r2, [r7, #4]
 8004580:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8004582:	fb02 f303 	mul.w	r3, r2, r3
 8004586:	68ba      	ldr	r2, [r7, #8]
 8004588:	4413      	add	r3, r2
 800458a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8004594:	4b74      	ldr	r3, [pc, #464]	@ (8004768 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004596:	4013      	ands	r3, r2
 8004598:	68ba      	ldr	r2, [r7, #8]
 800459a:	0091      	lsls	r1, r2, #2
 800459c:	687a      	ldr	r2, [r7, #4]
 800459e:	6812      	ldr	r2, [r2, #0]
 80045a0:	430b      	orrs	r3, r1
 80045a2:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80045ae:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80045b6:	041a      	lsls	r2, r3, #16
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	430a      	orrs	r2, r1
 80045be:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80045c6:	687a      	ldr	r2, [r7, #4]
 80045c8:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80045ca:	fb02 f303 	mul.w	r3, r2, r3
 80045ce:	68ba      	ldr	r2, [r7, #8]
 80045d0:	4413      	add	r3, r2
 80045d2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 80045dc:	4b62      	ldr	r3, [pc, #392]	@ (8004768 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80045de:	4013      	ands	r3, r2
 80045e0:	68ba      	ldr	r2, [r7, #8]
 80045e2:	0091      	lsls	r1, r2, #2
 80045e4:	687a      	ldr	r2, [r7, #4]
 80045e6:	6812      	ldr	r2, [r2, #0]
 80045e8:	430b      	orrs	r3, r1
 80045ea:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80045f2:	687a      	ldr	r2, [r7, #4]
 80045f4:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 80045f6:	fb02 f303 	mul.w	r3, r2, r3
 80045fa:	68ba      	ldr	r2, [r7, #8]
 80045fc:	4413      	add	r3, r2
 80045fe:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8004608:	4b57      	ldr	r3, [pc, #348]	@ (8004768 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800460a:	4013      	ands	r3, r2
 800460c:	68ba      	ldr	r2, [r7, #8]
 800460e:	0091      	lsls	r1, r2, #2
 8004610:	687a      	ldr	r2, [r7, #4]
 8004612:	6812      	ldr	r2, [r2, #0]
 8004614:	430b      	orrs	r3, r1
 8004616:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004622:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800462a:	041a      	lsls	r2, r3, #16
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	430a      	orrs	r2, r1
 8004632:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800463a:	005b      	lsls	r3, r3, #1
 800463c:	68ba      	ldr	r2, [r7, #8]
 800463e:	4413      	add	r3, r2
 8004640:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 800464a:	4b47      	ldr	r3, [pc, #284]	@ (8004768 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800464c:	4013      	ands	r3, r2
 800464e:	68ba      	ldr	r2, [r7, #8]
 8004650:	0091      	lsls	r1, r2, #2
 8004652:	687a      	ldr	r2, [r7, #4]
 8004654:	6812      	ldr	r2, [r2, #0]
 8004656:	430b      	orrs	r3, r1
 8004658:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004664:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800466c:	041a      	lsls	r2, r3, #16
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	430a      	orrs	r2, r1
 8004674:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004680:	f023 517c 	bic.w	r1, r3, #1056964608	@ 0x3f000000
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004688:	061a      	lsls	r2, r3, #24
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	430a      	orrs	r2, r1
 8004690:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004698:	4b34      	ldr	r3, [pc, #208]	@ (800476c <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 800469a:	4413      	add	r3, r2
 800469c:	009a      	lsls	r2, r3, #2
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	66da      	str	r2, [r3, #108]	@ 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046aa:	009b      	lsls	r3, r3, #2
 80046ac:	441a      	add	r2, r3
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	671a      	str	r2, [r3, #112]	@ 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046ba:	00db      	lsls	r3, r3, #3
 80046bc:	441a      	add	r2, r3
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	675a      	str	r2, [r3, #116]	@ 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
                             (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046ca:	6879      	ldr	r1, [r7, #4]
 80046cc:	6c49      	ldr	r1, [r1, #68]	@ 0x44
 80046ce:	fb01 f303 	mul.w	r3, r1, r3
 80046d2:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 80046d4:	441a      	add	r2, r3
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	679a      	str	r2, [r3, #120]	@ 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
                              (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80046e2:	6879      	ldr	r1, [r7, #4]
 80046e4:	6cc9      	ldr	r1, [r1, #76]	@ 0x4c
 80046e6:	fb01 f303 	mul.w	r3, r1, r3
 80046ea:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 80046ec:	441a      	add	r2, r3
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	67da      	str	r2, [r3, #124]	@ 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
                                 (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80046fa:	6879      	ldr	r1, [r7, #4]
 80046fc:	6d49      	ldr	r1, [r1, #84]	@ 0x54
 80046fe:	fb01 f303 	mul.w	r3, r1, r3
 8004702:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8004704:	441a      	add	r2, r3
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004716:	00db      	lsls	r3, r3, #3
 8004718:	441a      	add	r2, r3
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800472a:	6879      	ldr	r1, [r7, #4]
 800472c:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 800472e:	fb01 f303 	mul.w	r3, r1, r3
 8004732:	009b      	lsls	r3, r3, #2
 8004734:	441a      	add	r2, r3
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
                              (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004746:	6879      	ldr	r1, [r7, #4]
 8004748:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 800474a:	fb01 f303 	mul.w	r3, r1, r3
 800474e:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8004750:	441a      	add	r2, r3
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800475e:	4a04      	ldr	r2, [pc, #16]	@ (8004770 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d915      	bls.n	8004790 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8004764:	e006      	b.n	8004774 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8004766:	bf00      	nop
 8004768:	ffff0003 	.word	0xffff0003
 800476c:	10002b00 	.word	0x10002b00
 8004770:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800477a:	f043 0220 	orr.w	r2, r3, #32
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2203      	movs	r2, #3
 8004788:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    return HAL_ERROR;
 800478c:	2301      	movs	r3, #1
 800478e:	e010      	b.n	80047b2 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004794:	60fb      	str	r3, [r7, #12]
 8004796:	e005      	b.n	80047a4 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	2200      	movs	r2, #0
 800479c:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	3304      	adds	r3, #4
 80047a2:	60fb      	str	r3, [r7, #12]
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047aa:	68fa      	ldr	r2, [r7, #12]
 80047ac:	429a      	cmp	r2, r3
 80047ae:	d3f3      	bcc.n	8004798 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 80047b0:	2300      	movs	r3, #0
}
 80047b2:	4618      	mov	r0, r3
 80047b4:	3714      	adds	r7, #20
 80047b6:	46bd      	mov	sp, r7
 80047b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047bc:	4770      	bx	lr
 80047be:	bf00      	nop

080047c0 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 80047c0:	b480      	push	{r7}
 80047c2:	b089      	sub	sp, #36	@ 0x24
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	60f8      	str	r0, [r7, #12]
 80047c8:	60b9      	str	r1, [r7, #8]
 80047ca:	607a      	str	r2, [r7, #4]
 80047cc:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 80047ce:	68bb      	ldr	r3, [r7, #8]
 80047d0:	685b      	ldr	r3, [r3, #4]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d10a      	bne.n	80047ec <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80047d6:	68bb      	ldr	r3, [r7, #8]
 80047d8:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 80047da:	68bb      	ldr	r3, [r7, #8]
 80047dc:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 80047de:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80047e6:	4313      	orrs	r3, r2
 80047e8:	61fb      	str	r3, [r7, #28]
 80047ea:	e00a      	b.n	8004802 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 80047f4:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 80047f6:	68bb      	ldr	r3, [r7, #8]
 80047f8:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 80047fa:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80047fc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004800:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8004802:	68bb      	ldr	r3, [r7, #8]
 8004804:	6a1b      	ldr	r3, [r3, #32]
 8004806:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800480c:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 800480e:	68bb      	ldr	r3, [r7, #8]
 8004810:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8004812:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8004814:	68bb      	ldr	r3, [r7, #8]
 8004816:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8004818:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 800481a:	68bb      	ldr	r3, [r7, #8]
 800481c:	68db      	ldr	r3, [r3, #12]
 800481e:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8004820:	4313      	orrs	r3, r2
 8004822:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800482e:	6839      	ldr	r1, [r7, #0]
 8004830:	fb01 f303 	mul.w	r3, r1, r3
 8004834:	009b      	lsls	r3, r3, #2
 8004836:	4413      	add	r3, r2
 8004838:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 800483a:	69bb      	ldr	r3, [r7, #24]
 800483c:	69fa      	ldr	r2, [r7, #28]
 800483e:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8004840:	69bb      	ldr	r3, [r7, #24]
 8004842:	3304      	adds	r3, #4
 8004844:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8004846:	69bb      	ldr	r3, [r7, #24]
 8004848:	693a      	ldr	r2, [r7, #16]
 800484a:	601a      	str	r2, [r3, #0]
  TxAddress++;
 800484c:	69bb      	ldr	r3, [r7, #24]
 800484e:	3304      	adds	r3, #4
 8004850:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8004852:	2300      	movs	r3, #0
 8004854:	617b      	str	r3, [r7, #20]
 8004856:	e020      	b.n	800489a <FDCAN_CopyMessageToRAM+0xda>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8004858:	697b      	ldr	r3, [r7, #20]
 800485a:	3303      	adds	r3, #3
 800485c:	687a      	ldr	r2, [r7, #4]
 800485e:	4413      	add	r3, r2
 8004860:	781b      	ldrb	r3, [r3, #0]
 8004862:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8004864:	697b      	ldr	r3, [r7, #20]
 8004866:	3302      	adds	r3, #2
 8004868:	6879      	ldr	r1, [r7, #4]
 800486a:	440b      	add	r3, r1
 800486c:	781b      	ldrb	r3, [r3, #0]
 800486e:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8004870:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8004872:	697b      	ldr	r3, [r7, #20]
 8004874:	3301      	adds	r3, #1
 8004876:	6879      	ldr	r1, [r7, #4]
 8004878:	440b      	add	r3, r1
 800487a:	781b      	ldrb	r3, [r3, #0]
 800487c:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 800487e:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8004880:	6879      	ldr	r1, [r7, #4]
 8004882:	697a      	ldr	r2, [r7, #20]
 8004884:	440a      	add	r2, r1
 8004886:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8004888:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800488a:	69bb      	ldr	r3, [r7, #24]
 800488c:	601a      	str	r2, [r3, #0]
    TxAddress++;
 800488e:	69bb      	ldr	r3, [r7, #24]
 8004890:	3304      	adds	r3, #4
 8004892:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8004894:	697b      	ldr	r3, [r7, #20]
 8004896:	3304      	adds	r3, #4
 8004898:	617b      	str	r3, [r7, #20]
 800489a:	68bb      	ldr	r3, [r7, #8]
 800489c:	68db      	ldr	r3, [r3, #12]
 800489e:	4a06      	ldr	r2, [pc, #24]	@ (80048b8 <FDCAN_CopyMessageToRAM+0xf8>)
 80048a0:	5cd3      	ldrb	r3, [r2, r3]
 80048a2:	461a      	mov	r2, r3
 80048a4:	697b      	ldr	r3, [r7, #20]
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d3d6      	bcc.n	8004858 <FDCAN_CopyMessageToRAM+0x98>
  }
}
 80048aa:	bf00      	nop
 80048ac:	bf00      	nop
 80048ae:	3724      	adds	r7, #36	@ 0x24
 80048b0:	46bd      	mov	sp, r7
 80048b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b6:	4770      	bx	lr
 80048b8:	0800d660 	.word	0x0800d660

080048bc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 80048bc:	b480      	push	{r7}
 80048be:	b089      	sub	sp, #36	@ 0x24
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
 80048c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80048c6:	2300      	movs	r3, #0
 80048c8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80048ca:	4b89      	ldr	r3, [pc, #548]	@ (8004af0 <HAL_GPIO_Init+0x234>)
 80048cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80048ce:	e194      	b.n	8004bfa <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	681a      	ldr	r2, [r3, #0]
 80048d4:	2101      	movs	r1, #1
 80048d6:	69fb      	ldr	r3, [r7, #28]
 80048d8:	fa01 f303 	lsl.w	r3, r1, r3
 80048dc:	4013      	ands	r3, r2
 80048de:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80048e0:	693b      	ldr	r3, [r7, #16]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	f000 8186 	beq.w	8004bf4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	f003 0303 	and.w	r3, r3, #3
 80048f0:	2b01      	cmp	r3, #1
 80048f2:	d005      	beq.n	8004900 <HAL_GPIO_Init+0x44>
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	685b      	ldr	r3, [r3, #4]
 80048f8:	f003 0303 	and.w	r3, r3, #3
 80048fc:	2b02      	cmp	r3, #2
 80048fe:	d130      	bne.n	8004962 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	689b      	ldr	r3, [r3, #8]
 8004904:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004906:	69fb      	ldr	r3, [r7, #28]
 8004908:	005b      	lsls	r3, r3, #1
 800490a:	2203      	movs	r2, #3
 800490c:	fa02 f303 	lsl.w	r3, r2, r3
 8004910:	43db      	mvns	r3, r3
 8004912:	69ba      	ldr	r2, [r7, #24]
 8004914:	4013      	ands	r3, r2
 8004916:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	68da      	ldr	r2, [r3, #12]
 800491c:	69fb      	ldr	r3, [r7, #28]
 800491e:	005b      	lsls	r3, r3, #1
 8004920:	fa02 f303 	lsl.w	r3, r2, r3
 8004924:	69ba      	ldr	r2, [r7, #24]
 8004926:	4313      	orrs	r3, r2
 8004928:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	69ba      	ldr	r2, [r7, #24]
 800492e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	685b      	ldr	r3, [r3, #4]
 8004934:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004936:	2201      	movs	r2, #1
 8004938:	69fb      	ldr	r3, [r7, #28]
 800493a:	fa02 f303 	lsl.w	r3, r2, r3
 800493e:	43db      	mvns	r3, r3
 8004940:	69ba      	ldr	r2, [r7, #24]
 8004942:	4013      	ands	r3, r2
 8004944:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	685b      	ldr	r3, [r3, #4]
 800494a:	091b      	lsrs	r3, r3, #4
 800494c:	f003 0201 	and.w	r2, r3, #1
 8004950:	69fb      	ldr	r3, [r7, #28]
 8004952:	fa02 f303 	lsl.w	r3, r2, r3
 8004956:	69ba      	ldr	r2, [r7, #24]
 8004958:	4313      	orrs	r3, r2
 800495a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	69ba      	ldr	r2, [r7, #24]
 8004960:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	685b      	ldr	r3, [r3, #4]
 8004966:	f003 0303 	and.w	r3, r3, #3
 800496a:	2b03      	cmp	r3, #3
 800496c:	d017      	beq.n	800499e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	68db      	ldr	r3, [r3, #12]
 8004972:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004974:	69fb      	ldr	r3, [r7, #28]
 8004976:	005b      	lsls	r3, r3, #1
 8004978:	2203      	movs	r2, #3
 800497a:	fa02 f303 	lsl.w	r3, r2, r3
 800497e:	43db      	mvns	r3, r3
 8004980:	69ba      	ldr	r2, [r7, #24]
 8004982:	4013      	ands	r3, r2
 8004984:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	689a      	ldr	r2, [r3, #8]
 800498a:	69fb      	ldr	r3, [r7, #28]
 800498c:	005b      	lsls	r3, r3, #1
 800498e:	fa02 f303 	lsl.w	r3, r2, r3
 8004992:	69ba      	ldr	r2, [r7, #24]
 8004994:	4313      	orrs	r3, r2
 8004996:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	69ba      	ldr	r2, [r7, #24]
 800499c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	685b      	ldr	r3, [r3, #4]
 80049a2:	f003 0303 	and.w	r3, r3, #3
 80049a6:	2b02      	cmp	r3, #2
 80049a8:	d123      	bne.n	80049f2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80049aa:	69fb      	ldr	r3, [r7, #28]
 80049ac:	08da      	lsrs	r2, r3, #3
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	3208      	adds	r2, #8
 80049b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80049b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80049b8:	69fb      	ldr	r3, [r7, #28]
 80049ba:	f003 0307 	and.w	r3, r3, #7
 80049be:	009b      	lsls	r3, r3, #2
 80049c0:	220f      	movs	r2, #15
 80049c2:	fa02 f303 	lsl.w	r3, r2, r3
 80049c6:	43db      	mvns	r3, r3
 80049c8:	69ba      	ldr	r2, [r7, #24]
 80049ca:	4013      	ands	r3, r2
 80049cc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	691a      	ldr	r2, [r3, #16]
 80049d2:	69fb      	ldr	r3, [r7, #28]
 80049d4:	f003 0307 	and.w	r3, r3, #7
 80049d8:	009b      	lsls	r3, r3, #2
 80049da:	fa02 f303 	lsl.w	r3, r2, r3
 80049de:	69ba      	ldr	r2, [r7, #24]
 80049e0:	4313      	orrs	r3, r2
 80049e2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80049e4:	69fb      	ldr	r3, [r7, #28]
 80049e6:	08da      	lsrs	r2, r3, #3
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	3208      	adds	r2, #8
 80049ec:	69b9      	ldr	r1, [r7, #24]
 80049ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80049f8:	69fb      	ldr	r3, [r7, #28]
 80049fa:	005b      	lsls	r3, r3, #1
 80049fc:	2203      	movs	r2, #3
 80049fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004a02:	43db      	mvns	r3, r3
 8004a04:	69ba      	ldr	r2, [r7, #24]
 8004a06:	4013      	ands	r3, r2
 8004a08:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	685b      	ldr	r3, [r3, #4]
 8004a0e:	f003 0203 	and.w	r2, r3, #3
 8004a12:	69fb      	ldr	r3, [r7, #28]
 8004a14:	005b      	lsls	r3, r3, #1
 8004a16:	fa02 f303 	lsl.w	r3, r2, r3
 8004a1a:	69ba      	ldr	r2, [r7, #24]
 8004a1c:	4313      	orrs	r3, r2
 8004a1e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	69ba      	ldr	r2, [r7, #24]
 8004a24:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	685b      	ldr	r3, [r3, #4]
 8004a2a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	f000 80e0 	beq.w	8004bf4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004a34:	4b2f      	ldr	r3, [pc, #188]	@ (8004af4 <HAL_GPIO_Init+0x238>)
 8004a36:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004a3a:	4a2e      	ldr	r2, [pc, #184]	@ (8004af4 <HAL_GPIO_Init+0x238>)
 8004a3c:	f043 0302 	orr.w	r3, r3, #2
 8004a40:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8004a44:	4b2b      	ldr	r3, [pc, #172]	@ (8004af4 <HAL_GPIO_Init+0x238>)
 8004a46:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004a4a:	f003 0302 	and.w	r3, r3, #2
 8004a4e:	60fb      	str	r3, [r7, #12]
 8004a50:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004a52:	4a29      	ldr	r2, [pc, #164]	@ (8004af8 <HAL_GPIO_Init+0x23c>)
 8004a54:	69fb      	ldr	r3, [r7, #28]
 8004a56:	089b      	lsrs	r3, r3, #2
 8004a58:	3302      	adds	r3, #2
 8004a5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004a60:	69fb      	ldr	r3, [r7, #28]
 8004a62:	f003 0303 	and.w	r3, r3, #3
 8004a66:	009b      	lsls	r3, r3, #2
 8004a68:	220f      	movs	r2, #15
 8004a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a6e:	43db      	mvns	r3, r3
 8004a70:	69ba      	ldr	r2, [r7, #24]
 8004a72:	4013      	ands	r3, r2
 8004a74:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	4a20      	ldr	r2, [pc, #128]	@ (8004afc <HAL_GPIO_Init+0x240>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d052      	beq.n	8004b24 <HAL_GPIO_Init+0x268>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	4a1f      	ldr	r2, [pc, #124]	@ (8004b00 <HAL_GPIO_Init+0x244>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d031      	beq.n	8004aea <HAL_GPIO_Init+0x22e>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	4a1e      	ldr	r2, [pc, #120]	@ (8004b04 <HAL_GPIO_Init+0x248>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d02b      	beq.n	8004ae6 <HAL_GPIO_Init+0x22a>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	4a1d      	ldr	r2, [pc, #116]	@ (8004b08 <HAL_GPIO_Init+0x24c>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d025      	beq.n	8004ae2 <HAL_GPIO_Init+0x226>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	4a1c      	ldr	r2, [pc, #112]	@ (8004b0c <HAL_GPIO_Init+0x250>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d01f      	beq.n	8004ade <HAL_GPIO_Init+0x222>
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	4a1b      	ldr	r2, [pc, #108]	@ (8004b10 <HAL_GPIO_Init+0x254>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d019      	beq.n	8004ada <HAL_GPIO_Init+0x21e>
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	4a1a      	ldr	r2, [pc, #104]	@ (8004b14 <HAL_GPIO_Init+0x258>)
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d013      	beq.n	8004ad6 <HAL_GPIO_Init+0x21a>
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	4a19      	ldr	r2, [pc, #100]	@ (8004b18 <HAL_GPIO_Init+0x25c>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d00d      	beq.n	8004ad2 <HAL_GPIO_Init+0x216>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	4a18      	ldr	r2, [pc, #96]	@ (8004b1c <HAL_GPIO_Init+0x260>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d007      	beq.n	8004ace <HAL_GPIO_Init+0x212>
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	4a17      	ldr	r2, [pc, #92]	@ (8004b20 <HAL_GPIO_Init+0x264>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d101      	bne.n	8004aca <HAL_GPIO_Init+0x20e>
 8004ac6:	2309      	movs	r3, #9
 8004ac8:	e02d      	b.n	8004b26 <HAL_GPIO_Init+0x26a>
 8004aca:	230a      	movs	r3, #10
 8004acc:	e02b      	b.n	8004b26 <HAL_GPIO_Init+0x26a>
 8004ace:	2308      	movs	r3, #8
 8004ad0:	e029      	b.n	8004b26 <HAL_GPIO_Init+0x26a>
 8004ad2:	2307      	movs	r3, #7
 8004ad4:	e027      	b.n	8004b26 <HAL_GPIO_Init+0x26a>
 8004ad6:	2306      	movs	r3, #6
 8004ad8:	e025      	b.n	8004b26 <HAL_GPIO_Init+0x26a>
 8004ada:	2305      	movs	r3, #5
 8004adc:	e023      	b.n	8004b26 <HAL_GPIO_Init+0x26a>
 8004ade:	2304      	movs	r3, #4
 8004ae0:	e021      	b.n	8004b26 <HAL_GPIO_Init+0x26a>
 8004ae2:	2303      	movs	r3, #3
 8004ae4:	e01f      	b.n	8004b26 <HAL_GPIO_Init+0x26a>
 8004ae6:	2302      	movs	r3, #2
 8004ae8:	e01d      	b.n	8004b26 <HAL_GPIO_Init+0x26a>
 8004aea:	2301      	movs	r3, #1
 8004aec:	e01b      	b.n	8004b26 <HAL_GPIO_Init+0x26a>
 8004aee:	bf00      	nop
 8004af0:	58000080 	.word	0x58000080
 8004af4:	58024400 	.word	0x58024400
 8004af8:	58000400 	.word	0x58000400
 8004afc:	58020000 	.word	0x58020000
 8004b00:	58020400 	.word	0x58020400
 8004b04:	58020800 	.word	0x58020800
 8004b08:	58020c00 	.word	0x58020c00
 8004b0c:	58021000 	.word	0x58021000
 8004b10:	58021400 	.word	0x58021400
 8004b14:	58021800 	.word	0x58021800
 8004b18:	58021c00 	.word	0x58021c00
 8004b1c:	58022000 	.word	0x58022000
 8004b20:	58022400 	.word	0x58022400
 8004b24:	2300      	movs	r3, #0
 8004b26:	69fa      	ldr	r2, [r7, #28]
 8004b28:	f002 0203 	and.w	r2, r2, #3
 8004b2c:	0092      	lsls	r2, r2, #2
 8004b2e:	4093      	lsls	r3, r2
 8004b30:	69ba      	ldr	r2, [r7, #24]
 8004b32:	4313      	orrs	r3, r2
 8004b34:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004b36:	4938      	ldr	r1, [pc, #224]	@ (8004c18 <HAL_GPIO_Init+0x35c>)
 8004b38:	69fb      	ldr	r3, [r7, #28]
 8004b3a:	089b      	lsrs	r3, r3, #2
 8004b3c:	3302      	adds	r3, #2
 8004b3e:	69ba      	ldr	r2, [r7, #24]
 8004b40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004b44:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004b4c:	693b      	ldr	r3, [r7, #16]
 8004b4e:	43db      	mvns	r3, r3
 8004b50:	69ba      	ldr	r2, [r7, #24]
 8004b52:	4013      	ands	r3, r2
 8004b54:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d003      	beq.n	8004b6a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8004b62:	69ba      	ldr	r2, [r7, #24]
 8004b64:	693b      	ldr	r3, [r7, #16]
 8004b66:	4313      	orrs	r3, r2
 8004b68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004b6a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004b6e:	69bb      	ldr	r3, [r7, #24]
 8004b70:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004b72:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004b76:	685b      	ldr	r3, [r3, #4]
 8004b78:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004b7a:	693b      	ldr	r3, [r7, #16]
 8004b7c:	43db      	mvns	r3, r3
 8004b7e:	69ba      	ldr	r2, [r7, #24]
 8004b80:	4013      	ands	r3, r2
 8004b82:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	685b      	ldr	r3, [r3, #4]
 8004b88:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d003      	beq.n	8004b98 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004b90:	69ba      	ldr	r2, [r7, #24]
 8004b92:	693b      	ldr	r3, [r7, #16]
 8004b94:	4313      	orrs	r3, r2
 8004b96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004b98:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004b9c:	69bb      	ldr	r3, [r7, #24]
 8004b9e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004ba0:	697b      	ldr	r3, [r7, #20]
 8004ba2:	685b      	ldr	r3, [r3, #4]
 8004ba4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004ba6:	693b      	ldr	r3, [r7, #16]
 8004ba8:	43db      	mvns	r3, r3
 8004baa:	69ba      	ldr	r2, [r7, #24]
 8004bac:	4013      	ands	r3, r2
 8004bae:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	685b      	ldr	r3, [r3, #4]
 8004bb4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d003      	beq.n	8004bc4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8004bbc:	69ba      	ldr	r2, [r7, #24]
 8004bbe:	693b      	ldr	r3, [r7, #16]
 8004bc0:	4313      	orrs	r3, r2
 8004bc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004bc4:	697b      	ldr	r3, [r7, #20]
 8004bc6:	69ba      	ldr	r2, [r7, #24]
 8004bc8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004bca:	697b      	ldr	r3, [r7, #20]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004bd0:	693b      	ldr	r3, [r7, #16]
 8004bd2:	43db      	mvns	r3, r3
 8004bd4:	69ba      	ldr	r2, [r7, #24]
 8004bd6:	4013      	ands	r3, r2
 8004bd8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	685b      	ldr	r3, [r3, #4]
 8004bde:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d003      	beq.n	8004bee <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8004be6:	69ba      	ldr	r2, [r7, #24]
 8004be8:	693b      	ldr	r3, [r7, #16]
 8004bea:	4313      	orrs	r3, r2
 8004bec:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004bee:	697b      	ldr	r3, [r7, #20]
 8004bf0:	69ba      	ldr	r2, [r7, #24]
 8004bf2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004bf4:	69fb      	ldr	r3, [r7, #28]
 8004bf6:	3301      	adds	r3, #1
 8004bf8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	681a      	ldr	r2, [r3, #0]
 8004bfe:	69fb      	ldr	r3, [r7, #28]
 8004c00:	fa22 f303 	lsr.w	r3, r2, r3
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	f47f ae63 	bne.w	80048d0 <HAL_GPIO_Init+0x14>
  }
}
 8004c0a:	bf00      	nop
 8004c0c:	bf00      	nop
 8004c0e:	3724      	adds	r7, #36	@ 0x24
 8004c10:	46bd      	mov	sp, r7
 8004c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c16:	4770      	bx	lr
 8004c18:	58000400 	.word	0x58000400

08004c1c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004c1c:	b480      	push	{r7}
 8004c1e:	b085      	sub	sp, #20
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
 8004c24:	460b      	mov	r3, r1
 8004c26:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	691a      	ldr	r2, [r3, #16]
 8004c2c:	887b      	ldrh	r3, [r7, #2]
 8004c2e:	4013      	ands	r3, r2
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d002      	beq.n	8004c3a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004c34:	2301      	movs	r3, #1
 8004c36:	73fb      	strb	r3, [r7, #15]
 8004c38:	e001      	b.n	8004c3e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004c3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c40:	4618      	mov	r0, r3
 8004c42:	3714      	adds	r7, #20
 8004c44:	46bd      	mov	sp, r7
 8004c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4a:	4770      	bx	lr

08004c4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	b083      	sub	sp, #12
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
 8004c54:	460b      	mov	r3, r1
 8004c56:	807b      	strh	r3, [r7, #2]
 8004c58:	4613      	mov	r3, r2
 8004c5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004c5c:	787b      	ldrb	r3, [r7, #1]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d003      	beq.n	8004c6a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004c62:	887a      	ldrh	r2, [r7, #2]
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004c68:	e003      	b.n	8004c72 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004c6a:	887b      	ldrh	r3, [r7, #2]
 8004c6c:	041a      	lsls	r2, r3, #16
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	619a      	str	r2, [r3, #24]
}
 8004c72:	bf00      	nop
 8004c74:	370c      	adds	r7, #12
 8004c76:	46bd      	mov	sp, r7
 8004c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7c:	4770      	bx	lr

08004c7e <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004c7e:	b580      	push	{r7, lr}
 8004c80:	b082      	sub	sp, #8
 8004c82:	af00      	add	r7, sp, #0
 8004c84:	4603      	mov	r3, r0
 8004c86:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8004c88:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004c8c:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8004c90:	88fb      	ldrh	r3, [r7, #6]
 8004c92:	4013      	ands	r3, r2
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d008      	beq.n	8004caa <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004c98:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004c9c:	88fb      	ldrh	r3, [r7, #6]
 8004c9e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004ca2:	88fb      	ldrh	r3, [r7, #6]
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	f7fb fd49 	bl	800073c <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8004caa:	bf00      	nop
 8004cac:	3708      	adds	r7, #8
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	bd80      	pop	{r7, pc}
	...

08004cb4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b082      	sub	sp, #8
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d101      	bne.n	8004cc6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	e08b      	b.n	8004dde <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004ccc:	b2db      	uxtb	r3, r3
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d106      	bne.n	8004ce0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004cda:	6878      	ldr	r0, [r7, #4]
 8004cdc:	f7fc fc96 	bl	800160c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2224      	movs	r2, #36	@ 0x24
 8004ce4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	681a      	ldr	r2, [r3, #0]
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f022 0201 	bic.w	r2, r2, #1
 8004cf6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	685a      	ldr	r2, [r3, #4]
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004d04:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	689a      	ldr	r2, [r3, #8]
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004d14:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	68db      	ldr	r3, [r3, #12]
 8004d1a:	2b01      	cmp	r3, #1
 8004d1c:	d107      	bne.n	8004d2e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	689a      	ldr	r2, [r3, #8]
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004d2a:	609a      	str	r2, [r3, #8]
 8004d2c:	e006      	b.n	8004d3c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	689a      	ldr	r2, [r3, #8]
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8004d3a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	68db      	ldr	r3, [r3, #12]
 8004d40:	2b02      	cmp	r3, #2
 8004d42:	d108      	bne.n	8004d56 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	685a      	ldr	r2, [r3, #4]
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004d52:	605a      	str	r2, [r3, #4]
 8004d54:	e007      	b.n	8004d66 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	685a      	ldr	r2, [r3, #4]
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004d64:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	6859      	ldr	r1, [r3, #4]
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681a      	ldr	r2, [r3, #0]
 8004d70:	4b1d      	ldr	r3, [pc, #116]	@ (8004de8 <HAL_I2C_Init+0x134>)
 8004d72:	430b      	orrs	r3, r1
 8004d74:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	68da      	ldr	r2, [r3, #12]
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004d84:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	691a      	ldr	r2, [r3, #16]
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	695b      	ldr	r3, [r3, #20]
 8004d8e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	699b      	ldr	r3, [r3, #24]
 8004d96:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	430a      	orrs	r2, r1
 8004d9e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	69d9      	ldr	r1, [r3, #28]
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6a1a      	ldr	r2, [r3, #32]
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	430a      	orrs	r2, r1
 8004dae:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	681a      	ldr	r2, [r3, #0]
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f042 0201 	orr.w	r2, r2, #1
 8004dbe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2220      	movs	r2, #32
 8004dca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8004ddc:	2300      	movs	r3, #0
}
 8004dde:	4618      	mov	r0, r3
 8004de0:	3708      	adds	r7, #8
 8004de2:	46bd      	mov	sp, r7
 8004de4:	bd80      	pop	{r7, pc}
 8004de6:	bf00      	nop
 8004de8:	02008000 	.word	0x02008000

08004dec <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b088      	sub	sp, #32
 8004df0:	af02      	add	r7, sp, #8
 8004df2:	60f8      	str	r0, [r7, #12]
 8004df4:	4608      	mov	r0, r1
 8004df6:	4611      	mov	r1, r2
 8004df8:	461a      	mov	r2, r3
 8004dfa:	4603      	mov	r3, r0
 8004dfc:	817b      	strh	r3, [r7, #10]
 8004dfe:	460b      	mov	r3, r1
 8004e00:	813b      	strh	r3, [r7, #8]
 8004e02:	4613      	mov	r3, r2
 8004e04:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004e0c:	b2db      	uxtb	r3, r3
 8004e0e:	2b20      	cmp	r3, #32
 8004e10:	f040 80f9 	bne.w	8005006 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e14:	6a3b      	ldr	r3, [r7, #32]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d002      	beq.n	8004e20 <HAL_I2C_Mem_Write+0x34>
 8004e1a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d105      	bne.n	8004e2c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004e26:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8004e28:	2301      	movs	r3, #1
 8004e2a:	e0ed      	b.n	8005008 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004e32:	2b01      	cmp	r3, #1
 8004e34:	d101      	bne.n	8004e3a <HAL_I2C_Mem_Write+0x4e>
 8004e36:	2302      	movs	r3, #2
 8004e38:	e0e6      	b.n	8005008 <HAL_I2C_Mem_Write+0x21c>
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	2201      	movs	r2, #1
 8004e3e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004e42:	f7fc ff4b 	bl	8001cdc <HAL_GetTick>
 8004e46:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004e48:	697b      	ldr	r3, [r7, #20]
 8004e4a:	9300      	str	r3, [sp, #0]
 8004e4c:	2319      	movs	r3, #25
 8004e4e:	2201      	movs	r2, #1
 8004e50:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004e54:	68f8      	ldr	r0, [r7, #12]
 8004e56:	f000 fac3 	bl	80053e0 <I2C_WaitOnFlagUntilTimeout>
 8004e5a:	4603      	mov	r3, r0
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d001      	beq.n	8004e64 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8004e60:	2301      	movs	r3, #1
 8004e62:	e0d1      	b.n	8005008 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	2221      	movs	r2, #33	@ 0x21
 8004e68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	2240      	movs	r2, #64	@ 0x40
 8004e70:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	2200      	movs	r2, #0
 8004e78:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	6a3a      	ldr	r2, [r7, #32]
 8004e7e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004e84:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	2200      	movs	r2, #0
 8004e8a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004e8c:	88f8      	ldrh	r0, [r7, #6]
 8004e8e:	893a      	ldrh	r2, [r7, #8]
 8004e90:	8979      	ldrh	r1, [r7, #10]
 8004e92:	697b      	ldr	r3, [r7, #20]
 8004e94:	9301      	str	r3, [sp, #4]
 8004e96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e98:	9300      	str	r3, [sp, #0]
 8004e9a:	4603      	mov	r3, r0
 8004e9c:	68f8      	ldr	r0, [r7, #12]
 8004e9e:	f000 f9d3 	bl	8005248 <I2C_RequestMemoryWrite>
 8004ea2:	4603      	mov	r3, r0
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d005      	beq.n	8004eb4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	2200      	movs	r2, #0
 8004eac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	e0a9      	b.n	8005008 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004eb8:	b29b      	uxth	r3, r3
 8004eba:	2bff      	cmp	r3, #255	@ 0xff
 8004ebc:	d90e      	bls.n	8004edc <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	22ff      	movs	r2, #255	@ 0xff
 8004ec2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ec8:	b2da      	uxtb	r2, r3
 8004eca:	8979      	ldrh	r1, [r7, #10]
 8004ecc:	2300      	movs	r3, #0
 8004ece:	9300      	str	r3, [sp, #0]
 8004ed0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004ed4:	68f8      	ldr	r0, [r7, #12]
 8004ed6:	f000 fc47 	bl	8005768 <I2C_TransferConfig>
 8004eda:	e00f      	b.n	8004efc <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ee0:	b29a      	uxth	r2, r3
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004eea:	b2da      	uxtb	r2, r3
 8004eec:	8979      	ldrh	r1, [r7, #10]
 8004eee:	2300      	movs	r3, #0
 8004ef0:	9300      	str	r3, [sp, #0]
 8004ef2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004ef6:	68f8      	ldr	r0, [r7, #12]
 8004ef8:	f000 fc36 	bl	8005768 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004efc:	697a      	ldr	r2, [r7, #20]
 8004efe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004f00:	68f8      	ldr	r0, [r7, #12]
 8004f02:	f000 fac6 	bl	8005492 <I2C_WaitOnTXISFlagUntilTimeout>
 8004f06:	4603      	mov	r3, r0
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d001      	beq.n	8004f10 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	e07b      	b.n	8005008 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f14:	781a      	ldrb	r2, [r3, #0]
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f20:	1c5a      	adds	r2, r3, #1
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f2a:	b29b      	uxth	r3, r3
 8004f2c:	3b01      	subs	r3, #1
 8004f2e:	b29a      	uxth	r2, r3
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f38:	3b01      	subs	r3, #1
 8004f3a:	b29a      	uxth	r2, r3
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f44:	b29b      	uxth	r3, r3
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d034      	beq.n	8004fb4 <HAL_I2C_Mem_Write+0x1c8>
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d130      	bne.n	8004fb4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004f52:	697b      	ldr	r3, [r7, #20]
 8004f54:	9300      	str	r3, [sp, #0]
 8004f56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f58:	2200      	movs	r2, #0
 8004f5a:	2180      	movs	r1, #128	@ 0x80
 8004f5c:	68f8      	ldr	r0, [r7, #12]
 8004f5e:	f000 fa3f 	bl	80053e0 <I2C_WaitOnFlagUntilTimeout>
 8004f62:	4603      	mov	r3, r0
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d001      	beq.n	8004f6c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004f68:	2301      	movs	r3, #1
 8004f6a:	e04d      	b.n	8005008 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f70:	b29b      	uxth	r3, r3
 8004f72:	2bff      	cmp	r3, #255	@ 0xff
 8004f74:	d90e      	bls.n	8004f94 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	22ff      	movs	r2, #255	@ 0xff
 8004f7a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f80:	b2da      	uxtb	r2, r3
 8004f82:	8979      	ldrh	r1, [r7, #10]
 8004f84:	2300      	movs	r3, #0
 8004f86:	9300      	str	r3, [sp, #0]
 8004f88:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004f8c:	68f8      	ldr	r0, [r7, #12]
 8004f8e:	f000 fbeb 	bl	8005768 <I2C_TransferConfig>
 8004f92:	e00f      	b.n	8004fb4 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f98:	b29a      	uxth	r2, r3
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004fa2:	b2da      	uxtb	r2, r3
 8004fa4:	8979      	ldrh	r1, [r7, #10]
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	9300      	str	r3, [sp, #0]
 8004faa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004fae:	68f8      	ldr	r0, [r7, #12]
 8004fb0:	f000 fbda 	bl	8005768 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004fb8:	b29b      	uxth	r3, r3
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d19e      	bne.n	8004efc <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004fbe:	697a      	ldr	r2, [r7, #20]
 8004fc0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004fc2:	68f8      	ldr	r0, [r7, #12]
 8004fc4:	f000 faac 	bl	8005520 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004fc8:	4603      	mov	r3, r0
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d001      	beq.n	8004fd2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8004fce:	2301      	movs	r3, #1
 8004fd0:	e01a      	b.n	8005008 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	2220      	movs	r2, #32
 8004fd8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	6859      	ldr	r1, [r3, #4]
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681a      	ldr	r2, [r3, #0]
 8004fe4:	4b0a      	ldr	r3, [pc, #40]	@ (8005010 <HAL_I2C_Mem_Write+0x224>)
 8004fe6:	400b      	ands	r3, r1
 8004fe8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	2220      	movs	r2, #32
 8004fee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005002:	2300      	movs	r3, #0
 8005004:	e000      	b.n	8005008 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8005006:	2302      	movs	r3, #2
  }
}
 8005008:	4618      	mov	r0, r3
 800500a:	3718      	adds	r7, #24
 800500c:	46bd      	mov	sp, r7
 800500e:	bd80      	pop	{r7, pc}
 8005010:	fe00e800 	.word	0xfe00e800

08005014 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b088      	sub	sp, #32
 8005018:	af02      	add	r7, sp, #8
 800501a:	60f8      	str	r0, [r7, #12]
 800501c:	4608      	mov	r0, r1
 800501e:	4611      	mov	r1, r2
 8005020:	461a      	mov	r2, r3
 8005022:	4603      	mov	r3, r0
 8005024:	817b      	strh	r3, [r7, #10]
 8005026:	460b      	mov	r3, r1
 8005028:	813b      	strh	r3, [r7, #8]
 800502a:	4613      	mov	r3, r2
 800502c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005034:	b2db      	uxtb	r3, r3
 8005036:	2b20      	cmp	r3, #32
 8005038:	f040 80fd 	bne.w	8005236 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800503c:	6a3b      	ldr	r3, [r7, #32]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d002      	beq.n	8005048 <HAL_I2C_Mem_Read+0x34>
 8005042:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005044:	2b00      	cmp	r3, #0
 8005046:	d105      	bne.n	8005054 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800504e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8005050:	2301      	movs	r3, #1
 8005052:	e0f1      	b.n	8005238 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800505a:	2b01      	cmp	r3, #1
 800505c:	d101      	bne.n	8005062 <HAL_I2C_Mem_Read+0x4e>
 800505e:	2302      	movs	r3, #2
 8005060:	e0ea      	b.n	8005238 <HAL_I2C_Mem_Read+0x224>
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	2201      	movs	r2, #1
 8005066:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800506a:	f7fc fe37 	bl	8001cdc <HAL_GetTick>
 800506e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005070:	697b      	ldr	r3, [r7, #20]
 8005072:	9300      	str	r3, [sp, #0]
 8005074:	2319      	movs	r3, #25
 8005076:	2201      	movs	r2, #1
 8005078:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800507c:	68f8      	ldr	r0, [r7, #12]
 800507e:	f000 f9af 	bl	80053e0 <I2C_WaitOnFlagUntilTimeout>
 8005082:	4603      	mov	r3, r0
 8005084:	2b00      	cmp	r3, #0
 8005086:	d001      	beq.n	800508c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8005088:	2301      	movs	r3, #1
 800508a:	e0d5      	b.n	8005238 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	2222      	movs	r2, #34	@ 0x22
 8005090:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	2240      	movs	r2, #64	@ 0x40
 8005098:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	2200      	movs	r2, #0
 80050a0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	6a3a      	ldr	r2, [r7, #32]
 80050a6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80050ac:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	2200      	movs	r2, #0
 80050b2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80050b4:	88f8      	ldrh	r0, [r7, #6]
 80050b6:	893a      	ldrh	r2, [r7, #8]
 80050b8:	8979      	ldrh	r1, [r7, #10]
 80050ba:	697b      	ldr	r3, [r7, #20]
 80050bc:	9301      	str	r3, [sp, #4]
 80050be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050c0:	9300      	str	r3, [sp, #0]
 80050c2:	4603      	mov	r3, r0
 80050c4:	68f8      	ldr	r0, [r7, #12]
 80050c6:	f000 f913 	bl	80052f0 <I2C_RequestMemoryRead>
 80050ca:	4603      	mov	r3, r0
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d005      	beq.n	80050dc <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	2200      	movs	r2, #0
 80050d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80050d8:	2301      	movs	r3, #1
 80050da:	e0ad      	b.n	8005238 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050e0:	b29b      	uxth	r3, r3
 80050e2:	2bff      	cmp	r3, #255	@ 0xff
 80050e4:	d90e      	bls.n	8005104 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	22ff      	movs	r2, #255	@ 0xff
 80050ea:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80050f0:	b2da      	uxtb	r2, r3
 80050f2:	8979      	ldrh	r1, [r7, #10]
 80050f4:	4b52      	ldr	r3, [pc, #328]	@ (8005240 <HAL_I2C_Mem_Read+0x22c>)
 80050f6:	9300      	str	r3, [sp, #0]
 80050f8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80050fc:	68f8      	ldr	r0, [r7, #12]
 80050fe:	f000 fb33 	bl	8005768 <I2C_TransferConfig>
 8005102:	e00f      	b.n	8005124 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005108:	b29a      	uxth	r2, r3
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005112:	b2da      	uxtb	r2, r3
 8005114:	8979      	ldrh	r1, [r7, #10]
 8005116:	4b4a      	ldr	r3, [pc, #296]	@ (8005240 <HAL_I2C_Mem_Read+0x22c>)
 8005118:	9300      	str	r3, [sp, #0]
 800511a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800511e:	68f8      	ldr	r0, [r7, #12]
 8005120:	f000 fb22 	bl	8005768 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005124:	697b      	ldr	r3, [r7, #20]
 8005126:	9300      	str	r3, [sp, #0]
 8005128:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800512a:	2200      	movs	r2, #0
 800512c:	2104      	movs	r1, #4
 800512e:	68f8      	ldr	r0, [r7, #12]
 8005130:	f000 f956 	bl	80053e0 <I2C_WaitOnFlagUntilTimeout>
 8005134:	4603      	mov	r3, r0
 8005136:	2b00      	cmp	r3, #0
 8005138:	d001      	beq.n	800513e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800513a:	2301      	movs	r3, #1
 800513c:	e07c      	b.n	8005238 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005148:	b2d2      	uxtb	r2, r2
 800514a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005150:	1c5a      	adds	r2, r3, #1
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800515a:	3b01      	subs	r3, #1
 800515c:	b29a      	uxth	r2, r3
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005166:	b29b      	uxth	r3, r3
 8005168:	3b01      	subs	r3, #1
 800516a:	b29a      	uxth	r2, r3
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005174:	b29b      	uxth	r3, r3
 8005176:	2b00      	cmp	r3, #0
 8005178:	d034      	beq.n	80051e4 <HAL_I2C_Mem_Read+0x1d0>
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800517e:	2b00      	cmp	r3, #0
 8005180:	d130      	bne.n	80051e4 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005182:	697b      	ldr	r3, [r7, #20]
 8005184:	9300      	str	r3, [sp, #0]
 8005186:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005188:	2200      	movs	r2, #0
 800518a:	2180      	movs	r1, #128	@ 0x80
 800518c:	68f8      	ldr	r0, [r7, #12]
 800518e:	f000 f927 	bl	80053e0 <I2C_WaitOnFlagUntilTimeout>
 8005192:	4603      	mov	r3, r0
 8005194:	2b00      	cmp	r3, #0
 8005196:	d001      	beq.n	800519c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8005198:	2301      	movs	r3, #1
 800519a:	e04d      	b.n	8005238 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051a0:	b29b      	uxth	r3, r3
 80051a2:	2bff      	cmp	r3, #255	@ 0xff
 80051a4:	d90e      	bls.n	80051c4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	22ff      	movs	r2, #255	@ 0xff
 80051aa:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80051b0:	b2da      	uxtb	r2, r3
 80051b2:	8979      	ldrh	r1, [r7, #10]
 80051b4:	2300      	movs	r3, #0
 80051b6:	9300      	str	r3, [sp, #0]
 80051b8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80051bc:	68f8      	ldr	r0, [r7, #12]
 80051be:	f000 fad3 	bl	8005768 <I2C_TransferConfig>
 80051c2:	e00f      	b.n	80051e4 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051c8:	b29a      	uxth	r2, r3
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80051d2:	b2da      	uxtb	r2, r3
 80051d4:	8979      	ldrh	r1, [r7, #10]
 80051d6:	2300      	movs	r3, #0
 80051d8:	9300      	str	r3, [sp, #0]
 80051da:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80051de:	68f8      	ldr	r0, [r7, #12]
 80051e0:	f000 fac2 	bl	8005768 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051e8:	b29b      	uxth	r3, r3
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d19a      	bne.n	8005124 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80051ee:	697a      	ldr	r2, [r7, #20]
 80051f0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80051f2:	68f8      	ldr	r0, [r7, #12]
 80051f4:	f000 f994 	bl	8005520 <I2C_WaitOnSTOPFlagUntilTimeout>
 80051f8:	4603      	mov	r3, r0
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d001      	beq.n	8005202 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80051fe:	2301      	movs	r3, #1
 8005200:	e01a      	b.n	8005238 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	2220      	movs	r2, #32
 8005208:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	6859      	ldr	r1, [r3, #4]
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681a      	ldr	r2, [r3, #0]
 8005214:	4b0b      	ldr	r3, [pc, #44]	@ (8005244 <HAL_I2C_Mem_Read+0x230>)
 8005216:	400b      	ands	r3, r1
 8005218:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	2220      	movs	r2, #32
 800521e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	2200      	movs	r2, #0
 8005226:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	2200      	movs	r2, #0
 800522e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005232:	2300      	movs	r3, #0
 8005234:	e000      	b.n	8005238 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8005236:	2302      	movs	r3, #2
  }
}
 8005238:	4618      	mov	r0, r3
 800523a:	3718      	adds	r7, #24
 800523c:	46bd      	mov	sp, r7
 800523e:	bd80      	pop	{r7, pc}
 8005240:	80002400 	.word	0x80002400
 8005244:	fe00e800 	.word	0xfe00e800

08005248 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8005248:	b580      	push	{r7, lr}
 800524a:	b086      	sub	sp, #24
 800524c:	af02      	add	r7, sp, #8
 800524e:	60f8      	str	r0, [r7, #12]
 8005250:	4608      	mov	r0, r1
 8005252:	4611      	mov	r1, r2
 8005254:	461a      	mov	r2, r3
 8005256:	4603      	mov	r3, r0
 8005258:	817b      	strh	r3, [r7, #10]
 800525a:	460b      	mov	r3, r1
 800525c:	813b      	strh	r3, [r7, #8]
 800525e:	4613      	mov	r3, r2
 8005260:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005262:	88fb      	ldrh	r3, [r7, #6]
 8005264:	b2da      	uxtb	r2, r3
 8005266:	8979      	ldrh	r1, [r7, #10]
 8005268:	4b20      	ldr	r3, [pc, #128]	@ (80052ec <I2C_RequestMemoryWrite+0xa4>)
 800526a:	9300      	str	r3, [sp, #0]
 800526c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005270:	68f8      	ldr	r0, [r7, #12]
 8005272:	f000 fa79 	bl	8005768 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005276:	69fa      	ldr	r2, [r7, #28]
 8005278:	69b9      	ldr	r1, [r7, #24]
 800527a:	68f8      	ldr	r0, [r7, #12]
 800527c:	f000 f909 	bl	8005492 <I2C_WaitOnTXISFlagUntilTimeout>
 8005280:	4603      	mov	r3, r0
 8005282:	2b00      	cmp	r3, #0
 8005284:	d001      	beq.n	800528a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8005286:	2301      	movs	r3, #1
 8005288:	e02c      	b.n	80052e4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800528a:	88fb      	ldrh	r3, [r7, #6]
 800528c:	2b01      	cmp	r3, #1
 800528e:	d105      	bne.n	800529c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005290:	893b      	ldrh	r3, [r7, #8]
 8005292:	b2da      	uxtb	r2, r3
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	629a      	str	r2, [r3, #40]	@ 0x28
 800529a:	e015      	b.n	80052c8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800529c:	893b      	ldrh	r3, [r7, #8]
 800529e:	0a1b      	lsrs	r3, r3, #8
 80052a0:	b29b      	uxth	r3, r3
 80052a2:	b2da      	uxtb	r2, r3
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80052aa:	69fa      	ldr	r2, [r7, #28]
 80052ac:	69b9      	ldr	r1, [r7, #24]
 80052ae:	68f8      	ldr	r0, [r7, #12]
 80052b0:	f000 f8ef 	bl	8005492 <I2C_WaitOnTXISFlagUntilTimeout>
 80052b4:	4603      	mov	r3, r0
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d001      	beq.n	80052be <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80052ba:	2301      	movs	r3, #1
 80052bc:	e012      	b.n	80052e4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80052be:	893b      	ldrh	r3, [r7, #8]
 80052c0:	b2da      	uxtb	r2, r3
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80052c8:	69fb      	ldr	r3, [r7, #28]
 80052ca:	9300      	str	r3, [sp, #0]
 80052cc:	69bb      	ldr	r3, [r7, #24]
 80052ce:	2200      	movs	r2, #0
 80052d0:	2180      	movs	r1, #128	@ 0x80
 80052d2:	68f8      	ldr	r0, [r7, #12]
 80052d4:	f000 f884 	bl	80053e0 <I2C_WaitOnFlagUntilTimeout>
 80052d8:	4603      	mov	r3, r0
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d001      	beq.n	80052e2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80052de:	2301      	movs	r3, #1
 80052e0:	e000      	b.n	80052e4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80052e2:	2300      	movs	r3, #0
}
 80052e4:	4618      	mov	r0, r3
 80052e6:	3710      	adds	r7, #16
 80052e8:	46bd      	mov	sp, r7
 80052ea:	bd80      	pop	{r7, pc}
 80052ec:	80002000 	.word	0x80002000

080052f0 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b086      	sub	sp, #24
 80052f4:	af02      	add	r7, sp, #8
 80052f6:	60f8      	str	r0, [r7, #12]
 80052f8:	4608      	mov	r0, r1
 80052fa:	4611      	mov	r1, r2
 80052fc:	461a      	mov	r2, r3
 80052fe:	4603      	mov	r3, r0
 8005300:	817b      	strh	r3, [r7, #10]
 8005302:	460b      	mov	r3, r1
 8005304:	813b      	strh	r3, [r7, #8]
 8005306:	4613      	mov	r3, r2
 8005308:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800530a:	88fb      	ldrh	r3, [r7, #6]
 800530c:	b2da      	uxtb	r2, r3
 800530e:	8979      	ldrh	r1, [r7, #10]
 8005310:	4b20      	ldr	r3, [pc, #128]	@ (8005394 <I2C_RequestMemoryRead+0xa4>)
 8005312:	9300      	str	r3, [sp, #0]
 8005314:	2300      	movs	r3, #0
 8005316:	68f8      	ldr	r0, [r7, #12]
 8005318:	f000 fa26 	bl	8005768 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800531c:	69fa      	ldr	r2, [r7, #28]
 800531e:	69b9      	ldr	r1, [r7, #24]
 8005320:	68f8      	ldr	r0, [r7, #12]
 8005322:	f000 f8b6 	bl	8005492 <I2C_WaitOnTXISFlagUntilTimeout>
 8005326:	4603      	mov	r3, r0
 8005328:	2b00      	cmp	r3, #0
 800532a:	d001      	beq.n	8005330 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800532c:	2301      	movs	r3, #1
 800532e:	e02c      	b.n	800538a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005330:	88fb      	ldrh	r3, [r7, #6]
 8005332:	2b01      	cmp	r3, #1
 8005334:	d105      	bne.n	8005342 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005336:	893b      	ldrh	r3, [r7, #8]
 8005338:	b2da      	uxtb	r2, r3
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	629a      	str	r2, [r3, #40]	@ 0x28
 8005340:	e015      	b.n	800536e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005342:	893b      	ldrh	r3, [r7, #8]
 8005344:	0a1b      	lsrs	r3, r3, #8
 8005346:	b29b      	uxth	r3, r3
 8005348:	b2da      	uxtb	r2, r3
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005350:	69fa      	ldr	r2, [r7, #28]
 8005352:	69b9      	ldr	r1, [r7, #24]
 8005354:	68f8      	ldr	r0, [r7, #12]
 8005356:	f000 f89c 	bl	8005492 <I2C_WaitOnTXISFlagUntilTimeout>
 800535a:	4603      	mov	r3, r0
 800535c:	2b00      	cmp	r3, #0
 800535e:	d001      	beq.n	8005364 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8005360:	2301      	movs	r3, #1
 8005362:	e012      	b.n	800538a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005364:	893b      	ldrh	r3, [r7, #8]
 8005366:	b2da      	uxtb	r2, r3
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800536e:	69fb      	ldr	r3, [r7, #28]
 8005370:	9300      	str	r3, [sp, #0]
 8005372:	69bb      	ldr	r3, [r7, #24]
 8005374:	2200      	movs	r2, #0
 8005376:	2140      	movs	r1, #64	@ 0x40
 8005378:	68f8      	ldr	r0, [r7, #12]
 800537a:	f000 f831 	bl	80053e0 <I2C_WaitOnFlagUntilTimeout>
 800537e:	4603      	mov	r3, r0
 8005380:	2b00      	cmp	r3, #0
 8005382:	d001      	beq.n	8005388 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8005384:	2301      	movs	r3, #1
 8005386:	e000      	b.n	800538a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8005388:	2300      	movs	r3, #0
}
 800538a:	4618      	mov	r0, r3
 800538c:	3710      	adds	r7, #16
 800538e:	46bd      	mov	sp, r7
 8005390:	bd80      	pop	{r7, pc}
 8005392:	bf00      	nop
 8005394:	80002000 	.word	0x80002000

08005398 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005398:	b480      	push	{r7}
 800539a:	b083      	sub	sp, #12
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	699b      	ldr	r3, [r3, #24]
 80053a6:	f003 0302 	and.w	r3, r3, #2
 80053aa:	2b02      	cmp	r3, #2
 80053ac:	d103      	bne.n	80053b6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	2200      	movs	r2, #0
 80053b4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	699b      	ldr	r3, [r3, #24]
 80053bc:	f003 0301 	and.w	r3, r3, #1
 80053c0:	2b01      	cmp	r3, #1
 80053c2:	d007      	beq.n	80053d4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	699a      	ldr	r2, [r3, #24]
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f042 0201 	orr.w	r2, r2, #1
 80053d2:	619a      	str	r2, [r3, #24]
  }
}
 80053d4:	bf00      	nop
 80053d6:	370c      	adds	r7, #12
 80053d8:	46bd      	mov	sp, r7
 80053da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053de:	4770      	bx	lr

080053e0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b084      	sub	sp, #16
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	60f8      	str	r0, [r7, #12]
 80053e8:	60b9      	str	r1, [r7, #8]
 80053ea:	603b      	str	r3, [r7, #0]
 80053ec:	4613      	mov	r3, r2
 80053ee:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80053f0:	e03b      	b.n	800546a <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80053f2:	69ba      	ldr	r2, [r7, #24]
 80053f4:	6839      	ldr	r1, [r7, #0]
 80053f6:	68f8      	ldr	r0, [r7, #12]
 80053f8:	f000 f8d6 	bl	80055a8 <I2C_IsErrorOccurred>
 80053fc:	4603      	mov	r3, r0
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d001      	beq.n	8005406 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8005402:	2301      	movs	r3, #1
 8005404:	e041      	b.n	800548a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	f1b3 3fff 	cmp.w	r3, #4294967295
 800540c:	d02d      	beq.n	800546a <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800540e:	f7fc fc65 	bl	8001cdc <HAL_GetTick>
 8005412:	4602      	mov	r2, r0
 8005414:	69bb      	ldr	r3, [r7, #24]
 8005416:	1ad3      	subs	r3, r2, r3
 8005418:	683a      	ldr	r2, [r7, #0]
 800541a:	429a      	cmp	r2, r3
 800541c:	d302      	bcc.n	8005424 <I2C_WaitOnFlagUntilTimeout+0x44>
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d122      	bne.n	800546a <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	699a      	ldr	r2, [r3, #24]
 800542a:	68bb      	ldr	r3, [r7, #8]
 800542c:	4013      	ands	r3, r2
 800542e:	68ba      	ldr	r2, [r7, #8]
 8005430:	429a      	cmp	r2, r3
 8005432:	bf0c      	ite	eq
 8005434:	2301      	moveq	r3, #1
 8005436:	2300      	movne	r3, #0
 8005438:	b2db      	uxtb	r3, r3
 800543a:	461a      	mov	r2, r3
 800543c:	79fb      	ldrb	r3, [r7, #7]
 800543e:	429a      	cmp	r2, r3
 8005440:	d113      	bne.n	800546a <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005446:	f043 0220 	orr.w	r2, r3, #32
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	2220      	movs	r2, #32
 8005452:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	2200      	movs	r2, #0
 800545a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	2200      	movs	r2, #0
 8005462:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8005466:	2301      	movs	r3, #1
 8005468:	e00f      	b.n	800548a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	699a      	ldr	r2, [r3, #24]
 8005470:	68bb      	ldr	r3, [r7, #8]
 8005472:	4013      	ands	r3, r2
 8005474:	68ba      	ldr	r2, [r7, #8]
 8005476:	429a      	cmp	r2, r3
 8005478:	bf0c      	ite	eq
 800547a:	2301      	moveq	r3, #1
 800547c:	2300      	movne	r3, #0
 800547e:	b2db      	uxtb	r3, r3
 8005480:	461a      	mov	r2, r3
 8005482:	79fb      	ldrb	r3, [r7, #7]
 8005484:	429a      	cmp	r2, r3
 8005486:	d0b4      	beq.n	80053f2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005488:	2300      	movs	r3, #0
}
 800548a:	4618      	mov	r0, r3
 800548c:	3710      	adds	r7, #16
 800548e:	46bd      	mov	sp, r7
 8005490:	bd80      	pop	{r7, pc}

08005492 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005492:	b580      	push	{r7, lr}
 8005494:	b084      	sub	sp, #16
 8005496:	af00      	add	r7, sp, #0
 8005498:	60f8      	str	r0, [r7, #12]
 800549a:	60b9      	str	r1, [r7, #8]
 800549c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800549e:	e033      	b.n	8005508 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80054a0:	687a      	ldr	r2, [r7, #4]
 80054a2:	68b9      	ldr	r1, [r7, #8]
 80054a4:	68f8      	ldr	r0, [r7, #12]
 80054a6:	f000 f87f 	bl	80055a8 <I2C_IsErrorOccurred>
 80054aa:	4603      	mov	r3, r0
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d001      	beq.n	80054b4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80054b0:	2301      	movs	r3, #1
 80054b2:	e031      	b.n	8005518 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054b4:	68bb      	ldr	r3, [r7, #8]
 80054b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054ba:	d025      	beq.n	8005508 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054bc:	f7fc fc0e 	bl	8001cdc <HAL_GetTick>
 80054c0:	4602      	mov	r2, r0
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	1ad3      	subs	r3, r2, r3
 80054c6:	68ba      	ldr	r2, [r7, #8]
 80054c8:	429a      	cmp	r2, r3
 80054ca:	d302      	bcc.n	80054d2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80054cc:	68bb      	ldr	r3, [r7, #8]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d11a      	bne.n	8005508 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	699b      	ldr	r3, [r3, #24]
 80054d8:	f003 0302 	and.w	r3, r3, #2
 80054dc:	2b02      	cmp	r3, #2
 80054de:	d013      	beq.n	8005508 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054e4:	f043 0220 	orr.w	r2, r3, #32
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	2220      	movs	r2, #32
 80054f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	2200      	movs	r2, #0
 80054f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	2200      	movs	r2, #0
 8005500:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005504:	2301      	movs	r3, #1
 8005506:	e007      	b.n	8005518 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	699b      	ldr	r3, [r3, #24]
 800550e:	f003 0302 	and.w	r3, r3, #2
 8005512:	2b02      	cmp	r3, #2
 8005514:	d1c4      	bne.n	80054a0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005516:	2300      	movs	r3, #0
}
 8005518:	4618      	mov	r0, r3
 800551a:	3710      	adds	r7, #16
 800551c:	46bd      	mov	sp, r7
 800551e:	bd80      	pop	{r7, pc}

08005520 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b084      	sub	sp, #16
 8005524:	af00      	add	r7, sp, #0
 8005526:	60f8      	str	r0, [r7, #12]
 8005528:	60b9      	str	r1, [r7, #8]
 800552a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800552c:	e02f      	b.n	800558e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800552e:	687a      	ldr	r2, [r7, #4]
 8005530:	68b9      	ldr	r1, [r7, #8]
 8005532:	68f8      	ldr	r0, [r7, #12]
 8005534:	f000 f838 	bl	80055a8 <I2C_IsErrorOccurred>
 8005538:	4603      	mov	r3, r0
 800553a:	2b00      	cmp	r3, #0
 800553c:	d001      	beq.n	8005542 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800553e:	2301      	movs	r3, #1
 8005540:	e02d      	b.n	800559e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005542:	f7fc fbcb 	bl	8001cdc <HAL_GetTick>
 8005546:	4602      	mov	r2, r0
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	1ad3      	subs	r3, r2, r3
 800554c:	68ba      	ldr	r2, [r7, #8]
 800554e:	429a      	cmp	r2, r3
 8005550:	d302      	bcc.n	8005558 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005552:	68bb      	ldr	r3, [r7, #8]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d11a      	bne.n	800558e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	699b      	ldr	r3, [r3, #24]
 800555e:	f003 0320 	and.w	r3, r3, #32
 8005562:	2b20      	cmp	r3, #32
 8005564:	d013      	beq.n	800558e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800556a:	f043 0220 	orr.w	r2, r3, #32
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	2220      	movs	r2, #32
 8005576:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	2200      	movs	r2, #0
 800557e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	2200      	movs	r2, #0
 8005586:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800558a:	2301      	movs	r3, #1
 800558c:	e007      	b.n	800559e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	699b      	ldr	r3, [r3, #24]
 8005594:	f003 0320 	and.w	r3, r3, #32
 8005598:	2b20      	cmp	r3, #32
 800559a:	d1c8      	bne.n	800552e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800559c:	2300      	movs	r3, #0
}
 800559e:	4618      	mov	r0, r3
 80055a0:	3710      	adds	r7, #16
 80055a2:	46bd      	mov	sp, r7
 80055a4:	bd80      	pop	{r7, pc}
	...

080055a8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b08a      	sub	sp, #40	@ 0x28
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	60f8      	str	r0, [r7, #12]
 80055b0:	60b9      	str	r1, [r7, #8]
 80055b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80055b4:	2300      	movs	r3, #0
 80055b6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	699b      	ldr	r3, [r3, #24]
 80055c0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80055c2:	2300      	movs	r3, #0
 80055c4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80055ca:	69bb      	ldr	r3, [r7, #24]
 80055cc:	f003 0310 	and.w	r3, r3, #16
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d068      	beq.n	80056a6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	2210      	movs	r2, #16
 80055da:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80055dc:	e049      	b.n	8005672 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80055de:	68bb      	ldr	r3, [r7, #8]
 80055e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055e4:	d045      	beq.n	8005672 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80055e6:	f7fc fb79 	bl	8001cdc <HAL_GetTick>
 80055ea:	4602      	mov	r2, r0
 80055ec:	69fb      	ldr	r3, [r7, #28]
 80055ee:	1ad3      	subs	r3, r2, r3
 80055f0:	68ba      	ldr	r2, [r7, #8]
 80055f2:	429a      	cmp	r2, r3
 80055f4:	d302      	bcc.n	80055fc <I2C_IsErrorOccurred+0x54>
 80055f6:	68bb      	ldr	r3, [r7, #8]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d13a      	bne.n	8005672 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	685b      	ldr	r3, [r3, #4]
 8005602:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005606:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800560e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	699b      	ldr	r3, [r3, #24]
 8005616:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800561a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800561e:	d121      	bne.n	8005664 <I2C_IsErrorOccurred+0xbc>
 8005620:	697b      	ldr	r3, [r7, #20]
 8005622:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005626:	d01d      	beq.n	8005664 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8005628:	7cfb      	ldrb	r3, [r7, #19]
 800562a:	2b20      	cmp	r3, #32
 800562c:	d01a      	beq.n	8005664 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	685a      	ldr	r2, [r3, #4]
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800563c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800563e:	f7fc fb4d 	bl	8001cdc <HAL_GetTick>
 8005642:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005644:	e00e      	b.n	8005664 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005646:	f7fc fb49 	bl	8001cdc <HAL_GetTick>
 800564a:	4602      	mov	r2, r0
 800564c:	69fb      	ldr	r3, [r7, #28]
 800564e:	1ad3      	subs	r3, r2, r3
 8005650:	2b19      	cmp	r3, #25
 8005652:	d907      	bls.n	8005664 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8005654:	6a3b      	ldr	r3, [r7, #32]
 8005656:	f043 0320 	orr.w	r3, r3, #32
 800565a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800565c:	2301      	movs	r3, #1
 800565e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8005662:	e006      	b.n	8005672 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	699b      	ldr	r3, [r3, #24]
 800566a:	f003 0320 	and.w	r3, r3, #32
 800566e:	2b20      	cmp	r3, #32
 8005670:	d1e9      	bne.n	8005646 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	699b      	ldr	r3, [r3, #24]
 8005678:	f003 0320 	and.w	r3, r3, #32
 800567c:	2b20      	cmp	r3, #32
 800567e:	d003      	beq.n	8005688 <I2C_IsErrorOccurred+0xe0>
 8005680:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005684:	2b00      	cmp	r3, #0
 8005686:	d0aa      	beq.n	80055de <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005688:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800568c:	2b00      	cmp	r3, #0
 800568e:	d103      	bne.n	8005698 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	2220      	movs	r2, #32
 8005696:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005698:	6a3b      	ldr	r3, [r7, #32]
 800569a:	f043 0304 	orr.w	r3, r3, #4
 800569e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80056a0:	2301      	movs	r3, #1
 80056a2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	699b      	ldr	r3, [r3, #24]
 80056ac:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80056ae:	69bb      	ldr	r3, [r7, #24]
 80056b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d00b      	beq.n	80056d0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80056b8:	6a3b      	ldr	r3, [r7, #32]
 80056ba:	f043 0301 	orr.w	r3, r3, #1
 80056be:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80056c8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80056ca:	2301      	movs	r3, #1
 80056cc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80056d0:	69bb      	ldr	r3, [r7, #24]
 80056d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d00b      	beq.n	80056f2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80056da:	6a3b      	ldr	r3, [r7, #32]
 80056dc:	f043 0308 	orr.w	r3, r3, #8
 80056e0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80056ea:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80056ec:	2301      	movs	r3, #1
 80056ee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80056f2:	69bb      	ldr	r3, [r7, #24]
 80056f4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d00b      	beq.n	8005714 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80056fc:	6a3b      	ldr	r3, [r7, #32]
 80056fe:	f043 0302 	orr.w	r3, r3, #2
 8005702:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800570c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800570e:	2301      	movs	r3, #1
 8005710:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8005714:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005718:	2b00      	cmp	r3, #0
 800571a:	d01c      	beq.n	8005756 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800571c:	68f8      	ldr	r0, [r7, #12]
 800571e:	f7ff fe3b 	bl	8005398 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	6859      	ldr	r1, [r3, #4]
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681a      	ldr	r2, [r3, #0]
 800572c:	4b0d      	ldr	r3, [pc, #52]	@ (8005764 <I2C_IsErrorOccurred+0x1bc>)
 800572e:	400b      	ands	r3, r1
 8005730:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005736:	6a3b      	ldr	r3, [r7, #32]
 8005738:	431a      	orrs	r2, r3
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	2220      	movs	r2, #32
 8005742:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	2200      	movs	r2, #0
 800574a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	2200      	movs	r2, #0
 8005752:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8005756:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800575a:	4618      	mov	r0, r3
 800575c:	3728      	adds	r7, #40	@ 0x28
 800575e:	46bd      	mov	sp, r7
 8005760:	bd80      	pop	{r7, pc}
 8005762:	bf00      	nop
 8005764:	fe00e800 	.word	0xfe00e800

08005768 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005768:	b480      	push	{r7}
 800576a:	b087      	sub	sp, #28
 800576c:	af00      	add	r7, sp, #0
 800576e:	60f8      	str	r0, [r7, #12]
 8005770:	607b      	str	r3, [r7, #4]
 8005772:	460b      	mov	r3, r1
 8005774:	817b      	strh	r3, [r7, #10]
 8005776:	4613      	mov	r3, r2
 8005778:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800577a:	897b      	ldrh	r3, [r7, #10]
 800577c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005780:	7a7b      	ldrb	r3, [r7, #9]
 8005782:	041b      	lsls	r3, r3, #16
 8005784:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005788:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800578e:	6a3b      	ldr	r3, [r7, #32]
 8005790:	4313      	orrs	r3, r2
 8005792:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005796:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	685a      	ldr	r2, [r3, #4]
 800579e:	6a3b      	ldr	r3, [r7, #32]
 80057a0:	0d5b      	lsrs	r3, r3, #21
 80057a2:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80057a6:	4b08      	ldr	r3, [pc, #32]	@ (80057c8 <I2C_TransferConfig+0x60>)
 80057a8:	430b      	orrs	r3, r1
 80057aa:	43db      	mvns	r3, r3
 80057ac:	ea02 0103 	and.w	r1, r2, r3
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	697a      	ldr	r2, [r7, #20]
 80057b6:	430a      	orrs	r2, r1
 80057b8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80057ba:	bf00      	nop
 80057bc:	371c      	adds	r7, #28
 80057be:	46bd      	mov	sp, r7
 80057c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c4:	4770      	bx	lr
 80057c6:	bf00      	nop
 80057c8:	03ff63ff 	.word	0x03ff63ff

080057cc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80057cc:	b480      	push	{r7}
 80057ce:	b083      	sub	sp, #12
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
 80057d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80057dc:	b2db      	uxtb	r3, r3
 80057de:	2b20      	cmp	r3, #32
 80057e0:	d138      	bne.n	8005854 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80057e8:	2b01      	cmp	r3, #1
 80057ea:	d101      	bne.n	80057f0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80057ec:	2302      	movs	r3, #2
 80057ee:	e032      	b.n	8005856 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2201      	movs	r2, #1
 80057f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2224      	movs	r2, #36	@ 0x24
 80057fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	681a      	ldr	r2, [r3, #0]
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f022 0201 	bic.w	r2, r2, #1
 800580e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	681a      	ldr	r2, [r3, #0]
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800581e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	6819      	ldr	r1, [r3, #0]
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	683a      	ldr	r2, [r7, #0]
 800582c:	430a      	orrs	r2, r1
 800582e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	681a      	ldr	r2, [r3, #0]
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f042 0201 	orr.w	r2, r2, #1
 800583e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2220      	movs	r2, #32
 8005844:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2200      	movs	r2, #0
 800584c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005850:	2300      	movs	r3, #0
 8005852:	e000      	b.n	8005856 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005854:	2302      	movs	r3, #2
  }
}
 8005856:	4618      	mov	r0, r3
 8005858:	370c      	adds	r7, #12
 800585a:	46bd      	mov	sp, r7
 800585c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005860:	4770      	bx	lr

08005862 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005862:	b480      	push	{r7}
 8005864:	b085      	sub	sp, #20
 8005866:	af00      	add	r7, sp, #0
 8005868:	6078      	str	r0, [r7, #4]
 800586a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005872:	b2db      	uxtb	r3, r3
 8005874:	2b20      	cmp	r3, #32
 8005876:	d139      	bne.n	80058ec <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800587e:	2b01      	cmp	r3, #1
 8005880:	d101      	bne.n	8005886 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005882:	2302      	movs	r3, #2
 8005884:	e033      	b.n	80058ee <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2201      	movs	r2, #1
 800588a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2224      	movs	r2, #36	@ 0x24
 8005892:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	681a      	ldr	r2, [r3, #0]
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f022 0201 	bic.w	r2, r2, #1
 80058a4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80058b4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	021b      	lsls	r3, r3, #8
 80058ba:	68fa      	ldr	r2, [r7, #12]
 80058bc:	4313      	orrs	r3, r2
 80058be:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	68fa      	ldr	r2, [r7, #12]
 80058c6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	681a      	ldr	r2, [r3, #0]
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f042 0201 	orr.w	r2, r2, #1
 80058d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2220      	movs	r2, #32
 80058dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2200      	movs	r2, #0
 80058e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80058e8:	2300      	movs	r3, #0
 80058ea:	e000      	b.n	80058ee <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80058ec:	2302      	movs	r3, #2
  }
}
 80058ee:	4618      	mov	r0, r3
 80058f0:	3714      	adds	r7, #20
 80058f2:	46bd      	mov	sp, r7
 80058f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f8:	4770      	bx	lr
	...

080058fc <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b084      	sub	sp, #16
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8005904:	4b19      	ldr	r3, [pc, #100]	@ (800596c <HAL_PWREx_ConfigSupply+0x70>)
 8005906:	68db      	ldr	r3, [r3, #12]
 8005908:	f003 0304 	and.w	r3, r3, #4
 800590c:	2b04      	cmp	r3, #4
 800590e:	d00a      	beq.n	8005926 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005910:	4b16      	ldr	r3, [pc, #88]	@ (800596c <HAL_PWREx_ConfigSupply+0x70>)
 8005912:	68db      	ldr	r3, [r3, #12]
 8005914:	f003 0307 	and.w	r3, r3, #7
 8005918:	687a      	ldr	r2, [r7, #4]
 800591a:	429a      	cmp	r2, r3
 800591c:	d001      	beq.n	8005922 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800591e:	2301      	movs	r3, #1
 8005920:	e01f      	b.n	8005962 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005922:	2300      	movs	r3, #0
 8005924:	e01d      	b.n	8005962 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005926:	4b11      	ldr	r3, [pc, #68]	@ (800596c <HAL_PWREx_ConfigSupply+0x70>)
 8005928:	68db      	ldr	r3, [r3, #12]
 800592a:	f023 0207 	bic.w	r2, r3, #7
 800592e:	490f      	ldr	r1, [pc, #60]	@ (800596c <HAL_PWREx_ConfigSupply+0x70>)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	4313      	orrs	r3, r2
 8005934:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005936:	f7fc f9d1 	bl	8001cdc <HAL_GetTick>
 800593a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800593c:	e009      	b.n	8005952 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800593e:	f7fc f9cd 	bl	8001cdc <HAL_GetTick>
 8005942:	4602      	mov	r2, r0
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	1ad3      	subs	r3, r2, r3
 8005948:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800594c:	d901      	bls.n	8005952 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800594e:	2301      	movs	r3, #1
 8005950:	e007      	b.n	8005962 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005952:	4b06      	ldr	r3, [pc, #24]	@ (800596c <HAL_PWREx_ConfigSupply+0x70>)
 8005954:	685b      	ldr	r3, [r3, #4]
 8005956:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800595a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800595e:	d1ee      	bne.n	800593e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005960:	2300      	movs	r3, #0
}
 8005962:	4618      	mov	r0, r3
 8005964:	3710      	adds	r7, #16
 8005966:	46bd      	mov	sp, r7
 8005968:	bd80      	pop	{r7, pc}
 800596a:	bf00      	nop
 800596c:	58024800 	.word	0x58024800

08005970 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005970:	b580      	push	{r7, lr}
 8005972:	b08c      	sub	sp, #48	@ 0x30
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d102      	bne.n	8005984 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800597e:	2301      	movs	r3, #1
 8005980:	f000 bc48 	b.w	8006214 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f003 0301 	and.w	r3, r3, #1
 800598c:	2b00      	cmp	r3, #0
 800598e:	f000 8088 	beq.w	8005aa2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005992:	4b99      	ldr	r3, [pc, #612]	@ (8005bf8 <HAL_RCC_OscConfig+0x288>)
 8005994:	691b      	ldr	r3, [r3, #16]
 8005996:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800599a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800599c:	4b96      	ldr	r3, [pc, #600]	@ (8005bf8 <HAL_RCC_OscConfig+0x288>)
 800599e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059a0:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80059a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059a4:	2b10      	cmp	r3, #16
 80059a6:	d007      	beq.n	80059b8 <HAL_RCC_OscConfig+0x48>
 80059a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059aa:	2b18      	cmp	r3, #24
 80059ac:	d111      	bne.n	80059d2 <HAL_RCC_OscConfig+0x62>
 80059ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059b0:	f003 0303 	and.w	r3, r3, #3
 80059b4:	2b02      	cmp	r3, #2
 80059b6:	d10c      	bne.n	80059d2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80059b8:	4b8f      	ldr	r3, [pc, #572]	@ (8005bf8 <HAL_RCC_OscConfig+0x288>)
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d06d      	beq.n	8005aa0 <HAL_RCC_OscConfig+0x130>
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	685b      	ldr	r3, [r3, #4]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d169      	bne.n	8005aa0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80059cc:	2301      	movs	r3, #1
 80059ce:	f000 bc21 	b.w	8006214 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	685b      	ldr	r3, [r3, #4]
 80059d6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80059da:	d106      	bne.n	80059ea <HAL_RCC_OscConfig+0x7a>
 80059dc:	4b86      	ldr	r3, [pc, #536]	@ (8005bf8 <HAL_RCC_OscConfig+0x288>)
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	4a85      	ldr	r2, [pc, #532]	@ (8005bf8 <HAL_RCC_OscConfig+0x288>)
 80059e2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80059e6:	6013      	str	r3, [r2, #0]
 80059e8:	e02e      	b.n	8005a48 <HAL_RCC_OscConfig+0xd8>
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	685b      	ldr	r3, [r3, #4]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d10c      	bne.n	8005a0c <HAL_RCC_OscConfig+0x9c>
 80059f2:	4b81      	ldr	r3, [pc, #516]	@ (8005bf8 <HAL_RCC_OscConfig+0x288>)
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	4a80      	ldr	r2, [pc, #512]	@ (8005bf8 <HAL_RCC_OscConfig+0x288>)
 80059f8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80059fc:	6013      	str	r3, [r2, #0]
 80059fe:	4b7e      	ldr	r3, [pc, #504]	@ (8005bf8 <HAL_RCC_OscConfig+0x288>)
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	4a7d      	ldr	r2, [pc, #500]	@ (8005bf8 <HAL_RCC_OscConfig+0x288>)
 8005a04:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005a08:	6013      	str	r3, [r2, #0]
 8005a0a:	e01d      	b.n	8005a48 <HAL_RCC_OscConfig+0xd8>
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	685b      	ldr	r3, [r3, #4]
 8005a10:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005a14:	d10c      	bne.n	8005a30 <HAL_RCC_OscConfig+0xc0>
 8005a16:	4b78      	ldr	r3, [pc, #480]	@ (8005bf8 <HAL_RCC_OscConfig+0x288>)
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	4a77      	ldr	r2, [pc, #476]	@ (8005bf8 <HAL_RCC_OscConfig+0x288>)
 8005a1c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005a20:	6013      	str	r3, [r2, #0]
 8005a22:	4b75      	ldr	r3, [pc, #468]	@ (8005bf8 <HAL_RCC_OscConfig+0x288>)
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	4a74      	ldr	r2, [pc, #464]	@ (8005bf8 <HAL_RCC_OscConfig+0x288>)
 8005a28:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005a2c:	6013      	str	r3, [r2, #0]
 8005a2e:	e00b      	b.n	8005a48 <HAL_RCC_OscConfig+0xd8>
 8005a30:	4b71      	ldr	r3, [pc, #452]	@ (8005bf8 <HAL_RCC_OscConfig+0x288>)
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	4a70      	ldr	r2, [pc, #448]	@ (8005bf8 <HAL_RCC_OscConfig+0x288>)
 8005a36:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005a3a:	6013      	str	r3, [r2, #0]
 8005a3c:	4b6e      	ldr	r3, [pc, #440]	@ (8005bf8 <HAL_RCC_OscConfig+0x288>)
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	4a6d      	ldr	r2, [pc, #436]	@ (8005bf8 <HAL_RCC_OscConfig+0x288>)
 8005a42:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005a46:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	685b      	ldr	r3, [r3, #4]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d013      	beq.n	8005a78 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a50:	f7fc f944 	bl	8001cdc <HAL_GetTick>
 8005a54:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005a56:	e008      	b.n	8005a6a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005a58:	f7fc f940 	bl	8001cdc <HAL_GetTick>
 8005a5c:	4602      	mov	r2, r0
 8005a5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a60:	1ad3      	subs	r3, r2, r3
 8005a62:	2b64      	cmp	r3, #100	@ 0x64
 8005a64:	d901      	bls.n	8005a6a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005a66:	2303      	movs	r3, #3
 8005a68:	e3d4      	b.n	8006214 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005a6a:	4b63      	ldr	r3, [pc, #396]	@ (8005bf8 <HAL_RCC_OscConfig+0x288>)
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d0f0      	beq.n	8005a58 <HAL_RCC_OscConfig+0xe8>
 8005a76:	e014      	b.n	8005aa2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a78:	f7fc f930 	bl	8001cdc <HAL_GetTick>
 8005a7c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005a7e:	e008      	b.n	8005a92 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005a80:	f7fc f92c 	bl	8001cdc <HAL_GetTick>
 8005a84:	4602      	mov	r2, r0
 8005a86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a88:	1ad3      	subs	r3, r2, r3
 8005a8a:	2b64      	cmp	r3, #100	@ 0x64
 8005a8c:	d901      	bls.n	8005a92 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8005a8e:	2303      	movs	r3, #3
 8005a90:	e3c0      	b.n	8006214 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005a92:	4b59      	ldr	r3, [pc, #356]	@ (8005bf8 <HAL_RCC_OscConfig+0x288>)
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d1f0      	bne.n	8005a80 <HAL_RCC_OscConfig+0x110>
 8005a9e:	e000      	b.n	8005aa2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005aa0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f003 0302 	and.w	r3, r3, #2
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	f000 80ca 	beq.w	8005c44 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005ab0:	4b51      	ldr	r3, [pc, #324]	@ (8005bf8 <HAL_RCC_OscConfig+0x288>)
 8005ab2:	691b      	ldr	r3, [r3, #16]
 8005ab4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005ab8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005aba:	4b4f      	ldr	r3, [pc, #316]	@ (8005bf8 <HAL_RCC_OscConfig+0x288>)
 8005abc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005abe:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005ac0:	6a3b      	ldr	r3, [r7, #32]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d007      	beq.n	8005ad6 <HAL_RCC_OscConfig+0x166>
 8005ac6:	6a3b      	ldr	r3, [r7, #32]
 8005ac8:	2b18      	cmp	r3, #24
 8005aca:	d156      	bne.n	8005b7a <HAL_RCC_OscConfig+0x20a>
 8005acc:	69fb      	ldr	r3, [r7, #28]
 8005ace:	f003 0303 	and.w	r3, r3, #3
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d151      	bne.n	8005b7a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005ad6:	4b48      	ldr	r3, [pc, #288]	@ (8005bf8 <HAL_RCC_OscConfig+0x288>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f003 0304 	and.w	r3, r3, #4
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d005      	beq.n	8005aee <HAL_RCC_OscConfig+0x17e>
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	68db      	ldr	r3, [r3, #12]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d101      	bne.n	8005aee <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8005aea:	2301      	movs	r3, #1
 8005aec:	e392      	b.n	8006214 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005aee:	4b42      	ldr	r3, [pc, #264]	@ (8005bf8 <HAL_RCC_OscConfig+0x288>)
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f023 0219 	bic.w	r2, r3, #25
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	68db      	ldr	r3, [r3, #12]
 8005afa:	493f      	ldr	r1, [pc, #252]	@ (8005bf8 <HAL_RCC_OscConfig+0x288>)
 8005afc:	4313      	orrs	r3, r2
 8005afe:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b00:	f7fc f8ec 	bl	8001cdc <HAL_GetTick>
 8005b04:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005b06:	e008      	b.n	8005b1a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005b08:	f7fc f8e8 	bl	8001cdc <HAL_GetTick>
 8005b0c:	4602      	mov	r2, r0
 8005b0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b10:	1ad3      	subs	r3, r2, r3
 8005b12:	2b02      	cmp	r3, #2
 8005b14:	d901      	bls.n	8005b1a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005b16:	2303      	movs	r3, #3
 8005b18:	e37c      	b.n	8006214 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005b1a:	4b37      	ldr	r3, [pc, #220]	@ (8005bf8 <HAL_RCC_OscConfig+0x288>)
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f003 0304 	and.w	r3, r3, #4
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d0f0      	beq.n	8005b08 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b26:	f7fc f909 	bl	8001d3c <HAL_GetREVID>
 8005b2a:	4603      	mov	r3, r0
 8005b2c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d817      	bhi.n	8005b64 <HAL_RCC_OscConfig+0x1f4>
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	691b      	ldr	r3, [r3, #16]
 8005b38:	2b40      	cmp	r3, #64	@ 0x40
 8005b3a:	d108      	bne.n	8005b4e <HAL_RCC_OscConfig+0x1de>
 8005b3c:	4b2e      	ldr	r3, [pc, #184]	@ (8005bf8 <HAL_RCC_OscConfig+0x288>)
 8005b3e:	685b      	ldr	r3, [r3, #4]
 8005b40:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8005b44:	4a2c      	ldr	r2, [pc, #176]	@ (8005bf8 <HAL_RCC_OscConfig+0x288>)
 8005b46:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005b4a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005b4c:	e07a      	b.n	8005c44 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b4e:	4b2a      	ldr	r3, [pc, #168]	@ (8005bf8 <HAL_RCC_OscConfig+0x288>)
 8005b50:	685b      	ldr	r3, [r3, #4]
 8005b52:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	691b      	ldr	r3, [r3, #16]
 8005b5a:	031b      	lsls	r3, r3, #12
 8005b5c:	4926      	ldr	r1, [pc, #152]	@ (8005bf8 <HAL_RCC_OscConfig+0x288>)
 8005b5e:	4313      	orrs	r3, r2
 8005b60:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005b62:	e06f      	b.n	8005c44 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b64:	4b24      	ldr	r3, [pc, #144]	@ (8005bf8 <HAL_RCC_OscConfig+0x288>)
 8005b66:	685b      	ldr	r3, [r3, #4]
 8005b68:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	691b      	ldr	r3, [r3, #16]
 8005b70:	061b      	lsls	r3, r3, #24
 8005b72:	4921      	ldr	r1, [pc, #132]	@ (8005bf8 <HAL_RCC_OscConfig+0x288>)
 8005b74:	4313      	orrs	r3, r2
 8005b76:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005b78:	e064      	b.n	8005c44 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	68db      	ldr	r3, [r3, #12]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d047      	beq.n	8005c12 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005b82:	4b1d      	ldr	r3, [pc, #116]	@ (8005bf8 <HAL_RCC_OscConfig+0x288>)
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f023 0219 	bic.w	r2, r3, #25
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	68db      	ldr	r3, [r3, #12]
 8005b8e:	491a      	ldr	r1, [pc, #104]	@ (8005bf8 <HAL_RCC_OscConfig+0x288>)
 8005b90:	4313      	orrs	r3, r2
 8005b92:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b94:	f7fc f8a2 	bl	8001cdc <HAL_GetTick>
 8005b98:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005b9a:	e008      	b.n	8005bae <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005b9c:	f7fc f89e 	bl	8001cdc <HAL_GetTick>
 8005ba0:	4602      	mov	r2, r0
 8005ba2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ba4:	1ad3      	subs	r3, r2, r3
 8005ba6:	2b02      	cmp	r3, #2
 8005ba8:	d901      	bls.n	8005bae <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8005baa:	2303      	movs	r3, #3
 8005bac:	e332      	b.n	8006214 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005bae:	4b12      	ldr	r3, [pc, #72]	@ (8005bf8 <HAL_RCC_OscConfig+0x288>)
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f003 0304 	and.w	r3, r3, #4
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d0f0      	beq.n	8005b9c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005bba:	f7fc f8bf 	bl	8001d3c <HAL_GetREVID>
 8005bbe:	4603      	mov	r3, r0
 8005bc0:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005bc4:	4293      	cmp	r3, r2
 8005bc6:	d819      	bhi.n	8005bfc <HAL_RCC_OscConfig+0x28c>
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	691b      	ldr	r3, [r3, #16]
 8005bcc:	2b40      	cmp	r3, #64	@ 0x40
 8005bce:	d108      	bne.n	8005be2 <HAL_RCC_OscConfig+0x272>
 8005bd0:	4b09      	ldr	r3, [pc, #36]	@ (8005bf8 <HAL_RCC_OscConfig+0x288>)
 8005bd2:	685b      	ldr	r3, [r3, #4]
 8005bd4:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8005bd8:	4a07      	ldr	r2, [pc, #28]	@ (8005bf8 <HAL_RCC_OscConfig+0x288>)
 8005bda:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005bde:	6053      	str	r3, [r2, #4]
 8005be0:	e030      	b.n	8005c44 <HAL_RCC_OscConfig+0x2d4>
 8005be2:	4b05      	ldr	r3, [pc, #20]	@ (8005bf8 <HAL_RCC_OscConfig+0x288>)
 8005be4:	685b      	ldr	r3, [r3, #4]
 8005be6:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	691b      	ldr	r3, [r3, #16]
 8005bee:	031b      	lsls	r3, r3, #12
 8005bf0:	4901      	ldr	r1, [pc, #4]	@ (8005bf8 <HAL_RCC_OscConfig+0x288>)
 8005bf2:	4313      	orrs	r3, r2
 8005bf4:	604b      	str	r3, [r1, #4]
 8005bf6:	e025      	b.n	8005c44 <HAL_RCC_OscConfig+0x2d4>
 8005bf8:	58024400 	.word	0x58024400
 8005bfc:	4b9a      	ldr	r3, [pc, #616]	@ (8005e68 <HAL_RCC_OscConfig+0x4f8>)
 8005bfe:	685b      	ldr	r3, [r3, #4]
 8005c00:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	691b      	ldr	r3, [r3, #16]
 8005c08:	061b      	lsls	r3, r3, #24
 8005c0a:	4997      	ldr	r1, [pc, #604]	@ (8005e68 <HAL_RCC_OscConfig+0x4f8>)
 8005c0c:	4313      	orrs	r3, r2
 8005c0e:	604b      	str	r3, [r1, #4]
 8005c10:	e018      	b.n	8005c44 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005c12:	4b95      	ldr	r3, [pc, #596]	@ (8005e68 <HAL_RCC_OscConfig+0x4f8>)
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	4a94      	ldr	r2, [pc, #592]	@ (8005e68 <HAL_RCC_OscConfig+0x4f8>)
 8005c18:	f023 0301 	bic.w	r3, r3, #1
 8005c1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c1e:	f7fc f85d 	bl	8001cdc <HAL_GetTick>
 8005c22:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005c24:	e008      	b.n	8005c38 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005c26:	f7fc f859 	bl	8001cdc <HAL_GetTick>
 8005c2a:	4602      	mov	r2, r0
 8005c2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c2e:	1ad3      	subs	r3, r2, r3
 8005c30:	2b02      	cmp	r3, #2
 8005c32:	d901      	bls.n	8005c38 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8005c34:	2303      	movs	r3, #3
 8005c36:	e2ed      	b.n	8006214 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005c38:	4b8b      	ldr	r3, [pc, #556]	@ (8005e68 <HAL_RCC_OscConfig+0x4f8>)
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f003 0304 	and.w	r3, r3, #4
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d1f0      	bne.n	8005c26 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f003 0310 	and.w	r3, r3, #16
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	f000 80a9 	beq.w	8005da4 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005c52:	4b85      	ldr	r3, [pc, #532]	@ (8005e68 <HAL_RCC_OscConfig+0x4f8>)
 8005c54:	691b      	ldr	r3, [r3, #16]
 8005c56:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005c5a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005c5c:	4b82      	ldr	r3, [pc, #520]	@ (8005e68 <HAL_RCC_OscConfig+0x4f8>)
 8005c5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c60:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005c62:	69bb      	ldr	r3, [r7, #24]
 8005c64:	2b08      	cmp	r3, #8
 8005c66:	d007      	beq.n	8005c78 <HAL_RCC_OscConfig+0x308>
 8005c68:	69bb      	ldr	r3, [r7, #24]
 8005c6a:	2b18      	cmp	r3, #24
 8005c6c:	d13a      	bne.n	8005ce4 <HAL_RCC_OscConfig+0x374>
 8005c6e:	697b      	ldr	r3, [r7, #20]
 8005c70:	f003 0303 	and.w	r3, r3, #3
 8005c74:	2b01      	cmp	r3, #1
 8005c76:	d135      	bne.n	8005ce4 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005c78:	4b7b      	ldr	r3, [pc, #492]	@ (8005e68 <HAL_RCC_OscConfig+0x4f8>)
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d005      	beq.n	8005c90 <HAL_RCC_OscConfig+0x320>
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	69db      	ldr	r3, [r3, #28]
 8005c88:	2b80      	cmp	r3, #128	@ 0x80
 8005c8a:	d001      	beq.n	8005c90 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8005c8c:	2301      	movs	r3, #1
 8005c8e:	e2c1      	b.n	8006214 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005c90:	f7fc f854 	bl	8001d3c <HAL_GetREVID>
 8005c94:	4603      	mov	r3, r0
 8005c96:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	d817      	bhi.n	8005cce <HAL_RCC_OscConfig+0x35e>
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6a1b      	ldr	r3, [r3, #32]
 8005ca2:	2b20      	cmp	r3, #32
 8005ca4:	d108      	bne.n	8005cb8 <HAL_RCC_OscConfig+0x348>
 8005ca6:	4b70      	ldr	r3, [pc, #448]	@ (8005e68 <HAL_RCC_OscConfig+0x4f8>)
 8005ca8:	685b      	ldr	r3, [r3, #4]
 8005caa:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8005cae:	4a6e      	ldr	r2, [pc, #440]	@ (8005e68 <HAL_RCC_OscConfig+0x4f8>)
 8005cb0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005cb4:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005cb6:	e075      	b.n	8005da4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005cb8:	4b6b      	ldr	r3, [pc, #428]	@ (8005e68 <HAL_RCC_OscConfig+0x4f8>)
 8005cba:	685b      	ldr	r3, [r3, #4]
 8005cbc:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	6a1b      	ldr	r3, [r3, #32]
 8005cc4:	069b      	lsls	r3, r3, #26
 8005cc6:	4968      	ldr	r1, [pc, #416]	@ (8005e68 <HAL_RCC_OscConfig+0x4f8>)
 8005cc8:	4313      	orrs	r3, r2
 8005cca:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005ccc:	e06a      	b.n	8005da4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005cce:	4b66      	ldr	r3, [pc, #408]	@ (8005e68 <HAL_RCC_OscConfig+0x4f8>)
 8005cd0:	68db      	ldr	r3, [r3, #12]
 8005cd2:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6a1b      	ldr	r3, [r3, #32]
 8005cda:	061b      	lsls	r3, r3, #24
 8005cdc:	4962      	ldr	r1, [pc, #392]	@ (8005e68 <HAL_RCC_OscConfig+0x4f8>)
 8005cde:	4313      	orrs	r3, r2
 8005ce0:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005ce2:	e05f      	b.n	8005da4 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	69db      	ldr	r3, [r3, #28]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d042      	beq.n	8005d72 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005cec:	4b5e      	ldr	r3, [pc, #376]	@ (8005e68 <HAL_RCC_OscConfig+0x4f8>)
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	4a5d      	ldr	r2, [pc, #372]	@ (8005e68 <HAL_RCC_OscConfig+0x4f8>)
 8005cf2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005cf6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cf8:	f7fb fff0 	bl	8001cdc <HAL_GetTick>
 8005cfc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005cfe:	e008      	b.n	8005d12 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005d00:	f7fb ffec 	bl	8001cdc <HAL_GetTick>
 8005d04:	4602      	mov	r2, r0
 8005d06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d08:	1ad3      	subs	r3, r2, r3
 8005d0a:	2b02      	cmp	r3, #2
 8005d0c:	d901      	bls.n	8005d12 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8005d0e:	2303      	movs	r3, #3
 8005d10:	e280      	b.n	8006214 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005d12:	4b55      	ldr	r3, [pc, #340]	@ (8005e68 <HAL_RCC_OscConfig+0x4f8>)
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d0f0      	beq.n	8005d00 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005d1e:	f7fc f80d 	bl	8001d3c <HAL_GetREVID>
 8005d22:	4603      	mov	r3, r0
 8005d24:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005d28:	4293      	cmp	r3, r2
 8005d2a:	d817      	bhi.n	8005d5c <HAL_RCC_OscConfig+0x3ec>
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	6a1b      	ldr	r3, [r3, #32]
 8005d30:	2b20      	cmp	r3, #32
 8005d32:	d108      	bne.n	8005d46 <HAL_RCC_OscConfig+0x3d6>
 8005d34:	4b4c      	ldr	r3, [pc, #304]	@ (8005e68 <HAL_RCC_OscConfig+0x4f8>)
 8005d36:	685b      	ldr	r3, [r3, #4]
 8005d38:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8005d3c:	4a4a      	ldr	r2, [pc, #296]	@ (8005e68 <HAL_RCC_OscConfig+0x4f8>)
 8005d3e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005d42:	6053      	str	r3, [r2, #4]
 8005d44:	e02e      	b.n	8005da4 <HAL_RCC_OscConfig+0x434>
 8005d46:	4b48      	ldr	r3, [pc, #288]	@ (8005e68 <HAL_RCC_OscConfig+0x4f8>)
 8005d48:	685b      	ldr	r3, [r3, #4]
 8005d4a:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6a1b      	ldr	r3, [r3, #32]
 8005d52:	069b      	lsls	r3, r3, #26
 8005d54:	4944      	ldr	r1, [pc, #272]	@ (8005e68 <HAL_RCC_OscConfig+0x4f8>)
 8005d56:	4313      	orrs	r3, r2
 8005d58:	604b      	str	r3, [r1, #4]
 8005d5a:	e023      	b.n	8005da4 <HAL_RCC_OscConfig+0x434>
 8005d5c:	4b42      	ldr	r3, [pc, #264]	@ (8005e68 <HAL_RCC_OscConfig+0x4f8>)
 8005d5e:	68db      	ldr	r3, [r3, #12]
 8005d60:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6a1b      	ldr	r3, [r3, #32]
 8005d68:	061b      	lsls	r3, r3, #24
 8005d6a:	493f      	ldr	r1, [pc, #252]	@ (8005e68 <HAL_RCC_OscConfig+0x4f8>)
 8005d6c:	4313      	orrs	r3, r2
 8005d6e:	60cb      	str	r3, [r1, #12]
 8005d70:	e018      	b.n	8005da4 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005d72:	4b3d      	ldr	r3, [pc, #244]	@ (8005e68 <HAL_RCC_OscConfig+0x4f8>)
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	4a3c      	ldr	r2, [pc, #240]	@ (8005e68 <HAL_RCC_OscConfig+0x4f8>)
 8005d78:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005d7c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d7e:	f7fb ffad 	bl	8001cdc <HAL_GetTick>
 8005d82:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005d84:	e008      	b.n	8005d98 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005d86:	f7fb ffa9 	bl	8001cdc <HAL_GetTick>
 8005d8a:	4602      	mov	r2, r0
 8005d8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d8e:	1ad3      	subs	r3, r2, r3
 8005d90:	2b02      	cmp	r3, #2
 8005d92:	d901      	bls.n	8005d98 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005d94:	2303      	movs	r3, #3
 8005d96:	e23d      	b.n	8006214 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005d98:	4b33      	ldr	r3, [pc, #204]	@ (8005e68 <HAL_RCC_OscConfig+0x4f8>)
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d1f0      	bne.n	8005d86 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f003 0308 	and.w	r3, r3, #8
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d036      	beq.n	8005e1e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	695b      	ldr	r3, [r3, #20]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d019      	beq.n	8005dec <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005db8:	4b2b      	ldr	r3, [pc, #172]	@ (8005e68 <HAL_RCC_OscConfig+0x4f8>)
 8005dba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005dbc:	4a2a      	ldr	r2, [pc, #168]	@ (8005e68 <HAL_RCC_OscConfig+0x4f8>)
 8005dbe:	f043 0301 	orr.w	r3, r3, #1
 8005dc2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005dc4:	f7fb ff8a 	bl	8001cdc <HAL_GetTick>
 8005dc8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005dca:	e008      	b.n	8005dde <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005dcc:	f7fb ff86 	bl	8001cdc <HAL_GetTick>
 8005dd0:	4602      	mov	r2, r0
 8005dd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dd4:	1ad3      	subs	r3, r2, r3
 8005dd6:	2b02      	cmp	r3, #2
 8005dd8:	d901      	bls.n	8005dde <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8005dda:	2303      	movs	r3, #3
 8005ddc:	e21a      	b.n	8006214 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005dde:	4b22      	ldr	r3, [pc, #136]	@ (8005e68 <HAL_RCC_OscConfig+0x4f8>)
 8005de0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005de2:	f003 0302 	and.w	r3, r3, #2
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d0f0      	beq.n	8005dcc <HAL_RCC_OscConfig+0x45c>
 8005dea:	e018      	b.n	8005e1e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005dec:	4b1e      	ldr	r3, [pc, #120]	@ (8005e68 <HAL_RCC_OscConfig+0x4f8>)
 8005dee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005df0:	4a1d      	ldr	r2, [pc, #116]	@ (8005e68 <HAL_RCC_OscConfig+0x4f8>)
 8005df2:	f023 0301 	bic.w	r3, r3, #1
 8005df6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005df8:	f7fb ff70 	bl	8001cdc <HAL_GetTick>
 8005dfc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005dfe:	e008      	b.n	8005e12 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005e00:	f7fb ff6c 	bl	8001cdc <HAL_GetTick>
 8005e04:	4602      	mov	r2, r0
 8005e06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e08:	1ad3      	subs	r3, r2, r3
 8005e0a:	2b02      	cmp	r3, #2
 8005e0c:	d901      	bls.n	8005e12 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8005e0e:	2303      	movs	r3, #3
 8005e10:	e200      	b.n	8006214 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005e12:	4b15      	ldr	r3, [pc, #84]	@ (8005e68 <HAL_RCC_OscConfig+0x4f8>)
 8005e14:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005e16:	f003 0302 	and.w	r3, r3, #2
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d1f0      	bne.n	8005e00 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f003 0320 	and.w	r3, r3, #32
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d039      	beq.n	8005e9e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	699b      	ldr	r3, [r3, #24]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d01c      	beq.n	8005e6c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005e32:	4b0d      	ldr	r3, [pc, #52]	@ (8005e68 <HAL_RCC_OscConfig+0x4f8>)
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	4a0c      	ldr	r2, [pc, #48]	@ (8005e68 <HAL_RCC_OscConfig+0x4f8>)
 8005e38:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005e3c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005e3e:	f7fb ff4d 	bl	8001cdc <HAL_GetTick>
 8005e42:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005e44:	e008      	b.n	8005e58 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005e46:	f7fb ff49 	bl	8001cdc <HAL_GetTick>
 8005e4a:	4602      	mov	r2, r0
 8005e4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e4e:	1ad3      	subs	r3, r2, r3
 8005e50:	2b02      	cmp	r3, #2
 8005e52:	d901      	bls.n	8005e58 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8005e54:	2303      	movs	r3, #3
 8005e56:	e1dd      	b.n	8006214 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005e58:	4b03      	ldr	r3, [pc, #12]	@ (8005e68 <HAL_RCC_OscConfig+0x4f8>)
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d0f0      	beq.n	8005e46 <HAL_RCC_OscConfig+0x4d6>
 8005e64:	e01b      	b.n	8005e9e <HAL_RCC_OscConfig+0x52e>
 8005e66:	bf00      	nop
 8005e68:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005e6c:	4b9b      	ldr	r3, [pc, #620]	@ (80060dc <HAL_RCC_OscConfig+0x76c>)
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	4a9a      	ldr	r2, [pc, #616]	@ (80060dc <HAL_RCC_OscConfig+0x76c>)
 8005e72:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005e76:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005e78:	f7fb ff30 	bl	8001cdc <HAL_GetTick>
 8005e7c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005e7e:	e008      	b.n	8005e92 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005e80:	f7fb ff2c 	bl	8001cdc <HAL_GetTick>
 8005e84:	4602      	mov	r2, r0
 8005e86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e88:	1ad3      	subs	r3, r2, r3
 8005e8a:	2b02      	cmp	r3, #2
 8005e8c:	d901      	bls.n	8005e92 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8005e8e:	2303      	movs	r3, #3
 8005e90:	e1c0      	b.n	8006214 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005e92:	4b92      	ldr	r3, [pc, #584]	@ (80060dc <HAL_RCC_OscConfig+0x76c>)
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d1f0      	bne.n	8005e80 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f003 0304 	and.w	r3, r3, #4
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	f000 8081 	beq.w	8005fae <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005eac:	4b8c      	ldr	r3, [pc, #560]	@ (80060e0 <HAL_RCC_OscConfig+0x770>)
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	4a8b      	ldr	r2, [pc, #556]	@ (80060e0 <HAL_RCC_OscConfig+0x770>)
 8005eb2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005eb6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005eb8:	f7fb ff10 	bl	8001cdc <HAL_GetTick>
 8005ebc:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005ebe:	e008      	b.n	8005ed2 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ec0:	f7fb ff0c 	bl	8001cdc <HAL_GetTick>
 8005ec4:	4602      	mov	r2, r0
 8005ec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ec8:	1ad3      	subs	r3, r2, r3
 8005eca:	2b64      	cmp	r3, #100	@ 0x64
 8005ecc:	d901      	bls.n	8005ed2 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8005ece:	2303      	movs	r3, #3
 8005ed0:	e1a0      	b.n	8006214 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005ed2:	4b83      	ldr	r3, [pc, #524]	@ (80060e0 <HAL_RCC_OscConfig+0x770>)
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d0f0      	beq.n	8005ec0 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	689b      	ldr	r3, [r3, #8]
 8005ee2:	2b01      	cmp	r3, #1
 8005ee4:	d106      	bne.n	8005ef4 <HAL_RCC_OscConfig+0x584>
 8005ee6:	4b7d      	ldr	r3, [pc, #500]	@ (80060dc <HAL_RCC_OscConfig+0x76c>)
 8005ee8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005eea:	4a7c      	ldr	r2, [pc, #496]	@ (80060dc <HAL_RCC_OscConfig+0x76c>)
 8005eec:	f043 0301 	orr.w	r3, r3, #1
 8005ef0:	6713      	str	r3, [r2, #112]	@ 0x70
 8005ef2:	e02d      	b.n	8005f50 <HAL_RCC_OscConfig+0x5e0>
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	689b      	ldr	r3, [r3, #8]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d10c      	bne.n	8005f16 <HAL_RCC_OscConfig+0x5a6>
 8005efc:	4b77      	ldr	r3, [pc, #476]	@ (80060dc <HAL_RCC_OscConfig+0x76c>)
 8005efe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f00:	4a76      	ldr	r2, [pc, #472]	@ (80060dc <HAL_RCC_OscConfig+0x76c>)
 8005f02:	f023 0301 	bic.w	r3, r3, #1
 8005f06:	6713      	str	r3, [r2, #112]	@ 0x70
 8005f08:	4b74      	ldr	r3, [pc, #464]	@ (80060dc <HAL_RCC_OscConfig+0x76c>)
 8005f0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f0c:	4a73      	ldr	r2, [pc, #460]	@ (80060dc <HAL_RCC_OscConfig+0x76c>)
 8005f0e:	f023 0304 	bic.w	r3, r3, #4
 8005f12:	6713      	str	r3, [r2, #112]	@ 0x70
 8005f14:	e01c      	b.n	8005f50 <HAL_RCC_OscConfig+0x5e0>
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	689b      	ldr	r3, [r3, #8]
 8005f1a:	2b05      	cmp	r3, #5
 8005f1c:	d10c      	bne.n	8005f38 <HAL_RCC_OscConfig+0x5c8>
 8005f1e:	4b6f      	ldr	r3, [pc, #444]	@ (80060dc <HAL_RCC_OscConfig+0x76c>)
 8005f20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f22:	4a6e      	ldr	r2, [pc, #440]	@ (80060dc <HAL_RCC_OscConfig+0x76c>)
 8005f24:	f043 0304 	orr.w	r3, r3, #4
 8005f28:	6713      	str	r3, [r2, #112]	@ 0x70
 8005f2a:	4b6c      	ldr	r3, [pc, #432]	@ (80060dc <HAL_RCC_OscConfig+0x76c>)
 8005f2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f2e:	4a6b      	ldr	r2, [pc, #428]	@ (80060dc <HAL_RCC_OscConfig+0x76c>)
 8005f30:	f043 0301 	orr.w	r3, r3, #1
 8005f34:	6713      	str	r3, [r2, #112]	@ 0x70
 8005f36:	e00b      	b.n	8005f50 <HAL_RCC_OscConfig+0x5e0>
 8005f38:	4b68      	ldr	r3, [pc, #416]	@ (80060dc <HAL_RCC_OscConfig+0x76c>)
 8005f3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f3c:	4a67      	ldr	r2, [pc, #412]	@ (80060dc <HAL_RCC_OscConfig+0x76c>)
 8005f3e:	f023 0301 	bic.w	r3, r3, #1
 8005f42:	6713      	str	r3, [r2, #112]	@ 0x70
 8005f44:	4b65      	ldr	r3, [pc, #404]	@ (80060dc <HAL_RCC_OscConfig+0x76c>)
 8005f46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f48:	4a64      	ldr	r2, [pc, #400]	@ (80060dc <HAL_RCC_OscConfig+0x76c>)
 8005f4a:	f023 0304 	bic.w	r3, r3, #4
 8005f4e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	689b      	ldr	r3, [r3, #8]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d015      	beq.n	8005f84 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f58:	f7fb fec0 	bl	8001cdc <HAL_GetTick>
 8005f5c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005f5e:	e00a      	b.n	8005f76 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f60:	f7fb febc 	bl	8001cdc <HAL_GetTick>
 8005f64:	4602      	mov	r2, r0
 8005f66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f68:	1ad3      	subs	r3, r2, r3
 8005f6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	d901      	bls.n	8005f76 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8005f72:	2303      	movs	r3, #3
 8005f74:	e14e      	b.n	8006214 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005f76:	4b59      	ldr	r3, [pc, #356]	@ (80060dc <HAL_RCC_OscConfig+0x76c>)
 8005f78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f7a:	f003 0302 	and.w	r3, r3, #2
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d0ee      	beq.n	8005f60 <HAL_RCC_OscConfig+0x5f0>
 8005f82:	e014      	b.n	8005fae <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f84:	f7fb feaa 	bl	8001cdc <HAL_GetTick>
 8005f88:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005f8a:	e00a      	b.n	8005fa2 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f8c:	f7fb fea6 	bl	8001cdc <HAL_GetTick>
 8005f90:	4602      	mov	r2, r0
 8005f92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f94:	1ad3      	subs	r3, r2, r3
 8005f96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d901      	bls.n	8005fa2 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8005f9e:	2303      	movs	r3, #3
 8005fa0:	e138      	b.n	8006214 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005fa2:	4b4e      	ldr	r3, [pc, #312]	@ (80060dc <HAL_RCC_OscConfig+0x76c>)
 8005fa4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005fa6:	f003 0302 	and.w	r3, r3, #2
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d1ee      	bne.n	8005f8c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	f000 812d 	beq.w	8006212 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005fb8:	4b48      	ldr	r3, [pc, #288]	@ (80060dc <HAL_RCC_OscConfig+0x76c>)
 8005fba:	691b      	ldr	r3, [r3, #16]
 8005fbc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005fc0:	2b18      	cmp	r3, #24
 8005fc2:	f000 80bd 	beq.w	8006140 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fca:	2b02      	cmp	r3, #2
 8005fcc:	f040 809e 	bne.w	800610c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005fd0:	4b42      	ldr	r3, [pc, #264]	@ (80060dc <HAL_RCC_OscConfig+0x76c>)
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	4a41      	ldr	r2, [pc, #260]	@ (80060dc <HAL_RCC_OscConfig+0x76c>)
 8005fd6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005fda:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fdc:	f7fb fe7e 	bl	8001cdc <HAL_GetTick>
 8005fe0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005fe2:	e008      	b.n	8005ff6 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005fe4:	f7fb fe7a 	bl	8001cdc <HAL_GetTick>
 8005fe8:	4602      	mov	r2, r0
 8005fea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fec:	1ad3      	subs	r3, r2, r3
 8005fee:	2b02      	cmp	r3, #2
 8005ff0:	d901      	bls.n	8005ff6 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8005ff2:	2303      	movs	r3, #3
 8005ff4:	e10e      	b.n	8006214 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005ff6:	4b39      	ldr	r3, [pc, #228]	@ (80060dc <HAL_RCC_OscConfig+0x76c>)
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d1f0      	bne.n	8005fe4 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006002:	4b36      	ldr	r3, [pc, #216]	@ (80060dc <HAL_RCC_OscConfig+0x76c>)
 8006004:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006006:	4b37      	ldr	r3, [pc, #220]	@ (80060e4 <HAL_RCC_OscConfig+0x774>)
 8006008:	4013      	ands	r3, r2
 800600a:	687a      	ldr	r2, [r7, #4]
 800600c:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800600e:	687a      	ldr	r2, [r7, #4]
 8006010:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8006012:	0112      	lsls	r2, r2, #4
 8006014:	430a      	orrs	r2, r1
 8006016:	4931      	ldr	r1, [pc, #196]	@ (80060dc <HAL_RCC_OscConfig+0x76c>)
 8006018:	4313      	orrs	r3, r2
 800601a:	628b      	str	r3, [r1, #40]	@ 0x28
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006020:	3b01      	subs	r3, #1
 8006022:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800602a:	3b01      	subs	r3, #1
 800602c:	025b      	lsls	r3, r3, #9
 800602e:	b29b      	uxth	r3, r3
 8006030:	431a      	orrs	r2, r3
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006036:	3b01      	subs	r3, #1
 8006038:	041b      	lsls	r3, r3, #16
 800603a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800603e:	431a      	orrs	r2, r3
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006044:	3b01      	subs	r3, #1
 8006046:	061b      	lsls	r3, r3, #24
 8006048:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800604c:	4923      	ldr	r1, [pc, #140]	@ (80060dc <HAL_RCC_OscConfig+0x76c>)
 800604e:	4313      	orrs	r3, r2
 8006050:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8006052:	4b22      	ldr	r3, [pc, #136]	@ (80060dc <HAL_RCC_OscConfig+0x76c>)
 8006054:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006056:	4a21      	ldr	r2, [pc, #132]	@ (80060dc <HAL_RCC_OscConfig+0x76c>)
 8006058:	f023 0301 	bic.w	r3, r3, #1
 800605c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800605e:	4b1f      	ldr	r3, [pc, #124]	@ (80060dc <HAL_RCC_OscConfig+0x76c>)
 8006060:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006062:	4b21      	ldr	r3, [pc, #132]	@ (80060e8 <HAL_RCC_OscConfig+0x778>)
 8006064:	4013      	ands	r3, r2
 8006066:	687a      	ldr	r2, [r7, #4]
 8006068:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800606a:	00d2      	lsls	r2, r2, #3
 800606c:	491b      	ldr	r1, [pc, #108]	@ (80060dc <HAL_RCC_OscConfig+0x76c>)
 800606e:	4313      	orrs	r3, r2
 8006070:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006072:	4b1a      	ldr	r3, [pc, #104]	@ (80060dc <HAL_RCC_OscConfig+0x76c>)
 8006074:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006076:	f023 020c 	bic.w	r2, r3, #12
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800607e:	4917      	ldr	r1, [pc, #92]	@ (80060dc <HAL_RCC_OscConfig+0x76c>)
 8006080:	4313      	orrs	r3, r2
 8006082:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006084:	4b15      	ldr	r3, [pc, #84]	@ (80060dc <HAL_RCC_OscConfig+0x76c>)
 8006086:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006088:	f023 0202 	bic.w	r2, r3, #2
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006090:	4912      	ldr	r1, [pc, #72]	@ (80060dc <HAL_RCC_OscConfig+0x76c>)
 8006092:	4313      	orrs	r3, r2
 8006094:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006096:	4b11      	ldr	r3, [pc, #68]	@ (80060dc <HAL_RCC_OscConfig+0x76c>)
 8006098:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800609a:	4a10      	ldr	r2, [pc, #64]	@ (80060dc <HAL_RCC_OscConfig+0x76c>)
 800609c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80060a0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80060a2:	4b0e      	ldr	r3, [pc, #56]	@ (80060dc <HAL_RCC_OscConfig+0x76c>)
 80060a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060a6:	4a0d      	ldr	r2, [pc, #52]	@ (80060dc <HAL_RCC_OscConfig+0x76c>)
 80060a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80060ac:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80060ae:	4b0b      	ldr	r3, [pc, #44]	@ (80060dc <HAL_RCC_OscConfig+0x76c>)
 80060b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060b2:	4a0a      	ldr	r2, [pc, #40]	@ (80060dc <HAL_RCC_OscConfig+0x76c>)
 80060b4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80060b8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80060ba:	4b08      	ldr	r3, [pc, #32]	@ (80060dc <HAL_RCC_OscConfig+0x76c>)
 80060bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060be:	4a07      	ldr	r2, [pc, #28]	@ (80060dc <HAL_RCC_OscConfig+0x76c>)
 80060c0:	f043 0301 	orr.w	r3, r3, #1
 80060c4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80060c6:	4b05      	ldr	r3, [pc, #20]	@ (80060dc <HAL_RCC_OscConfig+0x76c>)
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	4a04      	ldr	r2, [pc, #16]	@ (80060dc <HAL_RCC_OscConfig+0x76c>)
 80060cc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80060d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060d2:	f7fb fe03 	bl	8001cdc <HAL_GetTick>
 80060d6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80060d8:	e011      	b.n	80060fe <HAL_RCC_OscConfig+0x78e>
 80060da:	bf00      	nop
 80060dc:	58024400 	.word	0x58024400
 80060e0:	58024800 	.word	0x58024800
 80060e4:	fffffc0c 	.word	0xfffffc0c
 80060e8:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80060ec:	f7fb fdf6 	bl	8001cdc <HAL_GetTick>
 80060f0:	4602      	mov	r2, r0
 80060f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060f4:	1ad3      	subs	r3, r2, r3
 80060f6:	2b02      	cmp	r3, #2
 80060f8:	d901      	bls.n	80060fe <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80060fa:	2303      	movs	r3, #3
 80060fc:	e08a      	b.n	8006214 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80060fe:	4b47      	ldr	r3, [pc, #284]	@ (800621c <HAL_RCC_OscConfig+0x8ac>)
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006106:	2b00      	cmp	r3, #0
 8006108:	d0f0      	beq.n	80060ec <HAL_RCC_OscConfig+0x77c>
 800610a:	e082      	b.n	8006212 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800610c:	4b43      	ldr	r3, [pc, #268]	@ (800621c <HAL_RCC_OscConfig+0x8ac>)
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	4a42      	ldr	r2, [pc, #264]	@ (800621c <HAL_RCC_OscConfig+0x8ac>)
 8006112:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006116:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006118:	f7fb fde0 	bl	8001cdc <HAL_GetTick>
 800611c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800611e:	e008      	b.n	8006132 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006120:	f7fb fddc 	bl	8001cdc <HAL_GetTick>
 8006124:	4602      	mov	r2, r0
 8006126:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006128:	1ad3      	subs	r3, r2, r3
 800612a:	2b02      	cmp	r3, #2
 800612c:	d901      	bls.n	8006132 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800612e:	2303      	movs	r3, #3
 8006130:	e070      	b.n	8006214 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006132:	4b3a      	ldr	r3, [pc, #232]	@ (800621c <HAL_RCC_OscConfig+0x8ac>)
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800613a:	2b00      	cmp	r3, #0
 800613c:	d1f0      	bne.n	8006120 <HAL_RCC_OscConfig+0x7b0>
 800613e:	e068      	b.n	8006212 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006140:	4b36      	ldr	r3, [pc, #216]	@ (800621c <HAL_RCC_OscConfig+0x8ac>)
 8006142:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006144:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006146:	4b35      	ldr	r3, [pc, #212]	@ (800621c <HAL_RCC_OscConfig+0x8ac>)
 8006148:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800614a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006150:	2b01      	cmp	r3, #1
 8006152:	d031      	beq.n	80061b8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006154:	693b      	ldr	r3, [r7, #16]
 8006156:	f003 0203 	and.w	r2, r3, #3
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800615e:	429a      	cmp	r2, r3
 8006160:	d12a      	bne.n	80061b8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006162:	693b      	ldr	r3, [r7, #16]
 8006164:	091b      	lsrs	r3, r3, #4
 8006166:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800616e:	429a      	cmp	r2, r3
 8006170:	d122      	bne.n	80061b8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800617c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800617e:	429a      	cmp	r2, r3
 8006180:	d11a      	bne.n	80061b8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	0a5b      	lsrs	r3, r3, #9
 8006186:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800618e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006190:	429a      	cmp	r2, r3
 8006192:	d111      	bne.n	80061b8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	0c1b      	lsrs	r3, r3, #16
 8006198:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061a0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80061a2:	429a      	cmp	r2, r3
 80061a4:	d108      	bne.n	80061b8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	0e1b      	lsrs	r3, r3, #24
 80061aa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061b2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80061b4:	429a      	cmp	r2, r3
 80061b6:	d001      	beq.n	80061bc <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80061b8:	2301      	movs	r3, #1
 80061ba:	e02b      	b.n	8006214 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80061bc:	4b17      	ldr	r3, [pc, #92]	@ (800621c <HAL_RCC_OscConfig+0x8ac>)
 80061be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80061c0:	08db      	lsrs	r3, r3, #3
 80061c2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80061c6:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80061cc:	693a      	ldr	r2, [r7, #16]
 80061ce:	429a      	cmp	r2, r3
 80061d0:	d01f      	beq.n	8006212 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80061d2:	4b12      	ldr	r3, [pc, #72]	@ (800621c <HAL_RCC_OscConfig+0x8ac>)
 80061d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061d6:	4a11      	ldr	r2, [pc, #68]	@ (800621c <HAL_RCC_OscConfig+0x8ac>)
 80061d8:	f023 0301 	bic.w	r3, r3, #1
 80061dc:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80061de:	f7fb fd7d 	bl	8001cdc <HAL_GetTick>
 80061e2:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80061e4:	bf00      	nop
 80061e6:	f7fb fd79 	bl	8001cdc <HAL_GetTick>
 80061ea:	4602      	mov	r2, r0
 80061ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061ee:	4293      	cmp	r3, r2
 80061f0:	d0f9      	beq.n	80061e6 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80061f2:	4b0a      	ldr	r3, [pc, #40]	@ (800621c <HAL_RCC_OscConfig+0x8ac>)
 80061f4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80061f6:	4b0a      	ldr	r3, [pc, #40]	@ (8006220 <HAL_RCC_OscConfig+0x8b0>)
 80061f8:	4013      	ands	r3, r2
 80061fa:	687a      	ldr	r2, [r7, #4]
 80061fc:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80061fe:	00d2      	lsls	r2, r2, #3
 8006200:	4906      	ldr	r1, [pc, #24]	@ (800621c <HAL_RCC_OscConfig+0x8ac>)
 8006202:	4313      	orrs	r3, r2
 8006204:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8006206:	4b05      	ldr	r3, [pc, #20]	@ (800621c <HAL_RCC_OscConfig+0x8ac>)
 8006208:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800620a:	4a04      	ldr	r2, [pc, #16]	@ (800621c <HAL_RCC_OscConfig+0x8ac>)
 800620c:	f043 0301 	orr.w	r3, r3, #1
 8006210:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8006212:	2300      	movs	r3, #0
}
 8006214:	4618      	mov	r0, r3
 8006216:	3730      	adds	r7, #48	@ 0x30
 8006218:	46bd      	mov	sp, r7
 800621a:	bd80      	pop	{r7, pc}
 800621c:	58024400 	.word	0x58024400
 8006220:	ffff0007 	.word	0xffff0007

08006224 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006224:	b580      	push	{r7, lr}
 8006226:	b086      	sub	sp, #24
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
 800622c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d101      	bne.n	8006238 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006234:	2301      	movs	r3, #1
 8006236:	e19c      	b.n	8006572 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006238:	4b8a      	ldr	r3, [pc, #552]	@ (8006464 <HAL_RCC_ClockConfig+0x240>)
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f003 030f 	and.w	r3, r3, #15
 8006240:	683a      	ldr	r2, [r7, #0]
 8006242:	429a      	cmp	r2, r3
 8006244:	d910      	bls.n	8006268 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006246:	4b87      	ldr	r3, [pc, #540]	@ (8006464 <HAL_RCC_ClockConfig+0x240>)
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f023 020f 	bic.w	r2, r3, #15
 800624e:	4985      	ldr	r1, [pc, #532]	@ (8006464 <HAL_RCC_ClockConfig+0x240>)
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	4313      	orrs	r3, r2
 8006254:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006256:	4b83      	ldr	r3, [pc, #524]	@ (8006464 <HAL_RCC_ClockConfig+0x240>)
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f003 030f 	and.w	r3, r3, #15
 800625e:	683a      	ldr	r2, [r7, #0]
 8006260:	429a      	cmp	r2, r3
 8006262:	d001      	beq.n	8006268 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006264:	2301      	movs	r3, #1
 8006266:	e184      	b.n	8006572 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f003 0304 	and.w	r3, r3, #4
 8006270:	2b00      	cmp	r3, #0
 8006272:	d010      	beq.n	8006296 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	691a      	ldr	r2, [r3, #16]
 8006278:	4b7b      	ldr	r3, [pc, #492]	@ (8006468 <HAL_RCC_ClockConfig+0x244>)
 800627a:	699b      	ldr	r3, [r3, #24]
 800627c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006280:	429a      	cmp	r2, r3
 8006282:	d908      	bls.n	8006296 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006284:	4b78      	ldr	r3, [pc, #480]	@ (8006468 <HAL_RCC_ClockConfig+0x244>)
 8006286:	699b      	ldr	r3, [r3, #24]
 8006288:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	691b      	ldr	r3, [r3, #16]
 8006290:	4975      	ldr	r1, [pc, #468]	@ (8006468 <HAL_RCC_ClockConfig+0x244>)
 8006292:	4313      	orrs	r3, r2
 8006294:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f003 0308 	and.w	r3, r3, #8
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d010      	beq.n	80062c4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	695a      	ldr	r2, [r3, #20]
 80062a6:	4b70      	ldr	r3, [pc, #448]	@ (8006468 <HAL_RCC_ClockConfig+0x244>)
 80062a8:	69db      	ldr	r3, [r3, #28]
 80062aa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80062ae:	429a      	cmp	r2, r3
 80062b0:	d908      	bls.n	80062c4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80062b2:	4b6d      	ldr	r3, [pc, #436]	@ (8006468 <HAL_RCC_ClockConfig+0x244>)
 80062b4:	69db      	ldr	r3, [r3, #28]
 80062b6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	695b      	ldr	r3, [r3, #20]
 80062be:	496a      	ldr	r1, [pc, #424]	@ (8006468 <HAL_RCC_ClockConfig+0x244>)
 80062c0:	4313      	orrs	r3, r2
 80062c2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f003 0310 	and.w	r3, r3, #16
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d010      	beq.n	80062f2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	699a      	ldr	r2, [r3, #24]
 80062d4:	4b64      	ldr	r3, [pc, #400]	@ (8006468 <HAL_RCC_ClockConfig+0x244>)
 80062d6:	69db      	ldr	r3, [r3, #28]
 80062d8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80062dc:	429a      	cmp	r2, r3
 80062de:	d908      	bls.n	80062f2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80062e0:	4b61      	ldr	r3, [pc, #388]	@ (8006468 <HAL_RCC_ClockConfig+0x244>)
 80062e2:	69db      	ldr	r3, [r3, #28]
 80062e4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	699b      	ldr	r3, [r3, #24]
 80062ec:	495e      	ldr	r1, [pc, #376]	@ (8006468 <HAL_RCC_ClockConfig+0x244>)
 80062ee:	4313      	orrs	r3, r2
 80062f0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	f003 0320 	and.w	r3, r3, #32
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d010      	beq.n	8006320 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	69da      	ldr	r2, [r3, #28]
 8006302:	4b59      	ldr	r3, [pc, #356]	@ (8006468 <HAL_RCC_ClockConfig+0x244>)
 8006304:	6a1b      	ldr	r3, [r3, #32]
 8006306:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800630a:	429a      	cmp	r2, r3
 800630c:	d908      	bls.n	8006320 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800630e:	4b56      	ldr	r3, [pc, #344]	@ (8006468 <HAL_RCC_ClockConfig+0x244>)
 8006310:	6a1b      	ldr	r3, [r3, #32]
 8006312:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	69db      	ldr	r3, [r3, #28]
 800631a:	4953      	ldr	r1, [pc, #332]	@ (8006468 <HAL_RCC_ClockConfig+0x244>)
 800631c:	4313      	orrs	r3, r2
 800631e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	f003 0302 	and.w	r3, r3, #2
 8006328:	2b00      	cmp	r3, #0
 800632a:	d010      	beq.n	800634e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	68da      	ldr	r2, [r3, #12]
 8006330:	4b4d      	ldr	r3, [pc, #308]	@ (8006468 <HAL_RCC_ClockConfig+0x244>)
 8006332:	699b      	ldr	r3, [r3, #24]
 8006334:	f003 030f 	and.w	r3, r3, #15
 8006338:	429a      	cmp	r2, r3
 800633a:	d908      	bls.n	800634e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800633c:	4b4a      	ldr	r3, [pc, #296]	@ (8006468 <HAL_RCC_ClockConfig+0x244>)
 800633e:	699b      	ldr	r3, [r3, #24]
 8006340:	f023 020f 	bic.w	r2, r3, #15
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	68db      	ldr	r3, [r3, #12]
 8006348:	4947      	ldr	r1, [pc, #284]	@ (8006468 <HAL_RCC_ClockConfig+0x244>)
 800634a:	4313      	orrs	r3, r2
 800634c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f003 0301 	and.w	r3, r3, #1
 8006356:	2b00      	cmp	r3, #0
 8006358:	d055      	beq.n	8006406 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800635a:	4b43      	ldr	r3, [pc, #268]	@ (8006468 <HAL_RCC_ClockConfig+0x244>)
 800635c:	699b      	ldr	r3, [r3, #24]
 800635e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	689b      	ldr	r3, [r3, #8]
 8006366:	4940      	ldr	r1, [pc, #256]	@ (8006468 <HAL_RCC_ClockConfig+0x244>)
 8006368:	4313      	orrs	r3, r2
 800636a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	685b      	ldr	r3, [r3, #4]
 8006370:	2b02      	cmp	r3, #2
 8006372:	d107      	bne.n	8006384 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006374:	4b3c      	ldr	r3, [pc, #240]	@ (8006468 <HAL_RCC_ClockConfig+0x244>)
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800637c:	2b00      	cmp	r3, #0
 800637e:	d121      	bne.n	80063c4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006380:	2301      	movs	r3, #1
 8006382:	e0f6      	b.n	8006572 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	685b      	ldr	r3, [r3, #4]
 8006388:	2b03      	cmp	r3, #3
 800638a:	d107      	bne.n	800639c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800638c:	4b36      	ldr	r3, [pc, #216]	@ (8006468 <HAL_RCC_ClockConfig+0x244>)
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006394:	2b00      	cmp	r3, #0
 8006396:	d115      	bne.n	80063c4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006398:	2301      	movs	r3, #1
 800639a:	e0ea      	b.n	8006572 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	685b      	ldr	r3, [r3, #4]
 80063a0:	2b01      	cmp	r3, #1
 80063a2:	d107      	bne.n	80063b4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80063a4:	4b30      	ldr	r3, [pc, #192]	@ (8006468 <HAL_RCC_ClockConfig+0x244>)
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d109      	bne.n	80063c4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80063b0:	2301      	movs	r3, #1
 80063b2:	e0de      	b.n	8006572 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80063b4:	4b2c      	ldr	r3, [pc, #176]	@ (8006468 <HAL_RCC_ClockConfig+0x244>)
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f003 0304 	and.w	r3, r3, #4
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d101      	bne.n	80063c4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80063c0:	2301      	movs	r3, #1
 80063c2:	e0d6      	b.n	8006572 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80063c4:	4b28      	ldr	r3, [pc, #160]	@ (8006468 <HAL_RCC_ClockConfig+0x244>)
 80063c6:	691b      	ldr	r3, [r3, #16]
 80063c8:	f023 0207 	bic.w	r2, r3, #7
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	685b      	ldr	r3, [r3, #4]
 80063d0:	4925      	ldr	r1, [pc, #148]	@ (8006468 <HAL_RCC_ClockConfig+0x244>)
 80063d2:	4313      	orrs	r3, r2
 80063d4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80063d6:	f7fb fc81 	bl	8001cdc <HAL_GetTick>
 80063da:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80063dc:	e00a      	b.n	80063f4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80063de:	f7fb fc7d 	bl	8001cdc <HAL_GetTick>
 80063e2:	4602      	mov	r2, r0
 80063e4:	697b      	ldr	r3, [r7, #20]
 80063e6:	1ad3      	subs	r3, r2, r3
 80063e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80063ec:	4293      	cmp	r3, r2
 80063ee:	d901      	bls.n	80063f4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80063f0:	2303      	movs	r3, #3
 80063f2:	e0be      	b.n	8006572 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80063f4:	4b1c      	ldr	r3, [pc, #112]	@ (8006468 <HAL_RCC_ClockConfig+0x244>)
 80063f6:	691b      	ldr	r3, [r3, #16]
 80063f8:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	685b      	ldr	r3, [r3, #4]
 8006400:	00db      	lsls	r3, r3, #3
 8006402:	429a      	cmp	r2, r3
 8006404:	d1eb      	bne.n	80063de <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	f003 0302 	and.w	r3, r3, #2
 800640e:	2b00      	cmp	r3, #0
 8006410:	d010      	beq.n	8006434 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	68da      	ldr	r2, [r3, #12]
 8006416:	4b14      	ldr	r3, [pc, #80]	@ (8006468 <HAL_RCC_ClockConfig+0x244>)
 8006418:	699b      	ldr	r3, [r3, #24]
 800641a:	f003 030f 	and.w	r3, r3, #15
 800641e:	429a      	cmp	r2, r3
 8006420:	d208      	bcs.n	8006434 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006422:	4b11      	ldr	r3, [pc, #68]	@ (8006468 <HAL_RCC_ClockConfig+0x244>)
 8006424:	699b      	ldr	r3, [r3, #24]
 8006426:	f023 020f 	bic.w	r2, r3, #15
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	68db      	ldr	r3, [r3, #12]
 800642e:	490e      	ldr	r1, [pc, #56]	@ (8006468 <HAL_RCC_ClockConfig+0x244>)
 8006430:	4313      	orrs	r3, r2
 8006432:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006434:	4b0b      	ldr	r3, [pc, #44]	@ (8006464 <HAL_RCC_ClockConfig+0x240>)
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f003 030f 	and.w	r3, r3, #15
 800643c:	683a      	ldr	r2, [r7, #0]
 800643e:	429a      	cmp	r2, r3
 8006440:	d214      	bcs.n	800646c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006442:	4b08      	ldr	r3, [pc, #32]	@ (8006464 <HAL_RCC_ClockConfig+0x240>)
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f023 020f 	bic.w	r2, r3, #15
 800644a:	4906      	ldr	r1, [pc, #24]	@ (8006464 <HAL_RCC_ClockConfig+0x240>)
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	4313      	orrs	r3, r2
 8006450:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006452:	4b04      	ldr	r3, [pc, #16]	@ (8006464 <HAL_RCC_ClockConfig+0x240>)
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f003 030f 	and.w	r3, r3, #15
 800645a:	683a      	ldr	r2, [r7, #0]
 800645c:	429a      	cmp	r2, r3
 800645e:	d005      	beq.n	800646c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006460:	2301      	movs	r3, #1
 8006462:	e086      	b.n	8006572 <HAL_RCC_ClockConfig+0x34e>
 8006464:	52002000 	.word	0x52002000
 8006468:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	f003 0304 	and.w	r3, r3, #4
 8006474:	2b00      	cmp	r3, #0
 8006476:	d010      	beq.n	800649a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	691a      	ldr	r2, [r3, #16]
 800647c:	4b3f      	ldr	r3, [pc, #252]	@ (800657c <HAL_RCC_ClockConfig+0x358>)
 800647e:	699b      	ldr	r3, [r3, #24]
 8006480:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006484:	429a      	cmp	r2, r3
 8006486:	d208      	bcs.n	800649a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006488:	4b3c      	ldr	r3, [pc, #240]	@ (800657c <HAL_RCC_ClockConfig+0x358>)
 800648a:	699b      	ldr	r3, [r3, #24]
 800648c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	691b      	ldr	r3, [r3, #16]
 8006494:	4939      	ldr	r1, [pc, #228]	@ (800657c <HAL_RCC_ClockConfig+0x358>)
 8006496:	4313      	orrs	r3, r2
 8006498:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f003 0308 	and.w	r3, r3, #8
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d010      	beq.n	80064c8 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	695a      	ldr	r2, [r3, #20]
 80064aa:	4b34      	ldr	r3, [pc, #208]	@ (800657c <HAL_RCC_ClockConfig+0x358>)
 80064ac:	69db      	ldr	r3, [r3, #28]
 80064ae:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80064b2:	429a      	cmp	r2, r3
 80064b4:	d208      	bcs.n	80064c8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80064b6:	4b31      	ldr	r3, [pc, #196]	@ (800657c <HAL_RCC_ClockConfig+0x358>)
 80064b8:	69db      	ldr	r3, [r3, #28]
 80064ba:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	695b      	ldr	r3, [r3, #20]
 80064c2:	492e      	ldr	r1, [pc, #184]	@ (800657c <HAL_RCC_ClockConfig+0x358>)
 80064c4:	4313      	orrs	r3, r2
 80064c6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f003 0310 	and.w	r3, r3, #16
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d010      	beq.n	80064f6 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	699a      	ldr	r2, [r3, #24]
 80064d8:	4b28      	ldr	r3, [pc, #160]	@ (800657c <HAL_RCC_ClockConfig+0x358>)
 80064da:	69db      	ldr	r3, [r3, #28]
 80064dc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80064e0:	429a      	cmp	r2, r3
 80064e2:	d208      	bcs.n	80064f6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80064e4:	4b25      	ldr	r3, [pc, #148]	@ (800657c <HAL_RCC_ClockConfig+0x358>)
 80064e6:	69db      	ldr	r3, [r3, #28]
 80064e8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	699b      	ldr	r3, [r3, #24]
 80064f0:	4922      	ldr	r1, [pc, #136]	@ (800657c <HAL_RCC_ClockConfig+0x358>)
 80064f2:	4313      	orrs	r3, r2
 80064f4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f003 0320 	and.w	r3, r3, #32
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d010      	beq.n	8006524 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	69da      	ldr	r2, [r3, #28]
 8006506:	4b1d      	ldr	r3, [pc, #116]	@ (800657c <HAL_RCC_ClockConfig+0x358>)
 8006508:	6a1b      	ldr	r3, [r3, #32]
 800650a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800650e:	429a      	cmp	r2, r3
 8006510:	d208      	bcs.n	8006524 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006512:	4b1a      	ldr	r3, [pc, #104]	@ (800657c <HAL_RCC_ClockConfig+0x358>)
 8006514:	6a1b      	ldr	r3, [r3, #32]
 8006516:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	69db      	ldr	r3, [r3, #28]
 800651e:	4917      	ldr	r1, [pc, #92]	@ (800657c <HAL_RCC_ClockConfig+0x358>)
 8006520:	4313      	orrs	r3, r2
 8006522:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006524:	f000 f834 	bl	8006590 <HAL_RCC_GetSysClockFreq>
 8006528:	4602      	mov	r2, r0
 800652a:	4b14      	ldr	r3, [pc, #80]	@ (800657c <HAL_RCC_ClockConfig+0x358>)
 800652c:	699b      	ldr	r3, [r3, #24]
 800652e:	0a1b      	lsrs	r3, r3, #8
 8006530:	f003 030f 	and.w	r3, r3, #15
 8006534:	4912      	ldr	r1, [pc, #72]	@ (8006580 <HAL_RCC_ClockConfig+0x35c>)
 8006536:	5ccb      	ldrb	r3, [r1, r3]
 8006538:	f003 031f 	and.w	r3, r3, #31
 800653c:	fa22 f303 	lsr.w	r3, r2, r3
 8006540:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006542:	4b0e      	ldr	r3, [pc, #56]	@ (800657c <HAL_RCC_ClockConfig+0x358>)
 8006544:	699b      	ldr	r3, [r3, #24]
 8006546:	f003 030f 	and.w	r3, r3, #15
 800654a:	4a0d      	ldr	r2, [pc, #52]	@ (8006580 <HAL_RCC_ClockConfig+0x35c>)
 800654c:	5cd3      	ldrb	r3, [r2, r3]
 800654e:	f003 031f 	and.w	r3, r3, #31
 8006552:	693a      	ldr	r2, [r7, #16]
 8006554:	fa22 f303 	lsr.w	r3, r2, r3
 8006558:	4a0a      	ldr	r2, [pc, #40]	@ (8006584 <HAL_RCC_ClockConfig+0x360>)
 800655a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800655c:	4a0a      	ldr	r2, [pc, #40]	@ (8006588 <HAL_RCC_ClockConfig+0x364>)
 800655e:	693b      	ldr	r3, [r7, #16]
 8006560:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8006562:	4b0a      	ldr	r3, [pc, #40]	@ (800658c <HAL_RCC_ClockConfig+0x368>)
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	4618      	mov	r0, r3
 8006568:	f7fb fb6e 	bl	8001c48 <HAL_InitTick>
 800656c:	4603      	mov	r3, r0
 800656e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006570:	7bfb      	ldrb	r3, [r7, #15]
}
 8006572:	4618      	mov	r0, r3
 8006574:	3718      	adds	r7, #24
 8006576:	46bd      	mov	sp, r7
 8006578:	bd80      	pop	{r7, pc}
 800657a:	bf00      	nop
 800657c:	58024400 	.word	0x58024400
 8006580:	0800d650 	.word	0x0800d650
 8006584:	24000008 	.word	0x24000008
 8006588:	24000004 	.word	0x24000004
 800658c:	2400000c 	.word	0x2400000c

08006590 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006590:	b480      	push	{r7}
 8006592:	b089      	sub	sp, #36	@ 0x24
 8006594:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006596:	4bb3      	ldr	r3, [pc, #716]	@ (8006864 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006598:	691b      	ldr	r3, [r3, #16]
 800659a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800659e:	2b18      	cmp	r3, #24
 80065a0:	f200 8155 	bhi.w	800684e <HAL_RCC_GetSysClockFreq+0x2be>
 80065a4:	a201      	add	r2, pc, #4	@ (adr r2, 80065ac <HAL_RCC_GetSysClockFreq+0x1c>)
 80065a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065aa:	bf00      	nop
 80065ac:	08006611 	.word	0x08006611
 80065b0:	0800684f 	.word	0x0800684f
 80065b4:	0800684f 	.word	0x0800684f
 80065b8:	0800684f 	.word	0x0800684f
 80065bc:	0800684f 	.word	0x0800684f
 80065c0:	0800684f 	.word	0x0800684f
 80065c4:	0800684f 	.word	0x0800684f
 80065c8:	0800684f 	.word	0x0800684f
 80065cc:	08006637 	.word	0x08006637
 80065d0:	0800684f 	.word	0x0800684f
 80065d4:	0800684f 	.word	0x0800684f
 80065d8:	0800684f 	.word	0x0800684f
 80065dc:	0800684f 	.word	0x0800684f
 80065e0:	0800684f 	.word	0x0800684f
 80065e4:	0800684f 	.word	0x0800684f
 80065e8:	0800684f 	.word	0x0800684f
 80065ec:	0800663d 	.word	0x0800663d
 80065f0:	0800684f 	.word	0x0800684f
 80065f4:	0800684f 	.word	0x0800684f
 80065f8:	0800684f 	.word	0x0800684f
 80065fc:	0800684f 	.word	0x0800684f
 8006600:	0800684f 	.word	0x0800684f
 8006604:	0800684f 	.word	0x0800684f
 8006608:	0800684f 	.word	0x0800684f
 800660c:	08006643 	.word	0x08006643
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006610:	4b94      	ldr	r3, [pc, #592]	@ (8006864 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f003 0320 	and.w	r3, r3, #32
 8006618:	2b00      	cmp	r3, #0
 800661a:	d009      	beq.n	8006630 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800661c:	4b91      	ldr	r3, [pc, #580]	@ (8006864 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	08db      	lsrs	r3, r3, #3
 8006622:	f003 0303 	and.w	r3, r3, #3
 8006626:	4a90      	ldr	r2, [pc, #576]	@ (8006868 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006628:	fa22 f303 	lsr.w	r3, r2, r3
 800662c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800662e:	e111      	b.n	8006854 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006630:	4b8d      	ldr	r3, [pc, #564]	@ (8006868 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006632:	61bb      	str	r3, [r7, #24]
      break;
 8006634:	e10e      	b.n	8006854 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8006636:	4b8d      	ldr	r3, [pc, #564]	@ (800686c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006638:	61bb      	str	r3, [r7, #24]
      break;
 800663a:	e10b      	b.n	8006854 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800663c:	4b8c      	ldr	r3, [pc, #560]	@ (8006870 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800663e:	61bb      	str	r3, [r7, #24]
      break;
 8006640:	e108      	b.n	8006854 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006642:	4b88      	ldr	r3, [pc, #544]	@ (8006864 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006644:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006646:	f003 0303 	and.w	r3, r3, #3
 800664a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800664c:	4b85      	ldr	r3, [pc, #532]	@ (8006864 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800664e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006650:	091b      	lsrs	r3, r3, #4
 8006652:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006656:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006658:	4b82      	ldr	r3, [pc, #520]	@ (8006864 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800665a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800665c:	f003 0301 	and.w	r3, r3, #1
 8006660:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006662:	4b80      	ldr	r3, [pc, #512]	@ (8006864 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006664:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006666:	08db      	lsrs	r3, r3, #3
 8006668:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800666c:	68fa      	ldr	r2, [r7, #12]
 800666e:	fb02 f303 	mul.w	r3, r2, r3
 8006672:	ee07 3a90 	vmov	s15, r3
 8006676:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800667a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800667e:	693b      	ldr	r3, [r7, #16]
 8006680:	2b00      	cmp	r3, #0
 8006682:	f000 80e1 	beq.w	8006848 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8006686:	697b      	ldr	r3, [r7, #20]
 8006688:	2b02      	cmp	r3, #2
 800668a:	f000 8083 	beq.w	8006794 <HAL_RCC_GetSysClockFreq+0x204>
 800668e:	697b      	ldr	r3, [r7, #20]
 8006690:	2b02      	cmp	r3, #2
 8006692:	f200 80a1 	bhi.w	80067d8 <HAL_RCC_GetSysClockFreq+0x248>
 8006696:	697b      	ldr	r3, [r7, #20]
 8006698:	2b00      	cmp	r3, #0
 800669a:	d003      	beq.n	80066a4 <HAL_RCC_GetSysClockFreq+0x114>
 800669c:	697b      	ldr	r3, [r7, #20]
 800669e:	2b01      	cmp	r3, #1
 80066a0:	d056      	beq.n	8006750 <HAL_RCC_GetSysClockFreq+0x1c0>
 80066a2:	e099      	b.n	80067d8 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80066a4:	4b6f      	ldr	r3, [pc, #444]	@ (8006864 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f003 0320 	and.w	r3, r3, #32
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d02d      	beq.n	800670c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80066b0:	4b6c      	ldr	r3, [pc, #432]	@ (8006864 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	08db      	lsrs	r3, r3, #3
 80066b6:	f003 0303 	and.w	r3, r3, #3
 80066ba:	4a6b      	ldr	r2, [pc, #428]	@ (8006868 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80066bc:	fa22 f303 	lsr.w	r3, r2, r3
 80066c0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	ee07 3a90 	vmov	s15, r3
 80066c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80066cc:	693b      	ldr	r3, [r7, #16]
 80066ce:	ee07 3a90 	vmov	s15, r3
 80066d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80066da:	4b62      	ldr	r3, [pc, #392]	@ (8006864 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80066dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066e2:	ee07 3a90 	vmov	s15, r3
 80066e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80066ea:	ed97 6a02 	vldr	s12, [r7, #8]
 80066ee:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8006874 <HAL_RCC_GetSysClockFreq+0x2e4>
 80066f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80066f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80066fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80066fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006702:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006706:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800670a:	e087      	b.n	800681c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800670c:	693b      	ldr	r3, [r7, #16]
 800670e:	ee07 3a90 	vmov	s15, r3
 8006712:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006716:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8006878 <HAL_RCC_GetSysClockFreq+0x2e8>
 800671a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800671e:	4b51      	ldr	r3, [pc, #324]	@ (8006864 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006720:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006722:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006726:	ee07 3a90 	vmov	s15, r3
 800672a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800672e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006732:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8006874 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006736:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800673a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800673e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006742:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006746:	ee67 7a27 	vmul.f32	s15, s14, s15
 800674a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800674e:	e065      	b.n	800681c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006750:	693b      	ldr	r3, [r7, #16]
 8006752:	ee07 3a90 	vmov	s15, r3
 8006756:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800675a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800687c <HAL_RCC_GetSysClockFreq+0x2ec>
 800675e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006762:	4b40      	ldr	r3, [pc, #256]	@ (8006864 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006766:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800676a:	ee07 3a90 	vmov	s15, r3
 800676e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006772:	ed97 6a02 	vldr	s12, [r7, #8]
 8006776:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8006874 <HAL_RCC_GetSysClockFreq+0x2e4>
 800677a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800677e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006782:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006786:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800678a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800678e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006792:	e043      	b.n	800681c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006794:	693b      	ldr	r3, [r7, #16]
 8006796:	ee07 3a90 	vmov	s15, r3
 800679a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800679e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8006880 <HAL_RCC_GetSysClockFreq+0x2f0>
 80067a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80067a6:	4b2f      	ldr	r3, [pc, #188]	@ (8006864 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80067a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067ae:	ee07 3a90 	vmov	s15, r3
 80067b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80067b6:	ed97 6a02 	vldr	s12, [r7, #8]
 80067ba:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8006874 <HAL_RCC_GetSysClockFreq+0x2e4>
 80067be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80067c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80067c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80067ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80067ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80067d2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80067d6:	e021      	b.n	800681c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80067d8:	693b      	ldr	r3, [r7, #16]
 80067da:	ee07 3a90 	vmov	s15, r3
 80067de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067e2:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800687c <HAL_RCC_GetSysClockFreq+0x2ec>
 80067e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80067ea:	4b1e      	ldr	r3, [pc, #120]	@ (8006864 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80067ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067f2:	ee07 3a90 	vmov	s15, r3
 80067f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80067fa:	ed97 6a02 	vldr	s12, [r7, #8]
 80067fe:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8006874 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006802:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006806:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800680a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800680e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006812:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006816:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800681a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800681c:	4b11      	ldr	r3, [pc, #68]	@ (8006864 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800681e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006820:	0a5b      	lsrs	r3, r3, #9
 8006822:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006826:	3301      	adds	r3, #1
 8006828:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800682a:	683b      	ldr	r3, [r7, #0]
 800682c:	ee07 3a90 	vmov	s15, r3
 8006830:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006834:	edd7 6a07 	vldr	s13, [r7, #28]
 8006838:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800683c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006840:	ee17 3a90 	vmov	r3, s15
 8006844:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8006846:	e005      	b.n	8006854 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8006848:	2300      	movs	r3, #0
 800684a:	61bb      	str	r3, [r7, #24]
      break;
 800684c:	e002      	b.n	8006854 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800684e:	4b07      	ldr	r3, [pc, #28]	@ (800686c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006850:	61bb      	str	r3, [r7, #24]
      break;
 8006852:	bf00      	nop
  }

  return sysclockfreq;
 8006854:	69bb      	ldr	r3, [r7, #24]
}
 8006856:	4618      	mov	r0, r3
 8006858:	3724      	adds	r7, #36	@ 0x24
 800685a:	46bd      	mov	sp, r7
 800685c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006860:	4770      	bx	lr
 8006862:	bf00      	nop
 8006864:	58024400 	.word	0x58024400
 8006868:	03d09000 	.word	0x03d09000
 800686c:	003d0900 	.word	0x003d0900
 8006870:	007a1200 	.word	0x007a1200
 8006874:	46000000 	.word	0x46000000
 8006878:	4c742400 	.word	0x4c742400
 800687c:	4a742400 	.word	0x4a742400
 8006880:	4af42400 	.word	0x4af42400

08006884 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006884:	b580      	push	{r7, lr}
 8006886:	b082      	sub	sp, #8
 8006888:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800688a:	f7ff fe81 	bl	8006590 <HAL_RCC_GetSysClockFreq>
 800688e:	4602      	mov	r2, r0
 8006890:	4b10      	ldr	r3, [pc, #64]	@ (80068d4 <HAL_RCC_GetHCLKFreq+0x50>)
 8006892:	699b      	ldr	r3, [r3, #24]
 8006894:	0a1b      	lsrs	r3, r3, #8
 8006896:	f003 030f 	and.w	r3, r3, #15
 800689a:	490f      	ldr	r1, [pc, #60]	@ (80068d8 <HAL_RCC_GetHCLKFreq+0x54>)
 800689c:	5ccb      	ldrb	r3, [r1, r3]
 800689e:	f003 031f 	and.w	r3, r3, #31
 80068a2:	fa22 f303 	lsr.w	r3, r2, r3
 80068a6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80068a8:	4b0a      	ldr	r3, [pc, #40]	@ (80068d4 <HAL_RCC_GetHCLKFreq+0x50>)
 80068aa:	699b      	ldr	r3, [r3, #24]
 80068ac:	f003 030f 	and.w	r3, r3, #15
 80068b0:	4a09      	ldr	r2, [pc, #36]	@ (80068d8 <HAL_RCC_GetHCLKFreq+0x54>)
 80068b2:	5cd3      	ldrb	r3, [r2, r3]
 80068b4:	f003 031f 	and.w	r3, r3, #31
 80068b8:	687a      	ldr	r2, [r7, #4]
 80068ba:	fa22 f303 	lsr.w	r3, r2, r3
 80068be:	4a07      	ldr	r2, [pc, #28]	@ (80068dc <HAL_RCC_GetHCLKFreq+0x58>)
 80068c0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80068c2:	4a07      	ldr	r2, [pc, #28]	@ (80068e0 <HAL_RCC_GetHCLKFreq+0x5c>)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80068c8:	4b04      	ldr	r3, [pc, #16]	@ (80068dc <HAL_RCC_GetHCLKFreq+0x58>)
 80068ca:	681b      	ldr	r3, [r3, #0]
}
 80068cc:	4618      	mov	r0, r3
 80068ce:	3708      	adds	r7, #8
 80068d0:	46bd      	mov	sp, r7
 80068d2:	bd80      	pop	{r7, pc}
 80068d4:	58024400 	.word	0x58024400
 80068d8:	0800d650 	.word	0x0800d650
 80068dc:	24000008 	.word	0x24000008
 80068e0:	24000004 	.word	0x24000004

080068e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80068e4:	b580      	push	{r7, lr}
 80068e6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80068e8:	f7ff ffcc 	bl	8006884 <HAL_RCC_GetHCLKFreq>
 80068ec:	4602      	mov	r2, r0
 80068ee:	4b06      	ldr	r3, [pc, #24]	@ (8006908 <HAL_RCC_GetPCLK1Freq+0x24>)
 80068f0:	69db      	ldr	r3, [r3, #28]
 80068f2:	091b      	lsrs	r3, r3, #4
 80068f4:	f003 0307 	and.w	r3, r3, #7
 80068f8:	4904      	ldr	r1, [pc, #16]	@ (800690c <HAL_RCC_GetPCLK1Freq+0x28>)
 80068fa:	5ccb      	ldrb	r3, [r1, r3]
 80068fc:	f003 031f 	and.w	r3, r3, #31
 8006900:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006904:	4618      	mov	r0, r3
 8006906:	bd80      	pop	{r7, pc}
 8006908:	58024400 	.word	0x58024400
 800690c:	0800d650 	.word	0x0800d650

08006910 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006910:	b580      	push	{r7, lr}
 8006912:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006914:	f7ff ffb6 	bl	8006884 <HAL_RCC_GetHCLKFreq>
 8006918:	4602      	mov	r2, r0
 800691a:	4b06      	ldr	r3, [pc, #24]	@ (8006934 <HAL_RCC_GetPCLK2Freq+0x24>)
 800691c:	69db      	ldr	r3, [r3, #28]
 800691e:	0a1b      	lsrs	r3, r3, #8
 8006920:	f003 0307 	and.w	r3, r3, #7
 8006924:	4904      	ldr	r1, [pc, #16]	@ (8006938 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006926:	5ccb      	ldrb	r3, [r1, r3]
 8006928:	f003 031f 	and.w	r3, r3, #31
 800692c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006930:	4618      	mov	r0, r3
 8006932:	bd80      	pop	{r7, pc}
 8006934:	58024400 	.word	0x58024400
 8006938:	0800d650 	.word	0x0800d650

0800693c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800693c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006940:	b0ca      	sub	sp, #296	@ 0x128
 8006942:	af00      	add	r7, sp, #0
 8006944:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006948:	2300      	movs	r3, #0
 800694a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800694e:	2300      	movs	r3, #0
 8006950:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006954:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006958:	e9d3 2300 	ldrd	r2, r3, [r3]
 800695c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8006960:	2500      	movs	r5, #0
 8006962:	ea54 0305 	orrs.w	r3, r4, r5
 8006966:	d049      	beq.n	80069fc <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8006968:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800696c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800696e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006972:	d02f      	beq.n	80069d4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8006974:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006978:	d828      	bhi.n	80069cc <HAL_RCCEx_PeriphCLKConfig+0x90>
 800697a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800697e:	d01a      	beq.n	80069b6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006980:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006984:	d822      	bhi.n	80069cc <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006986:	2b00      	cmp	r3, #0
 8006988:	d003      	beq.n	8006992 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800698a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800698e:	d007      	beq.n	80069a0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006990:	e01c      	b.n	80069cc <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006992:	4bb8      	ldr	r3, [pc, #736]	@ (8006c74 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006994:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006996:	4ab7      	ldr	r2, [pc, #732]	@ (8006c74 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006998:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800699c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800699e:	e01a      	b.n	80069d6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80069a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069a4:	3308      	adds	r3, #8
 80069a6:	2102      	movs	r1, #2
 80069a8:	4618      	mov	r0, r3
 80069aa:	f002 fb61 	bl	8009070 <RCCEx_PLL2_Config>
 80069ae:	4603      	mov	r3, r0
 80069b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80069b4:	e00f      	b.n	80069d6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80069b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069ba:	3328      	adds	r3, #40	@ 0x28
 80069bc:	2102      	movs	r1, #2
 80069be:	4618      	mov	r0, r3
 80069c0:	f002 fc08 	bl	80091d4 <RCCEx_PLL3_Config>
 80069c4:	4603      	mov	r3, r0
 80069c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80069ca:	e004      	b.n	80069d6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80069cc:	2301      	movs	r3, #1
 80069ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80069d2:	e000      	b.n	80069d6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80069d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80069d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d10a      	bne.n	80069f4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80069de:	4ba5      	ldr	r3, [pc, #660]	@ (8006c74 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80069e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80069e2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80069e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069ea:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80069ec:	4aa1      	ldr	r2, [pc, #644]	@ (8006c74 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80069ee:	430b      	orrs	r3, r1
 80069f0:	6513      	str	r3, [r2, #80]	@ 0x50
 80069f2:	e003      	b.n	80069fc <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069f4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80069f8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80069fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a04:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8006a08:	f04f 0900 	mov.w	r9, #0
 8006a0c:	ea58 0309 	orrs.w	r3, r8, r9
 8006a10:	d047      	beq.n	8006aa2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8006a12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a18:	2b04      	cmp	r3, #4
 8006a1a:	d82a      	bhi.n	8006a72 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8006a1c:	a201      	add	r2, pc, #4	@ (adr r2, 8006a24 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8006a1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a22:	bf00      	nop
 8006a24:	08006a39 	.word	0x08006a39
 8006a28:	08006a47 	.word	0x08006a47
 8006a2c:	08006a5d 	.word	0x08006a5d
 8006a30:	08006a7b 	.word	0x08006a7b
 8006a34:	08006a7b 	.word	0x08006a7b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a38:	4b8e      	ldr	r3, [pc, #568]	@ (8006c74 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006a3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a3c:	4a8d      	ldr	r2, [pc, #564]	@ (8006c74 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006a3e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006a42:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006a44:	e01a      	b.n	8006a7c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006a46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a4a:	3308      	adds	r3, #8
 8006a4c:	2100      	movs	r1, #0
 8006a4e:	4618      	mov	r0, r3
 8006a50:	f002 fb0e 	bl	8009070 <RCCEx_PLL2_Config>
 8006a54:	4603      	mov	r3, r0
 8006a56:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006a5a:	e00f      	b.n	8006a7c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006a5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a60:	3328      	adds	r3, #40	@ 0x28
 8006a62:	2100      	movs	r1, #0
 8006a64:	4618      	mov	r0, r3
 8006a66:	f002 fbb5 	bl	80091d4 <RCCEx_PLL3_Config>
 8006a6a:	4603      	mov	r3, r0
 8006a6c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006a70:	e004      	b.n	8006a7c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006a72:	2301      	movs	r3, #1
 8006a74:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006a78:	e000      	b.n	8006a7c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8006a7a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a7c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d10a      	bne.n	8006a9a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006a84:	4b7b      	ldr	r3, [pc, #492]	@ (8006c74 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006a86:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a88:	f023 0107 	bic.w	r1, r3, #7
 8006a8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a92:	4a78      	ldr	r2, [pc, #480]	@ (8006c74 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006a94:	430b      	orrs	r3, r1
 8006a96:	6513      	str	r3, [r2, #80]	@ 0x50
 8006a98:	e003      	b.n	8006aa2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a9a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a9e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8006aa2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006aa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aaa:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8006aae:	f04f 0b00 	mov.w	fp, #0
 8006ab2:	ea5a 030b 	orrs.w	r3, sl, fp
 8006ab6:	d04c      	beq.n	8006b52 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8006ab8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006abc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006abe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006ac2:	d030      	beq.n	8006b26 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8006ac4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006ac8:	d829      	bhi.n	8006b1e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006aca:	2bc0      	cmp	r3, #192	@ 0xc0
 8006acc:	d02d      	beq.n	8006b2a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8006ace:	2bc0      	cmp	r3, #192	@ 0xc0
 8006ad0:	d825      	bhi.n	8006b1e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006ad2:	2b80      	cmp	r3, #128	@ 0x80
 8006ad4:	d018      	beq.n	8006b08 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8006ad6:	2b80      	cmp	r3, #128	@ 0x80
 8006ad8:	d821      	bhi.n	8006b1e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d002      	beq.n	8006ae4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8006ade:	2b40      	cmp	r3, #64	@ 0x40
 8006ae0:	d007      	beq.n	8006af2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8006ae2:	e01c      	b.n	8006b1e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ae4:	4b63      	ldr	r3, [pc, #396]	@ (8006c74 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006ae6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ae8:	4a62      	ldr	r2, [pc, #392]	@ (8006c74 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006aea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006aee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006af0:	e01c      	b.n	8006b2c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006af2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006af6:	3308      	adds	r3, #8
 8006af8:	2100      	movs	r1, #0
 8006afa:	4618      	mov	r0, r3
 8006afc:	f002 fab8 	bl	8009070 <RCCEx_PLL2_Config>
 8006b00:	4603      	mov	r3, r0
 8006b02:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006b06:	e011      	b.n	8006b2c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006b08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b0c:	3328      	adds	r3, #40	@ 0x28
 8006b0e:	2100      	movs	r1, #0
 8006b10:	4618      	mov	r0, r3
 8006b12:	f002 fb5f 	bl	80091d4 <RCCEx_PLL3_Config>
 8006b16:	4603      	mov	r3, r0
 8006b18:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006b1c:	e006      	b.n	8006b2c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006b1e:	2301      	movs	r3, #1
 8006b20:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006b24:	e002      	b.n	8006b2c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8006b26:	bf00      	nop
 8006b28:	e000      	b.n	8006b2c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8006b2a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b2c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d10a      	bne.n	8006b4a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8006b34:	4b4f      	ldr	r3, [pc, #316]	@ (8006c74 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006b36:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b38:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8006b3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006b42:	4a4c      	ldr	r2, [pc, #304]	@ (8006c74 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006b44:	430b      	orrs	r3, r1
 8006b46:	6513      	str	r3, [r2, #80]	@ 0x50
 8006b48:	e003      	b.n	8006b52 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b4a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006b4e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006b52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b5a:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8006b5e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8006b62:	2300      	movs	r3, #0
 8006b64:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8006b68:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8006b6c:	460b      	mov	r3, r1
 8006b6e:	4313      	orrs	r3, r2
 8006b70:	d053      	beq.n	8006c1a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8006b72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b76:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006b7a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006b7e:	d035      	beq.n	8006bec <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8006b80:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006b84:	d82e      	bhi.n	8006be4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006b86:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006b8a:	d031      	beq.n	8006bf0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8006b8c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006b90:	d828      	bhi.n	8006be4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006b92:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006b96:	d01a      	beq.n	8006bce <HAL_RCCEx_PeriphCLKConfig+0x292>
 8006b98:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006b9c:	d822      	bhi.n	8006be4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d003      	beq.n	8006baa <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8006ba2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006ba6:	d007      	beq.n	8006bb8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8006ba8:	e01c      	b.n	8006be4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006baa:	4b32      	ldr	r3, [pc, #200]	@ (8006c74 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006bac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bae:	4a31      	ldr	r2, [pc, #196]	@ (8006c74 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006bb0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006bb4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006bb6:	e01c      	b.n	8006bf2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006bb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bbc:	3308      	adds	r3, #8
 8006bbe:	2100      	movs	r1, #0
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	f002 fa55 	bl	8009070 <RCCEx_PLL2_Config>
 8006bc6:	4603      	mov	r3, r0
 8006bc8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006bcc:	e011      	b.n	8006bf2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006bce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bd2:	3328      	adds	r3, #40	@ 0x28
 8006bd4:	2100      	movs	r1, #0
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	f002 fafc 	bl	80091d4 <RCCEx_PLL3_Config>
 8006bdc:	4603      	mov	r3, r0
 8006bde:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006be2:	e006      	b.n	8006bf2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006be4:	2301      	movs	r3, #1
 8006be6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006bea:	e002      	b.n	8006bf2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8006bec:	bf00      	nop
 8006bee:	e000      	b.n	8006bf2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8006bf0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006bf2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d10b      	bne.n	8006c12 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006bfa:	4b1e      	ldr	r3, [pc, #120]	@ (8006c74 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006bfc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006bfe:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8006c02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c06:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006c0a:	4a1a      	ldr	r2, [pc, #104]	@ (8006c74 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006c0c:	430b      	orrs	r3, r1
 8006c0e:	6593      	str	r3, [r2, #88]	@ 0x58
 8006c10:	e003      	b.n	8006c1a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c12:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c16:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006c1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c22:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8006c26:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8006c30:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8006c34:	460b      	mov	r3, r1
 8006c36:	4313      	orrs	r3, r2
 8006c38:	d056      	beq.n	8006ce8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8006c3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c3e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006c42:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006c46:	d038      	beq.n	8006cba <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8006c48:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006c4c:	d831      	bhi.n	8006cb2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006c4e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006c52:	d034      	beq.n	8006cbe <HAL_RCCEx_PeriphCLKConfig+0x382>
 8006c54:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006c58:	d82b      	bhi.n	8006cb2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006c5a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006c5e:	d01d      	beq.n	8006c9c <HAL_RCCEx_PeriphCLKConfig+0x360>
 8006c60:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006c64:	d825      	bhi.n	8006cb2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d006      	beq.n	8006c78 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8006c6a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006c6e:	d00a      	beq.n	8006c86 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8006c70:	e01f      	b.n	8006cb2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006c72:	bf00      	nop
 8006c74:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c78:	4ba2      	ldr	r3, [pc, #648]	@ (8006f04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006c7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c7c:	4aa1      	ldr	r2, [pc, #644]	@ (8006f04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006c7e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006c82:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006c84:	e01c      	b.n	8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006c86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c8a:	3308      	adds	r3, #8
 8006c8c:	2100      	movs	r1, #0
 8006c8e:	4618      	mov	r0, r3
 8006c90:	f002 f9ee 	bl	8009070 <RCCEx_PLL2_Config>
 8006c94:	4603      	mov	r3, r0
 8006c96:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006c9a:	e011      	b.n	8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006c9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ca0:	3328      	adds	r3, #40	@ 0x28
 8006ca2:	2100      	movs	r1, #0
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	f002 fa95 	bl	80091d4 <RCCEx_PLL3_Config>
 8006caa:	4603      	mov	r3, r0
 8006cac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006cb0:	e006      	b.n	8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006cb2:	2301      	movs	r3, #1
 8006cb4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006cb8:	e002      	b.n	8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8006cba:	bf00      	nop
 8006cbc:	e000      	b.n	8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8006cbe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006cc0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d10b      	bne.n	8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006cc8:	4b8e      	ldr	r3, [pc, #568]	@ (8006f04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006cca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ccc:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8006cd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cd4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006cd8:	4a8a      	ldr	r2, [pc, #552]	@ (8006f04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006cda:	430b      	orrs	r3, r1
 8006cdc:	6593      	str	r3, [r2, #88]	@ 0x58
 8006cde:	e003      	b.n	8006ce8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ce0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006ce4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006ce8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cf0:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8006cf4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006cf8:	2300      	movs	r3, #0
 8006cfa:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006cfe:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8006d02:	460b      	mov	r3, r1
 8006d04:	4313      	orrs	r3, r2
 8006d06:	d03a      	beq.n	8006d7e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8006d08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006d0e:	2b30      	cmp	r3, #48	@ 0x30
 8006d10:	d01f      	beq.n	8006d52 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8006d12:	2b30      	cmp	r3, #48	@ 0x30
 8006d14:	d819      	bhi.n	8006d4a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8006d16:	2b20      	cmp	r3, #32
 8006d18:	d00c      	beq.n	8006d34 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8006d1a:	2b20      	cmp	r3, #32
 8006d1c:	d815      	bhi.n	8006d4a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d019      	beq.n	8006d56 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8006d22:	2b10      	cmp	r3, #16
 8006d24:	d111      	bne.n	8006d4a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006d26:	4b77      	ldr	r3, [pc, #476]	@ (8006f04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006d28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d2a:	4a76      	ldr	r2, [pc, #472]	@ (8006f04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006d2c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006d30:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8006d32:	e011      	b.n	8006d58 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006d34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d38:	3308      	adds	r3, #8
 8006d3a:	2102      	movs	r1, #2
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	f002 f997 	bl	8009070 <RCCEx_PLL2_Config>
 8006d42:	4603      	mov	r3, r0
 8006d44:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8006d48:	e006      	b.n	8006d58 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006d4a:	2301      	movs	r3, #1
 8006d4c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006d50:	e002      	b.n	8006d58 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8006d52:	bf00      	nop
 8006d54:	e000      	b.n	8006d58 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8006d56:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d58:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d10a      	bne.n	8006d76 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006d60:	4b68      	ldr	r3, [pc, #416]	@ (8006f04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006d62:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006d64:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8006d68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006d6e:	4a65      	ldr	r2, [pc, #404]	@ (8006f04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006d70:	430b      	orrs	r3, r1
 8006d72:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006d74:	e003      	b.n	8006d7e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d76:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d7a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006d7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d86:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8006d8a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006d8e:	2300      	movs	r3, #0
 8006d90:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006d94:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8006d98:	460b      	mov	r3, r1
 8006d9a:	4313      	orrs	r3, r2
 8006d9c:	d051      	beq.n	8006e42 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8006d9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006da2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006da4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006da8:	d035      	beq.n	8006e16 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8006daa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006dae:	d82e      	bhi.n	8006e0e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006db0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006db4:	d031      	beq.n	8006e1a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8006db6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006dba:	d828      	bhi.n	8006e0e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006dbc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006dc0:	d01a      	beq.n	8006df8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8006dc2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006dc6:	d822      	bhi.n	8006e0e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d003      	beq.n	8006dd4 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8006dcc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006dd0:	d007      	beq.n	8006de2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8006dd2:	e01c      	b.n	8006e0e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006dd4:	4b4b      	ldr	r3, [pc, #300]	@ (8006f04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006dd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dd8:	4a4a      	ldr	r2, [pc, #296]	@ (8006f04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006dda:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006dde:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006de0:	e01c      	b.n	8006e1c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006de2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006de6:	3308      	adds	r3, #8
 8006de8:	2100      	movs	r1, #0
 8006dea:	4618      	mov	r0, r3
 8006dec:	f002 f940 	bl	8009070 <RCCEx_PLL2_Config>
 8006df0:	4603      	mov	r3, r0
 8006df2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006df6:	e011      	b.n	8006e1c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006df8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006dfc:	3328      	adds	r3, #40	@ 0x28
 8006dfe:	2100      	movs	r1, #0
 8006e00:	4618      	mov	r0, r3
 8006e02:	f002 f9e7 	bl	80091d4 <RCCEx_PLL3_Config>
 8006e06:	4603      	mov	r3, r0
 8006e08:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006e0c:	e006      	b.n	8006e1c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006e0e:	2301      	movs	r3, #1
 8006e10:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006e14:	e002      	b.n	8006e1c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8006e16:	bf00      	nop
 8006e18:	e000      	b.n	8006e1c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8006e1a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e1c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d10a      	bne.n	8006e3a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006e24:	4b37      	ldr	r3, [pc, #220]	@ (8006f04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006e26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e28:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8006e2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006e32:	4a34      	ldr	r2, [pc, #208]	@ (8006f04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006e34:	430b      	orrs	r3, r1
 8006e36:	6513      	str	r3, [r2, #80]	@ 0x50
 8006e38:	e003      	b.n	8006e42 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e3a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006e3e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006e42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e4a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8006e4e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006e52:	2300      	movs	r3, #0
 8006e54:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006e58:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8006e5c:	460b      	mov	r3, r1
 8006e5e:	4313      	orrs	r3, r2
 8006e60:	d056      	beq.n	8006f10 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8006e62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e66:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006e68:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006e6c:	d033      	beq.n	8006ed6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8006e6e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006e72:	d82c      	bhi.n	8006ece <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006e74:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006e78:	d02f      	beq.n	8006eda <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8006e7a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006e7e:	d826      	bhi.n	8006ece <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006e80:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006e84:	d02b      	beq.n	8006ede <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8006e86:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006e8a:	d820      	bhi.n	8006ece <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006e8c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006e90:	d012      	beq.n	8006eb8 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8006e92:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006e96:	d81a      	bhi.n	8006ece <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d022      	beq.n	8006ee2 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8006e9c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006ea0:	d115      	bne.n	8006ece <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006ea2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ea6:	3308      	adds	r3, #8
 8006ea8:	2101      	movs	r1, #1
 8006eaa:	4618      	mov	r0, r3
 8006eac:	f002 f8e0 	bl	8009070 <RCCEx_PLL2_Config>
 8006eb0:	4603      	mov	r3, r0
 8006eb2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006eb6:	e015      	b.n	8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006eb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ebc:	3328      	adds	r3, #40	@ 0x28
 8006ebe:	2101      	movs	r1, #1
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	f002 f987 	bl	80091d4 <RCCEx_PLL3_Config>
 8006ec6:	4603      	mov	r3, r0
 8006ec8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006ecc:	e00a      	b.n	8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006ece:	2301      	movs	r3, #1
 8006ed0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006ed4:	e006      	b.n	8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006ed6:	bf00      	nop
 8006ed8:	e004      	b.n	8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006eda:	bf00      	nop
 8006edc:	e002      	b.n	8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006ede:	bf00      	nop
 8006ee0:	e000      	b.n	8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006ee2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006ee4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d10d      	bne.n	8006f08 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006eec:	4b05      	ldr	r3, [pc, #20]	@ (8006f04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006eee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ef0:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8006ef4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ef8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006efa:	4a02      	ldr	r2, [pc, #8]	@ (8006f04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006efc:	430b      	orrs	r3, r1
 8006efe:	6513      	str	r3, [r2, #80]	@ 0x50
 8006f00:	e006      	b.n	8006f10 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8006f02:	bf00      	nop
 8006f04:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f08:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006f0c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006f10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f18:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8006f1c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006f20:	2300      	movs	r3, #0
 8006f22:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006f26:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8006f2a:	460b      	mov	r3, r1
 8006f2c:	4313      	orrs	r3, r2
 8006f2e:	d055      	beq.n	8006fdc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8006f30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f34:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006f38:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006f3c:	d033      	beq.n	8006fa6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8006f3e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006f42:	d82c      	bhi.n	8006f9e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006f44:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006f48:	d02f      	beq.n	8006faa <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8006f4a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006f4e:	d826      	bhi.n	8006f9e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006f50:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006f54:	d02b      	beq.n	8006fae <HAL_RCCEx_PeriphCLKConfig+0x672>
 8006f56:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006f5a:	d820      	bhi.n	8006f9e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006f5c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006f60:	d012      	beq.n	8006f88 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8006f62:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006f66:	d81a      	bhi.n	8006f9e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d022      	beq.n	8006fb2 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8006f6c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006f70:	d115      	bne.n	8006f9e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006f72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f76:	3308      	adds	r3, #8
 8006f78:	2101      	movs	r1, #1
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	f002 f878 	bl	8009070 <RCCEx_PLL2_Config>
 8006f80:	4603      	mov	r3, r0
 8006f82:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006f86:	e015      	b.n	8006fb4 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006f88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f8c:	3328      	adds	r3, #40	@ 0x28
 8006f8e:	2101      	movs	r1, #1
 8006f90:	4618      	mov	r0, r3
 8006f92:	f002 f91f 	bl	80091d4 <RCCEx_PLL3_Config>
 8006f96:	4603      	mov	r3, r0
 8006f98:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006f9c:	e00a      	b.n	8006fb4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8006f9e:	2301      	movs	r3, #1
 8006fa0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006fa4:	e006      	b.n	8006fb4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006fa6:	bf00      	nop
 8006fa8:	e004      	b.n	8006fb4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006faa:	bf00      	nop
 8006fac:	e002      	b.n	8006fb4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006fae:	bf00      	nop
 8006fb0:	e000      	b.n	8006fb4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006fb2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006fb4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d10b      	bne.n	8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006fbc:	4ba3      	ldr	r3, [pc, #652]	@ (800724c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006fbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006fc0:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8006fc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fc8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006fcc:	4a9f      	ldr	r2, [pc, #636]	@ (800724c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006fce:	430b      	orrs	r3, r1
 8006fd0:	6593      	str	r3, [r2, #88]	@ 0x58
 8006fd2:	e003      	b.n	8006fdc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fd4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006fd8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006fdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fe4:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8006fe8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006fec:	2300      	movs	r3, #0
 8006fee:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006ff2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006ff6:	460b      	mov	r3, r1
 8006ff8:	4313      	orrs	r3, r2
 8006ffa:	d037      	beq.n	800706c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8006ffc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007000:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007002:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007006:	d00e      	beq.n	8007026 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8007008:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800700c:	d816      	bhi.n	800703c <HAL_RCCEx_PeriphCLKConfig+0x700>
 800700e:	2b00      	cmp	r3, #0
 8007010:	d018      	beq.n	8007044 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8007012:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007016:	d111      	bne.n	800703c <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007018:	4b8c      	ldr	r3, [pc, #560]	@ (800724c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800701a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800701c:	4a8b      	ldr	r2, [pc, #556]	@ (800724c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800701e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007022:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007024:	e00f      	b.n	8007046 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007026:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800702a:	3308      	adds	r3, #8
 800702c:	2101      	movs	r1, #1
 800702e:	4618      	mov	r0, r3
 8007030:	f002 f81e 	bl	8009070 <RCCEx_PLL2_Config>
 8007034:	4603      	mov	r3, r0
 8007036:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800703a:	e004      	b.n	8007046 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800703c:	2301      	movs	r3, #1
 800703e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007042:	e000      	b.n	8007046 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8007044:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007046:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800704a:	2b00      	cmp	r3, #0
 800704c:	d10a      	bne.n	8007064 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800704e:	4b7f      	ldr	r3, [pc, #508]	@ (800724c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007050:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007052:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8007056:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800705a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800705c:	4a7b      	ldr	r2, [pc, #492]	@ (800724c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800705e:	430b      	orrs	r3, r1
 8007060:	6513      	str	r3, [r2, #80]	@ 0x50
 8007062:	e003      	b.n	800706c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007064:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007068:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800706c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007070:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007074:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8007078:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800707c:	2300      	movs	r3, #0
 800707e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8007082:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8007086:	460b      	mov	r3, r1
 8007088:	4313      	orrs	r3, r2
 800708a:	d039      	beq.n	8007100 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800708c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007090:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007092:	2b03      	cmp	r3, #3
 8007094:	d81c      	bhi.n	80070d0 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8007096:	a201      	add	r2, pc, #4	@ (adr r2, 800709c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8007098:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800709c:	080070d9 	.word	0x080070d9
 80070a0:	080070ad 	.word	0x080070ad
 80070a4:	080070bb 	.word	0x080070bb
 80070a8:	080070d9 	.word	0x080070d9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80070ac:	4b67      	ldr	r3, [pc, #412]	@ (800724c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80070ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070b0:	4a66      	ldr	r2, [pc, #408]	@ (800724c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80070b2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80070b6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80070b8:	e00f      	b.n	80070da <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80070ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070be:	3308      	adds	r3, #8
 80070c0:	2102      	movs	r1, #2
 80070c2:	4618      	mov	r0, r3
 80070c4:	f001 ffd4 	bl	8009070 <RCCEx_PLL2_Config>
 80070c8:	4603      	mov	r3, r0
 80070ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80070ce:	e004      	b.n	80070da <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80070d0:	2301      	movs	r3, #1
 80070d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80070d6:	e000      	b.n	80070da <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80070d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80070da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d10a      	bne.n	80070f8 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80070e2:	4b5a      	ldr	r3, [pc, #360]	@ (800724c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80070e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80070e6:	f023 0103 	bic.w	r1, r3, #3
 80070ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80070f0:	4a56      	ldr	r2, [pc, #344]	@ (800724c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80070f2:	430b      	orrs	r3, r1
 80070f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80070f6:	e003      	b.n	8007100 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070f8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80070fc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007100:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007104:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007108:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800710c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007110:	2300      	movs	r3, #0
 8007112:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007116:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800711a:	460b      	mov	r3, r1
 800711c:	4313      	orrs	r3, r2
 800711e:	f000 809f 	beq.w	8007260 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007122:	4b4b      	ldr	r3, [pc, #300]	@ (8007250 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	4a4a      	ldr	r2, [pc, #296]	@ (8007250 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007128:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800712c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800712e:	f7fa fdd5 	bl	8001cdc <HAL_GetTick>
 8007132:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007136:	e00b      	b.n	8007150 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007138:	f7fa fdd0 	bl	8001cdc <HAL_GetTick>
 800713c:	4602      	mov	r2, r0
 800713e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8007142:	1ad3      	subs	r3, r2, r3
 8007144:	2b64      	cmp	r3, #100	@ 0x64
 8007146:	d903      	bls.n	8007150 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8007148:	2303      	movs	r3, #3
 800714a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800714e:	e005      	b.n	800715c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007150:	4b3f      	ldr	r3, [pc, #252]	@ (8007250 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007158:	2b00      	cmp	r3, #0
 800715a:	d0ed      	beq.n	8007138 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800715c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007160:	2b00      	cmp	r3, #0
 8007162:	d179      	bne.n	8007258 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007164:	4b39      	ldr	r3, [pc, #228]	@ (800724c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007166:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007168:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800716c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007170:	4053      	eors	r3, r2
 8007172:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007176:	2b00      	cmp	r3, #0
 8007178:	d015      	beq.n	80071a6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800717a:	4b34      	ldr	r3, [pc, #208]	@ (800724c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800717c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800717e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007182:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007186:	4b31      	ldr	r3, [pc, #196]	@ (800724c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007188:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800718a:	4a30      	ldr	r2, [pc, #192]	@ (800724c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800718c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007190:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007192:	4b2e      	ldr	r3, [pc, #184]	@ (800724c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007194:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007196:	4a2d      	ldr	r2, [pc, #180]	@ (800724c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007198:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800719c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800719e:	4a2b      	ldr	r2, [pc, #172]	@ (800724c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80071a0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80071a4:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80071a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071aa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80071ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80071b2:	d118      	bne.n	80071e6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071b4:	f7fa fd92 	bl	8001cdc <HAL_GetTick>
 80071b8:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80071bc:	e00d      	b.n	80071da <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80071be:	f7fa fd8d 	bl	8001cdc <HAL_GetTick>
 80071c2:	4602      	mov	r2, r0
 80071c4:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80071c8:	1ad2      	subs	r2, r2, r3
 80071ca:	f241 3388 	movw	r3, #5000	@ 0x1388
 80071ce:	429a      	cmp	r2, r3
 80071d0:	d903      	bls.n	80071da <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80071d2:	2303      	movs	r3, #3
 80071d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 80071d8:	e005      	b.n	80071e6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80071da:	4b1c      	ldr	r3, [pc, #112]	@ (800724c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80071dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80071de:	f003 0302 	and.w	r3, r3, #2
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d0eb      	beq.n	80071be <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80071e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d129      	bne.n	8007242 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80071ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071f2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80071f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80071fa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80071fe:	d10e      	bne.n	800721e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8007200:	4b12      	ldr	r3, [pc, #72]	@ (800724c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007202:	691b      	ldr	r3, [r3, #16]
 8007204:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8007208:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800720c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007210:	091a      	lsrs	r2, r3, #4
 8007212:	4b10      	ldr	r3, [pc, #64]	@ (8007254 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8007214:	4013      	ands	r3, r2
 8007216:	4a0d      	ldr	r2, [pc, #52]	@ (800724c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007218:	430b      	orrs	r3, r1
 800721a:	6113      	str	r3, [r2, #16]
 800721c:	e005      	b.n	800722a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800721e:	4b0b      	ldr	r3, [pc, #44]	@ (800724c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007220:	691b      	ldr	r3, [r3, #16]
 8007222:	4a0a      	ldr	r2, [pc, #40]	@ (800724c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007224:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8007228:	6113      	str	r3, [r2, #16]
 800722a:	4b08      	ldr	r3, [pc, #32]	@ (800724c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800722c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800722e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007232:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007236:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800723a:	4a04      	ldr	r2, [pc, #16]	@ (800724c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800723c:	430b      	orrs	r3, r1
 800723e:	6713      	str	r3, [r2, #112]	@ 0x70
 8007240:	e00e      	b.n	8007260 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007242:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007246:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800724a:	e009      	b.n	8007260 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800724c:	58024400 	.word	0x58024400
 8007250:	58024800 	.word	0x58024800
 8007254:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007258:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800725c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007260:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007268:	f002 0301 	and.w	r3, r2, #1
 800726c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007270:	2300      	movs	r3, #0
 8007272:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007276:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800727a:	460b      	mov	r3, r1
 800727c:	4313      	orrs	r3, r2
 800727e:	f000 8089 	beq.w	8007394 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8007282:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007286:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007288:	2b28      	cmp	r3, #40	@ 0x28
 800728a:	d86b      	bhi.n	8007364 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800728c:	a201      	add	r2, pc, #4	@ (adr r2, 8007294 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800728e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007292:	bf00      	nop
 8007294:	0800736d 	.word	0x0800736d
 8007298:	08007365 	.word	0x08007365
 800729c:	08007365 	.word	0x08007365
 80072a0:	08007365 	.word	0x08007365
 80072a4:	08007365 	.word	0x08007365
 80072a8:	08007365 	.word	0x08007365
 80072ac:	08007365 	.word	0x08007365
 80072b0:	08007365 	.word	0x08007365
 80072b4:	08007339 	.word	0x08007339
 80072b8:	08007365 	.word	0x08007365
 80072bc:	08007365 	.word	0x08007365
 80072c0:	08007365 	.word	0x08007365
 80072c4:	08007365 	.word	0x08007365
 80072c8:	08007365 	.word	0x08007365
 80072cc:	08007365 	.word	0x08007365
 80072d0:	08007365 	.word	0x08007365
 80072d4:	0800734f 	.word	0x0800734f
 80072d8:	08007365 	.word	0x08007365
 80072dc:	08007365 	.word	0x08007365
 80072e0:	08007365 	.word	0x08007365
 80072e4:	08007365 	.word	0x08007365
 80072e8:	08007365 	.word	0x08007365
 80072ec:	08007365 	.word	0x08007365
 80072f0:	08007365 	.word	0x08007365
 80072f4:	0800736d 	.word	0x0800736d
 80072f8:	08007365 	.word	0x08007365
 80072fc:	08007365 	.word	0x08007365
 8007300:	08007365 	.word	0x08007365
 8007304:	08007365 	.word	0x08007365
 8007308:	08007365 	.word	0x08007365
 800730c:	08007365 	.word	0x08007365
 8007310:	08007365 	.word	0x08007365
 8007314:	0800736d 	.word	0x0800736d
 8007318:	08007365 	.word	0x08007365
 800731c:	08007365 	.word	0x08007365
 8007320:	08007365 	.word	0x08007365
 8007324:	08007365 	.word	0x08007365
 8007328:	08007365 	.word	0x08007365
 800732c:	08007365 	.word	0x08007365
 8007330:	08007365 	.word	0x08007365
 8007334:	0800736d 	.word	0x0800736d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007338:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800733c:	3308      	adds	r3, #8
 800733e:	2101      	movs	r1, #1
 8007340:	4618      	mov	r0, r3
 8007342:	f001 fe95 	bl	8009070 <RCCEx_PLL2_Config>
 8007346:	4603      	mov	r3, r0
 8007348:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800734c:	e00f      	b.n	800736e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800734e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007352:	3328      	adds	r3, #40	@ 0x28
 8007354:	2101      	movs	r1, #1
 8007356:	4618      	mov	r0, r3
 8007358:	f001 ff3c 	bl	80091d4 <RCCEx_PLL3_Config>
 800735c:	4603      	mov	r3, r0
 800735e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007362:	e004      	b.n	800736e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007364:	2301      	movs	r3, #1
 8007366:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800736a:	e000      	b.n	800736e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800736c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800736e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007372:	2b00      	cmp	r3, #0
 8007374:	d10a      	bne.n	800738c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007376:	4bbf      	ldr	r3, [pc, #764]	@ (8007674 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007378:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800737a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800737e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007382:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007384:	4abb      	ldr	r2, [pc, #748]	@ (8007674 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007386:	430b      	orrs	r3, r1
 8007388:	6553      	str	r3, [r2, #84]	@ 0x54
 800738a:	e003      	b.n	8007394 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800738c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007390:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007394:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800739c:	f002 0302 	and.w	r3, r2, #2
 80073a0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80073a4:	2300      	movs	r3, #0
 80073a6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80073aa:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80073ae:	460b      	mov	r3, r1
 80073b0:	4313      	orrs	r3, r2
 80073b2:	d041      	beq.n	8007438 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80073b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073b8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80073ba:	2b05      	cmp	r3, #5
 80073bc:	d824      	bhi.n	8007408 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80073be:	a201      	add	r2, pc, #4	@ (adr r2, 80073c4 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80073c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073c4:	08007411 	.word	0x08007411
 80073c8:	080073dd 	.word	0x080073dd
 80073cc:	080073f3 	.word	0x080073f3
 80073d0:	08007411 	.word	0x08007411
 80073d4:	08007411 	.word	0x08007411
 80073d8:	08007411 	.word	0x08007411
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80073dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073e0:	3308      	adds	r3, #8
 80073e2:	2101      	movs	r1, #1
 80073e4:	4618      	mov	r0, r3
 80073e6:	f001 fe43 	bl	8009070 <RCCEx_PLL2_Config>
 80073ea:	4603      	mov	r3, r0
 80073ec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80073f0:	e00f      	b.n	8007412 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80073f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073f6:	3328      	adds	r3, #40	@ 0x28
 80073f8:	2101      	movs	r1, #1
 80073fa:	4618      	mov	r0, r3
 80073fc:	f001 feea 	bl	80091d4 <RCCEx_PLL3_Config>
 8007400:	4603      	mov	r3, r0
 8007402:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007406:	e004      	b.n	8007412 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007408:	2301      	movs	r3, #1
 800740a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800740e:	e000      	b.n	8007412 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8007410:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007412:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007416:	2b00      	cmp	r3, #0
 8007418:	d10a      	bne.n	8007430 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800741a:	4b96      	ldr	r3, [pc, #600]	@ (8007674 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800741c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800741e:	f023 0107 	bic.w	r1, r3, #7
 8007422:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007426:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007428:	4a92      	ldr	r2, [pc, #584]	@ (8007674 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800742a:	430b      	orrs	r3, r1
 800742c:	6553      	str	r3, [r2, #84]	@ 0x54
 800742e:	e003      	b.n	8007438 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007430:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007434:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007438:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800743c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007440:	f002 0304 	and.w	r3, r2, #4
 8007444:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007448:	2300      	movs	r3, #0
 800744a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800744e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8007452:	460b      	mov	r3, r1
 8007454:	4313      	orrs	r3, r2
 8007456:	d044      	beq.n	80074e2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8007458:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800745c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007460:	2b05      	cmp	r3, #5
 8007462:	d825      	bhi.n	80074b0 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8007464:	a201      	add	r2, pc, #4	@ (adr r2, 800746c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8007466:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800746a:	bf00      	nop
 800746c:	080074b9 	.word	0x080074b9
 8007470:	08007485 	.word	0x08007485
 8007474:	0800749b 	.word	0x0800749b
 8007478:	080074b9 	.word	0x080074b9
 800747c:	080074b9 	.word	0x080074b9
 8007480:	080074b9 	.word	0x080074b9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007484:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007488:	3308      	adds	r3, #8
 800748a:	2101      	movs	r1, #1
 800748c:	4618      	mov	r0, r3
 800748e:	f001 fdef 	bl	8009070 <RCCEx_PLL2_Config>
 8007492:	4603      	mov	r3, r0
 8007494:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007498:	e00f      	b.n	80074ba <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800749a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800749e:	3328      	adds	r3, #40	@ 0x28
 80074a0:	2101      	movs	r1, #1
 80074a2:	4618      	mov	r0, r3
 80074a4:	f001 fe96 	bl	80091d4 <RCCEx_PLL3_Config>
 80074a8:	4603      	mov	r3, r0
 80074aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80074ae:	e004      	b.n	80074ba <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80074b0:	2301      	movs	r3, #1
 80074b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80074b6:	e000      	b.n	80074ba <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80074b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80074ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d10b      	bne.n	80074da <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80074c2:	4b6c      	ldr	r3, [pc, #432]	@ (8007674 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80074c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80074c6:	f023 0107 	bic.w	r1, r3, #7
 80074ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80074d2:	4a68      	ldr	r2, [pc, #416]	@ (8007674 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80074d4:	430b      	orrs	r3, r1
 80074d6:	6593      	str	r3, [r2, #88]	@ 0x58
 80074d8:	e003      	b.n	80074e2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80074de:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80074e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074ea:	f002 0320 	and.w	r3, r2, #32
 80074ee:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80074f2:	2300      	movs	r3, #0
 80074f4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80074f8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80074fc:	460b      	mov	r3, r1
 80074fe:	4313      	orrs	r3, r2
 8007500:	d055      	beq.n	80075ae <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8007502:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007506:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800750a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800750e:	d033      	beq.n	8007578 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8007510:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007514:	d82c      	bhi.n	8007570 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007516:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800751a:	d02f      	beq.n	800757c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800751c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007520:	d826      	bhi.n	8007570 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007522:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007526:	d02b      	beq.n	8007580 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8007528:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800752c:	d820      	bhi.n	8007570 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800752e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007532:	d012      	beq.n	800755a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8007534:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007538:	d81a      	bhi.n	8007570 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800753a:	2b00      	cmp	r3, #0
 800753c:	d022      	beq.n	8007584 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800753e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007542:	d115      	bne.n	8007570 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007544:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007548:	3308      	adds	r3, #8
 800754a:	2100      	movs	r1, #0
 800754c:	4618      	mov	r0, r3
 800754e:	f001 fd8f 	bl	8009070 <RCCEx_PLL2_Config>
 8007552:	4603      	mov	r3, r0
 8007554:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007558:	e015      	b.n	8007586 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800755a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800755e:	3328      	adds	r3, #40	@ 0x28
 8007560:	2102      	movs	r1, #2
 8007562:	4618      	mov	r0, r3
 8007564:	f001 fe36 	bl	80091d4 <RCCEx_PLL3_Config>
 8007568:	4603      	mov	r3, r0
 800756a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800756e:	e00a      	b.n	8007586 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007570:	2301      	movs	r3, #1
 8007572:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007576:	e006      	b.n	8007586 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007578:	bf00      	nop
 800757a:	e004      	b.n	8007586 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800757c:	bf00      	nop
 800757e:	e002      	b.n	8007586 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007580:	bf00      	nop
 8007582:	e000      	b.n	8007586 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007584:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007586:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800758a:	2b00      	cmp	r3, #0
 800758c:	d10b      	bne.n	80075a6 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800758e:	4b39      	ldr	r3, [pc, #228]	@ (8007674 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007590:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007592:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8007596:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800759a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800759e:	4a35      	ldr	r2, [pc, #212]	@ (8007674 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80075a0:	430b      	orrs	r3, r1
 80075a2:	6553      	str	r3, [r2, #84]	@ 0x54
 80075a4:	e003      	b.n	80075ae <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80075aa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80075ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075b6:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80075ba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80075be:	2300      	movs	r3, #0
 80075c0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80075c4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80075c8:	460b      	mov	r3, r1
 80075ca:	4313      	orrs	r3, r2
 80075cc:	d058      	beq.n	8007680 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80075ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075d2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80075d6:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80075da:	d033      	beq.n	8007644 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80075dc:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80075e0:	d82c      	bhi.n	800763c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80075e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80075e6:	d02f      	beq.n	8007648 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80075e8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80075ec:	d826      	bhi.n	800763c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80075ee:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80075f2:	d02b      	beq.n	800764c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80075f4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80075f8:	d820      	bhi.n	800763c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80075fa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80075fe:	d012      	beq.n	8007626 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8007600:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007604:	d81a      	bhi.n	800763c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007606:	2b00      	cmp	r3, #0
 8007608:	d022      	beq.n	8007650 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800760a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800760e:	d115      	bne.n	800763c <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007610:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007614:	3308      	adds	r3, #8
 8007616:	2100      	movs	r1, #0
 8007618:	4618      	mov	r0, r3
 800761a:	f001 fd29 	bl	8009070 <RCCEx_PLL2_Config>
 800761e:	4603      	mov	r3, r0
 8007620:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007624:	e015      	b.n	8007652 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007626:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800762a:	3328      	adds	r3, #40	@ 0x28
 800762c:	2102      	movs	r1, #2
 800762e:	4618      	mov	r0, r3
 8007630:	f001 fdd0 	bl	80091d4 <RCCEx_PLL3_Config>
 8007634:	4603      	mov	r3, r0
 8007636:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800763a:	e00a      	b.n	8007652 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800763c:	2301      	movs	r3, #1
 800763e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007642:	e006      	b.n	8007652 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007644:	bf00      	nop
 8007646:	e004      	b.n	8007652 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007648:	bf00      	nop
 800764a:	e002      	b.n	8007652 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800764c:	bf00      	nop
 800764e:	e000      	b.n	8007652 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007650:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007652:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007656:	2b00      	cmp	r3, #0
 8007658:	d10e      	bne.n	8007678 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800765a:	4b06      	ldr	r3, [pc, #24]	@ (8007674 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800765c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800765e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8007662:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007666:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800766a:	4a02      	ldr	r2, [pc, #8]	@ (8007674 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800766c:	430b      	orrs	r3, r1
 800766e:	6593      	str	r3, [r2, #88]	@ 0x58
 8007670:	e006      	b.n	8007680 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8007672:	bf00      	nop
 8007674:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007678:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800767c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007680:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007684:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007688:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800768c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007690:	2300      	movs	r3, #0
 8007692:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007696:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800769a:	460b      	mov	r3, r1
 800769c:	4313      	orrs	r3, r2
 800769e:	d055      	beq.n	800774c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80076a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076a4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80076a8:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80076ac:	d033      	beq.n	8007716 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80076ae:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80076b2:	d82c      	bhi.n	800770e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80076b4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80076b8:	d02f      	beq.n	800771a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80076ba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80076be:	d826      	bhi.n	800770e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80076c0:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80076c4:	d02b      	beq.n	800771e <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80076c6:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80076ca:	d820      	bhi.n	800770e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80076cc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80076d0:	d012      	beq.n	80076f8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80076d2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80076d6:	d81a      	bhi.n	800770e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d022      	beq.n	8007722 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80076dc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80076e0:	d115      	bne.n	800770e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80076e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076e6:	3308      	adds	r3, #8
 80076e8:	2100      	movs	r1, #0
 80076ea:	4618      	mov	r0, r3
 80076ec:	f001 fcc0 	bl	8009070 <RCCEx_PLL2_Config>
 80076f0:	4603      	mov	r3, r0
 80076f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80076f6:	e015      	b.n	8007724 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80076f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076fc:	3328      	adds	r3, #40	@ 0x28
 80076fe:	2102      	movs	r1, #2
 8007700:	4618      	mov	r0, r3
 8007702:	f001 fd67 	bl	80091d4 <RCCEx_PLL3_Config>
 8007706:	4603      	mov	r3, r0
 8007708:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800770c:	e00a      	b.n	8007724 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800770e:	2301      	movs	r3, #1
 8007710:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007714:	e006      	b.n	8007724 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007716:	bf00      	nop
 8007718:	e004      	b.n	8007724 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800771a:	bf00      	nop
 800771c:	e002      	b.n	8007724 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800771e:	bf00      	nop
 8007720:	e000      	b.n	8007724 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007722:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007724:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007728:	2b00      	cmp	r3, #0
 800772a:	d10b      	bne.n	8007744 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800772c:	4ba1      	ldr	r3, [pc, #644]	@ (80079b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800772e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007730:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8007734:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007738:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800773c:	4a9d      	ldr	r2, [pc, #628]	@ (80079b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800773e:	430b      	orrs	r3, r1
 8007740:	6593      	str	r3, [r2, #88]	@ 0x58
 8007742:	e003      	b.n	800774c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007744:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007748:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800774c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007750:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007754:	f002 0308 	and.w	r3, r2, #8
 8007758:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800775c:	2300      	movs	r3, #0
 800775e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007762:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8007766:	460b      	mov	r3, r1
 8007768:	4313      	orrs	r3, r2
 800776a:	d01e      	beq.n	80077aa <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800776c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007770:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007774:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007778:	d10c      	bne.n	8007794 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800777a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800777e:	3328      	adds	r3, #40	@ 0x28
 8007780:	2102      	movs	r1, #2
 8007782:	4618      	mov	r0, r3
 8007784:	f001 fd26 	bl	80091d4 <RCCEx_PLL3_Config>
 8007788:	4603      	mov	r3, r0
 800778a:	2b00      	cmp	r3, #0
 800778c:	d002      	beq.n	8007794 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800778e:	2301      	movs	r3, #1
 8007790:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007794:	4b87      	ldr	r3, [pc, #540]	@ (80079b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007796:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007798:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800779c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80077a4:	4a83      	ldr	r2, [pc, #524]	@ (80079b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80077a6:	430b      	orrs	r3, r1
 80077a8:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80077aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077b2:	f002 0310 	and.w	r3, r2, #16
 80077b6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80077ba:	2300      	movs	r3, #0
 80077bc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80077c0:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80077c4:	460b      	mov	r3, r1
 80077c6:	4313      	orrs	r3, r2
 80077c8:	d01e      	beq.n	8007808 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80077ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80077d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80077d6:	d10c      	bne.n	80077f2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80077d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077dc:	3328      	adds	r3, #40	@ 0x28
 80077de:	2102      	movs	r1, #2
 80077e0:	4618      	mov	r0, r3
 80077e2:	f001 fcf7 	bl	80091d4 <RCCEx_PLL3_Config>
 80077e6:	4603      	mov	r3, r0
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d002      	beq.n	80077f2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80077ec:	2301      	movs	r3, #1
 80077ee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80077f2:	4b70      	ldr	r3, [pc, #448]	@ (80079b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80077f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80077f6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80077fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007802:	4a6c      	ldr	r2, [pc, #432]	@ (80079b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007804:	430b      	orrs	r3, r1
 8007806:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007808:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800780c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007810:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8007814:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007818:	2300      	movs	r3, #0
 800781a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800781e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8007822:	460b      	mov	r3, r1
 8007824:	4313      	orrs	r3, r2
 8007826:	d03e      	beq.n	80078a6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8007828:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800782c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007830:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007834:	d022      	beq.n	800787c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8007836:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800783a:	d81b      	bhi.n	8007874 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800783c:	2b00      	cmp	r3, #0
 800783e:	d003      	beq.n	8007848 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8007840:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007844:	d00b      	beq.n	800785e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8007846:	e015      	b.n	8007874 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007848:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800784c:	3308      	adds	r3, #8
 800784e:	2100      	movs	r1, #0
 8007850:	4618      	mov	r0, r3
 8007852:	f001 fc0d 	bl	8009070 <RCCEx_PLL2_Config>
 8007856:	4603      	mov	r3, r0
 8007858:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800785c:	e00f      	b.n	800787e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800785e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007862:	3328      	adds	r3, #40	@ 0x28
 8007864:	2102      	movs	r1, #2
 8007866:	4618      	mov	r0, r3
 8007868:	f001 fcb4 	bl	80091d4 <RCCEx_PLL3_Config>
 800786c:	4603      	mov	r3, r0
 800786e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007872:	e004      	b.n	800787e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007874:	2301      	movs	r3, #1
 8007876:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800787a:	e000      	b.n	800787e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800787c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800787e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007882:	2b00      	cmp	r3, #0
 8007884:	d10b      	bne.n	800789e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007886:	4b4b      	ldr	r3, [pc, #300]	@ (80079b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007888:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800788a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800788e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007892:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007896:	4a47      	ldr	r2, [pc, #284]	@ (80079b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007898:	430b      	orrs	r3, r1
 800789a:	6593      	str	r3, [r2, #88]	@ 0x58
 800789c:	e003      	b.n	80078a6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800789e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80078a2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80078a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078ae:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80078b2:	67bb      	str	r3, [r7, #120]	@ 0x78
 80078b4:	2300      	movs	r3, #0
 80078b6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80078b8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80078bc:	460b      	mov	r3, r1
 80078be:	4313      	orrs	r3, r2
 80078c0:	d03b      	beq.n	800793a <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80078c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80078ca:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80078ce:	d01f      	beq.n	8007910 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80078d0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80078d4:	d818      	bhi.n	8007908 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80078d6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80078da:	d003      	beq.n	80078e4 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80078dc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80078e0:	d007      	beq.n	80078f2 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80078e2:	e011      	b.n	8007908 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80078e4:	4b33      	ldr	r3, [pc, #204]	@ (80079b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80078e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078e8:	4a32      	ldr	r2, [pc, #200]	@ (80079b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80078ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80078ee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80078f0:	e00f      	b.n	8007912 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80078f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078f6:	3328      	adds	r3, #40	@ 0x28
 80078f8:	2101      	movs	r1, #1
 80078fa:	4618      	mov	r0, r3
 80078fc:	f001 fc6a 	bl	80091d4 <RCCEx_PLL3_Config>
 8007900:	4603      	mov	r3, r0
 8007902:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8007906:	e004      	b.n	8007912 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007908:	2301      	movs	r3, #1
 800790a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800790e:	e000      	b.n	8007912 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8007910:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007912:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007916:	2b00      	cmp	r3, #0
 8007918:	d10b      	bne.n	8007932 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800791a:	4b26      	ldr	r3, [pc, #152]	@ (80079b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800791c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800791e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8007922:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007926:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800792a:	4a22      	ldr	r2, [pc, #136]	@ (80079b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800792c:	430b      	orrs	r3, r1
 800792e:	6553      	str	r3, [r2, #84]	@ 0x54
 8007930:	e003      	b.n	800793a <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007932:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007936:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800793a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800793e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007942:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8007946:	673b      	str	r3, [r7, #112]	@ 0x70
 8007948:	2300      	movs	r3, #0
 800794a:	677b      	str	r3, [r7, #116]	@ 0x74
 800794c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8007950:	460b      	mov	r3, r1
 8007952:	4313      	orrs	r3, r2
 8007954:	d034      	beq.n	80079c0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8007956:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800795a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800795c:	2b00      	cmp	r3, #0
 800795e:	d003      	beq.n	8007968 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8007960:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007964:	d007      	beq.n	8007976 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8007966:	e011      	b.n	800798c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007968:	4b12      	ldr	r3, [pc, #72]	@ (80079b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800796a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800796c:	4a11      	ldr	r2, [pc, #68]	@ (80079b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800796e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007972:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007974:	e00e      	b.n	8007994 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007976:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800797a:	3308      	adds	r3, #8
 800797c:	2102      	movs	r1, #2
 800797e:	4618      	mov	r0, r3
 8007980:	f001 fb76 	bl	8009070 <RCCEx_PLL2_Config>
 8007984:	4603      	mov	r3, r0
 8007986:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800798a:	e003      	b.n	8007994 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800798c:	2301      	movs	r3, #1
 800798e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007992:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007994:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007998:	2b00      	cmp	r3, #0
 800799a:	d10d      	bne.n	80079b8 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800799c:	4b05      	ldr	r3, [pc, #20]	@ (80079b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800799e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80079a0:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80079a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80079aa:	4a02      	ldr	r2, [pc, #8]	@ (80079b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80079ac:	430b      	orrs	r3, r1
 80079ae:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80079b0:	e006      	b.n	80079c0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80079b2:	bf00      	nop
 80079b4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079b8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80079bc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80079c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079c8:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80079cc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80079ce:	2300      	movs	r3, #0
 80079d0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80079d2:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80079d6:	460b      	mov	r3, r1
 80079d8:	4313      	orrs	r3, r2
 80079da:	d00c      	beq.n	80079f6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80079dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079e0:	3328      	adds	r3, #40	@ 0x28
 80079e2:	2102      	movs	r1, #2
 80079e4:	4618      	mov	r0, r3
 80079e6:	f001 fbf5 	bl	80091d4 <RCCEx_PLL3_Config>
 80079ea:	4603      	mov	r3, r0
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d002      	beq.n	80079f6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80079f0:	2301      	movs	r3, #1
 80079f2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80079f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079fe:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8007a02:	663b      	str	r3, [r7, #96]	@ 0x60
 8007a04:	2300      	movs	r3, #0
 8007a06:	667b      	str	r3, [r7, #100]	@ 0x64
 8007a08:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8007a0c:	460b      	mov	r3, r1
 8007a0e:	4313      	orrs	r3, r2
 8007a10:	d038      	beq.n	8007a84 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8007a12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a16:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007a1a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007a1e:	d018      	beq.n	8007a52 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8007a20:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007a24:	d811      	bhi.n	8007a4a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8007a26:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007a2a:	d014      	beq.n	8007a56 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8007a2c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007a30:	d80b      	bhi.n	8007a4a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d011      	beq.n	8007a5a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8007a36:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007a3a:	d106      	bne.n	8007a4a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007a3c:	4bc3      	ldr	r3, [pc, #780]	@ (8007d4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007a3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a40:	4ac2      	ldr	r2, [pc, #776]	@ (8007d4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007a42:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007a46:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8007a48:	e008      	b.n	8007a5c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007a4a:	2301      	movs	r3, #1
 8007a4c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007a50:	e004      	b.n	8007a5c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007a52:	bf00      	nop
 8007a54:	e002      	b.n	8007a5c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007a56:	bf00      	nop
 8007a58:	e000      	b.n	8007a5c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007a5a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007a5c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d10b      	bne.n	8007a7c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007a64:	4bb9      	ldr	r3, [pc, #740]	@ (8007d4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007a66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a68:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007a6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a70:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007a74:	4ab5      	ldr	r2, [pc, #724]	@ (8007d4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007a76:	430b      	orrs	r3, r1
 8007a78:	6553      	str	r3, [r2, #84]	@ 0x54
 8007a7a:	e003      	b.n	8007a84 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a7c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007a80:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007a84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a8c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8007a90:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007a92:	2300      	movs	r3, #0
 8007a94:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007a96:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8007a9a:	460b      	mov	r3, r1
 8007a9c:	4313      	orrs	r3, r2
 8007a9e:	d009      	beq.n	8007ab4 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007aa0:	4baa      	ldr	r3, [pc, #680]	@ (8007d4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007aa2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007aa4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8007aa8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007aac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007aae:	4aa7      	ldr	r2, [pc, #668]	@ (8007d4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007ab0:	430b      	orrs	r3, r1
 8007ab2:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8007ab4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007abc:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8007ac0:	653b      	str	r3, [r7, #80]	@ 0x50
 8007ac2:	2300      	movs	r3, #0
 8007ac4:	657b      	str	r3, [r7, #84]	@ 0x54
 8007ac6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8007aca:	460b      	mov	r3, r1
 8007acc:	4313      	orrs	r3, r2
 8007ace:	d00a      	beq.n	8007ae6 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8007ad0:	4b9e      	ldr	r3, [pc, #632]	@ (8007d4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007ad2:	691b      	ldr	r3, [r3, #16]
 8007ad4:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8007ad8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007adc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8007ae0:	4a9a      	ldr	r2, [pc, #616]	@ (8007d4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007ae2:	430b      	orrs	r3, r1
 8007ae4:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007ae6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007aea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aee:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8007af2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007af4:	2300      	movs	r3, #0
 8007af6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007af8:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8007afc:	460b      	mov	r3, r1
 8007afe:	4313      	orrs	r3, r2
 8007b00:	d009      	beq.n	8007b16 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007b02:	4b92      	ldr	r3, [pc, #584]	@ (8007d4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007b04:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b06:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8007b0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b0e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007b10:	4a8e      	ldr	r2, [pc, #568]	@ (8007d4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007b12:	430b      	orrs	r3, r1
 8007b14:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007b16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b1e:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8007b22:	643b      	str	r3, [r7, #64]	@ 0x40
 8007b24:	2300      	movs	r3, #0
 8007b26:	647b      	str	r3, [r7, #68]	@ 0x44
 8007b28:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8007b2c:	460b      	mov	r3, r1
 8007b2e:	4313      	orrs	r3, r2
 8007b30:	d00e      	beq.n	8007b50 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007b32:	4b86      	ldr	r3, [pc, #536]	@ (8007d4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007b34:	691b      	ldr	r3, [r3, #16]
 8007b36:	4a85      	ldr	r2, [pc, #532]	@ (8007d4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007b38:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007b3c:	6113      	str	r3, [r2, #16]
 8007b3e:	4b83      	ldr	r3, [pc, #524]	@ (8007d4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007b40:	6919      	ldr	r1, [r3, #16]
 8007b42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b46:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8007b4a:	4a80      	ldr	r2, [pc, #512]	@ (8007d4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007b4c:	430b      	orrs	r3, r1
 8007b4e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007b50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b58:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8007b5c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007b5e:	2300      	movs	r3, #0
 8007b60:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007b62:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8007b66:	460b      	mov	r3, r1
 8007b68:	4313      	orrs	r3, r2
 8007b6a:	d009      	beq.n	8007b80 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007b6c:	4b77      	ldr	r3, [pc, #476]	@ (8007d4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007b6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007b70:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8007b74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b7a:	4a74      	ldr	r2, [pc, #464]	@ (8007d4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007b7c:	430b      	orrs	r3, r1
 8007b7e:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007b80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b88:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8007b8c:	633b      	str	r3, [r7, #48]	@ 0x30
 8007b8e:	2300      	movs	r3, #0
 8007b90:	637b      	str	r3, [r7, #52]	@ 0x34
 8007b92:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8007b96:	460b      	mov	r3, r1
 8007b98:	4313      	orrs	r3, r2
 8007b9a:	d00a      	beq.n	8007bb2 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007b9c:	4b6b      	ldr	r3, [pc, #428]	@ (8007d4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007b9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ba0:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8007ba4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ba8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007bac:	4a67      	ldr	r2, [pc, #412]	@ (8007d4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007bae:	430b      	orrs	r3, r1
 8007bb0:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8007bb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bba:	2100      	movs	r1, #0
 8007bbc:	62b9      	str	r1, [r7, #40]	@ 0x28
 8007bbe:	f003 0301 	and.w	r3, r3, #1
 8007bc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007bc4:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8007bc8:	460b      	mov	r3, r1
 8007bca:	4313      	orrs	r3, r2
 8007bcc:	d011      	beq.n	8007bf2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007bce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bd2:	3308      	adds	r3, #8
 8007bd4:	2100      	movs	r1, #0
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	f001 fa4a 	bl	8009070 <RCCEx_PLL2_Config>
 8007bdc:	4603      	mov	r3, r0
 8007bde:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007be2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d003      	beq.n	8007bf2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007bea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007bee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8007bf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bfa:	2100      	movs	r1, #0
 8007bfc:	6239      	str	r1, [r7, #32]
 8007bfe:	f003 0302 	and.w	r3, r3, #2
 8007c02:	627b      	str	r3, [r7, #36]	@ 0x24
 8007c04:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8007c08:	460b      	mov	r3, r1
 8007c0a:	4313      	orrs	r3, r2
 8007c0c:	d011      	beq.n	8007c32 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007c0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c12:	3308      	adds	r3, #8
 8007c14:	2101      	movs	r1, #1
 8007c16:	4618      	mov	r0, r3
 8007c18:	f001 fa2a 	bl	8009070 <RCCEx_PLL2_Config>
 8007c1c:	4603      	mov	r3, r0
 8007c1e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007c22:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d003      	beq.n	8007c32 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c2a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007c2e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8007c32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c3a:	2100      	movs	r1, #0
 8007c3c:	61b9      	str	r1, [r7, #24]
 8007c3e:	f003 0304 	and.w	r3, r3, #4
 8007c42:	61fb      	str	r3, [r7, #28]
 8007c44:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8007c48:	460b      	mov	r3, r1
 8007c4a:	4313      	orrs	r3, r2
 8007c4c:	d011      	beq.n	8007c72 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007c4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c52:	3308      	adds	r3, #8
 8007c54:	2102      	movs	r1, #2
 8007c56:	4618      	mov	r0, r3
 8007c58:	f001 fa0a 	bl	8009070 <RCCEx_PLL2_Config>
 8007c5c:	4603      	mov	r3, r0
 8007c5e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007c62:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d003      	beq.n	8007c72 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c6a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007c6e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8007c72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c7a:	2100      	movs	r1, #0
 8007c7c:	6139      	str	r1, [r7, #16]
 8007c7e:	f003 0308 	and.w	r3, r3, #8
 8007c82:	617b      	str	r3, [r7, #20]
 8007c84:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007c88:	460b      	mov	r3, r1
 8007c8a:	4313      	orrs	r3, r2
 8007c8c:	d011      	beq.n	8007cb2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007c8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c92:	3328      	adds	r3, #40	@ 0x28
 8007c94:	2100      	movs	r1, #0
 8007c96:	4618      	mov	r0, r3
 8007c98:	f001 fa9c 	bl	80091d4 <RCCEx_PLL3_Config>
 8007c9c:	4603      	mov	r3, r0
 8007c9e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8007ca2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d003      	beq.n	8007cb2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007caa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007cae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8007cb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cba:	2100      	movs	r1, #0
 8007cbc:	60b9      	str	r1, [r7, #8]
 8007cbe:	f003 0310 	and.w	r3, r3, #16
 8007cc2:	60fb      	str	r3, [r7, #12]
 8007cc4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007cc8:	460b      	mov	r3, r1
 8007cca:	4313      	orrs	r3, r2
 8007ccc:	d011      	beq.n	8007cf2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007cce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cd2:	3328      	adds	r3, #40	@ 0x28
 8007cd4:	2101      	movs	r1, #1
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	f001 fa7c 	bl	80091d4 <RCCEx_PLL3_Config>
 8007cdc:	4603      	mov	r3, r0
 8007cde:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007ce2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d003      	beq.n	8007cf2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007cea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007cee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8007cf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cfa:	2100      	movs	r1, #0
 8007cfc:	6039      	str	r1, [r7, #0]
 8007cfe:	f003 0320 	and.w	r3, r3, #32
 8007d02:	607b      	str	r3, [r7, #4]
 8007d04:	e9d7 1200 	ldrd	r1, r2, [r7]
 8007d08:	460b      	mov	r3, r1
 8007d0a:	4313      	orrs	r3, r2
 8007d0c:	d011      	beq.n	8007d32 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007d0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d12:	3328      	adds	r3, #40	@ 0x28
 8007d14:	2102      	movs	r1, #2
 8007d16:	4618      	mov	r0, r3
 8007d18:	f001 fa5c 	bl	80091d4 <RCCEx_PLL3_Config>
 8007d1c:	4603      	mov	r3, r0
 8007d1e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007d22:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d003      	beq.n	8007d32 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d2a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007d2e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8007d32:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d101      	bne.n	8007d3e <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8007d3a:	2300      	movs	r3, #0
 8007d3c:	e000      	b.n	8007d40 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8007d3e:	2301      	movs	r3, #1
}
 8007d40:	4618      	mov	r0, r3
 8007d42:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8007d46:	46bd      	mov	sp, r7
 8007d48:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007d4c:	58024400 	.word	0x58024400

08007d50 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8007d50:	b580      	push	{r7, lr}
 8007d52:	b090      	sub	sp, #64	@ 0x40
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8007d5a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007d5e:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8007d62:	430b      	orrs	r3, r1
 8007d64:	f040 8094 	bne.w	8007e90 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8007d68:	4b9e      	ldr	r3, [pc, #632]	@ (8007fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007d6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007d6c:	f003 0307 	and.w	r3, r3, #7
 8007d70:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8007d72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d74:	2b04      	cmp	r3, #4
 8007d76:	f200 8087 	bhi.w	8007e88 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8007d7a:	a201      	add	r2, pc, #4	@ (adr r2, 8007d80 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8007d7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d80:	08007d95 	.word	0x08007d95
 8007d84:	08007dbd 	.word	0x08007dbd
 8007d88:	08007de5 	.word	0x08007de5
 8007d8c:	08007e81 	.word	0x08007e81
 8007d90:	08007e0d 	.word	0x08007e0d
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007d94:	4b93      	ldr	r3, [pc, #588]	@ (8007fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007d9c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007da0:	d108      	bne.n	8007db4 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007da2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007da6:	4618      	mov	r0, r3
 8007da8:	f001 f810 	bl	8008dcc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007dac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007dae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007db0:	f000 bd45 	b.w	800883e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007db4:	2300      	movs	r3, #0
 8007db6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007db8:	f000 bd41 	b.w	800883e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007dbc:	4b89      	ldr	r3, [pc, #548]	@ (8007fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007dc4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007dc8:	d108      	bne.n	8007ddc <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007dca:	f107 0318 	add.w	r3, r7, #24
 8007dce:	4618      	mov	r0, r3
 8007dd0:	f000 fd54 	bl	800887c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007dd4:	69bb      	ldr	r3, [r7, #24]
 8007dd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007dd8:	f000 bd31 	b.w	800883e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007ddc:	2300      	movs	r3, #0
 8007dde:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007de0:	f000 bd2d 	b.w	800883e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007de4:	4b7f      	ldr	r3, [pc, #508]	@ (8007fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007dec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007df0:	d108      	bne.n	8007e04 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007df2:	f107 030c 	add.w	r3, r7, #12
 8007df6:	4618      	mov	r0, r3
 8007df8:	f000 fe94 	bl	8008b24 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007e00:	f000 bd1d 	b.w	800883e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007e04:	2300      	movs	r3, #0
 8007e06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e08:	f000 bd19 	b.w	800883e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007e0c:	4b75      	ldr	r3, [pc, #468]	@ (8007fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007e0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007e10:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007e14:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007e16:	4b73      	ldr	r3, [pc, #460]	@ (8007fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	f003 0304 	and.w	r3, r3, #4
 8007e1e:	2b04      	cmp	r3, #4
 8007e20:	d10c      	bne.n	8007e3c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8007e22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d109      	bne.n	8007e3c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007e28:	4b6e      	ldr	r3, [pc, #440]	@ (8007fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	08db      	lsrs	r3, r3, #3
 8007e2e:	f003 0303 	and.w	r3, r3, #3
 8007e32:	4a6d      	ldr	r2, [pc, #436]	@ (8007fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007e34:	fa22 f303 	lsr.w	r3, r2, r3
 8007e38:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007e3a:	e01f      	b.n	8007e7c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007e3c:	4b69      	ldr	r3, [pc, #420]	@ (8007fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007e44:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007e48:	d106      	bne.n	8007e58 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8007e4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e4c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007e50:	d102      	bne.n	8007e58 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007e52:	4b66      	ldr	r3, [pc, #408]	@ (8007fec <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007e54:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007e56:	e011      	b.n	8007e7c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007e58:	4b62      	ldr	r3, [pc, #392]	@ (8007fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007e60:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007e64:	d106      	bne.n	8007e74 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8007e66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e68:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007e6c:	d102      	bne.n	8007e74 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007e6e:	4b60      	ldr	r3, [pc, #384]	@ (8007ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007e70:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007e72:	e003      	b.n	8007e7c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007e74:	2300      	movs	r3, #0
 8007e76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007e78:	f000 bce1 	b.w	800883e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007e7c:	f000 bcdf 	b.w	800883e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007e80:	4b5c      	ldr	r3, [pc, #368]	@ (8007ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8007e82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e84:	f000 bcdb 	b.w	800883e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007e88:	2300      	movs	r3, #0
 8007e8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e8c:	f000 bcd7 	b.w	800883e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8007e90:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007e94:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8007e98:	430b      	orrs	r3, r1
 8007e9a:	f040 80ad 	bne.w	8007ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8007e9e:	4b51      	ldr	r3, [pc, #324]	@ (8007fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007ea0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007ea2:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8007ea6:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8007ea8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007eaa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007eae:	d056      	beq.n	8007f5e <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8007eb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007eb2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007eb6:	f200 8090 	bhi.w	8007fda <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8007eba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ebc:	2bc0      	cmp	r3, #192	@ 0xc0
 8007ebe:	f000 8088 	beq.w	8007fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8007ec2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ec4:	2bc0      	cmp	r3, #192	@ 0xc0
 8007ec6:	f200 8088 	bhi.w	8007fda <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8007eca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ecc:	2b80      	cmp	r3, #128	@ 0x80
 8007ece:	d032      	beq.n	8007f36 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8007ed0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ed2:	2b80      	cmp	r3, #128	@ 0x80
 8007ed4:	f200 8081 	bhi.w	8007fda <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8007ed8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d003      	beq.n	8007ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8007ede:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ee0:	2b40      	cmp	r3, #64	@ 0x40
 8007ee2:	d014      	beq.n	8007f0e <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8007ee4:	e079      	b.n	8007fda <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007ee6:	4b3f      	ldr	r3, [pc, #252]	@ (8007fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007eee:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007ef2:	d108      	bne.n	8007f06 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007ef4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007ef8:	4618      	mov	r0, r3
 8007efa:	f000 ff67 	bl	8008dcc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007efe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f00:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007f02:	f000 bc9c 	b.w	800883e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007f06:	2300      	movs	r3, #0
 8007f08:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007f0a:	f000 bc98 	b.w	800883e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007f0e:	4b35      	ldr	r3, [pc, #212]	@ (8007fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007f16:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007f1a:	d108      	bne.n	8007f2e <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007f1c:	f107 0318 	add.w	r3, r7, #24
 8007f20:	4618      	mov	r0, r3
 8007f22:	f000 fcab 	bl	800887c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007f26:	69bb      	ldr	r3, [r7, #24]
 8007f28:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007f2a:	f000 bc88 	b.w	800883e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007f2e:	2300      	movs	r3, #0
 8007f30:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007f32:	f000 bc84 	b.w	800883e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007f36:	4b2b      	ldr	r3, [pc, #172]	@ (8007fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007f3e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007f42:	d108      	bne.n	8007f56 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007f44:	f107 030c 	add.w	r3, r7, #12
 8007f48:	4618      	mov	r0, r3
 8007f4a:	f000 fdeb 	bl	8008b24 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007f52:	f000 bc74 	b.w	800883e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007f56:	2300      	movs	r3, #0
 8007f58:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007f5a:	f000 bc70 	b.w	800883e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007f5e:	4b21      	ldr	r3, [pc, #132]	@ (8007fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007f60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007f62:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007f66:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007f68:	4b1e      	ldr	r3, [pc, #120]	@ (8007fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	f003 0304 	and.w	r3, r3, #4
 8007f70:	2b04      	cmp	r3, #4
 8007f72:	d10c      	bne.n	8007f8e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8007f74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d109      	bne.n	8007f8e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007f7a:	4b1a      	ldr	r3, [pc, #104]	@ (8007fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	08db      	lsrs	r3, r3, #3
 8007f80:	f003 0303 	and.w	r3, r3, #3
 8007f84:	4a18      	ldr	r2, [pc, #96]	@ (8007fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007f86:	fa22 f303 	lsr.w	r3, r2, r3
 8007f8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007f8c:	e01f      	b.n	8007fce <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007f8e:	4b15      	ldr	r3, [pc, #84]	@ (8007fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007f96:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007f9a:	d106      	bne.n	8007faa <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8007f9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f9e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007fa2:	d102      	bne.n	8007faa <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007fa4:	4b11      	ldr	r3, [pc, #68]	@ (8007fec <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007fa6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007fa8:	e011      	b.n	8007fce <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007faa:	4b0e      	ldr	r3, [pc, #56]	@ (8007fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007fb2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007fb6:	d106      	bne.n	8007fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8007fb8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007fba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007fbe:	d102      	bne.n	8007fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007fc0:	4b0b      	ldr	r3, [pc, #44]	@ (8007ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007fc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007fc4:	e003      	b.n	8007fce <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007fca:	f000 bc38 	b.w	800883e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007fce:	f000 bc36 	b.w	800883e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007fd2:	4b08      	ldr	r3, [pc, #32]	@ (8007ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8007fd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007fd6:	f000 bc32 	b.w	800883e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007fda:	2300      	movs	r3, #0
 8007fdc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007fde:	f000 bc2e 	b.w	800883e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007fe2:	bf00      	nop
 8007fe4:	58024400 	.word	0x58024400
 8007fe8:	03d09000 	.word	0x03d09000
 8007fec:	003d0900 	.word	0x003d0900
 8007ff0:	007a1200 	.word	0x007a1200
 8007ff4:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8007ff8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007ffc:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8008000:	430b      	orrs	r3, r1
 8008002:	f040 809c 	bne.w	800813e <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8008006:	4b9e      	ldr	r3, [pc, #632]	@ (8008280 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008008:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800800a:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800800e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8008010:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008012:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008016:	d054      	beq.n	80080c2 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8008018:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800801a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800801e:	f200 808b 	bhi.w	8008138 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8008022:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008024:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008028:	f000 8083 	beq.w	8008132 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800802c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800802e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008032:	f200 8081 	bhi.w	8008138 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8008036:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008038:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800803c:	d02f      	beq.n	800809e <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800803e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008040:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008044:	d878      	bhi.n	8008138 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8008046:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008048:	2b00      	cmp	r3, #0
 800804a:	d004      	beq.n	8008056 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800804c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800804e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008052:	d012      	beq.n	800807a <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8008054:	e070      	b.n	8008138 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008056:	4b8a      	ldr	r3, [pc, #552]	@ (8008280 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800805e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008062:	d107      	bne.n	8008074 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008064:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008068:	4618      	mov	r0, r3
 800806a:	f000 feaf 	bl	8008dcc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800806e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008070:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008072:	e3e4      	b.n	800883e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008074:	2300      	movs	r3, #0
 8008076:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008078:	e3e1      	b.n	800883e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800807a:	4b81      	ldr	r3, [pc, #516]	@ (8008280 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008082:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008086:	d107      	bne.n	8008098 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008088:	f107 0318 	add.w	r3, r7, #24
 800808c:	4618      	mov	r0, r3
 800808e:	f000 fbf5 	bl	800887c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008092:	69bb      	ldr	r3, [r7, #24]
 8008094:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008096:	e3d2      	b.n	800883e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008098:	2300      	movs	r3, #0
 800809a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800809c:	e3cf      	b.n	800883e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800809e:	4b78      	ldr	r3, [pc, #480]	@ (8008280 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80080a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80080aa:	d107      	bne.n	80080bc <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80080ac:	f107 030c 	add.w	r3, r7, #12
 80080b0:	4618      	mov	r0, r3
 80080b2:	f000 fd37 	bl	8008b24 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80080ba:	e3c0      	b.n	800883e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80080bc:	2300      	movs	r3, #0
 80080be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80080c0:	e3bd      	b.n	800883e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80080c2:	4b6f      	ldr	r3, [pc, #444]	@ (8008280 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80080c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80080c6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80080ca:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80080cc:	4b6c      	ldr	r3, [pc, #432]	@ (8008280 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	f003 0304 	and.w	r3, r3, #4
 80080d4:	2b04      	cmp	r3, #4
 80080d6:	d10c      	bne.n	80080f2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 80080d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d109      	bne.n	80080f2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80080de:	4b68      	ldr	r3, [pc, #416]	@ (8008280 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	08db      	lsrs	r3, r3, #3
 80080e4:	f003 0303 	and.w	r3, r3, #3
 80080e8:	4a66      	ldr	r2, [pc, #408]	@ (8008284 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80080ea:	fa22 f303 	lsr.w	r3, r2, r3
 80080ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80080f0:	e01e      	b.n	8008130 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80080f2:	4b63      	ldr	r3, [pc, #396]	@ (8008280 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80080fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80080fe:	d106      	bne.n	800810e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8008100:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008102:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008106:	d102      	bne.n	800810e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008108:	4b5f      	ldr	r3, [pc, #380]	@ (8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800810a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800810c:	e010      	b.n	8008130 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800810e:	4b5c      	ldr	r3, [pc, #368]	@ (8008280 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008116:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800811a:	d106      	bne.n	800812a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800811c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800811e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008122:	d102      	bne.n	800812a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008124:	4b59      	ldr	r3, [pc, #356]	@ (800828c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8008126:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008128:	e002      	b.n	8008130 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800812a:	2300      	movs	r3, #0
 800812c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800812e:	e386      	b.n	800883e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008130:	e385      	b.n	800883e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008132:	4b57      	ldr	r3, [pc, #348]	@ (8008290 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8008134:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008136:	e382      	b.n	800883e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8008138:	2300      	movs	r3, #0
 800813a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800813c:	e37f      	b.n	800883e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800813e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008142:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8008146:	430b      	orrs	r3, r1
 8008148:	f040 80a7 	bne.w	800829a <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800814c:	4b4c      	ldr	r3, [pc, #304]	@ (8008280 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800814e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008150:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8008154:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8008156:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008158:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800815c:	d055      	beq.n	800820a <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800815e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008160:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008164:	f200 8096 	bhi.w	8008294 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8008168:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800816a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800816e:	f000 8084 	beq.w	800827a <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8008172:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008174:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008178:	f200 808c 	bhi.w	8008294 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800817c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800817e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008182:	d030      	beq.n	80081e6 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8008184:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008186:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800818a:	f200 8083 	bhi.w	8008294 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800818e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008190:	2b00      	cmp	r3, #0
 8008192:	d004      	beq.n	800819e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8008194:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008196:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800819a:	d012      	beq.n	80081c2 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800819c:	e07a      	b.n	8008294 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800819e:	4b38      	ldr	r3, [pc, #224]	@ (8008280 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80081a6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80081aa:	d107      	bne.n	80081bc <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80081ac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80081b0:	4618      	mov	r0, r3
 80081b2:	f000 fe0b 	bl	8008dcc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80081b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80081ba:	e340      	b.n	800883e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80081bc:	2300      	movs	r3, #0
 80081be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80081c0:	e33d      	b.n	800883e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80081c2:	4b2f      	ldr	r3, [pc, #188]	@ (8008280 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80081ca:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80081ce:	d107      	bne.n	80081e0 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80081d0:	f107 0318 	add.w	r3, r7, #24
 80081d4:	4618      	mov	r0, r3
 80081d6:	f000 fb51 	bl	800887c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80081da:	69bb      	ldr	r3, [r7, #24]
 80081dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80081de:	e32e      	b.n	800883e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80081e0:	2300      	movs	r3, #0
 80081e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80081e4:	e32b      	b.n	800883e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80081e6:	4b26      	ldr	r3, [pc, #152]	@ (8008280 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80081ee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80081f2:	d107      	bne.n	8008204 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80081f4:	f107 030c 	add.w	r3, r7, #12
 80081f8:	4618      	mov	r0, r3
 80081fa:	f000 fc93 	bl	8008b24 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008202:	e31c      	b.n	800883e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008204:	2300      	movs	r3, #0
 8008206:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008208:	e319      	b.n	800883e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800820a:	4b1d      	ldr	r3, [pc, #116]	@ (8008280 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800820c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800820e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008212:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008214:	4b1a      	ldr	r3, [pc, #104]	@ (8008280 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	f003 0304 	and.w	r3, r3, #4
 800821c:	2b04      	cmp	r3, #4
 800821e:	d10c      	bne.n	800823a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8008220:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008222:	2b00      	cmp	r3, #0
 8008224:	d109      	bne.n	800823a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008226:	4b16      	ldr	r3, [pc, #88]	@ (8008280 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	08db      	lsrs	r3, r3, #3
 800822c:	f003 0303 	and.w	r3, r3, #3
 8008230:	4a14      	ldr	r2, [pc, #80]	@ (8008284 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8008232:	fa22 f303 	lsr.w	r3, r2, r3
 8008236:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008238:	e01e      	b.n	8008278 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800823a:	4b11      	ldr	r3, [pc, #68]	@ (8008280 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008242:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008246:	d106      	bne.n	8008256 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8008248:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800824a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800824e:	d102      	bne.n	8008256 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008250:	4b0d      	ldr	r3, [pc, #52]	@ (8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8008252:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008254:	e010      	b.n	8008278 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008256:	4b0a      	ldr	r3, [pc, #40]	@ (8008280 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800825e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008262:	d106      	bne.n	8008272 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8008264:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008266:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800826a:	d102      	bne.n	8008272 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800826c:	4b07      	ldr	r3, [pc, #28]	@ (800828c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800826e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008270:	e002      	b.n	8008278 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008272:	2300      	movs	r3, #0
 8008274:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008276:	e2e2      	b.n	800883e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008278:	e2e1      	b.n	800883e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800827a:	4b05      	ldr	r3, [pc, #20]	@ (8008290 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800827c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800827e:	e2de      	b.n	800883e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008280:	58024400 	.word	0x58024400
 8008284:	03d09000 	.word	0x03d09000
 8008288:	003d0900 	.word	0x003d0900
 800828c:	007a1200 	.word	0x007a1200
 8008290:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8008294:	2300      	movs	r3, #0
 8008296:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008298:	e2d1      	b.n	800883e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800829a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800829e:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 80082a2:	430b      	orrs	r3, r1
 80082a4:	f040 809c 	bne.w	80083e0 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 80082a8:	4b93      	ldr	r3, [pc, #588]	@ (80084f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80082aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80082ac:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80082b0:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80082b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082b4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80082b8:	d054      	beq.n	8008364 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 80082ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082bc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80082c0:	f200 808b 	bhi.w	80083da <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80082c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082c6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80082ca:	f000 8083 	beq.w	80083d4 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 80082ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082d0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80082d4:	f200 8081 	bhi.w	80083da <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80082d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082da:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80082de:	d02f      	beq.n	8008340 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 80082e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082e2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80082e6:	d878      	bhi.n	80083da <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80082e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d004      	beq.n	80082f8 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 80082ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082f0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80082f4:	d012      	beq.n	800831c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 80082f6:	e070      	b.n	80083da <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80082f8:	4b7f      	ldr	r3, [pc, #508]	@ (80084f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008300:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008304:	d107      	bne.n	8008316 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008306:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800830a:	4618      	mov	r0, r3
 800830c:	f000 fd5e 	bl	8008dcc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008310:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008312:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008314:	e293      	b.n	800883e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008316:	2300      	movs	r3, #0
 8008318:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800831a:	e290      	b.n	800883e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800831c:	4b76      	ldr	r3, [pc, #472]	@ (80084f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008324:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008328:	d107      	bne.n	800833a <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800832a:	f107 0318 	add.w	r3, r7, #24
 800832e:	4618      	mov	r0, r3
 8008330:	f000 faa4 	bl	800887c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008334:	69bb      	ldr	r3, [r7, #24]
 8008336:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008338:	e281      	b.n	800883e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800833a:	2300      	movs	r3, #0
 800833c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800833e:	e27e      	b.n	800883e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008340:	4b6d      	ldr	r3, [pc, #436]	@ (80084f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008348:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800834c:	d107      	bne.n	800835e <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800834e:	f107 030c 	add.w	r3, r7, #12
 8008352:	4618      	mov	r0, r3
 8008354:	f000 fbe6 	bl	8008b24 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800835c:	e26f      	b.n	800883e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800835e:	2300      	movs	r3, #0
 8008360:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008362:	e26c      	b.n	800883e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008364:	4b64      	ldr	r3, [pc, #400]	@ (80084f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008366:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008368:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800836c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800836e:	4b62      	ldr	r3, [pc, #392]	@ (80084f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	f003 0304 	and.w	r3, r3, #4
 8008376:	2b04      	cmp	r3, #4
 8008378:	d10c      	bne.n	8008394 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800837a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800837c:	2b00      	cmp	r3, #0
 800837e:	d109      	bne.n	8008394 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008380:	4b5d      	ldr	r3, [pc, #372]	@ (80084f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	08db      	lsrs	r3, r3, #3
 8008386:	f003 0303 	and.w	r3, r3, #3
 800838a:	4a5c      	ldr	r2, [pc, #368]	@ (80084fc <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800838c:	fa22 f303 	lsr.w	r3, r2, r3
 8008390:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008392:	e01e      	b.n	80083d2 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008394:	4b58      	ldr	r3, [pc, #352]	@ (80084f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800839c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80083a0:	d106      	bne.n	80083b0 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 80083a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80083a4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80083a8:	d102      	bne.n	80083b0 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80083aa:	4b55      	ldr	r3, [pc, #340]	@ (8008500 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80083ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80083ae:	e010      	b.n	80083d2 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80083b0:	4b51      	ldr	r3, [pc, #324]	@ (80084f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80083b8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80083bc:	d106      	bne.n	80083cc <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 80083be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80083c0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80083c4:	d102      	bne.n	80083cc <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80083c6:	4b4f      	ldr	r3, [pc, #316]	@ (8008504 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80083c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80083ca:	e002      	b.n	80083d2 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80083cc:	2300      	movs	r3, #0
 80083ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80083d0:	e235      	b.n	800883e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80083d2:	e234      	b.n	800883e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80083d4:	4b4c      	ldr	r3, [pc, #304]	@ (8008508 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 80083d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80083d8:	e231      	b.n	800883e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80083da:	2300      	movs	r3, #0
 80083dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80083de:	e22e      	b.n	800883e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 80083e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80083e4:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 80083e8:	430b      	orrs	r3, r1
 80083ea:	f040 808f 	bne.w	800850c <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 80083ee:	4b42      	ldr	r3, [pc, #264]	@ (80084f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80083f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80083f2:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 80083f6:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 80083f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083fa:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80083fe:	d06b      	beq.n	80084d8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8008400:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008402:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008406:	d874      	bhi.n	80084f2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008408:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800840a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800840e:	d056      	beq.n	80084be <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8008410:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008412:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008416:	d86c      	bhi.n	80084f2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008418:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800841a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800841e:	d03b      	beq.n	8008498 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8008420:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008422:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008426:	d864      	bhi.n	80084f2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008428:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800842a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800842e:	d021      	beq.n	8008474 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8008430:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008432:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008436:	d85c      	bhi.n	80084f2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008438:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800843a:	2b00      	cmp	r3, #0
 800843c:	d004      	beq.n	8008448 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800843e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008440:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008444:	d004      	beq.n	8008450 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8008446:	e054      	b.n	80084f2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8008448:	f7fe fa4c 	bl	80068e4 <HAL_RCC_GetPCLK1Freq>
 800844c:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800844e:	e1f6      	b.n	800883e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008450:	4b29      	ldr	r3, [pc, #164]	@ (80084f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008458:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800845c:	d107      	bne.n	800846e <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800845e:	f107 0318 	add.w	r3, r7, #24
 8008462:	4618      	mov	r0, r3
 8008464:	f000 fa0a 	bl	800887c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008468:	69fb      	ldr	r3, [r7, #28]
 800846a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800846c:	e1e7      	b.n	800883e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800846e:	2300      	movs	r3, #0
 8008470:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008472:	e1e4      	b.n	800883e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008474:	4b20      	ldr	r3, [pc, #128]	@ (80084f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800847c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008480:	d107      	bne.n	8008492 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008482:	f107 030c 	add.w	r3, r7, #12
 8008486:	4618      	mov	r0, r3
 8008488:	f000 fb4c 	bl	8008b24 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800848c:	693b      	ldr	r3, [r7, #16]
 800848e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008490:	e1d5      	b.n	800883e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008492:	2300      	movs	r3, #0
 8008494:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008496:	e1d2      	b.n	800883e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008498:	4b17      	ldr	r3, [pc, #92]	@ (80084f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	f003 0304 	and.w	r3, r3, #4
 80084a0:	2b04      	cmp	r3, #4
 80084a2:	d109      	bne.n	80084b8 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80084a4:	4b14      	ldr	r3, [pc, #80]	@ (80084f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	08db      	lsrs	r3, r3, #3
 80084aa:	f003 0303 	and.w	r3, r3, #3
 80084ae:	4a13      	ldr	r2, [pc, #76]	@ (80084fc <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 80084b0:	fa22 f303 	lsr.w	r3, r2, r3
 80084b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80084b6:	e1c2      	b.n	800883e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80084b8:	2300      	movs	r3, #0
 80084ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80084bc:	e1bf      	b.n	800883e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80084be:	4b0e      	ldr	r3, [pc, #56]	@ (80084f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80084c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80084ca:	d102      	bne.n	80084d2 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 80084cc:	4b0c      	ldr	r3, [pc, #48]	@ (8008500 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80084ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80084d0:	e1b5      	b.n	800883e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80084d2:	2300      	movs	r3, #0
 80084d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80084d6:	e1b2      	b.n	800883e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80084d8:	4b07      	ldr	r3, [pc, #28]	@ (80084f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80084e0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80084e4:	d102      	bne.n	80084ec <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 80084e6:	4b07      	ldr	r3, [pc, #28]	@ (8008504 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80084e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80084ea:	e1a8      	b.n	800883e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80084ec:	2300      	movs	r3, #0
 80084ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80084f0:	e1a5      	b.n	800883e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80084f2:	2300      	movs	r3, #0
 80084f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80084f6:	e1a2      	b.n	800883e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80084f8:	58024400 	.word	0x58024400
 80084fc:	03d09000 	.word	0x03d09000
 8008500:	003d0900 	.word	0x003d0900
 8008504:	007a1200 	.word	0x007a1200
 8008508:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800850c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008510:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8008514:	430b      	orrs	r3, r1
 8008516:	d173      	bne.n	8008600 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8008518:	4b9c      	ldr	r3, [pc, #624]	@ (800878c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800851a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800851c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8008520:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008522:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008524:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008528:	d02f      	beq.n	800858a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800852a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800852c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008530:	d863      	bhi.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8008532:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008534:	2b00      	cmp	r3, #0
 8008536:	d004      	beq.n	8008542 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8008538:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800853a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800853e:	d012      	beq.n	8008566 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8008540:	e05b      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008542:	4b92      	ldr	r3, [pc, #584]	@ (800878c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800854a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800854e:	d107      	bne.n	8008560 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008550:	f107 0318 	add.w	r3, r7, #24
 8008554:	4618      	mov	r0, r3
 8008556:	f000 f991 	bl	800887c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800855a:	69bb      	ldr	r3, [r7, #24]
 800855c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800855e:	e16e      	b.n	800883e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008560:	2300      	movs	r3, #0
 8008562:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008564:	e16b      	b.n	800883e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008566:	4b89      	ldr	r3, [pc, #548]	@ (800878c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800856e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008572:	d107      	bne.n	8008584 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008574:	f107 030c 	add.w	r3, r7, #12
 8008578:	4618      	mov	r0, r3
 800857a:	f000 fad3 	bl	8008b24 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800857e:	697b      	ldr	r3, [r7, #20]
 8008580:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008582:	e15c      	b.n	800883e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008584:	2300      	movs	r3, #0
 8008586:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008588:	e159      	b.n	800883e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800858a:	4b80      	ldr	r3, [pc, #512]	@ (800878c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800858c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800858e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008592:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008594:	4b7d      	ldr	r3, [pc, #500]	@ (800878c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	f003 0304 	and.w	r3, r3, #4
 800859c:	2b04      	cmp	r3, #4
 800859e:	d10c      	bne.n	80085ba <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 80085a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d109      	bne.n	80085ba <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80085a6:	4b79      	ldr	r3, [pc, #484]	@ (800878c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	08db      	lsrs	r3, r3, #3
 80085ac:	f003 0303 	and.w	r3, r3, #3
 80085b0:	4a77      	ldr	r2, [pc, #476]	@ (8008790 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 80085b2:	fa22 f303 	lsr.w	r3, r2, r3
 80085b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80085b8:	e01e      	b.n	80085f8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80085ba:	4b74      	ldr	r3, [pc, #464]	@ (800878c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80085c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80085c6:	d106      	bne.n	80085d6 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 80085c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80085ca:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80085ce:	d102      	bne.n	80085d6 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80085d0:	4b70      	ldr	r3, [pc, #448]	@ (8008794 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 80085d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80085d4:	e010      	b.n	80085f8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80085d6:	4b6d      	ldr	r3, [pc, #436]	@ (800878c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80085de:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80085e2:	d106      	bne.n	80085f2 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 80085e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80085e6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80085ea:	d102      	bne.n	80085f2 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80085ec:	4b6a      	ldr	r3, [pc, #424]	@ (8008798 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 80085ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80085f0:	e002      	b.n	80085f8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80085f2:	2300      	movs	r3, #0
 80085f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80085f6:	e122      	b.n	800883e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80085f8:	e121      	b.n	800883e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80085fa:	2300      	movs	r3, #0
 80085fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80085fe:	e11e      	b.n	800883e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8008600:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008604:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8008608:	430b      	orrs	r3, r1
 800860a:	d133      	bne.n	8008674 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800860c:	4b5f      	ldr	r3, [pc, #380]	@ (800878c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800860e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008610:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008614:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008616:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008618:	2b00      	cmp	r3, #0
 800861a:	d004      	beq.n	8008626 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800861c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800861e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008622:	d012      	beq.n	800864a <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8008624:	e023      	b.n	800866e <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008626:	4b59      	ldr	r3, [pc, #356]	@ (800878c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800862e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008632:	d107      	bne.n	8008644 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008634:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008638:	4618      	mov	r0, r3
 800863a:	f000 fbc7 	bl	8008dcc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800863e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008640:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008642:	e0fc      	b.n	800883e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008644:	2300      	movs	r3, #0
 8008646:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008648:	e0f9      	b.n	800883e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800864a:	4b50      	ldr	r3, [pc, #320]	@ (800878c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008652:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008656:	d107      	bne.n	8008668 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008658:	f107 0318 	add.w	r3, r7, #24
 800865c:	4618      	mov	r0, r3
 800865e:	f000 f90d 	bl	800887c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8008662:	6a3b      	ldr	r3, [r7, #32]
 8008664:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008666:	e0ea      	b.n	800883e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008668:	2300      	movs	r3, #0
 800866a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800866c:	e0e7      	b.n	800883e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800866e:	2300      	movs	r3, #0
 8008670:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008672:	e0e4      	b.n	800883e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8008674:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008678:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800867c:	430b      	orrs	r3, r1
 800867e:	f040 808d 	bne.w	800879c <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8008682:	4b42      	ldr	r3, [pc, #264]	@ (800878c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008684:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008686:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800868a:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800868c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800868e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008692:	d06b      	beq.n	800876c <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8008694:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008696:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800869a:	d874      	bhi.n	8008786 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800869c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800869e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80086a2:	d056      	beq.n	8008752 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 80086a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80086aa:	d86c      	bhi.n	8008786 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80086ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086ae:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80086b2:	d03b      	beq.n	800872c <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 80086b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086b6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80086ba:	d864      	bhi.n	8008786 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80086bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086be:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80086c2:	d021      	beq.n	8008708 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 80086c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086c6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80086ca:	d85c      	bhi.n	8008786 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80086cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d004      	beq.n	80086dc <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 80086d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086d4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80086d8:	d004      	beq.n	80086e4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 80086da:	e054      	b.n	8008786 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80086dc:	f000 f8b8 	bl	8008850 <HAL_RCCEx_GetD3PCLK1Freq>
 80086e0:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80086e2:	e0ac      	b.n	800883e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80086e4:	4b29      	ldr	r3, [pc, #164]	@ (800878c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80086ec:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80086f0:	d107      	bne.n	8008702 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80086f2:	f107 0318 	add.w	r3, r7, #24
 80086f6:	4618      	mov	r0, r3
 80086f8:	f000 f8c0 	bl	800887c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80086fc:	69fb      	ldr	r3, [r7, #28]
 80086fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008700:	e09d      	b.n	800883e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008702:	2300      	movs	r3, #0
 8008704:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008706:	e09a      	b.n	800883e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008708:	4b20      	ldr	r3, [pc, #128]	@ (800878c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008710:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008714:	d107      	bne.n	8008726 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008716:	f107 030c 	add.w	r3, r7, #12
 800871a:	4618      	mov	r0, r3
 800871c:	f000 fa02 	bl	8008b24 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008720:	693b      	ldr	r3, [r7, #16]
 8008722:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008724:	e08b      	b.n	800883e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008726:	2300      	movs	r3, #0
 8008728:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800872a:	e088      	b.n	800883e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800872c:	4b17      	ldr	r3, [pc, #92]	@ (800878c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	f003 0304 	and.w	r3, r3, #4
 8008734:	2b04      	cmp	r3, #4
 8008736:	d109      	bne.n	800874c <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008738:	4b14      	ldr	r3, [pc, #80]	@ (800878c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	08db      	lsrs	r3, r3, #3
 800873e:	f003 0303 	and.w	r3, r3, #3
 8008742:	4a13      	ldr	r2, [pc, #76]	@ (8008790 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8008744:	fa22 f303 	lsr.w	r3, r2, r3
 8008748:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800874a:	e078      	b.n	800883e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800874c:	2300      	movs	r3, #0
 800874e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008750:	e075      	b.n	800883e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008752:	4b0e      	ldr	r3, [pc, #56]	@ (800878c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800875a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800875e:	d102      	bne.n	8008766 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8008760:	4b0c      	ldr	r3, [pc, #48]	@ (8008794 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8008762:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008764:	e06b      	b.n	800883e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008766:	2300      	movs	r3, #0
 8008768:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800876a:	e068      	b.n	800883e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800876c:	4b07      	ldr	r3, [pc, #28]	@ (800878c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008774:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008778:	d102      	bne.n	8008780 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800877a:	4b07      	ldr	r3, [pc, #28]	@ (8008798 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800877c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800877e:	e05e      	b.n	800883e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008780:	2300      	movs	r3, #0
 8008782:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008784:	e05b      	b.n	800883e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8008786:	2300      	movs	r3, #0
 8008788:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800878a:	e058      	b.n	800883e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800878c:	58024400 	.word	0x58024400
 8008790:	03d09000 	.word	0x03d09000
 8008794:	003d0900 	.word	0x003d0900
 8008798:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800879c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80087a0:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 80087a4:	430b      	orrs	r3, r1
 80087a6:	d148      	bne.n	800883a <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 80087a8:	4b27      	ldr	r3, [pc, #156]	@ (8008848 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80087aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80087ac:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80087b0:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80087b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087b4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80087b8:	d02a      	beq.n	8008810 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 80087ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087bc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80087c0:	d838      	bhi.n	8008834 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 80087c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d004      	beq.n	80087d2 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 80087c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087ca:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80087ce:	d00d      	beq.n	80087ec <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 80087d0:	e030      	b.n	8008834 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80087d2:	4b1d      	ldr	r3, [pc, #116]	@ (8008848 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80087da:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80087de:	d102      	bne.n	80087e6 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 80087e0:	4b1a      	ldr	r3, [pc, #104]	@ (800884c <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 80087e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80087e4:	e02b      	b.n	800883e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80087e6:	2300      	movs	r3, #0
 80087e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80087ea:	e028      	b.n	800883e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80087ec:	4b16      	ldr	r3, [pc, #88]	@ (8008848 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80087f4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80087f8:	d107      	bne.n	800880a <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80087fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80087fe:	4618      	mov	r0, r3
 8008800:	f000 fae4 	bl	8008dcc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008804:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008806:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008808:	e019      	b.n	800883e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800880a:	2300      	movs	r3, #0
 800880c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800880e:	e016      	b.n	800883e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008810:	4b0d      	ldr	r3, [pc, #52]	@ (8008848 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008818:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800881c:	d107      	bne.n	800882e <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800881e:	f107 0318 	add.w	r3, r7, #24
 8008822:	4618      	mov	r0, r3
 8008824:	f000 f82a 	bl	800887c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008828:	69fb      	ldr	r3, [r7, #28]
 800882a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800882c:	e007      	b.n	800883e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800882e:	2300      	movs	r3, #0
 8008830:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008832:	e004      	b.n	800883e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008834:	2300      	movs	r3, #0
 8008836:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008838:	e001      	b.n	800883e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800883a:	2300      	movs	r3, #0
 800883c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800883e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8008840:	4618      	mov	r0, r3
 8008842:	3740      	adds	r7, #64	@ 0x40
 8008844:	46bd      	mov	sp, r7
 8008846:	bd80      	pop	{r7, pc}
 8008848:	58024400 	.word	0x58024400
 800884c:	007a1200 	.word	0x007a1200

08008850 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008850:	b580      	push	{r7, lr}
 8008852:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8008854:	f7fe f816 	bl	8006884 <HAL_RCC_GetHCLKFreq>
 8008858:	4602      	mov	r2, r0
 800885a:	4b06      	ldr	r3, [pc, #24]	@ (8008874 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800885c:	6a1b      	ldr	r3, [r3, #32]
 800885e:	091b      	lsrs	r3, r3, #4
 8008860:	f003 0307 	and.w	r3, r3, #7
 8008864:	4904      	ldr	r1, [pc, #16]	@ (8008878 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8008866:	5ccb      	ldrb	r3, [r1, r3]
 8008868:	f003 031f 	and.w	r3, r3, #31
 800886c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8008870:	4618      	mov	r0, r3
 8008872:	bd80      	pop	{r7, pc}
 8008874:	58024400 	.word	0x58024400
 8008878:	0800d650 	.word	0x0800d650

0800887c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800887c:	b480      	push	{r7}
 800887e:	b089      	sub	sp, #36	@ 0x24
 8008880:	af00      	add	r7, sp, #0
 8008882:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008884:	4ba1      	ldr	r3, [pc, #644]	@ (8008b0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008886:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008888:	f003 0303 	and.w	r3, r3, #3
 800888c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800888e:	4b9f      	ldr	r3, [pc, #636]	@ (8008b0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008890:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008892:	0b1b      	lsrs	r3, r3, #12
 8008894:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008898:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800889a:	4b9c      	ldr	r3, [pc, #624]	@ (8008b0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800889c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800889e:	091b      	lsrs	r3, r3, #4
 80088a0:	f003 0301 	and.w	r3, r3, #1
 80088a4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80088a6:	4b99      	ldr	r3, [pc, #612]	@ (8008b0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80088a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80088aa:	08db      	lsrs	r3, r3, #3
 80088ac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80088b0:	693a      	ldr	r2, [r7, #16]
 80088b2:	fb02 f303 	mul.w	r3, r2, r3
 80088b6:	ee07 3a90 	vmov	s15, r3
 80088ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088be:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80088c2:	697b      	ldr	r3, [r7, #20]
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	f000 8111 	beq.w	8008aec <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80088ca:	69bb      	ldr	r3, [r7, #24]
 80088cc:	2b02      	cmp	r3, #2
 80088ce:	f000 8083 	beq.w	80089d8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80088d2:	69bb      	ldr	r3, [r7, #24]
 80088d4:	2b02      	cmp	r3, #2
 80088d6:	f200 80a1 	bhi.w	8008a1c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80088da:	69bb      	ldr	r3, [r7, #24]
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d003      	beq.n	80088e8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80088e0:	69bb      	ldr	r3, [r7, #24]
 80088e2:	2b01      	cmp	r3, #1
 80088e4:	d056      	beq.n	8008994 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80088e6:	e099      	b.n	8008a1c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80088e8:	4b88      	ldr	r3, [pc, #544]	@ (8008b0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	f003 0320 	and.w	r3, r3, #32
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d02d      	beq.n	8008950 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80088f4:	4b85      	ldr	r3, [pc, #532]	@ (8008b0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	08db      	lsrs	r3, r3, #3
 80088fa:	f003 0303 	and.w	r3, r3, #3
 80088fe:	4a84      	ldr	r2, [pc, #528]	@ (8008b10 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8008900:	fa22 f303 	lsr.w	r3, r2, r3
 8008904:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008906:	68bb      	ldr	r3, [r7, #8]
 8008908:	ee07 3a90 	vmov	s15, r3
 800890c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008910:	697b      	ldr	r3, [r7, #20]
 8008912:	ee07 3a90 	vmov	s15, r3
 8008916:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800891a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800891e:	4b7b      	ldr	r3, [pc, #492]	@ (8008b0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008920:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008922:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008926:	ee07 3a90 	vmov	s15, r3
 800892a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800892e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008932:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8008b14 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008936:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800893a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800893e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008942:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008946:	ee67 7a27 	vmul.f32	s15, s14, s15
 800894a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800894e:	e087      	b.n	8008a60 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008950:	697b      	ldr	r3, [r7, #20]
 8008952:	ee07 3a90 	vmov	s15, r3
 8008956:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800895a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8008b18 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800895e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008962:	4b6a      	ldr	r3, [pc, #424]	@ (8008b0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008964:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008966:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800896a:	ee07 3a90 	vmov	s15, r3
 800896e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008972:	ed97 6a03 	vldr	s12, [r7, #12]
 8008976:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8008b14 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800897a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800897e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008982:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008986:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800898a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800898e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008992:	e065      	b.n	8008a60 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008994:	697b      	ldr	r3, [r7, #20]
 8008996:	ee07 3a90 	vmov	s15, r3
 800899a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800899e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8008b1c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80089a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80089a6:	4b59      	ldr	r3, [pc, #356]	@ (8008b0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80089a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089ae:	ee07 3a90 	vmov	s15, r3
 80089b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80089b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80089ba:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8008b14 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80089be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80089c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80089c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80089ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80089ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80089d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80089d6:	e043      	b.n	8008a60 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80089d8:	697b      	ldr	r3, [r7, #20]
 80089da:	ee07 3a90 	vmov	s15, r3
 80089de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089e2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8008b20 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80089e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80089ea:	4b48      	ldr	r3, [pc, #288]	@ (8008b0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80089ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089f2:	ee07 3a90 	vmov	s15, r3
 80089f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80089fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80089fe:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8008b14 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008a02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a0a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008a0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a16:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008a1a:	e021      	b.n	8008a60 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008a1c:	697b      	ldr	r3, [r7, #20]
 8008a1e:	ee07 3a90 	vmov	s15, r3
 8008a22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a26:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8008b1c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008a2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a2e:	4b37      	ldr	r3, [pc, #220]	@ (8008b0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008a30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a36:	ee07 3a90 	vmov	s15, r3
 8008a3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a3e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008a42:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8008b14 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008a46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a4e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008a52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a5a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008a5e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8008a60:	4b2a      	ldr	r3, [pc, #168]	@ (8008b0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008a62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a64:	0a5b      	lsrs	r3, r3, #9
 8008a66:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008a6a:	ee07 3a90 	vmov	s15, r3
 8008a6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a72:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008a76:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008a7a:	edd7 6a07 	vldr	s13, [r7, #28]
 8008a7e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008a82:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008a86:	ee17 2a90 	vmov	r2, s15
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8008a8e:	4b1f      	ldr	r3, [pc, #124]	@ (8008b0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008a90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a92:	0c1b      	lsrs	r3, r3, #16
 8008a94:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008a98:	ee07 3a90 	vmov	s15, r3
 8008a9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008aa0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008aa4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008aa8:	edd7 6a07 	vldr	s13, [r7, #28]
 8008aac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008ab0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008ab4:	ee17 2a90 	vmov	r2, s15
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8008abc:	4b13      	ldr	r3, [pc, #76]	@ (8008b0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008abe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ac0:	0e1b      	lsrs	r3, r3, #24
 8008ac2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008ac6:	ee07 3a90 	vmov	s15, r3
 8008aca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ace:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008ad2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008ad6:	edd7 6a07 	vldr	s13, [r7, #28]
 8008ada:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008ade:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008ae2:	ee17 2a90 	vmov	r2, s15
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008aea:	e008      	b.n	8008afe <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	2200      	movs	r2, #0
 8008af0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	2200      	movs	r2, #0
 8008af6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	2200      	movs	r2, #0
 8008afc:	609a      	str	r2, [r3, #8]
}
 8008afe:	bf00      	nop
 8008b00:	3724      	adds	r7, #36	@ 0x24
 8008b02:	46bd      	mov	sp, r7
 8008b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b08:	4770      	bx	lr
 8008b0a:	bf00      	nop
 8008b0c:	58024400 	.word	0x58024400
 8008b10:	03d09000 	.word	0x03d09000
 8008b14:	46000000 	.word	0x46000000
 8008b18:	4c742400 	.word	0x4c742400
 8008b1c:	4a742400 	.word	0x4a742400
 8008b20:	4af42400 	.word	0x4af42400

08008b24 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8008b24:	b480      	push	{r7}
 8008b26:	b089      	sub	sp, #36	@ 0x24
 8008b28:	af00      	add	r7, sp, #0
 8008b2a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008b2c:	4ba1      	ldr	r3, [pc, #644]	@ (8008db4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008b2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b30:	f003 0303 	and.w	r3, r3, #3
 8008b34:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8008b36:	4b9f      	ldr	r3, [pc, #636]	@ (8008db4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008b38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b3a:	0d1b      	lsrs	r3, r3, #20
 8008b3c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008b40:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008b42:	4b9c      	ldr	r3, [pc, #624]	@ (8008db4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008b44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b46:	0a1b      	lsrs	r3, r3, #8
 8008b48:	f003 0301 	and.w	r3, r3, #1
 8008b4c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8008b4e:	4b99      	ldr	r3, [pc, #612]	@ (8008db4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008b50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008b52:	08db      	lsrs	r3, r3, #3
 8008b54:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008b58:	693a      	ldr	r2, [r7, #16]
 8008b5a:	fb02 f303 	mul.w	r3, r2, r3
 8008b5e:	ee07 3a90 	vmov	s15, r3
 8008b62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b66:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8008b6a:	697b      	ldr	r3, [r7, #20]
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	f000 8111 	beq.w	8008d94 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8008b72:	69bb      	ldr	r3, [r7, #24]
 8008b74:	2b02      	cmp	r3, #2
 8008b76:	f000 8083 	beq.w	8008c80 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8008b7a:	69bb      	ldr	r3, [r7, #24]
 8008b7c:	2b02      	cmp	r3, #2
 8008b7e:	f200 80a1 	bhi.w	8008cc4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8008b82:	69bb      	ldr	r3, [r7, #24]
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d003      	beq.n	8008b90 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008b88:	69bb      	ldr	r3, [r7, #24]
 8008b8a:	2b01      	cmp	r3, #1
 8008b8c:	d056      	beq.n	8008c3c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8008b8e:	e099      	b.n	8008cc4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008b90:	4b88      	ldr	r3, [pc, #544]	@ (8008db4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	f003 0320 	and.w	r3, r3, #32
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d02d      	beq.n	8008bf8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008b9c:	4b85      	ldr	r3, [pc, #532]	@ (8008db4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	08db      	lsrs	r3, r3, #3
 8008ba2:	f003 0303 	and.w	r3, r3, #3
 8008ba6:	4a84      	ldr	r2, [pc, #528]	@ (8008db8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008ba8:	fa22 f303 	lsr.w	r3, r2, r3
 8008bac:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008bae:	68bb      	ldr	r3, [r7, #8]
 8008bb0:	ee07 3a90 	vmov	s15, r3
 8008bb4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008bb8:	697b      	ldr	r3, [r7, #20]
 8008bba:	ee07 3a90 	vmov	s15, r3
 8008bbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008bc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008bc6:	4b7b      	ldr	r3, [pc, #492]	@ (8008db4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008bc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008bca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008bce:	ee07 3a90 	vmov	s15, r3
 8008bd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008bd6:	ed97 6a03 	vldr	s12, [r7, #12]
 8008bda:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8008dbc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008bde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008be2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008be6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008bea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008bee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008bf2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008bf6:	e087      	b.n	8008d08 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008bf8:	697b      	ldr	r3, [r7, #20]
 8008bfa:	ee07 3a90 	vmov	s15, r3
 8008bfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c02:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8008dc0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8008c06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c0a:	4b6a      	ldr	r3, [pc, #424]	@ (8008db4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008c0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c12:	ee07 3a90 	vmov	s15, r3
 8008c16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c1a:	ed97 6a03 	vldr	s12, [r7, #12]
 8008c1e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8008dbc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008c22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c2a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008c2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c36:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008c3a:	e065      	b.n	8008d08 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008c3c:	697b      	ldr	r3, [r7, #20]
 8008c3e:	ee07 3a90 	vmov	s15, r3
 8008c42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c46:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8008dc4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008c4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c4e:	4b59      	ldr	r3, [pc, #356]	@ (8008db4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008c50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c56:	ee07 3a90 	vmov	s15, r3
 8008c5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c5e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008c62:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8008dbc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008c66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c6e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008c72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c7a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008c7e:	e043      	b.n	8008d08 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008c80:	697b      	ldr	r3, [r7, #20]
 8008c82:	ee07 3a90 	vmov	s15, r3
 8008c86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c8a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8008dc8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8008c8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c92:	4b48      	ldr	r3, [pc, #288]	@ (8008db4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008c94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c9a:	ee07 3a90 	vmov	s15, r3
 8008c9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ca2:	ed97 6a03 	vldr	s12, [r7, #12]
 8008ca6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8008dbc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008caa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008cae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008cb2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008cb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008cba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008cbe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008cc2:	e021      	b.n	8008d08 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008cc4:	697b      	ldr	r3, [r7, #20]
 8008cc6:	ee07 3a90 	vmov	s15, r3
 8008cca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008cce:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8008dc4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008cd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008cd6:	4b37      	ldr	r3, [pc, #220]	@ (8008db4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008cd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008cda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008cde:	ee07 3a90 	vmov	s15, r3
 8008ce2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ce6:	ed97 6a03 	vldr	s12, [r7, #12]
 8008cea:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8008dbc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008cee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008cf2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008cf6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008cfa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008cfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d02:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008d06:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8008d08:	4b2a      	ldr	r3, [pc, #168]	@ (8008db4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008d0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d0c:	0a5b      	lsrs	r3, r3, #9
 8008d0e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008d12:	ee07 3a90 	vmov	s15, r3
 8008d16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d1a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008d1e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008d22:	edd7 6a07 	vldr	s13, [r7, #28]
 8008d26:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008d2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008d2e:	ee17 2a90 	vmov	r2, s15
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8008d36:	4b1f      	ldr	r3, [pc, #124]	@ (8008db4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008d38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d3a:	0c1b      	lsrs	r3, r3, #16
 8008d3c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008d40:	ee07 3a90 	vmov	s15, r3
 8008d44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d48:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008d4c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008d50:	edd7 6a07 	vldr	s13, [r7, #28]
 8008d54:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008d58:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008d5c:	ee17 2a90 	vmov	r2, s15
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8008d64:	4b13      	ldr	r3, [pc, #76]	@ (8008db4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008d66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d68:	0e1b      	lsrs	r3, r3, #24
 8008d6a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008d6e:	ee07 3a90 	vmov	s15, r3
 8008d72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d76:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008d7a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008d7e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008d82:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008d86:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008d8a:	ee17 2a90 	vmov	r2, s15
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008d92:	e008      	b.n	8008da6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	2200      	movs	r2, #0
 8008d98:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	2200      	movs	r2, #0
 8008d9e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	2200      	movs	r2, #0
 8008da4:	609a      	str	r2, [r3, #8]
}
 8008da6:	bf00      	nop
 8008da8:	3724      	adds	r7, #36	@ 0x24
 8008daa:	46bd      	mov	sp, r7
 8008dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db0:	4770      	bx	lr
 8008db2:	bf00      	nop
 8008db4:	58024400 	.word	0x58024400
 8008db8:	03d09000 	.word	0x03d09000
 8008dbc:	46000000 	.word	0x46000000
 8008dc0:	4c742400 	.word	0x4c742400
 8008dc4:	4a742400 	.word	0x4a742400
 8008dc8:	4af42400 	.word	0x4af42400

08008dcc <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8008dcc:	b480      	push	{r7}
 8008dce:	b089      	sub	sp, #36	@ 0x24
 8008dd0:	af00      	add	r7, sp, #0
 8008dd2:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008dd4:	4ba0      	ldr	r3, [pc, #640]	@ (8009058 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008dd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008dd8:	f003 0303 	and.w	r3, r3, #3
 8008ddc:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8008dde:	4b9e      	ldr	r3, [pc, #632]	@ (8009058 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008de0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008de2:	091b      	lsrs	r3, r3, #4
 8008de4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008de8:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8008dea:	4b9b      	ldr	r3, [pc, #620]	@ (8009058 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008dec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008dee:	f003 0301 	and.w	r3, r3, #1
 8008df2:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8008df4:	4b98      	ldr	r3, [pc, #608]	@ (8009058 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008df6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008df8:	08db      	lsrs	r3, r3, #3
 8008dfa:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008dfe:	693a      	ldr	r2, [r7, #16]
 8008e00:	fb02 f303 	mul.w	r3, r2, r3
 8008e04:	ee07 3a90 	vmov	s15, r3
 8008e08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e0c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8008e10:	697b      	ldr	r3, [r7, #20]
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	f000 8111 	beq.w	800903a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8008e18:	69bb      	ldr	r3, [r7, #24]
 8008e1a:	2b02      	cmp	r3, #2
 8008e1c:	f000 8083 	beq.w	8008f26 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8008e20:	69bb      	ldr	r3, [r7, #24]
 8008e22:	2b02      	cmp	r3, #2
 8008e24:	f200 80a1 	bhi.w	8008f6a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8008e28:	69bb      	ldr	r3, [r7, #24]
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d003      	beq.n	8008e36 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8008e2e:	69bb      	ldr	r3, [r7, #24]
 8008e30:	2b01      	cmp	r3, #1
 8008e32:	d056      	beq.n	8008ee2 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8008e34:	e099      	b.n	8008f6a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008e36:	4b88      	ldr	r3, [pc, #544]	@ (8009058 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	f003 0320 	and.w	r3, r3, #32
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d02d      	beq.n	8008e9e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008e42:	4b85      	ldr	r3, [pc, #532]	@ (8009058 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	08db      	lsrs	r3, r3, #3
 8008e48:	f003 0303 	and.w	r3, r3, #3
 8008e4c:	4a83      	ldr	r2, [pc, #524]	@ (800905c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8008e4e:	fa22 f303 	lsr.w	r3, r2, r3
 8008e52:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008e54:	68bb      	ldr	r3, [r7, #8]
 8008e56:	ee07 3a90 	vmov	s15, r3
 8008e5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e5e:	697b      	ldr	r3, [r7, #20]
 8008e60:	ee07 3a90 	vmov	s15, r3
 8008e64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e68:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e6c:	4b7a      	ldr	r3, [pc, #488]	@ (8009058 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008e6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e74:	ee07 3a90 	vmov	s15, r3
 8008e78:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e7c:	ed97 6a03 	vldr	s12, [r7, #12]
 8008e80:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8009060 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008e84:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e88:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e8c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008e90:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e98:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008e9c:	e087      	b.n	8008fae <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008e9e:	697b      	ldr	r3, [r7, #20]
 8008ea0:	ee07 3a90 	vmov	s15, r3
 8008ea4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ea8:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8009064 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8008eac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008eb0:	4b69      	ldr	r3, [pc, #420]	@ (8009058 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008eb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008eb4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008eb8:	ee07 3a90 	vmov	s15, r3
 8008ebc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ec0:	ed97 6a03 	vldr	s12, [r7, #12]
 8008ec4:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8009060 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008ec8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008ecc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ed0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008ed4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008ed8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008edc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008ee0:	e065      	b.n	8008fae <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008ee2:	697b      	ldr	r3, [r7, #20]
 8008ee4:	ee07 3a90 	vmov	s15, r3
 8008ee8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008eec:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8009068 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8008ef0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ef4:	4b58      	ldr	r3, [pc, #352]	@ (8009058 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008ef6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ef8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008efc:	ee07 3a90 	vmov	s15, r3
 8008f00:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f04:	ed97 6a03 	vldr	s12, [r7, #12]
 8008f08:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8009060 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008f0c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008f10:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f14:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008f18:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f20:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008f24:	e043      	b.n	8008fae <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008f26:	697b      	ldr	r3, [r7, #20]
 8008f28:	ee07 3a90 	vmov	s15, r3
 8008f2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f30:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800906c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8008f34:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008f38:	4b47      	ldr	r3, [pc, #284]	@ (8009058 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008f3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008f3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f40:	ee07 3a90 	vmov	s15, r3
 8008f44:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f48:	ed97 6a03 	vldr	s12, [r7, #12]
 8008f4c:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8009060 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008f50:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008f54:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f58:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008f5c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f60:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f64:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008f68:	e021      	b.n	8008fae <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008f6a:	697b      	ldr	r3, [r7, #20]
 8008f6c:	ee07 3a90 	vmov	s15, r3
 8008f70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f74:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8009064 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8008f78:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008f7c:	4b36      	ldr	r3, [pc, #216]	@ (8009058 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008f7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008f80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f84:	ee07 3a90 	vmov	s15, r3
 8008f88:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f8c:	ed97 6a03 	vldr	s12, [r7, #12]
 8008f90:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8009060 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008f94:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008f98:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f9c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008fa0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008fa4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008fa8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008fac:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8008fae:	4b2a      	ldr	r3, [pc, #168]	@ (8009058 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008fb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008fb2:	0a5b      	lsrs	r3, r3, #9
 8008fb4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008fb8:	ee07 3a90 	vmov	s15, r3
 8008fbc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008fc0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008fc4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008fc8:	edd7 6a07 	vldr	s13, [r7, #28]
 8008fcc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008fd0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008fd4:	ee17 2a90 	vmov	r2, s15
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8008fdc:	4b1e      	ldr	r3, [pc, #120]	@ (8009058 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008fde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008fe0:	0c1b      	lsrs	r3, r3, #16
 8008fe2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008fe6:	ee07 3a90 	vmov	s15, r3
 8008fea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008fee:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008ff2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008ff6:	edd7 6a07 	vldr	s13, [r7, #28]
 8008ffa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008ffe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009002:	ee17 2a90 	vmov	r2, s15
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800900a:	4b13      	ldr	r3, [pc, #76]	@ (8009058 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800900c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800900e:	0e1b      	lsrs	r3, r3, #24
 8009010:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009014:	ee07 3a90 	vmov	s15, r3
 8009018:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800901c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009020:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009024:	edd7 6a07 	vldr	s13, [r7, #28]
 8009028:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800902c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009030:	ee17 2a90 	vmov	r2, s15
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8009038:	e008      	b.n	800904c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	2200      	movs	r2, #0
 800903e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	2200      	movs	r2, #0
 8009044:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	2200      	movs	r2, #0
 800904a:	609a      	str	r2, [r3, #8]
}
 800904c:	bf00      	nop
 800904e:	3724      	adds	r7, #36	@ 0x24
 8009050:	46bd      	mov	sp, r7
 8009052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009056:	4770      	bx	lr
 8009058:	58024400 	.word	0x58024400
 800905c:	03d09000 	.word	0x03d09000
 8009060:	46000000 	.word	0x46000000
 8009064:	4c742400 	.word	0x4c742400
 8009068:	4a742400 	.word	0x4a742400
 800906c:	4af42400 	.word	0x4af42400

08009070 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009070:	b580      	push	{r7, lr}
 8009072:	b084      	sub	sp, #16
 8009074:	af00      	add	r7, sp, #0
 8009076:	6078      	str	r0, [r7, #4]
 8009078:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800907a:	2300      	movs	r3, #0
 800907c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800907e:	4b53      	ldr	r3, [pc, #332]	@ (80091cc <RCCEx_PLL2_Config+0x15c>)
 8009080:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009082:	f003 0303 	and.w	r3, r3, #3
 8009086:	2b03      	cmp	r3, #3
 8009088:	d101      	bne.n	800908e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800908a:	2301      	movs	r3, #1
 800908c:	e099      	b.n	80091c2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800908e:	4b4f      	ldr	r3, [pc, #316]	@ (80091cc <RCCEx_PLL2_Config+0x15c>)
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	4a4e      	ldr	r2, [pc, #312]	@ (80091cc <RCCEx_PLL2_Config+0x15c>)
 8009094:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009098:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800909a:	f7f8 fe1f 	bl	8001cdc <HAL_GetTick>
 800909e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80090a0:	e008      	b.n	80090b4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80090a2:	f7f8 fe1b 	bl	8001cdc <HAL_GetTick>
 80090a6:	4602      	mov	r2, r0
 80090a8:	68bb      	ldr	r3, [r7, #8]
 80090aa:	1ad3      	subs	r3, r2, r3
 80090ac:	2b02      	cmp	r3, #2
 80090ae:	d901      	bls.n	80090b4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80090b0:	2303      	movs	r3, #3
 80090b2:	e086      	b.n	80091c2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80090b4:	4b45      	ldr	r3, [pc, #276]	@ (80091cc <RCCEx_PLL2_Config+0x15c>)
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d1f0      	bne.n	80090a2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80090c0:	4b42      	ldr	r3, [pc, #264]	@ (80091cc <RCCEx_PLL2_Config+0x15c>)
 80090c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80090c4:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	031b      	lsls	r3, r3, #12
 80090ce:	493f      	ldr	r1, [pc, #252]	@ (80091cc <RCCEx_PLL2_Config+0x15c>)
 80090d0:	4313      	orrs	r3, r2
 80090d2:	628b      	str	r3, [r1, #40]	@ 0x28
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	685b      	ldr	r3, [r3, #4]
 80090d8:	3b01      	subs	r3, #1
 80090da:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	689b      	ldr	r3, [r3, #8]
 80090e2:	3b01      	subs	r3, #1
 80090e4:	025b      	lsls	r3, r3, #9
 80090e6:	b29b      	uxth	r3, r3
 80090e8:	431a      	orrs	r2, r3
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	68db      	ldr	r3, [r3, #12]
 80090ee:	3b01      	subs	r3, #1
 80090f0:	041b      	lsls	r3, r3, #16
 80090f2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80090f6:	431a      	orrs	r2, r3
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	691b      	ldr	r3, [r3, #16]
 80090fc:	3b01      	subs	r3, #1
 80090fe:	061b      	lsls	r3, r3, #24
 8009100:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8009104:	4931      	ldr	r1, [pc, #196]	@ (80091cc <RCCEx_PLL2_Config+0x15c>)
 8009106:	4313      	orrs	r3, r2
 8009108:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800910a:	4b30      	ldr	r3, [pc, #192]	@ (80091cc <RCCEx_PLL2_Config+0x15c>)
 800910c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800910e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	695b      	ldr	r3, [r3, #20]
 8009116:	492d      	ldr	r1, [pc, #180]	@ (80091cc <RCCEx_PLL2_Config+0x15c>)
 8009118:	4313      	orrs	r3, r2
 800911a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800911c:	4b2b      	ldr	r3, [pc, #172]	@ (80091cc <RCCEx_PLL2_Config+0x15c>)
 800911e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009120:	f023 0220 	bic.w	r2, r3, #32
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	699b      	ldr	r3, [r3, #24]
 8009128:	4928      	ldr	r1, [pc, #160]	@ (80091cc <RCCEx_PLL2_Config+0x15c>)
 800912a:	4313      	orrs	r3, r2
 800912c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800912e:	4b27      	ldr	r3, [pc, #156]	@ (80091cc <RCCEx_PLL2_Config+0x15c>)
 8009130:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009132:	4a26      	ldr	r2, [pc, #152]	@ (80091cc <RCCEx_PLL2_Config+0x15c>)
 8009134:	f023 0310 	bic.w	r3, r3, #16
 8009138:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800913a:	4b24      	ldr	r3, [pc, #144]	@ (80091cc <RCCEx_PLL2_Config+0x15c>)
 800913c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800913e:	4b24      	ldr	r3, [pc, #144]	@ (80091d0 <RCCEx_PLL2_Config+0x160>)
 8009140:	4013      	ands	r3, r2
 8009142:	687a      	ldr	r2, [r7, #4]
 8009144:	69d2      	ldr	r2, [r2, #28]
 8009146:	00d2      	lsls	r2, r2, #3
 8009148:	4920      	ldr	r1, [pc, #128]	@ (80091cc <RCCEx_PLL2_Config+0x15c>)
 800914a:	4313      	orrs	r3, r2
 800914c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800914e:	4b1f      	ldr	r3, [pc, #124]	@ (80091cc <RCCEx_PLL2_Config+0x15c>)
 8009150:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009152:	4a1e      	ldr	r2, [pc, #120]	@ (80091cc <RCCEx_PLL2_Config+0x15c>)
 8009154:	f043 0310 	orr.w	r3, r3, #16
 8009158:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800915a:	683b      	ldr	r3, [r7, #0]
 800915c:	2b00      	cmp	r3, #0
 800915e:	d106      	bne.n	800916e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009160:	4b1a      	ldr	r3, [pc, #104]	@ (80091cc <RCCEx_PLL2_Config+0x15c>)
 8009162:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009164:	4a19      	ldr	r2, [pc, #100]	@ (80091cc <RCCEx_PLL2_Config+0x15c>)
 8009166:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800916a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800916c:	e00f      	b.n	800918e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800916e:	683b      	ldr	r3, [r7, #0]
 8009170:	2b01      	cmp	r3, #1
 8009172:	d106      	bne.n	8009182 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009174:	4b15      	ldr	r3, [pc, #84]	@ (80091cc <RCCEx_PLL2_Config+0x15c>)
 8009176:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009178:	4a14      	ldr	r2, [pc, #80]	@ (80091cc <RCCEx_PLL2_Config+0x15c>)
 800917a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800917e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009180:	e005      	b.n	800918e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8009182:	4b12      	ldr	r3, [pc, #72]	@ (80091cc <RCCEx_PLL2_Config+0x15c>)
 8009184:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009186:	4a11      	ldr	r2, [pc, #68]	@ (80091cc <RCCEx_PLL2_Config+0x15c>)
 8009188:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800918c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800918e:	4b0f      	ldr	r3, [pc, #60]	@ (80091cc <RCCEx_PLL2_Config+0x15c>)
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	4a0e      	ldr	r2, [pc, #56]	@ (80091cc <RCCEx_PLL2_Config+0x15c>)
 8009194:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009198:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800919a:	f7f8 fd9f 	bl	8001cdc <HAL_GetTick>
 800919e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80091a0:	e008      	b.n	80091b4 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80091a2:	f7f8 fd9b 	bl	8001cdc <HAL_GetTick>
 80091a6:	4602      	mov	r2, r0
 80091a8:	68bb      	ldr	r3, [r7, #8]
 80091aa:	1ad3      	subs	r3, r2, r3
 80091ac:	2b02      	cmp	r3, #2
 80091ae:	d901      	bls.n	80091b4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80091b0:	2303      	movs	r3, #3
 80091b2:	e006      	b.n	80091c2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80091b4:	4b05      	ldr	r3, [pc, #20]	@ (80091cc <RCCEx_PLL2_Config+0x15c>)
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d0f0      	beq.n	80091a2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80091c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80091c2:	4618      	mov	r0, r3
 80091c4:	3710      	adds	r7, #16
 80091c6:	46bd      	mov	sp, r7
 80091c8:	bd80      	pop	{r7, pc}
 80091ca:	bf00      	nop
 80091cc:	58024400 	.word	0x58024400
 80091d0:	ffff0007 	.word	0xffff0007

080091d4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80091d4:	b580      	push	{r7, lr}
 80091d6:	b084      	sub	sp, #16
 80091d8:	af00      	add	r7, sp, #0
 80091da:	6078      	str	r0, [r7, #4]
 80091dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80091de:	2300      	movs	r3, #0
 80091e0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80091e2:	4b53      	ldr	r3, [pc, #332]	@ (8009330 <RCCEx_PLL3_Config+0x15c>)
 80091e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80091e6:	f003 0303 	and.w	r3, r3, #3
 80091ea:	2b03      	cmp	r3, #3
 80091ec:	d101      	bne.n	80091f2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80091ee:	2301      	movs	r3, #1
 80091f0:	e099      	b.n	8009326 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80091f2:	4b4f      	ldr	r3, [pc, #316]	@ (8009330 <RCCEx_PLL3_Config+0x15c>)
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	4a4e      	ldr	r2, [pc, #312]	@ (8009330 <RCCEx_PLL3_Config+0x15c>)
 80091f8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80091fc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80091fe:	f7f8 fd6d 	bl	8001cdc <HAL_GetTick>
 8009202:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009204:	e008      	b.n	8009218 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009206:	f7f8 fd69 	bl	8001cdc <HAL_GetTick>
 800920a:	4602      	mov	r2, r0
 800920c:	68bb      	ldr	r3, [r7, #8]
 800920e:	1ad3      	subs	r3, r2, r3
 8009210:	2b02      	cmp	r3, #2
 8009212:	d901      	bls.n	8009218 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009214:	2303      	movs	r3, #3
 8009216:	e086      	b.n	8009326 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009218:	4b45      	ldr	r3, [pc, #276]	@ (8009330 <RCCEx_PLL3_Config+0x15c>)
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009220:	2b00      	cmp	r3, #0
 8009222:	d1f0      	bne.n	8009206 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009224:	4b42      	ldr	r3, [pc, #264]	@ (8009330 <RCCEx_PLL3_Config+0x15c>)
 8009226:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009228:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	051b      	lsls	r3, r3, #20
 8009232:	493f      	ldr	r1, [pc, #252]	@ (8009330 <RCCEx_PLL3_Config+0x15c>)
 8009234:	4313      	orrs	r3, r2
 8009236:	628b      	str	r3, [r1, #40]	@ 0x28
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	685b      	ldr	r3, [r3, #4]
 800923c:	3b01      	subs	r3, #1
 800923e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	689b      	ldr	r3, [r3, #8]
 8009246:	3b01      	subs	r3, #1
 8009248:	025b      	lsls	r3, r3, #9
 800924a:	b29b      	uxth	r3, r3
 800924c:	431a      	orrs	r2, r3
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	68db      	ldr	r3, [r3, #12]
 8009252:	3b01      	subs	r3, #1
 8009254:	041b      	lsls	r3, r3, #16
 8009256:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800925a:	431a      	orrs	r2, r3
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	691b      	ldr	r3, [r3, #16]
 8009260:	3b01      	subs	r3, #1
 8009262:	061b      	lsls	r3, r3, #24
 8009264:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8009268:	4931      	ldr	r1, [pc, #196]	@ (8009330 <RCCEx_PLL3_Config+0x15c>)
 800926a:	4313      	orrs	r3, r2
 800926c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800926e:	4b30      	ldr	r3, [pc, #192]	@ (8009330 <RCCEx_PLL3_Config+0x15c>)
 8009270:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009272:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	695b      	ldr	r3, [r3, #20]
 800927a:	492d      	ldr	r1, [pc, #180]	@ (8009330 <RCCEx_PLL3_Config+0x15c>)
 800927c:	4313      	orrs	r3, r2
 800927e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009280:	4b2b      	ldr	r3, [pc, #172]	@ (8009330 <RCCEx_PLL3_Config+0x15c>)
 8009282:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009284:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	699b      	ldr	r3, [r3, #24]
 800928c:	4928      	ldr	r1, [pc, #160]	@ (8009330 <RCCEx_PLL3_Config+0x15c>)
 800928e:	4313      	orrs	r3, r2
 8009290:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8009292:	4b27      	ldr	r3, [pc, #156]	@ (8009330 <RCCEx_PLL3_Config+0x15c>)
 8009294:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009296:	4a26      	ldr	r2, [pc, #152]	@ (8009330 <RCCEx_PLL3_Config+0x15c>)
 8009298:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800929c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800929e:	4b24      	ldr	r3, [pc, #144]	@ (8009330 <RCCEx_PLL3_Config+0x15c>)
 80092a0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80092a2:	4b24      	ldr	r3, [pc, #144]	@ (8009334 <RCCEx_PLL3_Config+0x160>)
 80092a4:	4013      	ands	r3, r2
 80092a6:	687a      	ldr	r2, [r7, #4]
 80092a8:	69d2      	ldr	r2, [r2, #28]
 80092aa:	00d2      	lsls	r2, r2, #3
 80092ac:	4920      	ldr	r1, [pc, #128]	@ (8009330 <RCCEx_PLL3_Config+0x15c>)
 80092ae:	4313      	orrs	r3, r2
 80092b0:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80092b2:	4b1f      	ldr	r3, [pc, #124]	@ (8009330 <RCCEx_PLL3_Config+0x15c>)
 80092b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092b6:	4a1e      	ldr	r2, [pc, #120]	@ (8009330 <RCCEx_PLL3_Config+0x15c>)
 80092b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80092bc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80092be:	683b      	ldr	r3, [r7, #0]
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d106      	bne.n	80092d2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80092c4:	4b1a      	ldr	r3, [pc, #104]	@ (8009330 <RCCEx_PLL3_Config+0x15c>)
 80092c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092c8:	4a19      	ldr	r2, [pc, #100]	@ (8009330 <RCCEx_PLL3_Config+0x15c>)
 80092ca:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80092ce:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80092d0:	e00f      	b.n	80092f2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80092d2:	683b      	ldr	r3, [r7, #0]
 80092d4:	2b01      	cmp	r3, #1
 80092d6:	d106      	bne.n	80092e6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80092d8:	4b15      	ldr	r3, [pc, #84]	@ (8009330 <RCCEx_PLL3_Config+0x15c>)
 80092da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092dc:	4a14      	ldr	r2, [pc, #80]	@ (8009330 <RCCEx_PLL3_Config+0x15c>)
 80092de:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80092e2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80092e4:	e005      	b.n	80092f2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80092e6:	4b12      	ldr	r3, [pc, #72]	@ (8009330 <RCCEx_PLL3_Config+0x15c>)
 80092e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092ea:	4a11      	ldr	r2, [pc, #68]	@ (8009330 <RCCEx_PLL3_Config+0x15c>)
 80092ec:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80092f0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80092f2:	4b0f      	ldr	r3, [pc, #60]	@ (8009330 <RCCEx_PLL3_Config+0x15c>)
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	4a0e      	ldr	r2, [pc, #56]	@ (8009330 <RCCEx_PLL3_Config+0x15c>)
 80092f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80092fc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80092fe:	f7f8 fced 	bl	8001cdc <HAL_GetTick>
 8009302:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009304:	e008      	b.n	8009318 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009306:	f7f8 fce9 	bl	8001cdc <HAL_GetTick>
 800930a:	4602      	mov	r2, r0
 800930c:	68bb      	ldr	r3, [r7, #8]
 800930e:	1ad3      	subs	r3, r2, r3
 8009310:	2b02      	cmp	r3, #2
 8009312:	d901      	bls.n	8009318 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009314:	2303      	movs	r3, #3
 8009316:	e006      	b.n	8009326 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009318:	4b05      	ldr	r3, [pc, #20]	@ (8009330 <RCCEx_PLL3_Config+0x15c>)
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009320:	2b00      	cmp	r3, #0
 8009322:	d0f0      	beq.n	8009306 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009324:	7bfb      	ldrb	r3, [r7, #15]
}
 8009326:	4618      	mov	r0, r3
 8009328:	3710      	adds	r7, #16
 800932a:	46bd      	mov	sp, r7
 800932c:	bd80      	pop	{r7, pc}
 800932e:	bf00      	nop
 8009330:	58024400 	.word	0x58024400
 8009334:	ffff0007 	.word	0xffff0007

08009338 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009338:	b580      	push	{r7, lr}
 800933a:	b082      	sub	sp, #8
 800933c:	af00      	add	r7, sp, #0
 800933e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	2b00      	cmp	r3, #0
 8009344:	d101      	bne.n	800934a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009346:	2301      	movs	r3, #1
 8009348:	e049      	b.n	80093de <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009350:	b2db      	uxtb	r3, r3
 8009352:	2b00      	cmp	r3, #0
 8009354:	d106      	bne.n	8009364 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	2200      	movs	r2, #0
 800935a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800935e:	6878      	ldr	r0, [r7, #4]
 8009360:	f7f8 f9be 	bl	80016e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	2202      	movs	r2, #2
 8009368:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	681a      	ldr	r2, [r3, #0]
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	3304      	adds	r3, #4
 8009374:	4619      	mov	r1, r3
 8009376:	4610      	mov	r0, r2
 8009378:	f000 f8a6 	bl	80094c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	2201      	movs	r2, #1
 8009380:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	2201      	movs	r2, #1
 8009388:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	2201      	movs	r2, #1
 8009390:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	2201      	movs	r2, #1
 8009398:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	2201      	movs	r2, #1
 80093a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	2201      	movs	r2, #1
 80093a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	2201      	movs	r2, #1
 80093b0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	2201      	movs	r2, #1
 80093b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	2201      	movs	r2, #1
 80093c0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	2201      	movs	r2, #1
 80093c8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	2201      	movs	r2, #1
 80093d0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	2201      	movs	r2, #1
 80093d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80093dc:	2300      	movs	r3, #0
}
 80093de:	4618      	mov	r0, r3
 80093e0:	3708      	adds	r7, #8
 80093e2:	46bd      	mov	sp, r7
 80093e4:	bd80      	pop	{r7, pc}
	...

080093e8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80093e8:	b480      	push	{r7}
 80093ea:	b085      	sub	sp, #20
 80093ec:	af00      	add	r7, sp, #0
 80093ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80093f6:	b2db      	uxtb	r3, r3
 80093f8:	2b01      	cmp	r3, #1
 80093fa:	d001      	beq.n	8009400 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80093fc:	2301      	movs	r3, #1
 80093fe:	e04c      	b.n	800949a <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	2202      	movs	r2, #2
 8009404:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	4a26      	ldr	r2, [pc, #152]	@ (80094a8 <HAL_TIM_Base_Start+0xc0>)
 800940e:	4293      	cmp	r3, r2
 8009410:	d022      	beq.n	8009458 <HAL_TIM_Base_Start+0x70>
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800941a:	d01d      	beq.n	8009458 <HAL_TIM_Base_Start+0x70>
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	4a22      	ldr	r2, [pc, #136]	@ (80094ac <HAL_TIM_Base_Start+0xc4>)
 8009422:	4293      	cmp	r3, r2
 8009424:	d018      	beq.n	8009458 <HAL_TIM_Base_Start+0x70>
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	4a21      	ldr	r2, [pc, #132]	@ (80094b0 <HAL_TIM_Base_Start+0xc8>)
 800942c:	4293      	cmp	r3, r2
 800942e:	d013      	beq.n	8009458 <HAL_TIM_Base_Start+0x70>
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	4a1f      	ldr	r2, [pc, #124]	@ (80094b4 <HAL_TIM_Base_Start+0xcc>)
 8009436:	4293      	cmp	r3, r2
 8009438:	d00e      	beq.n	8009458 <HAL_TIM_Base_Start+0x70>
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	4a1e      	ldr	r2, [pc, #120]	@ (80094b8 <HAL_TIM_Base_Start+0xd0>)
 8009440:	4293      	cmp	r3, r2
 8009442:	d009      	beq.n	8009458 <HAL_TIM_Base_Start+0x70>
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	4a1c      	ldr	r2, [pc, #112]	@ (80094bc <HAL_TIM_Base_Start+0xd4>)
 800944a:	4293      	cmp	r3, r2
 800944c:	d004      	beq.n	8009458 <HAL_TIM_Base_Start+0x70>
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	4a1b      	ldr	r2, [pc, #108]	@ (80094c0 <HAL_TIM_Base_Start+0xd8>)
 8009454:	4293      	cmp	r3, r2
 8009456:	d115      	bne.n	8009484 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	689a      	ldr	r2, [r3, #8]
 800945e:	4b19      	ldr	r3, [pc, #100]	@ (80094c4 <HAL_TIM_Base_Start+0xdc>)
 8009460:	4013      	ands	r3, r2
 8009462:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	2b06      	cmp	r3, #6
 8009468:	d015      	beq.n	8009496 <HAL_TIM_Base_Start+0xae>
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009470:	d011      	beq.n	8009496 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	681a      	ldr	r2, [r3, #0]
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	f042 0201 	orr.w	r2, r2, #1
 8009480:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009482:	e008      	b.n	8009496 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	681a      	ldr	r2, [r3, #0]
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	f042 0201 	orr.w	r2, r2, #1
 8009492:	601a      	str	r2, [r3, #0]
 8009494:	e000      	b.n	8009498 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009496:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009498:	2300      	movs	r3, #0
}
 800949a:	4618      	mov	r0, r3
 800949c:	3714      	adds	r7, #20
 800949e:	46bd      	mov	sp, r7
 80094a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a4:	4770      	bx	lr
 80094a6:	bf00      	nop
 80094a8:	40010000 	.word	0x40010000
 80094ac:	40000400 	.word	0x40000400
 80094b0:	40000800 	.word	0x40000800
 80094b4:	40000c00 	.word	0x40000c00
 80094b8:	40010400 	.word	0x40010400
 80094bc:	40001800 	.word	0x40001800
 80094c0:	40014000 	.word	0x40014000
 80094c4:	00010007 	.word	0x00010007

080094c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80094c8:	b480      	push	{r7}
 80094ca:	b085      	sub	sp, #20
 80094cc:	af00      	add	r7, sp, #0
 80094ce:	6078      	str	r0, [r7, #4]
 80094d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	4a43      	ldr	r2, [pc, #268]	@ (80095e8 <TIM_Base_SetConfig+0x120>)
 80094dc:	4293      	cmp	r3, r2
 80094de:	d013      	beq.n	8009508 <TIM_Base_SetConfig+0x40>
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80094e6:	d00f      	beq.n	8009508 <TIM_Base_SetConfig+0x40>
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	4a40      	ldr	r2, [pc, #256]	@ (80095ec <TIM_Base_SetConfig+0x124>)
 80094ec:	4293      	cmp	r3, r2
 80094ee:	d00b      	beq.n	8009508 <TIM_Base_SetConfig+0x40>
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	4a3f      	ldr	r2, [pc, #252]	@ (80095f0 <TIM_Base_SetConfig+0x128>)
 80094f4:	4293      	cmp	r3, r2
 80094f6:	d007      	beq.n	8009508 <TIM_Base_SetConfig+0x40>
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	4a3e      	ldr	r2, [pc, #248]	@ (80095f4 <TIM_Base_SetConfig+0x12c>)
 80094fc:	4293      	cmp	r3, r2
 80094fe:	d003      	beq.n	8009508 <TIM_Base_SetConfig+0x40>
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	4a3d      	ldr	r2, [pc, #244]	@ (80095f8 <TIM_Base_SetConfig+0x130>)
 8009504:	4293      	cmp	r3, r2
 8009506:	d108      	bne.n	800951a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800950e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009510:	683b      	ldr	r3, [r7, #0]
 8009512:	685b      	ldr	r3, [r3, #4]
 8009514:	68fa      	ldr	r2, [r7, #12]
 8009516:	4313      	orrs	r3, r2
 8009518:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	4a32      	ldr	r2, [pc, #200]	@ (80095e8 <TIM_Base_SetConfig+0x120>)
 800951e:	4293      	cmp	r3, r2
 8009520:	d01f      	beq.n	8009562 <TIM_Base_SetConfig+0x9a>
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009528:	d01b      	beq.n	8009562 <TIM_Base_SetConfig+0x9a>
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	4a2f      	ldr	r2, [pc, #188]	@ (80095ec <TIM_Base_SetConfig+0x124>)
 800952e:	4293      	cmp	r3, r2
 8009530:	d017      	beq.n	8009562 <TIM_Base_SetConfig+0x9a>
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	4a2e      	ldr	r2, [pc, #184]	@ (80095f0 <TIM_Base_SetConfig+0x128>)
 8009536:	4293      	cmp	r3, r2
 8009538:	d013      	beq.n	8009562 <TIM_Base_SetConfig+0x9a>
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	4a2d      	ldr	r2, [pc, #180]	@ (80095f4 <TIM_Base_SetConfig+0x12c>)
 800953e:	4293      	cmp	r3, r2
 8009540:	d00f      	beq.n	8009562 <TIM_Base_SetConfig+0x9a>
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	4a2c      	ldr	r2, [pc, #176]	@ (80095f8 <TIM_Base_SetConfig+0x130>)
 8009546:	4293      	cmp	r3, r2
 8009548:	d00b      	beq.n	8009562 <TIM_Base_SetConfig+0x9a>
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	4a2b      	ldr	r2, [pc, #172]	@ (80095fc <TIM_Base_SetConfig+0x134>)
 800954e:	4293      	cmp	r3, r2
 8009550:	d007      	beq.n	8009562 <TIM_Base_SetConfig+0x9a>
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	4a2a      	ldr	r2, [pc, #168]	@ (8009600 <TIM_Base_SetConfig+0x138>)
 8009556:	4293      	cmp	r3, r2
 8009558:	d003      	beq.n	8009562 <TIM_Base_SetConfig+0x9a>
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	4a29      	ldr	r2, [pc, #164]	@ (8009604 <TIM_Base_SetConfig+0x13c>)
 800955e:	4293      	cmp	r3, r2
 8009560:	d108      	bne.n	8009574 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009568:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800956a:	683b      	ldr	r3, [r7, #0]
 800956c:	68db      	ldr	r3, [r3, #12]
 800956e:	68fa      	ldr	r2, [r7, #12]
 8009570:	4313      	orrs	r3, r2
 8009572:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800957a:	683b      	ldr	r3, [r7, #0]
 800957c:	695b      	ldr	r3, [r3, #20]
 800957e:	4313      	orrs	r3, r2
 8009580:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009582:	683b      	ldr	r3, [r7, #0]
 8009584:	689a      	ldr	r2, [r3, #8]
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800958a:	683b      	ldr	r3, [r7, #0]
 800958c:	681a      	ldr	r2, [r3, #0]
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	4a14      	ldr	r2, [pc, #80]	@ (80095e8 <TIM_Base_SetConfig+0x120>)
 8009596:	4293      	cmp	r3, r2
 8009598:	d00f      	beq.n	80095ba <TIM_Base_SetConfig+0xf2>
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	4a16      	ldr	r2, [pc, #88]	@ (80095f8 <TIM_Base_SetConfig+0x130>)
 800959e:	4293      	cmp	r3, r2
 80095a0:	d00b      	beq.n	80095ba <TIM_Base_SetConfig+0xf2>
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	4a15      	ldr	r2, [pc, #84]	@ (80095fc <TIM_Base_SetConfig+0x134>)
 80095a6:	4293      	cmp	r3, r2
 80095a8:	d007      	beq.n	80095ba <TIM_Base_SetConfig+0xf2>
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	4a14      	ldr	r2, [pc, #80]	@ (8009600 <TIM_Base_SetConfig+0x138>)
 80095ae:	4293      	cmp	r3, r2
 80095b0:	d003      	beq.n	80095ba <TIM_Base_SetConfig+0xf2>
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	4a13      	ldr	r2, [pc, #76]	@ (8009604 <TIM_Base_SetConfig+0x13c>)
 80095b6:	4293      	cmp	r3, r2
 80095b8:	d103      	bne.n	80095c2 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80095ba:	683b      	ldr	r3, [r7, #0]
 80095bc:	691a      	ldr	r2, [r3, #16]
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	f043 0204 	orr.w	r2, r3, #4
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	2201      	movs	r2, #1
 80095d2:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	68fa      	ldr	r2, [r7, #12]
 80095d8:	601a      	str	r2, [r3, #0]
}
 80095da:	bf00      	nop
 80095dc:	3714      	adds	r7, #20
 80095de:	46bd      	mov	sp, r7
 80095e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e4:	4770      	bx	lr
 80095e6:	bf00      	nop
 80095e8:	40010000 	.word	0x40010000
 80095ec:	40000400 	.word	0x40000400
 80095f0:	40000800 	.word	0x40000800
 80095f4:	40000c00 	.word	0x40000c00
 80095f8:	40010400 	.word	0x40010400
 80095fc:	40014000 	.word	0x40014000
 8009600:	40014400 	.word	0x40014400
 8009604:	40014800 	.word	0x40014800

08009608 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009608:	b480      	push	{r7}
 800960a:	b085      	sub	sp, #20
 800960c:	af00      	add	r7, sp, #0
 800960e:	6078      	str	r0, [r7, #4]
 8009610:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009618:	2b01      	cmp	r3, #1
 800961a:	d101      	bne.n	8009620 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800961c:	2302      	movs	r3, #2
 800961e:	e06d      	b.n	80096fc <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	2201      	movs	r2, #1
 8009624:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	2202      	movs	r2, #2
 800962c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	685b      	ldr	r3, [r3, #4]
 8009636:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	689b      	ldr	r3, [r3, #8]
 800963e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	4a30      	ldr	r2, [pc, #192]	@ (8009708 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009646:	4293      	cmp	r3, r2
 8009648:	d004      	beq.n	8009654 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	4a2f      	ldr	r2, [pc, #188]	@ (800970c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009650:	4293      	cmp	r3, r2
 8009652:	d108      	bne.n	8009666 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800965a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800965c:	683b      	ldr	r3, [r7, #0]
 800965e:	685b      	ldr	r3, [r3, #4]
 8009660:	68fa      	ldr	r2, [r7, #12]
 8009662:	4313      	orrs	r3, r2
 8009664:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800966c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800966e:	683b      	ldr	r3, [r7, #0]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	68fa      	ldr	r2, [r7, #12]
 8009674:	4313      	orrs	r3, r2
 8009676:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	68fa      	ldr	r2, [r7, #12]
 800967e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	4a20      	ldr	r2, [pc, #128]	@ (8009708 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009686:	4293      	cmp	r3, r2
 8009688:	d022      	beq.n	80096d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009692:	d01d      	beq.n	80096d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	4a1d      	ldr	r2, [pc, #116]	@ (8009710 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800969a:	4293      	cmp	r3, r2
 800969c:	d018      	beq.n	80096d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	4a1c      	ldr	r2, [pc, #112]	@ (8009714 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80096a4:	4293      	cmp	r3, r2
 80096a6:	d013      	beq.n	80096d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	4a1a      	ldr	r2, [pc, #104]	@ (8009718 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80096ae:	4293      	cmp	r3, r2
 80096b0:	d00e      	beq.n	80096d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	4a15      	ldr	r2, [pc, #84]	@ (800970c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80096b8:	4293      	cmp	r3, r2
 80096ba:	d009      	beq.n	80096d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	4a16      	ldr	r2, [pc, #88]	@ (800971c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80096c2:	4293      	cmp	r3, r2
 80096c4:	d004      	beq.n	80096d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	4a15      	ldr	r2, [pc, #84]	@ (8009720 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80096cc:	4293      	cmp	r3, r2
 80096ce:	d10c      	bne.n	80096ea <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80096d0:	68bb      	ldr	r3, [r7, #8]
 80096d2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80096d6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80096d8:	683b      	ldr	r3, [r7, #0]
 80096da:	689b      	ldr	r3, [r3, #8]
 80096dc:	68ba      	ldr	r2, [r7, #8]
 80096de:	4313      	orrs	r3, r2
 80096e0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	68ba      	ldr	r2, [r7, #8]
 80096e8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	2201      	movs	r2, #1
 80096ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	2200      	movs	r2, #0
 80096f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80096fa:	2300      	movs	r3, #0
}
 80096fc:	4618      	mov	r0, r3
 80096fe:	3714      	adds	r7, #20
 8009700:	46bd      	mov	sp, r7
 8009702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009706:	4770      	bx	lr
 8009708:	40010000 	.word	0x40010000
 800970c:	40010400 	.word	0x40010400
 8009710:	40000400 	.word	0x40000400
 8009714:	40000800 	.word	0x40000800
 8009718:	40000c00 	.word	0x40000c00
 800971c:	40001800 	.word	0x40001800
 8009720:	40014000 	.word	0x40014000

08009724 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009724:	b580      	push	{r7, lr}
 8009726:	b082      	sub	sp, #8
 8009728:	af00      	add	r7, sp, #0
 800972a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	2b00      	cmp	r3, #0
 8009730:	d101      	bne.n	8009736 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009732:	2301      	movs	r3, #1
 8009734:	e042      	b.n	80097bc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800973c:	2b00      	cmp	r3, #0
 800973e:	d106      	bne.n	800974e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	2200      	movs	r2, #0
 8009744:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009748:	6878      	ldr	r0, [r7, #4]
 800974a:	f7f7 ffeb 	bl	8001724 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	2224      	movs	r2, #36	@ 0x24
 8009752:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	681a      	ldr	r2, [r3, #0]
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	f022 0201 	bic.w	r2, r2, #1
 8009764:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800976a:	2b00      	cmp	r3, #0
 800976c:	d002      	beq.n	8009774 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800976e:	6878      	ldr	r0, [r7, #4]
 8009770:	f000 fe1e 	bl	800a3b0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009774:	6878      	ldr	r0, [r7, #4]
 8009776:	f000 f8b3 	bl	80098e0 <UART_SetConfig>
 800977a:	4603      	mov	r3, r0
 800977c:	2b01      	cmp	r3, #1
 800977e:	d101      	bne.n	8009784 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8009780:	2301      	movs	r3, #1
 8009782:	e01b      	b.n	80097bc <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	685a      	ldr	r2, [r3, #4]
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009792:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	689a      	ldr	r2, [r3, #8]
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80097a2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	681a      	ldr	r2, [r3, #0]
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	f042 0201 	orr.w	r2, r2, #1
 80097b2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80097b4:	6878      	ldr	r0, [r7, #4]
 80097b6:	f000 fe9d 	bl	800a4f4 <UART_CheckIdleState>
 80097ba:	4603      	mov	r3, r0
}
 80097bc:	4618      	mov	r0, r3
 80097be:	3708      	adds	r7, #8
 80097c0:	46bd      	mov	sp, r7
 80097c2:	bd80      	pop	{r7, pc}

080097c4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80097c4:	b580      	push	{r7, lr}
 80097c6:	b08a      	sub	sp, #40	@ 0x28
 80097c8:	af02      	add	r7, sp, #8
 80097ca:	60f8      	str	r0, [r7, #12]
 80097cc:	60b9      	str	r1, [r7, #8]
 80097ce:	603b      	str	r3, [r7, #0]
 80097d0:	4613      	mov	r3, r2
 80097d2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80097da:	2b20      	cmp	r3, #32
 80097dc:	d17b      	bne.n	80098d6 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80097de:	68bb      	ldr	r3, [r7, #8]
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d002      	beq.n	80097ea <HAL_UART_Transmit+0x26>
 80097e4:	88fb      	ldrh	r3, [r7, #6]
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d101      	bne.n	80097ee <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80097ea:	2301      	movs	r3, #1
 80097ec:	e074      	b.n	80098d8 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	2200      	movs	r2, #0
 80097f2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	2221      	movs	r2, #33	@ 0x21
 80097fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80097fe:	f7f8 fa6d 	bl	8001cdc <HAL_GetTick>
 8009802:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	88fa      	ldrh	r2, [r7, #6]
 8009808:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	88fa      	ldrh	r2, [r7, #6]
 8009810:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	689b      	ldr	r3, [r3, #8]
 8009818:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800981c:	d108      	bne.n	8009830 <HAL_UART_Transmit+0x6c>
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	691b      	ldr	r3, [r3, #16]
 8009822:	2b00      	cmp	r3, #0
 8009824:	d104      	bne.n	8009830 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8009826:	2300      	movs	r3, #0
 8009828:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800982a:	68bb      	ldr	r3, [r7, #8]
 800982c:	61bb      	str	r3, [r7, #24]
 800982e:	e003      	b.n	8009838 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8009830:	68bb      	ldr	r3, [r7, #8]
 8009832:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009834:	2300      	movs	r3, #0
 8009836:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009838:	e030      	b.n	800989c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800983a:	683b      	ldr	r3, [r7, #0]
 800983c:	9300      	str	r3, [sp, #0]
 800983e:	697b      	ldr	r3, [r7, #20]
 8009840:	2200      	movs	r2, #0
 8009842:	2180      	movs	r1, #128	@ 0x80
 8009844:	68f8      	ldr	r0, [r7, #12]
 8009846:	f000 feff 	bl	800a648 <UART_WaitOnFlagUntilTimeout>
 800984a:	4603      	mov	r3, r0
 800984c:	2b00      	cmp	r3, #0
 800984e:	d005      	beq.n	800985c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	2220      	movs	r2, #32
 8009854:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8009858:	2303      	movs	r3, #3
 800985a:	e03d      	b.n	80098d8 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800985c:	69fb      	ldr	r3, [r7, #28]
 800985e:	2b00      	cmp	r3, #0
 8009860:	d10b      	bne.n	800987a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009862:	69bb      	ldr	r3, [r7, #24]
 8009864:	881b      	ldrh	r3, [r3, #0]
 8009866:	461a      	mov	r2, r3
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009870:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8009872:	69bb      	ldr	r3, [r7, #24]
 8009874:	3302      	adds	r3, #2
 8009876:	61bb      	str	r3, [r7, #24]
 8009878:	e007      	b.n	800988a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800987a:	69fb      	ldr	r3, [r7, #28]
 800987c:	781a      	ldrb	r2, [r3, #0]
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8009884:	69fb      	ldr	r3, [r7, #28]
 8009886:	3301      	adds	r3, #1
 8009888:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009890:	b29b      	uxth	r3, r3
 8009892:	3b01      	subs	r3, #1
 8009894:	b29a      	uxth	r2, r3
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80098a2:	b29b      	uxth	r3, r3
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d1c8      	bne.n	800983a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80098a8:	683b      	ldr	r3, [r7, #0]
 80098aa:	9300      	str	r3, [sp, #0]
 80098ac:	697b      	ldr	r3, [r7, #20]
 80098ae:	2200      	movs	r2, #0
 80098b0:	2140      	movs	r1, #64	@ 0x40
 80098b2:	68f8      	ldr	r0, [r7, #12]
 80098b4:	f000 fec8 	bl	800a648 <UART_WaitOnFlagUntilTimeout>
 80098b8:	4603      	mov	r3, r0
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d005      	beq.n	80098ca <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	2220      	movs	r2, #32
 80098c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80098c6:	2303      	movs	r3, #3
 80098c8:	e006      	b.n	80098d8 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	2220      	movs	r2, #32
 80098ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80098d2:	2300      	movs	r3, #0
 80098d4:	e000      	b.n	80098d8 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80098d6:	2302      	movs	r3, #2
  }
}
 80098d8:	4618      	mov	r0, r3
 80098da:	3720      	adds	r7, #32
 80098dc:	46bd      	mov	sp, r7
 80098de:	bd80      	pop	{r7, pc}

080098e0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80098e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80098e4:	b092      	sub	sp, #72	@ 0x48
 80098e6:	af00      	add	r7, sp, #0
 80098e8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80098ea:	2300      	movs	r3, #0
 80098ec:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80098f0:	697b      	ldr	r3, [r7, #20]
 80098f2:	689a      	ldr	r2, [r3, #8]
 80098f4:	697b      	ldr	r3, [r7, #20]
 80098f6:	691b      	ldr	r3, [r3, #16]
 80098f8:	431a      	orrs	r2, r3
 80098fa:	697b      	ldr	r3, [r7, #20]
 80098fc:	695b      	ldr	r3, [r3, #20]
 80098fe:	431a      	orrs	r2, r3
 8009900:	697b      	ldr	r3, [r7, #20]
 8009902:	69db      	ldr	r3, [r3, #28]
 8009904:	4313      	orrs	r3, r2
 8009906:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009908:	697b      	ldr	r3, [r7, #20]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	681a      	ldr	r2, [r3, #0]
 800990e:	4bbe      	ldr	r3, [pc, #760]	@ (8009c08 <UART_SetConfig+0x328>)
 8009910:	4013      	ands	r3, r2
 8009912:	697a      	ldr	r2, [r7, #20]
 8009914:	6812      	ldr	r2, [r2, #0]
 8009916:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009918:	430b      	orrs	r3, r1
 800991a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800991c:	697b      	ldr	r3, [r7, #20]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	685b      	ldr	r3, [r3, #4]
 8009922:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009926:	697b      	ldr	r3, [r7, #20]
 8009928:	68da      	ldr	r2, [r3, #12]
 800992a:	697b      	ldr	r3, [r7, #20]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	430a      	orrs	r2, r1
 8009930:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009932:	697b      	ldr	r3, [r7, #20]
 8009934:	699b      	ldr	r3, [r3, #24]
 8009936:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009938:	697b      	ldr	r3, [r7, #20]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	4ab3      	ldr	r2, [pc, #716]	@ (8009c0c <UART_SetConfig+0x32c>)
 800993e:	4293      	cmp	r3, r2
 8009940:	d004      	beq.n	800994c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009942:	697b      	ldr	r3, [r7, #20]
 8009944:	6a1b      	ldr	r3, [r3, #32]
 8009946:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009948:	4313      	orrs	r3, r2
 800994a:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800994c:	697b      	ldr	r3, [r7, #20]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	689a      	ldr	r2, [r3, #8]
 8009952:	4baf      	ldr	r3, [pc, #700]	@ (8009c10 <UART_SetConfig+0x330>)
 8009954:	4013      	ands	r3, r2
 8009956:	697a      	ldr	r2, [r7, #20]
 8009958:	6812      	ldr	r2, [r2, #0]
 800995a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800995c:	430b      	orrs	r3, r1
 800995e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009960:	697b      	ldr	r3, [r7, #20]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009966:	f023 010f 	bic.w	r1, r3, #15
 800996a:	697b      	ldr	r3, [r7, #20]
 800996c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800996e:	697b      	ldr	r3, [r7, #20]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	430a      	orrs	r2, r1
 8009974:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009976:	697b      	ldr	r3, [r7, #20]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	4aa6      	ldr	r2, [pc, #664]	@ (8009c14 <UART_SetConfig+0x334>)
 800997c:	4293      	cmp	r3, r2
 800997e:	d177      	bne.n	8009a70 <UART_SetConfig+0x190>
 8009980:	4ba5      	ldr	r3, [pc, #660]	@ (8009c18 <UART_SetConfig+0x338>)
 8009982:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009984:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009988:	2b28      	cmp	r3, #40	@ 0x28
 800998a:	d86d      	bhi.n	8009a68 <UART_SetConfig+0x188>
 800998c:	a201      	add	r2, pc, #4	@ (adr r2, 8009994 <UART_SetConfig+0xb4>)
 800998e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009992:	bf00      	nop
 8009994:	08009a39 	.word	0x08009a39
 8009998:	08009a69 	.word	0x08009a69
 800999c:	08009a69 	.word	0x08009a69
 80099a0:	08009a69 	.word	0x08009a69
 80099a4:	08009a69 	.word	0x08009a69
 80099a8:	08009a69 	.word	0x08009a69
 80099ac:	08009a69 	.word	0x08009a69
 80099b0:	08009a69 	.word	0x08009a69
 80099b4:	08009a41 	.word	0x08009a41
 80099b8:	08009a69 	.word	0x08009a69
 80099bc:	08009a69 	.word	0x08009a69
 80099c0:	08009a69 	.word	0x08009a69
 80099c4:	08009a69 	.word	0x08009a69
 80099c8:	08009a69 	.word	0x08009a69
 80099cc:	08009a69 	.word	0x08009a69
 80099d0:	08009a69 	.word	0x08009a69
 80099d4:	08009a49 	.word	0x08009a49
 80099d8:	08009a69 	.word	0x08009a69
 80099dc:	08009a69 	.word	0x08009a69
 80099e0:	08009a69 	.word	0x08009a69
 80099e4:	08009a69 	.word	0x08009a69
 80099e8:	08009a69 	.word	0x08009a69
 80099ec:	08009a69 	.word	0x08009a69
 80099f0:	08009a69 	.word	0x08009a69
 80099f4:	08009a51 	.word	0x08009a51
 80099f8:	08009a69 	.word	0x08009a69
 80099fc:	08009a69 	.word	0x08009a69
 8009a00:	08009a69 	.word	0x08009a69
 8009a04:	08009a69 	.word	0x08009a69
 8009a08:	08009a69 	.word	0x08009a69
 8009a0c:	08009a69 	.word	0x08009a69
 8009a10:	08009a69 	.word	0x08009a69
 8009a14:	08009a59 	.word	0x08009a59
 8009a18:	08009a69 	.word	0x08009a69
 8009a1c:	08009a69 	.word	0x08009a69
 8009a20:	08009a69 	.word	0x08009a69
 8009a24:	08009a69 	.word	0x08009a69
 8009a28:	08009a69 	.word	0x08009a69
 8009a2c:	08009a69 	.word	0x08009a69
 8009a30:	08009a69 	.word	0x08009a69
 8009a34:	08009a61 	.word	0x08009a61
 8009a38:	2301      	movs	r3, #1
 8009a3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a3e:	e222      	b.n	8009e86 <UART_SetConfig+0x5a6>
 8009a40:	2304      	movs	r3, #4
 8009a42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a46:	e21e      	b.n	8009e86 <UART_SetConfig+0x5a6>
 8009a48:	2308      	movs	r3, #8
 8009a4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a4e:	e21a      	b.n	8009e86 <UART_SetConfig+0x5a6>
 8009a50:	2310      	movs	r3, #16
 8009a52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a56:	e216      	b.n	8009e86 <UART_SetConfig+0x5a6>
 8009a58:	2320      	movs	r3, #32
 8009a5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a5e:	e212      	b.n	8009e86 <UART_SetConfig+0x5a6>
 8009a60:	2340      	movs	r3, #64	@ 0x40
 8009a62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a66:	e20e      	b.n	8009e86 <UART_SetConfig+0x5a6>
 8009a68:	2380      	movs	r3, #128	@ 0x80
 8009a6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a6e:	e20a      	b.n	8009e86 <UART_SetConfig+0x5a6>
 8009a70:	697b      	ldr	r3, [r7, #20]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	4a69      	ldr	r2, [pc, #420]	@ (8009c1c <UART_SetConfig+0x33c>)
 8009a76:	4293      	cmp	r3, r2
 8009a78:	d130      	bne.n	8009adc <UART_SetConfig+0x1fc>
 8009a7a:	4b67      	ldr	r3, [pc, #412]	@ (8009c18 <UART_SetConfig+0x338>)
 8009a7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009a7e:	f003 0307 	and.w	r3, r3, #7
 8009a82:	2b05      	cmp	r3, #5
 8009a84:	d826      	bhi.n	8009ad4 <UART_SetConfig+0x1f4>
 8009a86:	a201      	add	r2, pc, #4	@ (adr r2, 8009a8c <UART_SetConfig+0x1ac>)
 8009a88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a8c:	08009aa5 	.word	0x08009aa5
 8009a90:	08009aad 	.word	0x08009aad
 8009a94:	08009ab5 	.word	0x08009ab5
 8009a98:	08009abd 	.word	0x08009abd
 8009a9c:	08009ac5 	.word	0x08009ac5
 8009aa0:	08009acd 	.word	0x08009acd
 8009aa4:	2300      	movs	r3, #0
 8009aa6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009aaa:	e1ec      	b.n	8009e86 <UART_SetConfig+0x5a6>
 8009aac:	2304      	movs	r3, #4
 8009aae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ab2:	e1e8      	b.n	8009e86 <UART_SetConfig+0x5a6>
 8009ab4:	2308      	movs	r3, #8
 8009ab6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009aba:	e1e4      	b.n	8009e86 <UART_SetConfig+0x5a6>
 8009abc:	2310      	movs	r3, #16
 8009abe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ac2:	e1e0      	b.n	8009e86 <UART_SetConfig+0x5a6>
 8009ac4:	2320      	movs	r3, #32
 8009ac6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009aca:	e1dc      	b.n	8009e86 <UART_SetConfig+0x5a6>
 8009acc:	2340      	movs	r3, #64	@ 0x40
 8009ace:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ad2:	e1d8      	b.n	8009e86 <UART_SetConfig+0x5a6>
 8009ad4:	2380      	movs	r3, #128	@ 0x80
 8009ad6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ada:	e1d4      	b.n	8009e86 <UART_SetConfig+0x5a6>
 8009adc:	697b      	ldr	r3, [r7, #20]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	4a4f      	ldr	r2, [pc, #316]	@ (8009c20 <UART_SetConfig+0x340>)
 8009ae2:	4293      	cmp	r3, r2
 8009ae4:	d130      	bne.n	8009b48 <UART_SetConfig+0x268>
 8009ae6:	4b4c      	ldr	r3, [pc, #304]	@ (8009c18 <UART_SetConfig+0x338>)
 8009ae8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009aea:	f003 0307 	and.w	r3, r3, #7
 8009aee:	2b05      	cmp	r3, #5
 8009af0:	d826      	bhi.n	8009b40 <UART_SetConfig+0x260>
 8009af2:	a201      	add	r2, pc, #4	@ (adr r2, 8009af8 <UART_SetConfig+0x218>)
 8009af4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009af8:	08009b11 	.word	0x08009b11
 8009afc:	08009b19 	.word	0x08009b19
 8009b00:	08009b21 	.word	0x08009b21
 8009b04:	08009b29 	.word	0x08009b29
 8009b08:	08009b31 	.word	0x08009b31
 8009b0c:	08009b39 	.word	0x08009b39
 8009b10:	2300      	movs	r3, #0
 8009b12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b16:	e1b6      	b.n	8009e86 <UART_SetConfig+0x5a6>
 8009b18:	2304      	movs	r3, #4
 8009b1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b1e:	e1b2      	b.n	8009e86 <UART_SetConfig+0x5a6>
 8009b20:	2308      	movs	r3, #8
 8009b22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b26:	e1ae      	b.n	8009e86 <UART_SetConfig+0x5a6>
 8009b28:	2310      	movs	r3, #16
 8009b2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b2e:	e1aa      	b.n	8009e86 <UART_SetConfig+0x5a6>
 8009b30:	2320      	movs	r3, #32
 8009b32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b36:	e1a6      	b.n	8009e86 <UART_SetConfig+0x5a6>
 8009b38:	2340      	movs	r3, #64	@ 0x40
 8009b3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b3e:	e1a2      	b.n	8009e86 <UART_SetConfig+0x5a6>
 8009b40:	2380      	movs	r3, #128	@ 0x80
 8009b42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b46:	e19e      	b.n	8009e86 <UART_SetConfig+0x5a6>
 8009b48:	697b      	ldr	r3, [r7, #20]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	4a35      	ldr	r2, [pc, #212]	@ (8009c24 <UART_SetConfig+0x344>)
 8009b4e:	4293      	cmp	r3, r2
 8009b50:	d130      	bne.n	8009bb4 <UART_SetConfig+0x2d4>
 8009b52:	4b31      	ldr	r3, [pc, #196]	@ (8009c18 <UART_SetConfig+0x338>)
 8009b54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009b56:	f003 0307 	and.w	r3, r3, #7
 8009b5a:	2b05      	cmp	r3, #5
 8009b5c:	d826      	bhi.n	8009bac <UART_SetConfig+0x2cc>
 8009b5e:	a201      	add	r2, pc, #4	@ (adr r2, 8009b64 <UART_SetConfig+0x284>)
 8009b60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b64:	08009b7d 	.word	0x08009b7d
 8009b68:	08009b85 	.word	0x08009b85
 8009b6c:	08009b8d 	.word	0x08009b8d
 8009b70:	08009b95 	.word	0x08009b95
 8009b74:	08009b9d 	.word	0x08009b9d
 8009b78:	08009ba5 	.word	0x08009ba5
 8009b7c:	2300      	movs	r3, #0
 8009b7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b82:	e180      	b.n	8009e86 <UART_SetConfig+0x5a6>
 8009b84:	2304      	movs	r3, #4
 8009b86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b8a:	e17c      	b.n	8009e86 <UART_SetConfig+0x5a6>
 8009b8c:	2308      	movs	r3, #8
 8009b8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b92:	e178      	b.n	8009e86 <UART_SetConfig+0x5a6>
 8009b94:	2310      	movs	r3, #16
 8009b96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b9a:	e174      	b.n	8009e86 <UART_SetConfig+0x5a6>
 8009b9c:	2320      	movs	r3, #32
 8009b9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ba2:	e170      	b.n	8009e86 <UART_SetConfig+0x5a6>
 8009ba4:	2340      	movs	r3, #64	@ 0x40
 8009ba6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009baa:	e16c      	b.n	8009e86 <UART_SetConfig+0x5a6>
 8009bac:	2380      	movs	r3, #128	@ 0x80
 8009bae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009bb2:	e168      	b.n	8009e86 <UART_SetConfig+0x5a6>
 8009bb4:	697b      	ldr	r3, [r7, #20]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	4a1b      	ldr	r2, [pc, #108]	@ (8009c28 <UART_SetConfig+0x348>)
 8009bba:	4293      	cmp	r3, r2
 8009bbc:	d142      	bne.n	8009c44 <UART_SetConfig+0x364>
 8009bbe:	4b16      	ldr	r3, [pc, #88]	@ (8009c18 <UART_SetConfig+0x338>)
 8009bc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009bc2:	f003 0307 	and.w	r3, r3, #7
 8009bc6:	2b05      	cmp	r3, #5
 8009bc8:	d838      	bhi.n	8009c3c <UART_SetConfig+0x35c>
 8009bca:	a201      	add	r2, pc, #4	@ (adr r2, 8009bd0 <UART_SetConfig+0x2f0>)
 8009bcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bd0:	08009be9 	.word	0x08009be9
 8009bd4:	08009bf1 	.word	0x08009bf1
 8009bd8:	08009bf9 	.word	0x08009bf9
 8009bdc:	08009c01 	.word	0x08009c01
 8009be0:	08009c2d 	.word	0x08009c2d
 8009be4:	08009c35 	.word	0x08009c35
 8009be8:	2300      	movs	r3, #0
 8009bea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009bee:	e14a      	b.n	8009e86 <UART_SetConfig+0x5a6>
 8009bf0:	2304      	movs	r3, #4
 8009bf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009bf6:	e146      	b.n	8009e86 <UART_SetConfig+0x5a6>
 8009bf8:	2308      	movs	r3, #8
 8009bfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009bfe:	e142      	b.n	8009e86 <UART_SetConfig+0x5a6>
 8009c00:	2310      	movs	r3, #16
 8009c02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c06:	e13e      	b.n	8009e86 <UART_SetConfig+0x5a6>
 8009c08:	cfff69f3 	.word	0xcfff69f3
 8009c0c:	58000c00 	.word	0x58000c00
 8009c10:	11fff4ff 	.word	0x11fff4ff
 8009c14:	40011000 	.word	0x40011000
 8009c18:	58024400 	.word	0x58024400
 8009c1c:	40004400 	.word	0x40004400
 8009c20:	40004800 	.word	0x40004800
 8009c24:	40004c00 	.word	0x40004c00
 8009c28:	40005000 	.word	0x40005000
 8009c2c:	2320      	movs	r3, #32
 8009c2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c32:	e128      	b.n	8009e86 <UART_SetConfig+0x5a6>
 8009c34:	2340      	movs	r3, #64	@ 0x40
 8009c36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c3a:	e124      	b.n	8009e86 <UART_SetConfig+0x5a6>
 8009c3c:	2380      	movs	r3, #128	@ 0x80
 8009c3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c42:	e120      	b.n	8009e86 <UART_SetConfig+0x5a6>
 8009c44:	697b      	ldr	r3, [r7, #20]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	4acb      	ldr	r2, [pc, #812]	@ (8009f78 <UART_SetConfig+0x698>)
 8009c4a:	4293      	cmp	r3, r2
 8009c4c:	d176      	bne.n	8009d3c <UART_SetConfig+0x45c>
 8009c4e:	4bcb      	ldr	r3, [pc, #812]	@ (8009f7c <UART_SetConfig+0x69c>)
 8009c50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009c52:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009c56:	2b28      	cmp	r3, #40	@ 0x28
 8009c58:	d86c      	bhi.n	8009d34 <UART_SetConfig+0x454>
 8009c5a:	a201      	add	r2, pc, #4	@ (adr r2, 8009c60 <UART_SetConfig+0x380>)
 8009c5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c60:	08009d05 	.word	0x08009d05
 8009c64:	08009d35 	.word	0x08009d35
 8009c68:	08009d35 	.word	0x08009d35
 8009c6c:	08009d35 	.word	0x08009d35
 8009c70:	08009d35 	.word	0x08009d35
 8009c74:	08009d35 	.word	0x08009d35
 8009c78:	08009d35 	.word	0x08009d35
 8009c7c:	08009d35 	.word	0x08009d35
 8009c80:	08009d0d 	.word	0x08009d0d
 8009c84:	08009d35 	.word	0x08009d35
 8009c88:	08009d35 	.word	0x08009d35
 8009c8c:	08009d35 	.word	0x08009d35
 8009c90:	08009d35 	.word	0x08009d35
 8009c94:	08009d35 	.word	0x08009d35
 8009c98:	08009d35 	.word	0x08009d35
 8009c9c:	08009d35 	.word	0x08009d35
 8009ca0:	08009d15 	.word	0x08009d15
 8009ca4:	08009d35 	.word	0x08009d35
 8009ca8:	08009d35 	.word	0x08009d35
 8009cac:	08009d35 	.word	0x08009d35
 8009cb0:	08009d35 	.word	0x08009d35
 8009cb4:	08009d35 	.word	0x08009d35
 8009cb8:	08009d35 	.word	0x08009d35
 8009cbc:	08009d35 	.word	0x08009d35
 8009cc0:	08009d1d 	.word	0x08009d1d
 8009cc4:	08009d35 	.word	0x08009d35
 8009cc8:	08009d35 	.word	0x08009d35
 8009ccc:	08009d35 	.word	0x08009d35
 8009cd0:	08009d35 	.word	0x08009d35
 8009cd4:	08009d35 	.word	0x08009d35
 8009cd8:	08009d35 	.word	0x08009d35
 8009cdc:	08009d35 	.word	0x08009d35
 8009ce0:	08009d25 	.word	0x08009d25
 8009ce4:	08009d35 	.word	0x08009d35
 8009ce8:	08009d35 	.word	0x08009d35
 8009cec:	08009d35 	.word	0x08009d35
 8009cf0:	08009d35 	.word	0x08009d35
 8009cf4:	08009d35 	.word	0x08009d35
 8009cf8:	08009d35 	.word	0x08009d35
 8009cfc:	08009d35 	.word	0x08009d35
 8009d00:	08009d2d 	.word	0x08009d2d
 8009d04:	2301      	movs	r3, #1
 8009d06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d0a:	e0bc      	b.n	8009e86 <UART_SetConfig+0x5a6>
 8009d0c:	2304      	movs	r3, #4
 8009d0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d12:	e0b8      	b.n	8009e86 <UART_SetConfig+0x5a6>
 8009d14:	2308      	movs	r3, #8
 8009d16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d1a:	e0b4      	b.n	8009e86 <UART_SetConfig+0x5a6>
 8009d1c:	2310      	movs	r3, #16
 8009d1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d22:	e0b0      	b.n	8009e86 <UART_SetConfig+0x5a6>
 8009d24:	2320      	movs	r3, #32
 8009d26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d2a:	e0ac      	b.n	8009e86 <UART_SetConfig+0x5a6>
 8009d2c:	2340      	movs	r3, #64	@ 0x40
 8009d2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d32:	e0a8      	b.n	8009e86 <UART_SetConfig+0x5a6>
 8009d34:	2380      	movs	r3, #128	@ 0x80
 8009d36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d3a:	e0a4      	b.n	8009e86 <UART_SetConfig+0x5a6>
 8009d3c:	697b      	ldr	r3, [r7, #20]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	4a8f      	ldr	r2, [pc, #572]	@ (8009f80 <UART_SetConfig+0x6a0>)
 8009d42:	4293      	cmp	r3, r2
 8009d44:	d130      	bne.n	8009da8 <UART_SetConfig+0x4c8>
 8009d46:	4b8d      	ldr	r3, [pc, #564]	@ (8009f7c <UART_SetConfig+0x69c>)
 8009d48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009d4a:	f003 0307 	and.w	r3, r3, #7
 8009d4e:	2b05      	cmp	r3, #5
 8009d50:	d826      	bhi.n	8009da0 <UART_SetConfig+0x4c0>
 8009d52:	a201      	add	r2, pc, #4	@ (adr r2, 8009d58 <UART_SetConfig+0x478>)
 8009d54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d58:	08009d71 	.word	0x08009d71
 8009d5c:	08009d79 	.word	0x08009d79
 8009d60:	08009d81 	.word	0x08009d81
 8009d64:	08009d89 	.word	0x08009d89
 8009d68:	08009d91 	.word	0x08009d91
 8009d6c:	08009d99 	.word	0x08009d99
 8009d70:	2300      	movs	r3, #0
 8009d72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d76:	e086      	b.n	8009e86 <UART_SetConfig+0x5a6>
 8009d78:	2304      	movs	r3, #4
 8009d7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d7e:	e082      	b.n	8009e86 <UART_SetConfig+0x5a6>
 8009d80:	2308      	movs	r3, #8
 8009d82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d86:	e07e      	b.n	8009e86 <UART_SetConfig+0x5a6>
 8009d88:	2310      	movs	r3, #16
 8009d8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d8e:	e07a      	b.n	8009e86 <UART_SetConfig+0x5a6>
 8009d90:	2320      	movs	r3, #32
 8009d92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d96:	e076      	b.n	8009e86 <UART_SetConfig+0x5a6>
 8009d98:	2340      	movs	r3, #64	@ 0x40
 8009d9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d9e:	e072      	b.n	8009e86 <UART_SetConfig+0x5a6>
 8009da0:	2380      	movs	r3, #128	@ 0x80
 8009da2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009da6:	e06e      	b.n	8009e86 <UART_SetConfig+0x5a6>
 8009da8:	697b      	ldr	r3, [r7, #20]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	4a75      	ldr	r2, [pc, #468]	@ (8009f84 <UART_SetConfig+0x6a4>)
 8009dae:	4293      	cmp	r3, r2
 8009db0:	d130      	bne.n	8009e14 <UART_SetConfig+0x534>
 8009db2:	4b72      	ldr	r3, [pc, #456]	@ (8009f7c <UART_SetConfig+0x69c>)
 8009db4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009db6:	f003 0307 	and.w	r3, r3, #7
 8009dba:	2b05      	cmp	r3, #5
 8009dbc:	d826      	bhi.n	8009e0c <UART_SetConfig+0x52c>
 8009dbe:	a201      	add	r2, pc, #4	@ (adr r2, 8009dc4 <UART_SetConfig+0x4e4>)
 8009dc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dc4:	08009ddd 	.word	0x08009ddd
 8009dc8:	08009de5 	.word	0x08009de5
 8009dcc:	08009ded 	.word	0x08009ded
 8009dd0:	08009df5 	.word	0x08009df5
 8009dd4:	08009dfd 	.word	0x08009dfd
 8009dd8:	08009e05 	.word	0x08009e05
 8009ddc:	2300      	movs	r3, #0
 8009dde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009de2:	e050      	b.n	8009e86 <UART_SetConfig+0x5a6>
 8009de4:	2304      	movs	r3, #4
 8009de6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009dea:	e04c      	b.n	8009e86 <UART_SetConfig+0x5a6>
 8009dec:	2308      	movs	r3, #8
 8009dee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009df2:	e048      	b.n	8009e86 <UART_SetConfig+0x5a6>
 8009df4:	2310      	movs	r3, #16
 8009df6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009dfa:	e044      	b.n	8009e86 <UART_SetConfig+0x5a6>
 8009dfc:	2320      	movs	r3, #32
 8009dfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e02:	e040      	b.n	8009e86 <UART_SetConfig+0x5a6>
 8009e04:	2340      	movs	r3, #64	@ 0x40
 8009e06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e0a:	e03c      	b.n	8009e86 <UART_SetConfig+0x5a6>
 8009e0c:	2380      	movs	r3, #128	@ 0x80
 8009e0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e12:	e038      	b.n	8009e86 <UART_SetConfig+0x5a6>
 8009e14:	697b      	ldr	r3, [r7, #20]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	4a5b      	ldr	r2, [pc, #364]	@ (8009f88 <UART_SetConfig+0x6a8>)
 8009e1a:	4293      	cmp	r3, r2
 8009e1c:	d130      	bne.n	8009e80 <UART_SetConfig+0x5a0>
 8009e1e:	4b57      	ldr	r3, [pc, #348]	@ (8009f7c <UART_SetConfig+0x69c>)
 8009e20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009e22:	f003 0307 	and.w	r3, r3, #7
 8009e26:	2b05      	cmp	r3, #5
 8009e28:	d826      	bhi.n	8009e78 <UART_SetConfig+0x598>
 8009e2a:	a201      	add	r2, pc, #4	@ (adr r2, 8009e30 <UART_SetConfig+0x550>)
 8009e2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e30:	08009e49 	.word	0x08009e49
 8009e34:	08009e51 	.word	0x08009e51
 8009e38:	08009e59 	.word	0x08009e59
 8009e3c:	08009e61 	.word	0x08009e61
 8009e40:	08009e69 	.word	0x08009e69
 8009e44:	08009e71 	.word	0x08009e71
 8009e48:	2302      	movs	r3, #2
 8009e4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e4e:	e01a      	b.n	8009e86 <UART_SetConfig+0x5a6>
 8009e50:	2304      	movs	r3, #4
 8009e52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e56:	e016      	b.n	8009e86 <UART_SetConfig+0x5a6>
 8009e58:	2308      	movs	r3, #8
 8009e5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e5e:	e012      	b.n	8009e86 <UART_SetConfig+0x5a6>
 8009e60:	2310      	movs	r3, #16
 8009e62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e66:	e00e      	b.n	8009e86 <UART_SetConfig+0x5a6>
 8009e68:	2320      	movs	r3, #32
 8009e6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e6e:	e00a      	b.n	8009e86 <UART_SetConfig+0x5a6>
 8009e70:	2340      	movs	r3, #64	@ 0x40
 8009e72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e76:	e006      	b.n	8009e86 <UART_SetConfig+0x5a6>
 8009e78:	2380      	movs	r3, #128	@ 0x80
 8009e7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e7e:	e002      	b.n	8009e86 <UART_SetConfig+0x5a6>
 8009e80:	2380      	movs	r3, #128	@ 0x80
 8009e82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009e86:	697b      	ldr	r3, [r7, #20]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	4a3f      	ldr	r2, [pc, #252]	@ (8009f88 <UART_SetConfig+0x6a8>)
 8009e8c:	4293      	cmp	r3, r2
 8009e8e:	f040 80f8 	bne.w	800a082 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009e92:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009e96:	2b20      	cmp	r3, #32
 8009e98:	dc46      	bgt.n	8009f28 <UART_SetConfig+0x648>
 8009e9a:	2b02      	cmp	r3, #2
 8009e9c:	f2c0 8082 	blt.w	8009fa4 <UART_SetConfig+0x6c4>
 8009ea0:	3b02      	subs	r3, #2
 8009ea2:	2b1e      	cmp	r3, #30
 8009ea4:	d87e      	bhi.n	8009fa4 <UART_SetConfig+0x6c4>
 8009ea6:	a201      	add	r2, pc, #4	@ (adr r2, 8009eac <UART_SetConfig+0x5cc>)
 8009ea8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009eac:	08009f2f 	.word	0x08009f2f
 8009eb0:	08009fa5 	.word	0x08009fa5
 8009eb4:	08009f37 	.word	0x08009f37
 8009eb8:	08009fa5 	.word	0x08009fa5
 8009ebc:	08009fa5 	.word	0x08009fa5
 8009ec0:	08009fa5 	.word	0x08009fa5
 8009ec4:	08009f47 	.word	0x08009f47
 8009ec8:	08009fa5 	.word	0x08009fa5
 8009ecc:	08009fa5 	.word	0x08009fa5
 8009ed0:	08009fa5 	.word	0x08009fa5
 8009ed4:	08009fa5 	.word	0x08009fa5
 8009ed8:	08009fa5 	.word	0x08009fa5
 8009edc:	08009fa5 	.word	0x08009fa5
 8009ee0:	08009fa5 	.word	0x08009fa5
 8009ee4:	08009f57 	.word	0x08009f57
 8009ee8:	08009fa5 	.word	0x08009fa5
 8009eec:	08009fa5 	.word	0x08009fa5
 8009ef0:	08009fa5 	.word	0x08009fa5
 8009ef4:	08009fa5 	.word	0x08009fa5
 8009ef8:	08009fa5 	.word	0x08009fa5
 8009efc:	08009fa5 	.word	0x08009fa5
 8009f00:	08009fa5 	.word	0x08009fa5
 8009f04:	08009fa5 	.word	0x08009fa5
 8009f08:	08009fa5 	.word	0x08009fa5
 8009f0c:	08009fa5 	.word	0x08009fa5
 8009f10:	08009fa5 	.word	0x08009fa5
 8009f14:	08009fa5 	.word	0x08009fa5
 8009f18:	08009fa5 	.word	0x08009fa5
 8009f1c:	08009fa5 	.word	0x08009fa5
 8009f20:	08009fa5 	.word	0x08009fa5
 8009f24:	08009f97 	.word	0x08009f97
 8009f28:	2b40      	cmp	r3, #64	@ 0x40
 8009f2a:	d037      	beq.n	8009f9c <UART_SetConfig+0x6bc>
 8009f2c:	e03a      	b.n	8009fa4 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8009f2e:	f7fe fc8f 	bl	8008850 <HAL_RCCEx_GetD3PCLK1Freq>
 8009f32:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009f34:	e03c      	b.n	8009fb0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009f36:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009f3a:	4618      	mov	r0, r3
 8009f3c:	f7fe fc9e 	bl	800887c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009f40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f44:	e034      	b.n	8009fb0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009f46:	f107 0318 	add.w	r3, r7, #24
 8009f4a:	4618      	mov	r0, r3
 8009f4c:	f7fe fdea 	bl	8008b24 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009f50:	69fb      	ldr	r3, [r7, #28]
 8009f52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f54:	e02c      	b.n	8009fb0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009f56:	4b09      	ldr	r3, [pc, #36]	@ (8009f7c <UART_SetConfig+0x69c>)
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	f003 0320 	and.w	r3, r3, #32
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d016      	beq.n	8009f90 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009f62:	4b06      	ldr	r3, [pc, #24]	@ (8009f7c <UART_SetConfig+0x69c>)
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	08db      	lsrs	r3, r3, #3
 8009f68:	f003 0303 	and.w	r3, r3, #3
 8009f6c:	4a07      	ldr	r2, [pc, #28]	@ (8009f8c <UART_SetConfig+0x6ac>)
 8009f6e:	fa22 f303 	lsr.w	r3, r2, r3
 8009f72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009f74:	e01c      	b.n	8009fb0 <UART_SetConfig+0x6d0>
 8009f76:	bf00      	nop
 8009f78:	40011400 	.word	0x40011400
 8009f7c:	58024400 	.word	0x58024400
 8009f80:	40007800 	.word	0x40007800
 8009f84:	40007c00 	.word	0x40007c00
 8009f88:	58000c00 	.word	0x58000c00
 8009f8c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8009f90:	4b9d      	ldr	r3, [pc, #628]	@ (800a208 <UART_SetConfig+0x928>)
 8009f92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f94:	e00c      	b.n	8009fb0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009f96:	4b9d      	ldr	r3, [pc, #628]	@ (800a20c <UART_SetConfig+0x92c>)
 8009f98:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f9a:	e009      	b.n	8009fb0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009f9c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009fa0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009fa2:	e005      	b.n	8009fb0 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8009fa4:	2300      	movs	r3, #0
 8009fa6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009fa8:	2301      	movs	r3, #1
 8009faa:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009fae:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009fb0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	f000 81de 	beq.w	800a374 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009fb8:	697b      	ldr	r3, [r7, #20]
 8009fba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009fbc:	4a94      	ldr	r2, [pc, #592]	@ (800a210 <UART_SetConfig+0x930>)
 8009fbe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009fc2:	461a      	mov	r2, r3
 8009fc4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009fc6:	fbb3 f3f2 	udiv	r3, r3, r2
 8009fca:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009fcc:	697b      	ldr	r3, [r7, #20]
 8009fce:	685a      	ldr	r2, [r3, #4]
 8009fd0:	4613      	mov	r3, r2
 8009fd2:	005b      	lsls	r3, r3, #1
 8009fd4:	4413      	add	r3, r2
 8009fd6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009fd8:	429a      	cmp	r2, r3
 8009fda:	d305      	bcc.n	8009fe8 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009fdc:	697b      	ldr	r3, [r7, #20]
 8009fde:	685b      	ldr	r3, [r3, #4]
 8009fe0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009fe2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009fe4:	429a      	cmp	r2, r3
 8009fe6:	d903      	bls.n	8009ff0 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8009fe8:	2301      	movs	r3, #1
 8009fea:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009fee:	e1c1      	b.n	800a374 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009ff0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009ff2:	2200      	movs	r2, #0
 8009ff4:	60bb      	str	r3, [r7, #8]
 8009ff6:	60fa      	str	r2, [r7, #12]
 8009ff8:	697b      	ldr	r3, [r7, #20]
 8009ffa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ffc:	4a84      	ldr	r2, [pc, #528]	@ (800a210 <UART_SetConfig+0x930>)
 8009ffe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a002:	b29b      	uxth	r3, r3
 800a004:	2200      	movs	r2, #0
 800a006:	603b      	str	r3, [r7, #0]
 800a008:	607a      	str	r2, [r7, #4]
 800a00a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a00e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a012:	f7f6 f9bd 	bl	8000390 <__aeabi_uldivmod>
 800a016:	4602      	mov	r2, r0
 800a018:	460b      	mov	r3, r1
 800a01a:	4610      	mov	r0, r2
 800a01c:	4619      	mov	r1, r3
 800a01e:	f04f 0200 	mov.w	r2, #0
 800a022:	f04f 0300 	mov.w	r3, #0
 800a026:	020b      	lsls	r3, r1, #8
 800a028:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a02c:	0202      	lsls	r2, r0, #8
 800a02e:	6979      	ldr	r1, [r7, #20]
 800a030:	6849      	ldr	r1, [r1, #4]
 800a032:	0849      	lsrs	r1, r1, #1
 800a034:	2000      	movs	r0, #0
 800a036:	460c      	mov	r4, r1
 800a038:	4605      	mov	r5, r0
 800a03a:	eb12 0804 	adds.w	r8, r2, r4
 800a03e:	eb43 0905 	adc.w	r9, r3, r5
 800a042:	697b      	ldr	r3, [r7, #20]
 800a044:	685b      	ldr	r3, [r3, #4]
 800a046:	2200      	movs	r2, #0
 800a048:	469a      	mov	sl, r3
 800a04a:	4693      	mov	fp, r2
 800a04c:	4652      	mov	r2, sl
 800a04e:	465b      	mov	r3, fp
 800a050:	4640      	mov	r0, r8
 800a052:	4649      	mov	r1, r9
 800a054:	f7f6 f99c 	bl	8000390 <__aeabi_uldivmod>
 800a058:	4602      	mov	r2, r0
 800a05a:	460b      	mov	r3, r1
 800a05c:	4613      	mov	r3, r2
 800a05e:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a060:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a062:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a066:	d308      	bcc.n	800a07a <UART_SetConfig+0x79a>
 800a068:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a06a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a06e:	d204      	bcs.n	800a07a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800a070:	697b      	ldr	r3, [r7, #20]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a076:	60da      	str	r2, [r3, #12]
 800a078:	e17c      	b.n	800a374 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800a07a:	2301      	movs	r3, #1
 800a07c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800a080:	e178      	b.n	800a374 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a082:	697b      	ldr	r3, [r7, #20]
 800a084:	69db      	ldr	r3, [r3, #28]
 800a086:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a08a:	f040 80c5 	bne.w	800a218 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800a08e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a092:	2b20      	cmp	r3, #32
 800a094:	dc48      	bgt.n	800a128 <UART_SetConfig+0x848>
 800a096:	2b00      	cmp	r3, #0
 800a098:	db7b      	blt.n	800a192 <UART_SetConfig+0x8b2>
 800a09a:	2b20      	cmp	r3, #32
 800a09c:	d879      	bhi.n	800a192 <UART_SetConfig+0x8b2>
 800a09e:	a201      	add	r2, pc, #4	@ (adr r2, 800a0a4 <UART_SetConfig+0x7c4>)
 800a0a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0a4:	0800a12f 	.word	0x0800a12f
 800a0a8:	0800a137 	.word	0x0800a137
 800a0ac:	0800a193 	.word	0x0800a193
 800a0b0:	0800a193 	.word	0x0800a193
 800a0b4:	0800a13f 	.word	0x0800a13f
 800a0b8:	0800a193 	.word	0x0800a193
 800a0bc:	0800a193 	.word	0x0800a193
 800a0c0:	0800a193 	.word	0x0800a193
 800a0c4:	0800a14f 	.word	0x0800a14f
 800a0c8:	0800a193 	.word	0x0800a193
 800a0cc:	0800a193 	.word	0x0800a193
 800a0d0:	0800a193 	.word	0x0800a193
 800a0d4:	0800a193 	.word	0x0800a193
 800a0d8:	0800a193 	.word	0x0800a193
 800a0dc:	0800a193 	.word	0x0800a193
 800a0e0:	0800a193 	.word	0x0800a193
 800a0e4:	0800a15f 	.word	0x0800a15f
 800a0e8:	0800a193 	.word	0x0800a193
 800a0ec:	0800a193 	.word	0x0800a193
 800a0f0:	0800a193 	.word	0x0800a193
 800a0f4:	0800a193 	.word	0x0800a193
 800a0f8:	0800a193 	.word	0x0800a193
 800a0fc:	0800a193 	.word	0x0800a193
 800a100:	0800a193 	.word	0x0800a193
 800a104:	0800a193 	.word	0x0800a193
 800a108:	0800a193 	.word	0x0800a193
 800a10c:	0800a193 	.word	0x0800a193
 800a110:	0800a193 	.word	0x0800a193
 800a114:	0800a193 	.word	0x0800a193
 800a118:	0800a193 	.word	0x0800a193
 800a11c:	0800a193 	.word	0x0800a193
 800a120:	0800a193 	.word	0x0800a193
 800a124:	0800a185 	.word	0x0800a185
 800a128:	2b40      	cmp	r3, #64	@ 0x40
 800a12a:	d02e      	beq.n	800a18a <UART_SetConfig+0x8aa>
 800a12c:	e031      	b.n	800a192 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a12e:	f7fc fbd9 	bl	80068e4 <HAL_RCC_GetPCLK1Freq>
 800a132:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a134:	e033      	b.n	800a19e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a136:	f7fc fbeb 	bl	8006910 <HAL_RCC_GetPCLK2Freq>
 800a13a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a13c:	e02f      	b.n	800a19e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a13e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a142:	4618      	mov	r0, r3
 800a144:	f7fe fb9a 	bl	800887c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a148:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a14a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a14c:	e027      	b.n	800a19e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a14e:	f107 0318 	add.w	r3, r7, #24
 800a152:	4618      	mov	r0, r3
 800a154:	f7fe fce6 	bl	8008b24 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a158:	69fb      	ldr	r3, [r7, #28]
 800a15a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a15c:	e01f      	b.n	800a19e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a15e:	4b2d      	ldr	r3, [pc, #180]	@ (800a214 <UART_SetConfig+0x934>)
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	f003 0320 	and.w	r3, r3, #32
 800a166:	2b00      	cmp	r3, #0
 800a168:	d009      	beq.n	800a17e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a16a:	4b2a      	ldr	r3, [pc, #168]	@ (800a214 <UART_SetConfig+0x934>)
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	08db      	lsrs	r3, r3, #3
 800a170:	f003 0303 	and.w	r3, r3, #3
 800a174:	4a24      	ldr	r2, [pc, #144]	@ (800a208 <UART_SetConfig+0x928>)
 800a176:	fa22 f303 	lsr.w	r3, r2, r3
 800a17a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a17c:	e00f      	b.n	800a19e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800a17e:	4b22      	ldr	r3, [pc, #136]	@ (800a208 <UART_SetConfig+0x928>)
 800a180:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a182:	e00c      	b.n	800a19e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a184:	4b21      	ldr	r3, [pc, #132]	@ (800a20c <UART_SetConfig+0x92c>)
 800a186:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a188:	e009      	b.n	800a19e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a18a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a18e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a190:	e005      	b.n	800a19e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800a192:	2300      	movs	r3, #0
 800a194:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800a196:	2301      	movs	r3, #1
 800a198:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800a19c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a19e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	f000 80e7 	beq.w	800a374 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a1a6:	697b      	ldr	r3, [r7, #20]
 800a1a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a1aa:	4a19      	ldr	r2, [pc, #100]	@ (800a210 <UART_SetConfig+0x930>)
 800a1ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a1b0:	461a      	mov	r2, r3
 800a1b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a1b4:	fbb3 f3f2 	udiv	r3, r3, r2
 800a1b8:	005a      	lsls	r2, r3, #1
 800a1ba:	697b      	ldr	r3, [r7, #20]
 800a1bc:	685b      	ldr	r3, [r3, #4]
 800a1be:	085b      	lsrs	r3, r3, #1
 800a1c0:	441a      	add	r2, r3
 800a1c2:	697b      	ldr	r3, [r7, #20]
 800a1c4:	685b      	ldr	r3, [r3, #4]
 800a1c6:	fbb2 f3f3 	udiv	r3, r2, r3
 800a1ca:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a1cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1ce:	2b0f      	cmp	r3, #15
 800a1d0:	d916      	bls.n	800a200 <UART_SetConfig+0x920>
 800a1d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a1d8:	d212      	bcs.n	800a200 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a1da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1dc:	b29b      	uxth	r3, r3
 800a1de:	f023 030f 	bic.w	r3, r3, #15
 800a1e2:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a1e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1e6:	085b      	lsrs	r3, r3, #1
 800a1e8:	b29b      	uxth	r3, r3
 800a1ea:	f003 0307 	and.w	r3, r3, #7
 800a1ee:	b29a      	uxth	r2, r3
 800a1f0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800a1f2:	4313      	orrs	r3, r2
 800a1f4:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800a1f6:	697b      	ldr	r3, [r7, #20]
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800a1fc:	60da      	str	r2, [r3, #12]
 800a1fe:	e0b9      	b.n	800a374 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800a200:	2301      	movs	r3, #1
 800a202:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800a206:	e0b5      	b.n	800a374 <UART_SetConfig+0xa94>
 800a208:	03d09000 	.word	0x03d09000
 800a20c:	003d0900 	.word	0x003d0900
 800a210:	0800d670 	.word	0x0800d670
 800a214:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800a218:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a21c:	2b20      	cmp	r3, #32
 800a21e:	dc49      	bgt.n	800a2b4 <UART_SetConfig+0x9d4>
 800a220:	2b00      	cmp	r3, #0
 800a222:	db7c      	blt.n	800a31e <UART_SetConfig+0xa3e>
 800a224:	2b20      	cmp	r3, #32
 800a226:	d87a      	bhi.n	800a31e <UART_SetConfig+0xa3e>
 800a228:	a201      	add	r2, pc, #4	@ (adr r2, 800a230 <UART_SetConfig+0x950>)
 800a22a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a22e:	bf00      	nop
 800a230:	0800a2bb 	.word	0x0800a2bb
 800a234:	0800a2c3 	.word	0x0800a2c3
 800a238:	0800a31f 	.word	0x0800a31f
 800a23c:	0800a31f 	.word	0x0800a31f
 800a240:	0800a2cb 	.word	0x0800a2cb
 800a244:	0800a31f 	.word	0x0800a31f
 800a248:	0800a31f 	.word	0x0800a31f
 800a24c:	0800a31f 	.word	0x0800a31f
 800a250:	0800a2db 	.word	0x0800a2db
 800a254:	0800a31f 	.word	0x0800a31f
 800a258:	0800a31f 	.word	0x0800a31f
 800a25c:	0800a31f 	.word	0x0800a31f
 800a260:	0800a31f 	.word	0x0800a31f
 800a264:	0800a31f 	.word	0x0800a31f
 800a268:	0800a31f 	.word	0x0800a31f
 800a26c:	0800a31f 	.word	0x0800a31f
 800a270:	0800a2eb 	.word	0x0800a2eb
 800a274:	0800a31f 	.word	0x0800a31f
 800a278:	0800a31f 	.word	0x0800a31f
 800a27c:	0800a31f 	.word	0x0800a31f
 800a280:	0800a31f 	.word	0x0800a31f
 800a284:	0800a31f 	.word	0x0800a31f
 800a288:	0800a31f 	.word	0x0800a31f
 800a28c:	0800a31f 	.word	0x0800a31f
 800a290:	0800a31f 	.word	0x0800a31f
 800a294:	0800a31f 	.word	0x0800a31f
 800a298:	0800a31f 	.word	0x0800a31f
 800a29c:	0800a31f 	.word	0x0800a31f
 800a2a0:	0800a31f 	.word	0x0800a31f
 800a2a4:	0800a31f 	.word	0x0800a31f
 800a2a8:	0800a31f 	.word	0x0800a31f
 800a2ac:	0800a31f 	.word	0x0800a31f
 800a2b0:	0800a311 	.word	0x0800a311
 800a2b4:	2b40      	cmp	r3, #64	@ 0x40
 800a2b6:	d02e      	beq.n	800a316 <UART_SetConfig+0xa36>
 800a2b8:	e031      	b.n	800a31e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a2ba:	f7fc fb13 	bl	80068e4 <HAL_RCC_GetPCLK1Freq>
 800a2be:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a2c0:	e033      	b.n	800a32a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a2c2:	f7fc fb25 	bl	8006910 <HAL_RCC_GetPCLK2Freq>
 800a2c6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a2c8:	e02f      	b.n	800a32a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a2ca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a2ce:	4618      	mov	r0, r3
 800a2d0:	f7fe fad4 	bl	800887c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a2d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a2d8:	e027      	b.n	800a32a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a2da:	f107 0318 	add.w	r3, r7, #24
 800a2de:	4618      	mov	r0, r3
 800a2e0:	f7fe fc20 	bl	8008b24 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a2e4:	69fb      	ldr	r3, [r7, #28]
 800a2e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a2e8:	e01f      	b.n	800a32a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a2ea:	4b2d      	ldr	r3, [pc, #180]	@ (800a3a0 <UART_SetConfig+0xac0>)
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	f003 0320 	and.w	r3, r3, #32
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d009      	beq.n	800a30a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a2f6:	4b2a      	ldr	r3, [pc, #168]	@ (800a3a0 <UART_SetConfig+0xac0>)
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	08db      	lsrs	r3, r3, #3
 800a2fc:	f003 0303 	and.w	r3, r3, #3
 800a300:	4a28      	ldr	r2, [pc, #160]	@ (800a3a4 <UART_SetConfig+0xac4>)
 800a302:	fa22 f303 	lsr.w	r3, r2, r3
 800a306:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a308:	e00f      	b.n	800a32a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800a30a:	4b26      	ldr	r3, [pc, #152]	@ (800a3a4 <UART_SetConfig+0xac4>)
 800a30c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a30e:	e00c      	b.n	800a32a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a310:	4b25      	ldr	r3, [pc, #148]	@ (800a3a8 <UART_SetConfig+0xac8>)
 800a312:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a314:	e009      	b.n	800a32a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a316:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a31a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a31c:	e005      	b.n	800a32a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800a31e:	2300      	movs	r3, #0
 800a320:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800a322:	2301      	movs	r3, #1
 800a324:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800a328:	bf00      	nop
    }

    if (pclk != 0U)
 800a32a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d021      	beq.n	800a374 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a330:	697b      	ldr	r3, [r7, #20]
 800a332:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a334:	4a1d      	ldr	r2, [pc, #116]	@ (800a3ac <UART_SetConfig+0xacc>)
 800a336:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a33a:	461a      	mov	r2, r3
 800a33c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a33e:	fbb3 f2f2 	udiv	r2, r3, r2
 800a342:	697b      	ldr	r3, [r7, #20]
 800a344:	685b      	ldr	r3, [r3, #4]
 800a346:	085b      	lsrs	r3, r3, #1
 800a348:	441a      	add	r2, r3
 800a34a:	697b      	ldr	r3, [r7, #20]
 800a34c:	685b      	ldr	r3, [r3, #4]
 800a34e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a352:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a354:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a356:	2b0f      	cmp	r3, #15
 800a358:	d909      	bls.n	800a36e <UART_SetConfig+0xa8e>
 800a35a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a35c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a360:	d205      	bcs.n	800a36e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a362:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a364:	b29a      	uxth	r2, r3
 800a366:	697b      	ldr	r3, [r7, #20]
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	60da      	str	r2, [r3, #12]
 800a36c:	e002      	b.n	800a374 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800a36e:	2301      	movs	r3, #1
 800a370:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a374:	697b      	ldr	r3, [r7, #20]
 800a376:	2201      	movs	r2, #1
 800a378:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800a37c:	697b      	ldr	r3, [r7, #20]
 800a37e:	2201      	movs	r2, #1
 800a380:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a384:	697b      	ldr	r3, [r7, #20]
 800a386:	2200      	movs	r2, #0
 800a388:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800a38a:	697b      	ldr	r3, [r7, #20]
 800a38c:	2200      	movs	r2, #0
 800a38e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800a390:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800a394:	4618      	mov	r0, r3
 800a396:	3748      	adds	r7, #72	@ 0x48
 800a398:	46bd      	mov	sp, r7
 800a39a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a39e:	bf00      	nop
 800a3a0:	58024400 	.word	0x58024400
 800a3a4:	03d09000 	.word	0x03d09000
 800a3a8:	003d0900 	.word	0x003d0900
 800a3ac:	0800d670 	.word	0x0800d670

0800a3b0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a3b0:	b480      	push	{r7}
 800a3b2:	b083      	sub	sp, #12
 800a3b4:	af00      	add	r7, sp, #0
 800a3b6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a3bc:	f003 0308 	and.w	r3, r3, #8
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d00a      	beq.n	800a3da <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	685b      	ldr	r3, [r3, #4]
 800a3ca:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	430a      	orrs	r2, r1
 800a3d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a3de:	f003 0301 	and.w	r3, r3, #1
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d00a      	beq.n	800a3fc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	685b      	ldr	r3, [r3, #4]
 800a3ec:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	430a      	orrs	r2, r1
 800a3fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a400:	f003 0302 	and.w	r3, r3, #2
 800a404:	2b00      	cmp	r3, #0
 800a406:	d00a      	beq.n	800a41e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	685b      	ldr	r3, [r3, #4]
 800a40e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	430a      	orrs	r2, r1
 800a41c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a422:	f003 0304 	and.w	r3, r3, #4
 800a426:	2b00      	cmp	r3, #0
 800a428:	d00a      	beq.n	800a440 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	685b      	ldr	r3, [r3, #4]
 800a430:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	430a      	orrs	r2, r1
 800a43e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a444:	f003 0310 	and.w	r3, r3, #16
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d00a      	beq.n	800a462 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	689b      	ldr	r3, [r3, #8]
 800a452:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	430a      	orrs	r2, r1
 800a460:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a466:	f003 0320 	and.w	r3, r3, #32
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d00a      	beq.n	800a484 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	689b      	ldr	r3, [r3, #8]
 800a474:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	430a      	orrs	r2, r1
 800a482:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a488:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d01a      	beq.n	800a4c6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	685b      	ldr	r3, [r3, #4]
 800a496:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	430a      	orrs	r2, r1
 800a4a4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a4aa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a4ae:	d10a      	bne.n	800a4c6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	685b      	ldr	r3, [r3, #4]
 800a4b6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	430a      	orrs	r2, r1
 800a4c4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a4ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d00a      	beq.n	800a4e8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	685b      	ldr	r3, [r3, #4]
 800a4d8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	430a      	orrs	r2, r1
 800a4e6:	605a      	str	r2, [r3, #4]
  }
}
 800a4e8:	bf00      	nop
 800a4ea:	370c      	adds	r7, #12
 800a4ec:	46bd      	mov	sp, r7
 800a4ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f2:	4770      	bx	lr

0800a4f4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a4f4:	b580      	push	{r7, lr}
 800a4f6:	b098      	sub	sp, #96	@ 0x60
 800a4f8:	af02      	add	r7, sp, #8
 800a4fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	2200      	movs	r2, #0
 800a500:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a504:	f7f7 fbea 	bl	8001cdc <HAL_GetTick>
 800a508:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	f003 0308 	and.w	r3, r3, #8
 800a514:	2b08      	cmp	r3, #8
 800a516:	d12f      	bne.n	800a578 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a518:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a51c:	9300      	str	r3, [sp, #0]
 800a51e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a520:	2200      	movs	r2, #0
 800a522:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800a526:	6878      	ldr	r0, [r7, #4]
 800a528:	f000 f88e 	bl	800a648 <UART_WaitOnFlagUntilTimeout>
 800a52c:	4603      	mov	r3, r0
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d022      	beq.n	800a578 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a538:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a53a:	e853 3f00 	ldrex	r3, [r3]
 800a53e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a540:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a542:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a546:	653b      	str	r3, [r7, #80]	@ 0x50
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	461a      	mov	r2, r3
 800a54e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a550:	647b      	str	r3, [r7, #68]	@ 0x44
 800a552:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a554:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a556:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a558:	e841 2300 	strex	r3, r2, [r1]
 800a55c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a55e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a560:	2b00      	cmp	r3, #0
 800a562:	d1e6      	bne.n	800a532 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	2220      	movs	r2, #32
 800a568:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	2200      	movs	r2, #0
 800a570:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a574:	2303      	movs	r3, #3
 800a576:	e063      	b.n	800a640 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	f003 0304 	and.w	r3, r3, #4
 800a582:	2b04      	cmp	r3, #4
 800a584:	d149      	bne.n	800a61a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a586:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a58a:	9300      	str	r3, [sp, #0]
 800a58c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a58e:	2200      	movs	r2, #0
 800a590:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800a594:	6878      	ldr	r0, [r7, #4]
 800a596:	f000 f857 	bl	800a648 <UART_WaitOnFlagUntilTimeout>
 800a59a:	4603      	mov	r3, r0
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d03c      	beq.n	800a61a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5a8:	e853 3f00 	ldrex	r3, [r3]
 800a5ac:	623b      	str	r3, [r7, #32]
   return(result);
 800a5ae:	6a3b      	ldr	r3, [r7, #32]
 800a5b0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a5b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	461a      	mov	r2, r3
 800a5bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a5be:	633b      	str	r3, [r7, #48]	@ 0x30
 800a5c0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5c2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a5c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a5c6:	e841 2300 	strex	r3, r2, [r1]
 800a5ca:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a5cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d1e6      	bne.n	800a5a0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	3308      	adds	r3, #8
 800a5d8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5da:	693b      	ldr	r3, [r7, #16]
 800a5dc:	e853 3f00 	ldrex	r3, [r3]
 800a5e0:	60fb      	str	r3, [r7, #12]
   return(result);
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	f023 0301 	bic.w	r3, r3, #1
 800a5e8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	3308      	adds	r3, #8
 800a5f0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a5f2:	61fa      	str	r2, [r7, #28]
 800a5f4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5f6:	69b9      	ldr	r1, [r7, #24]
 800a5f8:	69fa      	ldr	r2, [r7, #28]
 800a5fa:	e841 2300 	strex	r3, r2, [r1]
 800a5fe:	617b      	str	r3, [r7, #20]
   return(result);
 800a600:	697b      	ldr	r3, [r7, #20]
 800a602:	2b00      	cmp	r3, #0
 800a604:	d1e5      	bne.n	800a5d2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	2220      	movs	r2, #32
 800a60a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	2200      	movs	r2, #0
 800a612:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a616:	2303      	movs	r3, #3
 800a618:	e012      	b.n	800a640 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	2220      	movs	r2, #32
 800a61e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	2220      	movs	r2, #32
 800a626:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	2200      	movs	r2, #0
 800a62e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	2200      	movs	r2, #0
 800a634:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	2200      	movs	r2, #0
 800a63a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a63e:	2300      	movs	r3, #0
}
 800a640:	4618      	mov	r0, r3
 800a642:	3758      	adds	r7, #88	@ 0x58
 800a644:	46bd      	mov	sp, r7
 800a646:	bd80      	pop	{r7, pc}

0800a648 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a648:	b580      	push	{r7, lr}
 800a64a:	b084      	sub	sp, #16
 800a64c:	af00      	add	r7, sp, #0
 800a64e:	60f8      	str	r0, [r7, #12]
 800a650:	60b9      	str	r1, [r7, #8]
 800a652:	603b      	str	r3, [r7, #0]
 800a654:	4613      	mov	r3, r2
 800a656:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a658:	e04f      	b.n	800a6fa <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a65a:	69bb      	ldr	r3, [r7, #24]
 800a65c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a660:	d04b      	beq.n	800a6fa <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a662:	f7f7 fb3b 	bl	8001cdc <HAL_GetTick>
 800a666:	4602      	mov	r2, r0
 800a668:	683b      	ldr	r3, [r7, #0]
 800a66a:	1ad3      	subs	r3, r2, r3
 800a66c:	69ba      	ldr	r2, [r7, #24]
 800a66e:	429a      	cmp	r2, r3
 800a670:	d302      	bcc.n	800a678 <UART_WaitOnFlagUntilTimeout+0x30>
 800a672:	69bb      	ldr	r3, [r7, #24]
 800a674:	2b00      	cmp	r3, #0
 800a676:	d101      	bne.n	800a67c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a678:	2303      	movs	r3, #3
 800a67a:	e04e      	b.n	800a71a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	f003 0304 	and.w	r3, r3, #4
 800a686:	2b00      	cmp	r3, #0
 800a688:	d037      	beq.n	800a6fa <UART_WaitOnFlagUntilTimeout+0xb2>
 800a68a:	68bb      	ldr	r3, [r7, #8]
 800a68c:	2b80      	cmp	r3, #128	@ 0x80
 800a68e:	d034      	beq.n	800a6fa <UART_WaitOnFlagUntilTimeout+0xb2>
 800a690:	68bb      	ldr	r3, [r7, #8]
 800a692:	2b40      	cmp	r3, #64	@ 0x40
 800a694:	d031      	beq.n	800a6fa <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	69db      	ldr	r3, [r3, #28]
 800a69c:	f003 0308 	and.w	r3, r3, #8
 800a6a0:	2b08      	cmp	r3, #8
 800a6a2:	d110      	bne.n	800a6c6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	2208      	movs	r2, #8
 800a6aa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a6ac:	68f8      	ldr	r0, [r7, #12]
 800a6ae:	f000 f839 	bl	800a724 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	2208      	movs	r2, #8
 800a6b6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	2200      	movs	r2, #0
 800a6be:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800a6c2:	2301      	movs	r3, #1
 800a6c4:	e029      	b.n	800a71a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	69db      	ldr	r3, [r3, #28]
 800a6cc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a6d0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a6d4:	d111      	bne.n	800a6fa <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a6de:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a6e0:	68f8      	ldr	r0, [r7, #12]
 800a6e2:	f000 f81f 	bl	800a724 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	2220      	movs	r2, #32
 800a6ea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	2200      	movs	r2, #0
 800a6f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800a6f6:	2303      	movs	r3, #3
 800a6f8:	e00f      	b.n	800a71a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	69da      	ldr	r2, [r3, #28]
 800a700:	68bb      	ldr	r3, [r7, #8]
 800a702:	4013      	ands	r3, r2
 800a704:	68ba      	ldr	r2, [r7, #8]
 800a706:	429a      	cmp	r2, r3
 800a708:	bf0c      	ite	eq
 800a70a:	2301      	moveq	r3, #1
 800a70c:	2300      	movne	r3, #0
 800a70e:	b2db      	uxtb	r3, r3
 800a710:	461a      	mov	r2, r3
 800a712:	79fb      	ldrb	r3, [r7, #7]
 800a714:	429a      	cmp	r2, r3
 800a716:	d0a0      	beq.n	800a65a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a718:	2300      	movs	r3, #0
}
 800a71a:	4618      	mov	r0, r3
 800a71c:	3710      	adds	r7, #16
 800a71e:	46bd      	mov	sp, r7
 800a720:	bd80      	pop	{r7, pc}
	...

0800a724 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a724:	b480      	push	{r7}
 800a726:	b095      	sub	sp, #84	@ 0x54
 800a728:	af00      	add	r7, sp, #0
 800a72a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a732:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a734:	e853 3f00 	ldrex	r3, [r3]
 800a738:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a73a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a73c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a740:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	461a      	mov	r2, r3
 800a748:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a74a:	643b      	str	r3, [r7, #64]	@ 0x40
 800a74c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a74e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a750:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a752:	e841 2300 	strex	r3, r2, [r1]
 800a756:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a758:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d1e6      	bne.n	800a72c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	3308      	adds	r3, #8
 800a764:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a766:	6a3b      	ldr	r3, [r7, #32]
 800a768:	e853 3f00 	ldrex	r3, [r3]
 800a76c:	61fb      	str	r3, [r7, #28]
   return(result);
 800a76e:	69fa      	ldr	r2, [r7, #28]
 800a770:	4b1e      	ldr	r3, [pc, #120]	@ (800a7ec <UART_EndRxTransfer+0xc8>)
 800a772:	4013      	ands	r3, r2
 800a774:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	3308      	adds	r3, #8
 800a77c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a77e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a780:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a782:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a784:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a786:	e841 2300 	strex	r3, r2, [r1]
 800a78a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a78c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d1e5      	bne.n	800a75e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a796:	2b01      	cmp	r3, #1
 800a798:	d118      	bne.n	800a7cc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	e853 3f00 	ldrex	r3, [r3]
 800a7a6:	60bb      	str	r3, [r7, #8]
   return(result);
 800a7a8:	68bb      	ldr	r3, [r7, #8]
 800a7aa:	f023 0310 	bic.w	r3, r3, #16
 800a7ae:	647b      	str	r3, [r7, #68]	@ 0x44
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	461a      	mov	r2, r3
 800a7b6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a7b8:	61bb      	str	r3, [r7, #24]
 800a7ba:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7bc:	6979      	ldr	r1, [r7, #20]
 800a7be:	69ba      	ldr	r2, [r7, #24]
 800a7c0:	e841 2300 	strex	r3, r2, [r1]
 800a7c4:	613b      	str	r3, [r7, #16]
   return(result);
 800a7c6:	693b      	ldr	r3, [r7, #16]
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d1e6      	bne.n	800a79a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	2220      	movs	r2, #32
 800a7d0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	2200      	movs	r2, #0
 800a7d8:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	2200      	movs	r2, #0
 800a7de:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800a7e0:	bf00      	nop
 800a7e2:	3754      	adds	r7, #84	@ 0x54
 800a7e4:	46bd      	mov	sp, r7
 800a7e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ea:	4770      	bx	lr
 800a7ec:	effffffe 	.word	0xeffffffe

0800a7f0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a7f0:	b480      	push	{r7}
 800a7f2:	b085      	sub	sp, #20
 800a7f4:	af00      	add	r7, sp, #0
 800a7f6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a7fe:	2b01      	cmp	r3, #1
 800a800:	d101      	bne.n	800a806 <HAL_UARTEx_DisableFifoMode+0x16>
 800a802:	2302      	movs	r3, #2
 800a804:	e027      	b.n	800a856 <HAL_UARTEx_DisableFifoMode+0x66>
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	2201      	movs	r2, #1
 800a80a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	2224      	movs	r2, #36	@ 0x24
 800a812:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	681a      	ldr	r2, [r3, #0]
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	f022 0201 	bic.w	r2, r2, #1
 800a82c:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800a834:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	2200      	movs	r2, #0
 800a83a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	68fa      	ldr	r2, [r7, #12]
 800a842:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	2220      	movs	r2, #32
 800a848:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	2200      	movs	r2, #0
 800a850:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a854:	2300      	movs	r3, #0
}
 800a856:	4618      	mov	r0, r3
 800a858:	3714      	adds	r7, #20
 800a85a:	46bd      	mov	sp, r7
 800a85c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a860:	4770      	bx	lr

0800a862 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a862:	b580      	push	{r7, lr}
 800a864:	b084      	sub	sp, #16
 800a866:	af00      	add	r7, sp, #0
 800a868:	6078      	str	r0, [r7, #4]
 800a86a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a872:	2b01      	cmp	r3, #1
 800a874:	d101      	bne.n	800a87a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a876:	2302      	movs	r3, #2
 800a878:	e02d      	b.n	800a8d6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	2201      	movs	r2, #1
 800a87e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	2224      	movs	r2, #36	@ 0x24
 800a886:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	681a      	ldr	r2, [r3, #0]
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	f022 0201 	bic.w	r2, r2, #1
 800a8a0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	689b      	ldr	r3, [r3, #8]
 800a8a8:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	683a      	ldr	r2, [r7, #0]
 800a8b2:	430a      	orrs	r2, r1
 800a8b4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a8b6:	6878      	ldr	r0, [r7, #4]
 800a8b8:	f000 f850 	bl	800a95c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	68fa      	ldr	r2, [r7, #12]
 800a8c2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	2220      	movs	r2, #32
 800a8c8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	2200      	movs	r2, #0
 800a8d0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a8d4:	2300      	movs	r3, #0
}
 800a8d6:	4618      	mov	r0, r3
 800a8d8:	3710      	adds	r7, #16
 800a8da:	46bd      	mov	sp, r7
 800a8dc:	bd80      	pop	{r7, pc}

0800a8de <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a8de:	b580      	push	{r7, lr}
 800a8e0:	b084      	sub	sp, #16
 800a8e2:	af00      	add	r7, sp, #0
 800a8e4:	6078      	str	r0, [r7, #4]
 800a8e6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a8ee:	2b01      	cmp	r3, #1
 800a8f0:	d101      	bne.n	800a8f6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a8f2:	2302      	movs	r3, #2
 800a8f4:	e02d      	b.n	800a952 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	2201      	movs	r2, #1
 800a8fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	2224      	movs	r2, #36	@ 0x24
 800a902:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	681a      	ldr	r2, [r3, #0]
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	f022 0201 	bic.w	r2, r2, #1
 800a91c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	689b      	ldr	r3, [r3, #8]
 800a924:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	683a      	ldr	r2, [r7, #0]
 800a92e:	430a      	orrs	r2, r1
 800a930:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a932:	6878      	ldr	r0, [r7, #4]
 800a934:	f000 f812 	bl	800a95c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	68fa      	ldr	r2, [r7, #12]
 800a93e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	2220      	movs	r2, #32
 800a944:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	2200      	movs	r2, #0
 800a94c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a950:	2300      	movs	r3, #0
}
 800a952:	4618      	mov	r0, r3
 800a954:	3710      	adds	r7, #16
 800a956:	46bd      	mov	sp, r7
 800a958:	bd80      	pop	{r7, pc}
	...

0800a95c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a95c:	b480      	push	{r7}
 800a95e:	b085      	sub	sp, #20
 800a960:	af00      	add	r7, sp, #0
 800a962:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d108      	bne.n	800a97e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	2201      	movs	r2, #1
 800a970:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	2201      	movs	r2, #1
 800a978:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a97c:	e031      	b.n	800a9e2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a97e:	2310      	movs	r3, #16
 800a980:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a982:	2310      	movs	r3, #16
 800a984:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	689b      	ldr	r3, [r3, #8]
 800a98c:	0e5b      	lsrs	r3, r3, #25
 800a98e:	b2db      	uxtb	r3, r3
 800a990:	f003 0307 	and.w	r3, r3, #7
 800a994:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	689b      	ldr	r3, [r3, #8]
 800a99c:	0f5b      	lsrs	r3, r3, #29
 800a99e:	b2db      	uxtb	r3, r3
 800a9a0:	f003 0307 	and.w	r3, r3, #7
 800a9a4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a9a6:	7bbb      	ldrb	r3, [r7, #14]
 800a9a8:	7b3a      	ldrb	r2, [r7, #12]
 800a9aa:	4911      	ldr	r1, [pc, #68]	@ (800a9f0 <UARTEx_SetNbDataToProcess+0x94>)
 800a9ac:	5c8a      	ldrb	r2, [r1, r2]
 800a9ae:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a9b2:	7b3a      	ldrb	r2, [r7, #12]
 800a9b4:	490f      	ldr	r1, [pc, #60]	@ (800a9f4 <UARTEx_SetNbDataToProcess+0x98>)
 800a9b6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a9b8:	fb93 f3f2 	sdiv	r3, r3, r2
 800a9bc:	b29a      	uxth	r2, r3
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a9c4:	7bfb      	ldrb	r3, [r7, #15]
 800a9c6:	7b7a      	ldrb	r2, [r7, #13]
 800a9c8:	4909      	ldr	r1, [pc, #36]	@ (800a9f0 <UARTEx_SetNbDataToProcess+0x94>)
 800a9ca:	5c8a      	ldrb	r2, [r1, r2]
 800a9cc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a9d0:	7b7a      	ldrb	r2, [r7, #13]
 800a9d2:	4908      	ldr	r1, [pc, #32]	@ (800a9f4 <UARTEx_SetNbDataToProcess+0x98>)
 800a9d4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a9d6:	fb93 f3f2 	sdiv	r3, r3, r2
 800a9da:	b29a      	uxth	r2, r3
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800a9e2:	bf00      	nop
 800a9e4:	3714      	adds	r7, #20
 800a9e6:	46bd      	mov	sp, r7
 800a9e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ec:	4770      	bx	lr
 800a9ee:	bf00      	nop
 800a9f0:	0800d688 	.word	0x0800d688
 800a9f4:	0800d690 	.word	0x0800d690

0800a9f8 <__cvt>:
 800a9f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a9fa:	ed2d 8b02 	vpush	{d8}
 800a9fe:	eeb0 8b40 	vmov.f64	d8, d0
 800aa02:	b085      	sub	sp, #20
 800aa04:	4617      	mov	r7, r2
 800aa06:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 800aa08:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800aa0a:	ee18 2a90 	vmov	r2, s17
 800aa0e:	f025 0520 	bic.w	r5, r5, #32
 800aa12:	2a00      	cmp	r2, #0
 800aa14:	bfb6      	itet	lt
 800aa16:	222d      	movlt	r2, #45	@ 0x2d
 800aa18:	2200      	movge	r2, #0
 800aa1a:	eeb1 8b40 	vneglt.f64	d8, d0
 800aa1e:	2d46      	cmp	r5, #70	@ 0x46
 800aa20:	460c      	mov	r4, r1
 800aa22:	701a      	strb	r2, [r3, #0]
 800aa24:	d004      	beq.n	800aa30 <__cvt+0x38>
 800aa26:	2d45      	cmp	r5, #69	@ 0x45
 800aa28:	d100      	bne.n	800aa2c <__cvt+0x34>
 800aa2a:	3401      	adds	r4, #1
 800aa2c:	2102      	movs	r1, #2
 800aa2e:	e000      	b.n	800aa32 <__cvt+0x3a>
 800aa30:	2103      	movs	r1, #3
 800aa32:	ab03      	add	r3, sp, #12
 800aa34:	9301      	str	r3, [sp, #4]
 800aa36:	ab02      	add	r3, sp, #8
 800aa38:	9300      	str	r3, [sp, #0]
 800aa3a:	4622      	mov	r2, r4
 800aa3c:	4633      	mov	r3, r6
 800aa3e:	eeb0 0b48 	vmov.f64	d0, d8
 800aa42:	f000 fe61 	bl	800b708 <_dtoa_r>
 800aa46:	2d47      	cmp	r5, #71	@ 0x47
 800aa48:	d114      	bne.n	800aa74 <__cvt+0x7c>
 800aa4a:	07fb      	lsls	r3, r7, #31
 800aa4c:	d50a      	bpl.n	800aa64 <__cvt+0x6c>
 800aa4e:	1902      	adds	r2, r0, r4
 800aa50:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800aa54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa58:	bf08      	it	eq
 800aa5a:	9203      	streq	r2, [sp, #12]
 800aa5c:	2130      	movs	r1, #48	@ 0x30
 800aa5e:	9b03      	ldr	r3, [sp, #12]
 800aa60:	4293      	cmp	r3, r2
 800aa62:	d319      	bcc.n	800aa98 <__cvt+0xa0>
 800aa64:	9b03      	ldr	r3, [sp, #12]
 800aa66:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800aa68:	1a1b      	subs	r3, r3, r0
 800aa6a:	6013      	str	r3, [r2, #0]
 800aa6c:	b005      	add	sp, #20
 800aa6e:	ecbd 8b02 	vpop	{d8}
 800aa72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aa74:	2d46      	cmp	r5, #70	@ 0x46
 800aa76:	eb00 0204 	add.w	r2, r0, r4
 800aa7a:	d1e9      	bne.n	800aa50 <__cvt+0x58>
 800aa7c:	7803      	ldrb	r3, [r0, #0]
 800aa7e:	2b30      	cmp	r3, #48	@ 0x30
 800aa80:	d107      	bne.n	800aa92 <__cvt+0x9a>
 800aa82:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800aa86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa8a:	bf1c      	itt	ne
 800aa8c:	f1c4 0401 	rsbne	r4, r4, #1
 800aa90:	6034      	strne	r4, [r6, #0]
 800aa92:	6833      	ldr	r3, [r6, #0]
 800aa94:	441a      	add	r2, r3
 800aa96:	e7db      	b.n	800aa50 <__cvt+0x58>
 800aa98:	1c5c      	adds	r4, r3, #1
 800aa9a:	9403      	str	r4, [sp, #12]
 800aa9c:	7019      	strb	r1, [r3, #0]
 800aa9e:	e7de      	b.n	800aa5e <__cvt+0x66>

0800aaa0 <__exponent>:
 800aaa0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aaa2:	2900      	cmp	r1, #0
 800aaa4:	bfba      	itte	lt
 800aaa6:	4249      	neglt	r1, r1
 800aaa8:	232d      	movlt	r3, #45	@ 0x2d
 800aaaa:	232b      	movge	r3, #43	@ 0x2b
 800aaac:	2909      	cmp	r1, #9
 800aaae:	7002      	strb	r2, [r0, #0]
 800aab0:	7043      	strb	r3, [r0, #1]
 800aab2:	dd29      	ble.n	800ab08 <__exponent+0x68>
 800aab4:	f10d 0307 	add.w	r3, sp, #7
 800aab8:	461d      	mov	r5, r3
 800aaba:	270a      	movs	r7, #10
 800aabc:	461a      	mov	r2, r3
 800aabe:	fbb1 f6f7 	udiv	r6, r1, r7
 800aac2:	fb07 1416 	mls	r4, r7, r6, r1
 800aac6:	3430      	adds	r4, #48	@ 0x30
 800aac8:	f802 4c01 	strb.w	r4, [r2, #-1]
 800aacc:	460c      	mov	r4, r1
 800aace:	2c63      	cmp	r4, #99	@ 0x63
 800aad0:	f103 33ff 	add.w	r3, r3, #4294967295
 800aad4:	4631      	mov	r1, r6
 800aad6:	dcf1      	bgt.n	800aabc <__exponent+0x1c>
 800aad8:	3130      	adds	r1, #48	@ 0x30
 800aada:	1e94      	subs	r4, r2, #2
 800aadc:	f803 1c01 	strb.w	r1, [r3, #-1]
 800aae0:	1c41      	adds	r1, r0, #1
 800aae2:	4623      	mov	r3, r4
 800aae4:	42ab      	cmp	r3, r5
 800aae6:	d30a      	bcc.n	800aafe <__exponent+0x5e>
 800aae8:	f10d 0309 	add.w	r3, sp, #9
 800aaec:	1a9b      	subs	r3, r3, r2
 800aaee:	42ac      	cmp	r4, r5
 800aaf0:	bf88      	it	hi
 800aaf2:	2300      	movhi	r3, #0
 800aaf4:	3302      	adds	r3, #2
 800aaf6:	4403      	add	r3, r0
 800aaf8:	1a18      	subs	r0, r3, r0
 800aafa:	b003      	add	sp, #12
 800aafc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aafe:	f813 6b01 	ldrb.w	r6, [r3], #1
 800ab02:	f801 6f01 	strb.w	r6, [r1, #1]!
 800ab06:	e7ed      	b.n	800aae4 <__exponent+0x44>
 800ab08:	2330      	movs	r3, #48	@ 0x30
 800ab0a:	3130      	adds	r1, #48	@ 0x30
 800ab0c:	7083      	strb	r3, [r0, #2]
 800ab0e:	70c1      	strb	r1, [r0, #3]
 800ab10:	1d03      	adds	r3, r0, #4
 800ab12:	e7f1      	b.n	800aaf8 <__exponent+0x58>
 800ab14:	0000      	movs	r0, r0
	...

0800ab18 <_printf_float>:
 800ab18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab1c:	b08d      	sub	sp, #52	@ 0x34
 800ab1e:	460c      	mov	r4, r1
 800ab20:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800ab24:	4616      	mov	r6, r2
 800ab26:	461f      	mov	r7, r3
 800ab28:	4605      	mov	r5, r0
 800ab2a:	f000 fcdf 	bl	800b4ec <_localeconv_r>
 800ab2e:	f8d0 b000 	ldr.w	fp, [r0]
 800ab32:	4658      	mov	r0, fp
 800ab34:	f7f5 fc24 	bl	8000380 <strlen>
 800ab38:	2300      	movs	r3, #0
 800ab3a:	930a      	str	r3, [sp, #40]	@ 0x28
 800ab3c:	f8d8 3000 	ldr.w	r3, [r8]
 800ab40:	f894 9018 	ldrb.w	r9, [r4, #24]
 800ab44:	6822      	ldr	r2, [r4, #0]
 800ab46:	9005      	str	r0, [sp, #20]
 800ab48:	3307      	adds	r3, #7
 800ab4a:	f023 0307 	bic.w	r3, r3, #7
 800ab4e:	f103 0108 	add.w	r1, r3, #8
 800ab52:	f8c8 1000 	str.w	r1, [r8]
 800ab56:	ed93 0b00 	vldr	d0, [r3]
 800ab5a:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 800adb8 <_printf_float+0x2a0>
 800ab5e:	eeb0 7bc0 	vabs.f64	d7, d0
 800ab62:	eeb4 7b46 	vcmp.f64	d7, d6
 800ab66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab6a:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 800ab6e:	dd24      	ble.n	800abba <_printf_float+0xa2>
 800ab70:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800ab74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab78:	d502      	bpl.n	800ab80 <_printf_float+0x68>
 800ab7a:	232d      	movs	r3, #45	@ 0x2d
 800ab7c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ab80:	498f      	ldr	r1, [pc, #572]	@ (800adc0 <_printf_float+0x2a8>)
 800ab82:	4b90      	ldr	r3, [pc, #576]	@ (800adc4 <_printf_float+0x2ac>)
 800ab84:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 800ab88:	bf8c      	ite	hi
 800ab8a:	4688      	movhi	r8, r1
 800ab8c:	4698      	movls	r8, r3
 800ab8e:	f022 0204 	bic.w	r2, r2, #4
 800ab92:	2303      	movs	r3, #3
 800ab94:	6123      	str	r3, [r4, #16]
 800ab96:	6022      	str	r2, [r4, #0]
 800ab98:	f04f 0a00 	mov.w	sl, #0
 800ab9c:	9700      	str	r7, [sp, #0]
 800ab9e:	4633      	mov	r3, r6
 800aba0:	aa0b      	add	r2, sp, #44	@ 0x2c
 800aba2:	4621      	mov	r1, r4
 800aba4:	4628      	mov	r0, r5
 800aba6:	f000 f9d1 	bl	800af4c <_printf_common>
 800abaa:	3001      	adds	r0, #1
 800abac:	f040 8089 	bne.w	800acc2 <_printf_float+0x1aa>
 800abb0:	f04f 30ff 	mov.w	r0, #4294967295
 800abb4:	b00d      	add	sp, #52	@ 0x34
 800abb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abba:	eeb4 0b40 	vcmp.f64	d0, d0
 800abbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800abc2:	d709      	bvc.n	800abd8 <_printf_float+0xc0>
 800abc4:	ee10 3a90 	vmov	r3, s1
 800abc8:	2b00      	cmp	r3, #0
 800abca:	bfbc      	itt	lt
 800abcc:	232d      	movlt	r3, #45	@ 0x2d
 800abce:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800abd2:	497d      	ldr	r1, [pc, #500]	@ (800adc8 <_printf_float+0x2b0>)
 800abd4:	4b7d      	ldr	r3, [pc, #500]	@ (800adcc <_printf_float+0x2b4>)
 800abd6:	e7d5      	b.n	800ab84 <_printf_float+0x6c>
 800abd8:	6863      	ldr	r3, [r4, #4]
 800abda:	1c59      	adds	r1, r3, #1
 800abdc:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 800abe0:	d139      	bne.n	800ac56 <_printf_float+0x13e>
 800abe2:	2306      	movs	r3, #6
 800abe4:	6063      	str	r3, [r4, #4]
 800abe6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800abea:	2300      	movs	r3, #0
 800abec:	6022      	str	r2, [r4, #0]
 800abee:	9303      	str	r3, [sp, #12]
 800abf0:	ab0a      	add	r3, sp, #40	@ 0x28
 800abf2:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800abf6:	ab09      	add	r3, sp, #36	@ 0x24
 800abf8:	9300      	str	r3, [sp, #0]
 800abfa:	6861      	ldr	r1, [r4, #4]
 800abfc:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800ac00:	4628      	mov	r0, r5
 800ac02:	f7ff fef9 	bl	800a9f8 <__cvt>
 800ac06:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800ac0a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ac0c:	4680      	mov	r8, r0
 800ac0e:	d129      	bne.n	800ac64 <_printf_float+0x14c>
 800ac10:	1cc8      	adds	r0, r1, #3
 800ac12:	db02      	blt.n	800ac1a <_printf_float+0x102>
 800ac14:	6863      	ldr	r3, [r4, #4]
 800ac16:	4299      	cmp	r1, r3
 800ac18:	dd41      	ble.n	800ac9e <_printf_float+0x186>
 800ac1a:	f1a9 0902 	sub.w	r9, r9, #2
 800ac1e:	fa5f f989 	uxtb.w	r9, r9
 800ac22:	3901      	subs	r1, #1
 800ac24:	464a      	mov	r2, r9
 800ac26:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800ac2a:	9109      	str	r1, [sp, #36]	@ 0x24
 800ac2c:	f7ff ff38 	bl	800aaa0 <__exponent>
 800ac30:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ac32:	1813      	adds	r3, r2, r0
 800ac34:	2a01      	cmp	r2, #1
 800ac36:	4682      	mov	sl, r0
 800ac38:	6123      	str	r3, [r4, #16]
 800ac3a:	dc02      	bgt.n	800ac42 <_printf_float+0x12a>
 800ac3c:	6822      	ldr	r2, [r4, #0]
 800ac3e:	07d2      	lsls	r2, r2, #31
 800ac40:	d501      	bpl.n	800ac46 <_printf_float+0x12e>
 800ac42:	3301      	adds	r3, #1
 800ac44:	6123      	str	r3, [r4, #16]
 800ac46:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d0a6      	beq.n	800ab9c <_printf_float+0x84>
 800ac4e:	232d      	movs	r3, #45	@ 0x2d
 800ac50:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ac54:	e7a2      	b.n	800ab9c <_printf_float+0x84>
 800ac56:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800ac5a:	d1c4      	bne.n	800abe6 <_printf_float+0xce>
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d1c2      	bne.n	800abe6 <_printf_float+0xce>
 800ac60:	2301      	movs	r3, #1
 800ac62:	e7bf      	b.n	800abe4 <_printf_float+0xcc>
 800ac64:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800ac68:	d9db      	bls.n	800ac22 <_printf_float+0x10a>
 800ac6a:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 800ac6e:	d118      	bne.n	800aca2 <_printf_float+0x18a>
 800ac70:	2900      	cmp	r1, #0
 800ac72:	6863      	ldr	r3, [r4, #4]
 800ac74:	dd0b      	ble.n	800ac8e <_printf_float+0x176>
 800ac76:	6121      	str	r1, [r4, #16]
 800ac78:	b913      	cbnz	r3, 800ac80 <_printf_float+0x168>
 800ac7a:	6822      	ldr	r2, [r4, #0]
 800ac7c:	07d0      	lsls	r0, r2, #31
 800ac7e:	d502      	bpl.n	800ac86 <_printf_float+0x16e>
 800ac80:	3301      	adds	r3, #1
 800ac82:	440b      	add	r3, r1
 800ac84:	6123      	str	r3, [r4, #16]
 800ac86:	65a1      	str	r1, [r4, #88]	@ 0x58
 800ac88:	f04f 0a00 	mov.w	sl, #0
 800ac8c:	e7db      	b.n	800ac46 <_printf_float+0x12e>
 800ac8e:	b913      	cbnz	r3, 800ac96 <_printf_float+0x17e>
 800ac90:	6822      	ldr	r2, [r4, #0]
 800ac92:	07d2      	lsls	r2, r2, #31
 800ac94:	d501      	bpl.n	800ac9a <_printf_float+0x182>
 800ac96:	3302      	adds	r3, #2
 800ac98:	e7f4      	b.n	800ac84 <_printf_float+0x16c>
 800ac9a:	2301      	movs	r3, #1
 800ac9c:	e7f2      	b.n	800ac84 <_printf_float+0x16c>
 800ac9e:	f04f 0967 	mov.w	r9, #103	@ 0x67
 800aca2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800aca4:	4299      	cmp	r1, r3
 800aca6:	db05      	blt.n	800acb4 <_printf_float+0x19c>
 800aca8:	6823      	ldr	r3, [r4, #0]
 800acaa:	6121      	str	r1, [r4, #16]
 800acac:	07d8      	lsls	r0, r3, #31
 800acae:	d5ea      	bpl.n	800ac86 <_printf_float+0x16e>
 800acb0:	1c4b      	adds	r3, r1, #1
 800acb2:	e7e7      	b.n	800ac84 <_printf_float+0x16c>
 800acb4:	2900      	cmp	r1, #0
 800acb6:	bfd4      	ite	le
 800acb8:	f1c1 0202 	rsble	r2, r1, #2
 800acbc:	2201      	movgt	r2, #1
 800acbe:	4413      	add	r3, r2
 800acc0:	e7e0      	b.n	800ac84 <_printf_float+0x16c>
 800acc2:	6823      	ldr	r3, [r4, #0]
 800acc4:	055a      	lsls	r2, r3, #21
 800acc6:	d407      	bmi.n	800acd8 <_printf_float+0x1c0>
 800acc8:	6923      	ldr	r3, [r4, #16]
 800acca:	4642      	mov	r2, r8
 800accc:	4631      	mov	r1, r6
 800acce:	4628      	mov	r0, r5
 800acd0:	47b8      	blx	r7
 800acd2:	3001      	adds	r0, #1
 800acd4:	d12a      	bne.n	800ad2c <_printf_float+0x214>
 800acd6:	e76b      	b.n	800abb0 <_printf_float+0x98>
 800acd8:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800acdc:	f240 80e0 	bls.w	800aea0 <_printf_float+0x388>
 800ace0:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800ace4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ace8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800acec:	d133      	bne.n	800ad56 <_printf_float+0x23e>
 800acee:	4a38      	ldr	r2, [pc, #224]	@ (800add0 <_printf_float+0x2b8>)
 800acf0:	2301      	movs	r3, #1
 800acf2:	4631      	mov	r1, r6
 800acf4:	4628      	mov	r0, r5
 800acf6:	47b8      	blx	r7
 800acf8:	3001      	adds	r0, #1
 800acfa:	f43f af59 	beq.w	800abb0 <_printf_float+0x98>
 800acfe:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800ad02:	4543      	cmp	r3, r8
 800ad04:	db02      	blt.n	800ad0c <_printf_float+0x1f4>
 800ad06:	6823      	ldr	r3, [r4, #0]
 800ad08:	07d8      	lsls	r0, r3, #31
 800ad0a:	d50f      	bpl.n	800ad2c <_printf_float+0x214>
 800ad0c:	9b05      	ldr	r3, [sp, #20]
 800ad0e:	465a      	mov	r2, fp
 800ad10:	4631      	mov	r1, r6
 800ad12:	4628      	mov	r0, r5
 800ad14:	47b8      	blx	r7
 800ad16:	3001      	adds	r0, #1
 800ad18:	f43f af4a 	beq.w	800abb0 <_printf_float+0x98>
 800ad1c:	f04f 0900 	mov.w	r9, #0
 800ad20:	f108 38ff 	add.w	r8, r8, #4294967295
 800ad24:	f104 0a1a 	add.w	sl, r4, #26
 800ad28:	45c8      	cmp	r8, r9
 800ad2a:	dc09      	bgt.n	800ad40 <_printf_float+0x228>
 800ad2c:	6823      	ldr	r3, [r4, #0]
 800ad2e:	079b      	lsls	r3, r3, #30
 800ad30:	f100 8107 	bmi.w	800af42 <_printf_float+0x42a>
 800ad34:	68e0      	ldr	r0, [r4, #12]
 800ad36:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ad38:	4298      	cmp	r0, r3
 800ad3a:	bfb8      	it	lt
 800ad3c:	4618      	movlt	r0, r3
 800ad3e:	e739      	b.n	800abb4 <_printf_float+0x9c>
 800ad40:	2301      	movs	r3, #1
 800ad42:	4652      	mov	r2, sl
 800ad44:	4631      	mov	r1, r6
 800ad46:	4628      	mov	r0, r5
 800ad48:	47b8      	blx	r7
 800ad4a:	3001      	adds	r0, #1
 800ad4c:	f43f af30 	beq.w	800abb0 <_printf_float+0x98>
 800ad50:	f109 0901 	add.w	r9, r9, #1
 800ad54:	e7e8      	b.n	800ad28 <_printf_float+0x210>
 800ad56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	dc3b      	bgt.n	800add4 <_printf_float+0x2bc>
 800ad5c:	4a1c      	ldr	r2, [pc, #112]	@ (800add0 <_printf_float+0x2b8>)
 800ad5e:	2301      	movs	r3, #1
 800ad60:	4631      	mov	r1, r6
 800ad62:	4628      	mov	r0, r5
 800ad64:	47b8      	blx	r7
 800ad66:	3001      	adds	r0, #1
 800ad68:	f43f af22 	beq.w	800abb0 <_printf_float+0x98>
 800ad6c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800ad70:	ea59 0303 	orrs.w	r3, r9, r3
 800ad74:	d102      	bne.n	800ad7c <_printf_float+0x264>
 800ad76:	6823      	ldr	r3, [r4, #0]
 800ad78:	07d9      	lsls	r1, r3, #31
 800ad7a:	d5d7      	bpl.n	800ad2c <_printf_float+0x214>
 800ad7c:	9b05      	ldr	r3, [sp, #20]
 800ad7e:	465a      	mov	r2, fp
 800ad80:	4631      	mov	r1, r6
 800ad82:	4628      	mov	r0, r5
 800ad84:	47b8      	blx	r7
 800ad86:	3001      	adds	r0, #1
 800ad88:	f43f af12 	beq.w	800abb0 <_printf_float+0x98>
 800ad8c:	f04f 0a00 	mov.w	sl, #0
 800ad90:	f104 0b1a 	add.w	fp, r4, #26
 800ad94:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ad96:	425b      	negs	r3, r3
 800ad98:	4553      	cmp	r3, sl
 800ad9a:	dc01      	bgt.n	800ada0 <_printf_float+0x288>
 800ad9c:	464b      	mov	r3, r9
 800ad9e:	e794      	b.n	800acca <_printf_float+0x1b2>
 800ada0:	2301      	movs	r3, #1
 800ada2:	465a      	mov	r2, fp
 800ada4:	4631      	mov	r1, r6
 800ada6:	4628      	mov	r0, r5
 800ada8:	47b8      	blx	r7
 800adaa:	3001      	adds	r0, #1
 800adac:	f43f af00 	beq.w	800abb0 <_printf_float+0x98>
 800adb0:	f10a 0a01 	add.w	sl, sl, #1
 800adb4:	e7ee      	b.n	800ad94 <_printf_float+0x27c>
 800adb6:	bf00      	nop
 800adb8:	ffffffff 	.word	0xffffffff
 800adbc:	7fefffff 	.word	0x7fefffff
 800adc0:	0800d69c 	.word	0x0800d69c
 800adc4:	0800d698 	.word	0x0800d698
 800adc8:	0800d6a4 	.word	0x0800d6a4
 800adcc:	0800d6a0 	.word	0x0800d6a0
 800add0:	0800d6a8 	.word	0x0800d6a8
 800add4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800add6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800adda:	4553      	cmp	r3, sl
 800addc:	bfa8      	it	ge
 800adde:	4653      	movge	r3, sl
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	4699      	mov	r9, r3
 800ade4:	dc37      	bgt.n	800ae56 <_printf_float+0x33e>
 800ade6:	2300      	movs	r3, #0
 800ade8:	9307      	str	r3, [sp, #28]
 800adea:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800adee:	f104 021a 	add.w	r2, r4, #26
 800adf2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800adf4:	9907      	ldr	r1, [sp, #28]
 800adf6:	9306      	str	r3, [sp, #24]
 800adf8:	eba3 0309 	sub.w	r3, r3, r9
 800adfc:	428b      	cmp	r3, r1
 800adfe:	dc31      	bgt.n	800ae64 <_printf_float+0x34c>
 800ae00:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ae02:	459a      	cmp	sl, r3
 800ae04:	dc3b      	bgt.n	800ae7e <_printf_float+0x366>
 800ae06:	6823      	ldr	r3, [r4, #0]
 800ae08:	07da      	lsls	r2, r3, #31
 800ae0a:	d438      	bmi.n	800ae7e <_printf_float+0x366>
 800ae0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ae0e:	ebaa 0903 	sub.w	r9, sl, r3
 800ae12:	9b06      	ldr	r3, [sp, #24]
 800ae14:	ebaa 0303 	sub.w	r3, sl, r3
 800ae18:	4599      	cmp	r9, r3
 800ae1a:	bfa8      	it	ge
 800ae1c:	4699      	movge	r9, r3
 800ae1e:	f1b9 0f00 	cmp.w	r9, #0
 800ae22:	dc34      	bgt.n	800ae8e <_printf_float+0x376>
 800ae24:	f04f 0800 	mov.w	r8, #0
 800ae28:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ae2c:	f104 0b1a 	add.w	fp, r4, #26
 800ae30:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ae32:	ebaa 0303 	sub.w	r3, sl, r3
 800ae36:	eba3 0309 	sub.w	r3, r3, r9
 800ae3a:	4543      	cmp	r3, r8
 800ae3c:	f77f af76 	ble.w	800ad2c <_printf_float+0x214>
 800ae40:	2301      	movs	r3, #1
 800ae42:	465a      	mov	r2, fp
 800ae44:	4631      	mov	r1, r6
 800ae46:	4628      	mov	r0, r5
 800ae48:	47b8      	blx	r7
 800ae4a:	3001      	adds	r0, #1
 800ae4c:	f43f aeb0 	beq.w	800abb0 <_printf_float+0x98>
 800ae50:	f108 0801 	add.w	r8, r8, #1
 800ae54:	e7ec      	b.n	800ae30 <_printf_float+0x318>
 800ae56:	4642      	mov	r2, r8
 800ae58:	4631      	mov	r1, r6
 800ae5a:	4628      	mov	r0, r5
 800ae5c:	47b8      	blx	r7
 800ae5e:	3001      	adds	r0, #1
 800ae60:	d1c1      	bne.n	800ade6 <_printf_float+0x2ce>
 800ae62:	e6a5      	b.n	800abb0 <_printf_float+0x98>
 800ae64:	2301      	movs	r3, #1
 800ae66:	4631      	mov	r1, r6
 800ae68:	4628      	mov	r0, r5
 800ae6a:	9206      	str	r2, [sp, #24]
 800ae6c:	47b8      	blx	r7
 800ae6e:	3001      	adds	r0, #1
 800ae70:	f43f ae9e 	beq.w	800abb0 <_printf_float+0x98>
 800ae74:	9b07      	ldr	r3, [sp, #28]
 800ae76:	9a06      	ldr	r2, [sp, #24]
 800ae78:	3301      	adds	r3, #1
 800ae7a:	9307      	str	r3, [sp, #28]
 800ae7c:	e7b9      	b.n	800adf2 <_printf_float+0x2da>
 800ae7e:	9b05      	ldr	r3, [sp, #20]
 800ae80:	465a      	mov	r2, fp
 800ae82:	4631      	mov	r1, r6
 800ae84:	4628      	mov	r0, r5
 800ae86:	47b8      	blx	r7
 800ae88:	3001      	adds	r0, #1
 800ae8a:	d1bf      	bne.n	800ae0c <_printf_float+0x2f4>
 800ae8c:	e690      	b.n	800abb0 <_printf_float+0x98>
 800ae8e:	9a06      	ldr	r2, [sp, #24]
 800ae90:	464b      	mov	r3, r9
 800ae92:	4442      	add	r2, r8
 800ae94:	4631      	mov	r1, r6
 800ae96:	4628      	mov	r0, r5
 800ae98:	47b8      	blx	r7
 800ae9a:	3001      	adds	r0, #1
 800ae9c:	d1c2      	bne.n	800ae24 <_printf_float+0x30c>
 800ae9e:	e687      	b.n	800abb0 <_printf_float+0x98>
 800aea0:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 800aea4:	f1b9 0f01 	cmp.w	r9, #1
 800aea8:	dc01      	bgt.n	800aeae <_printf_float+0x396>
 800aeaa:	07db      	lsls	r3, r3, #31
 800aeac:	d536      	bpl.n	800af1c <_printf_float+0x404>
 800aeae:	2301      	movs	r3, #1
 800aeb0:	4642      	mov	r2, r8
 800aeb2:	4631      	mov	r1, r6
 800aeb4:	4628      	mov	r0, r5
 800aeb6:	47b8      	blx	r7
 800aeb8:	3001      	adds	r0, #1
 800aeba:	f43f ae79 	beq.w	800abb0 <_printf_float+0x98>
 800aebe:	9b05      	ldr	r3, [sp, #20]
 800aec0:	465a      	mov	r2, fp
 800aec2:	4631      	mov	r1, r6
 800aec4:	4628      	mov	r0, r5
 800aec6:	47b8      	blx	r7
 800aec8:	3001      	adds	r0, #1
 800aeca:	f43f ae71 	beq.w	800abb0 <_printf_float+0x98>
 800aece:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800aed2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800aed6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aeda:	f109 39ff 	add.w	r9, r9, #4294967295
 800aede:	d018      	beq.n	800af12 <_printf_float+0x3fa>
 800aee0:	464b      	mov	r3, r9
 800aee2:	f108 0201 	add.w	r2, r8, #1
 800aee6:	4631      	mov	r1, r6
 800aee8:	4628      	mov	r0, r5
 800aeea:	47b8      	blx	r7
 800aeec:	3001      	adds	r0, #1
 800aeee:	d10c      	bne.n	800af0a <_printf_float+0x3f2>
 800aef0:	e65e      	b.n	800abb0 <_printf_float+0x98>
 800aef2:	2301      	movs	r3, #1
 800aef4:	465a      	mov	r2, fp
 800aef6:	4631      	mov	r1, r6
 800aef8:	4628      	mov	r0, r5
 800aefa:	47b8      	blx	r7
 800aefc:	3001      	adds	r0, #1
 800aefe:	f43f ae57 	beq.w	800abb0 <_printf_float+0x98>
 800af02:	f108 0801 	add.w	r8, r8, #1
 800af06:	45c8      	cmp	r8, r9
 800af08:	dbf3      	blt.n	800aef2 <_printf_float+0x3da>
 800af0a:	4653      	mov	r3, sl
 800af0c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800af10:	e6dc      	b.n	800accc <_printf_float+0x1b4>
 800af12:	f04f 0800 	mov.w	r8, #0
 800af16:	f104 0b1a 	add.w	fp, r4, #26
 800af1a:	e7f4      	b.n	800af06 <_printf_float+0x3ee>
 800af1c:	2301      	movs	r3, #1
 800af1e:	4642      	mov	r2, r8
 800af20:	e7e1      	b.n	800aee6 <_printf_float+0x3ce>
 800af22:	2301      	movs	r3, #1
 800af24:	464a      	mov	r2, r9
 800af26:	4631      	mov	r1, r6
 800af28:	4628      	mov	r0, r5
 800af2a:	47b8      	blx	r7
 800af2c:	3001      	adds	r0, #1
 800af2e:	f43f ae3f 	beq.w	800abb0 <_printf_float+0x98>
 800af32:	f108 0801 	add.w	r8, r8, #1
 800af36:	68e3      	ldr	r3, [r4, #12]
 800af38:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800af3a:	1a5b      	subs	r3, r3, r1
 800af3c:	4543      	cmp	r3, r8
 800af3e:	dcf0      	bgt.n	800af22 <_printf_float+0x40a>
 800af40:	e6f8      	b.n	800ad34 <_printf_float+0x21c>
 800af42:	f04f 0800 	mov.w	r8, #0
 800af46:	f104 0919 	add.w	r9, r4, #25
 800af4a:	e7f4      	b.n	800af36 <_printf_float+0x41e>

0800af4c <_printf_common>:
 800af4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af50:	4616      	mov	r6, r2
 800af52:	4698      	mov	r8, r3
 800af54:	688a      	ldr	r2, [r1, #8]
 800af56:	690b      	ldr	r3, [r1, #16]
 800af58:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800af5c:	4293      	cmp	r3, r2
 800af5e:	bfb8      	it	lt
 800af60:	4613      	movlt	r3, r2
 800af62:	6033      	str	r3, [r6, #0]
 800af64:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800af68:	4607      	mov	r7, r0
 800af6a:	460c      	mov	r4, r1
 800af6c:	b10a      	cbz	r2, 800af72 <_printf_common+0x26>
 800af6e:	3301      	adds	r3, #1
 800af70:	6033      	str	r3, [r6, #0]
 800af72:	6823      	ldr	r3, [r4, #0]
 800af74:	0699      	lsls	r1, r3, #26
 800af76:	bf42      	ittt	mi
 800af78:	6833      	ldrmi	r3, [r6, #0]
 800af7a:	3302      	addmi	r3, #2
 800af7c:	6033      	strmi	r3, [r6, #0]
 800af7e:	6825      	ldr	r5, [r4, #0]
 800af80:	f015 0506 	ands.w	r5, r5, #6
 800af84:	d106      	bne.n	800af94 <_printf_common+0x48>
 800af86:	f104 0a19 	add.w	sl, r4, #25
 800af8a:	68e3      	ldr	r3, [r4, #12]
 800af8c:	6832      	ldr	r2, [r6, #0]
 800af8e:	1a9b      	subs	r3, r3, r2
 800af90:	42ab      	cmp	r3, r5
 800af92:	dc26      	bgt.n	800afe2 <_printf_common+0x96>
 800af94:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800af98:	6822      	ldr	r2, [r4, #0]
 800af9a:	3b00      	subs	r3, #0
 800af9c:	bf18      	it	ne
 800af9e:	2301      	movne	r3, #1
 800afa0:	0692      	lsls	r2, r2, #26
 800afa2:	d42b      	bmi.n	800affc <_printf_common+0xb0>
 800afa4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800afa8:	4641      	mov	r1, r8
 800afaa:	4638      	mov	r0, r7
 800afac:	47c8      	blx	r9
 800afae:	3001      	adds	r0, #1
 800afb0:	d01e      	beq.n	800aff0 <_printf_common+0xa4>
 800afb2:	6823      	ldr	r3, [r4, #0]
 800afb4:	6922      	ldr	r2, [r4, #16]
 800afb6:	f003 0306 	and.w	r3, r3, #6
 800afba:	2b04      	cmp	r3, #4
 800afbc:	bf02      	ittt	eq
 800afbe:	68e5      	ldreq	r5, [r4, #12]
 800afc0:	6833      	ldreq	r3, [r6, #0]
 800afc2:	1aed      	subeq	r5, r5, r3
 800afc4:	68a3      	ldr	r3, [r4, #8]
 800afc6:	bf0c      	ite	eq
 800afc8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800afcc:	2500      	movne	r5, #0
 800afce:	4293      	cmp	r3, r2
 800afd0:	bfc4      	itt	gt
 800afd2:	1a9b      	subgt	r3, r3, r2
 800afd4:	18ed      	addgt	r5, r5, r3
 800afd6:	2600      	movs	r6, #0
 800afd8:	341a      	adds	r4, #26
 800afda:	42b5      	cmp	r5, r6
 800afdc:	d11a      	bne.n	800b014 <_printf_common+0xc8>
 800afde:	2000      	movs	r0, #0
 800afe0:	e008      	b.n	800aff4 <_printf_common+0xa8>
 800afe2:	2301      	movs	r3, #1
 800afe4:	4652      	mov	r2, sl
 800afe6:	4641      	mov	r1, r8
 800afe8:	4638      	mov	r0, r7
 800afea:	47c8      	blx	r9
 800afec:	3001      	adds	r0, #1
 800afee:	d103      	bne.n	800aff8 <_printf_common+0xac>
 800aff0:	f04f 30ff 	mov.w	r0, #4294967295
 800aff4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aff8:	3501      	adds	r5, #1
 800affa:	e7c6      	b.n	800af8a <_printf_common+0x3e>
 800affc:	18e1      	adds	r1, r4, r3
 800affe:	1c5a      	adds	r2, r3, #1
 800b000:	2030      	movs	r0, #48	@ 0x30
 800b002:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b006:	4422      	add	r2, r4
 800b008:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b00c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b010:	3302      	adds	r3, #2
 800b012:	e7c7      	b.n	800afa4 <_printf_common+0x58>
 800b014:	2301      	movs	r3, #1
 800b016:	4622      	mov	r2, r4
 800b018:	4641      	mov	r1, r8
 800b01a:	4638      	mov	r0, r7
 800b01c:	47c8      	blx	r9
 800b01e:	3001      	adds	r0, #1
 800b020:	d0e6      	beq.n	800aff0 <_printf_common+0xa4>
 800b022:	3601      	adds	r6, #1
 800b024:	e7d9      	b.n	800afda <_printf_common+0x8e>
	...

0800b028 <_printf_i>:
 800b028:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b02c:	7e0f      	ldrb	r7, [r1, #24]
 800b02e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b030:	2f78      	cmp	r7, #120	@ 0x78
 800b032:	4691      	mov	r9, r2
 800b034:	4680      	mov	r8, r0
 800b036:	460c      	mov	r4, r1
 800b038:	469a      	mov	sl, r3
 800b03a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b03e:	d807      	bhi.n	800b050 <_printf_i+0x28>
 800b040:	2f62      	cmp	r7, #98	@ 0x62
 800b042:	d80a      	bhi.n	800b05a <_printf_i+0x32>
 800b044:	2f00      	cmp	r7, #0
 800b046:	f000 80d1 	beq.w	800b1ec <_printf_i+0x1c4>
 800b04a:	2f58      	cmp	r7, #88	@ 0x58
 800b04c:	f000 80b8 	beq.w	800b1c0 <_printf_i+0x198>
 800b050:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b054:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b058:	e03a      	b.n	800b0d0 <_printf_i+0xa8>
 800b05a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b05e:	2b15      	cmp	r3, #21
 800b060:	d8f6      	bhi.n	800b050 <_printf_i+0x28>
 800b062:	a101      	add	r1, pc, #4	@ (adr r1, 800b068 <_printf_i+0x40>)
 800b064:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b068:	0800b0c1 	.word	0x0800b0c1
 800b06c:	0800b0d5 	.word	0x0800b0d5
 800b070:	0800b051 	.word	0x0800b051
 800b074:	0800b051 	.word	0x0800b051
 800b078:	0800b051 	.word	0x0800b051
 800b07c:	0800b051 	.word	0x0800b051
 800b080:	0800b0d5 	.word	0x0800b0d5
 800b084:	0800b051 	.word	0x0800b051
 800b088:	0800b051 	.word	0x0800b051
 800b08c:	0800b051 	.word	0x0800b051
 800b090:	0800b051 	.word	0x0800b051
 800b094:	0800b1d3 	.word	0x0800b1d3
 800b098:	0800b0ff 	.word	0x0800b0ff
 800b09c:	0800b18d 	.word	0x0800b18d
 800b0a0:	0800b051 	.word	0x0800b051
 800b0a4:	0800b051 	.word	0x0800b051
 800b0a8:	0800b1f5 	.word	0x0800b1f5
 800b0ac:	0800b051 	.word	0x0800b051
 800b0b0:	0800b0ff 	.word	0x0800b0ff
 800b0b4:	0800b051 	.word	0x0800b051
 800b0b8:	0800b051 	.word	0x0800b051
 800b0bc:	0800b195 	.word	0x0800b195
 800b0c0:	6833      	ldr	r3, [r6, #0]
 800b0c2:	1d1a      	adds	r2, r3, #4
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	6032      	str	r2, [r6, #0]
 800b0c8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b0cc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b0d0:	2301      	movs	r3, #1
 800b0d2:	e09c      	b.n	800b20e <_printf_i+0x1e6>
 800b0d4:	6833      	ldr	r3, [r6, #0]
 800b0d6:	6820      	ldr	r0, [r4, #0]
 800b0d8:	1d19      	adds	r1, r3, #4
 800b0da:	6031      	str	r1, [r6, #0]
 800b0dc:	0606      	lsls	r6, r0, #24
 800b0de:	d501      	bpl.n	800b0e4 <_printf_i+0xbc>
 800b0e0:	681d      	ldr	r5, [r3, #0]
 800b0e2:	e003      	b.n	800b0ec <_printf_i+0xc4>
 800b0e4:	0645      	lsls	r5, r0, #25
 800b0e6:	d5fb      	bpl.n	800b0e0 <_printf_i+0xb8>
 800b0e8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b0ec:	2d00      	cmp	r5, #0
 800b0ee:	da03      	bge.n	800b0f8 <_printf_i+0xd0>
 800b0f0:	232d      	movs	r3, #45	@ 0x2d
 800b0f2:	426d      	negs	r5, r5
 800b0f4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b0f8:	4858      	ldr	r0, [pc, #352]	@ (800b25c <_printf_i+0x234>)
 800b0fa:	230a      	movs	r3, #10
 800b0fc:	e011      	b.n	800b122 <_printf_i+0xfa>
 800b0fe:	6821      	ldr	r1, [r4, #0]
 800b100:	6833      	ldr	r3, [r6, #0]
 800b102:	0608      	lsls	r0, r1, #24
 800b104:	f853 5b04 	ldr.w	r5, [r3], #4
 800b108:	d402      	bmi.n	800b110 <_printf_i+0xe8>
 800b10a:	0649      	lsls	r1, r1, #25
 800b10c:	bf48      	it	mi
 800b10e:	b2ad      	uxthmi	r5, r5
 800b110:	2f6f      	cmp	r7, #111	@ 0x6f
 800b112:	4852      	ldr	r0, [pc, #328]	@ (800b25c <_printf_i+0x234>)
 800b114:	6033      	str	r3, [r6, #0]
 800b116:	bf14      	ite	ne
 800b118:	230a      	movne	r3, #10
 800b11a:	2308      	moveq	r3, #8
 800b11c:	2100      	movs	r1, #0
 800b11e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b122:	6866      	ldr	r6, [r4, #4]
 800b124:	60a6      	str	r6, [r4, #8]
 800b126:	2e00      	cmp	r6, #0
 800b128:	db05      	blt.n	800b136 <_printf_i+0x10e>
 800b12a:	6821      	ldr	r1, [r4, #0]
 800b12c:	432e      	orrs	r6, r5
 800b12e:	f021 0104 	bic.w	r1, r1, #4
 800b132:	6021      	str	r1, [r4, #0]
 800b134:	d04b      	beq.n	800b1ce <_printf_i+0x1a6>
 800b136:	4616      	mov	r6, r2
 800b138:	fbb5 f1f3 	udiv	r1, r5, r3
 800b13c:	fb03 5711 	mls	r7, r3, r1, r5
 800b140:	5dc7      	ldrb	r7, [r0, r7]
 800b142:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b146:	462f      	mov	r7, r5
 800b148:	42bb      	cmp	r3, r7
 800b14a:	460d      	mov	r5, r1
 800b14c:	d9f4      	bls.n	800b138 <_printf_i+0x110>
 800b14e:	2b08      	cmp	r3, #8
 800b150:	d10b      	bne.n	800b16a <_printf_i+0x142>
 800b152:	6823      	ldr	r3, [r4, #0]
 800b154:	07df      	lsls	r7, r3, #31
 800b156:	d508      	bpl.n	800b16a <_printf_i+0x142>
 800b158:	6923      	ldr	r3, [r4, #16]
 800b15a:	6861      	ldr	r1, [r4, #4]
 800b15c:	4299      	cmp	r1, r3
 800b15e:	bfde      	ittt	le
 800b160:	2330      	movle	r3, #48	@ 0x30
 800b162:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b166:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b16a:	1b92      	subs	r2, r2, r6
 800b16c:	6122      	str	r2, [r4, #16]
 800b16e:	f8cd a000 	str.w	sl, [sp]
 800b172:	464b      	mov	r3, r9
 800b174:	aa03      	add	r2, sp, #12
 800b176:	4621      	mov	r1, r4
 800b178:	4640      	mov	r0, r8
 800b17a:	f7ff fee7 	bl	800af4c <_printf_common>
 800b17e:	3001      	adds	r0, #1
 800b180:	d14a      	bne.n	800b218 <_printf_i+0x1f0>
 800b182:	f04f 30ff 	mov.w	r0, #4294967295
 800b186:	b004      	add	sp, #16
 800b188:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b18c:	6823      	ldr	r3, [r4, #0]
 800b18e:	f043 0320 	orr.w	r3, r3, #32
 800b192:	6023      	str	r3, [r4, #0]
 800b194:	4832      	ldr	r0, [pc, #200]	@ (800b260 <_printf_i+0x238>)
 800b196:	2778      	movs	r7, #120	@ 0x78
 800b198:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b19c:	6823      	ldr	r3, [r4, #0]
 800b19e:	6831      	ldr	r1, [r6, #0]
 800b1a0:	061f      	lsls	r7, r3, #24
 800b1a2:	f851 5b04 	ldr.w	r5, [r1], #4
 800b1a6:	d402      	bmi.n	800b1ae <_printf_i+0x186>
 800b1a8:	065f      	lsls	r7, r3, #25
 800b1aa:	bf48      	it	mi
 800b1ac:	b2ad      	uxthmi	r5, r5
 800b1ae:	6031      	str	r1, [r6, #0]
 800b1b0:	07d9      	lsls	r1, r3, #31
 800b1b2:	bf44      	itt	mi
 800b1b4:	f043 0320 	orrmi.w	r3, r3, #32
 800b1b8:	6023      	strmi	r3, [r4, #0]
 800b1ba:	b11d      	cbz	r5, 800b1c4 <_printf_i+0x19c>
 800b1bc:	2310      	movs	r3, #16
 800b1be:	e7ad      	b.n	800b11c <_printf_i+0xf4>
 800b1c0:	4826      	ldr	r0, [pc, #152]	@ (800b25c <_printf_i+0x234>)
 800b1c2:	e7e9      	b.n	800b198 <_printf_i+0x170>
 800b1c4:	6823      	ldr	r3, [r4, #0]
 800b1c6:	f023 0320 	bic.w	r3, r3, #32
 800b1ca:	6023      	str	r3, [r4, #0]
 800b1cc:	e7f6      	b.n	800b1bc <_printf_i+0x194>
 800b1ce:	4616      	mov	r6, r2
 800b1d0:	e7bd      	b.n	800b14e <_printf_i+0x126>
 800b1d2:	6833      	ldr	r3, [r6, #0]
 800b1d4:	6825      	ldr	r5, [r4, #0]
 800b1d6:	6961      	ldr	r1, [r4, #20]
 800b1d8:	1d18      	adds	r0, r3, #4
 800b1da:	6030      	str	r0, [r6, #0]
 800b1dc:	062e      	lsls	r6, r5, #24
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	d501      	bpl.n	800b1e6 <_printf_i+0x1be>
 800b1e2:	6019      	str	r1, [r3, #0]
 800b1e4:	e002      	b.n	800b1ec <_printf_i+0x1c4>
 800b1e6:	0668      	lsls	r0, r5, #25
 800b1e8:	d5fb      	bpl.n	800b1e2 <_printf_i+0x1ba>
 800b1ea:	8019      	strh	r1, [r3, #0]
 800b1ec:	2300      	movs	r3, #0
 800b1ee:	6123      	str	r3, [r4, #16]
 800b1f0:	4616      	mov	r6, r2
 800b1f2:	e7bc      	b.n	800b16e <_printf_i+0x146>
 800b1f4:	6833      	ldr	r3, [r6, #0]
 800b1f6:	1d1a      	adds	r2, r3, #4
 800b1f8:	6032      	str	r2, [r6, #0]
 800b1fa:	681e      	ldr	r6, [r3, #0]
 800b1fc:	6862      	ldr	r2, [r4, #4]
 800b1fe:	2100      	movs	r1, #0
 800b200:	4630      	mov	r0, r6
 800b202:	f7f5 f86d 	bl	80002e0 <memchr>
 800b206:	b108      	cbz	r0, 800b20c <_printf_i+0x1e4>
 800b208:	1b80      	subs	r0, r0, r6
 800b20a:	6060      	str	r0, [r4, #4]
 800b20c:	6863      	ldr	r3, [r4, #4]
 800b20e:	6123      	str	r3, [r4, #16]
 800b210:	2300      	movs	r3, #0
 800b212:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b216:	e7aa      	b.n	800b16e <_printf_i+0x146>
 800b218:	6923      	ldr	r3, [r4, #16]
 800b21a:	4632      	mov	r2, r6
 800b21c:	4649      	mov	r1, r9
 800b21e:	4640      	mov	r0, r8
 800b220:	47d0      	blx	sl
 800b222:	3001      	adds	r0, #1
 800b224:	d0ad      	beq.n	800b182 <_printf_i+0x15a>
 800b226:	6823      	ldr	r3, [r4, #0]
 800b228:	079b      	lsls	r3, r3, #30
 800b22a:	d413      	bmi.n	800b254 <_printf_i+0x22c>
 800b22c:	68e0      	ldr	r0, [r4, #12]
 800b22e:	9b03      	ldr	r3, [sp, #12]
 800b230:	4298      	cmp	r0, r3
 800b232:	bfb8      	it	lt
 800b234:	4618      	movlt	r0, r3
 800b236:	e7a6      	b.n	800b186 <_printf_i+0x15e>
 800b238:	2301      	movs	r3, #1
 800b23a:	4632      	mov	r2, r6
 800b23c:	4649      	mov	r1, r9
 800b23e:	4640      	mov	r0, r8
 800b240:	47d0      	blx	sl
 800b242:	3001      	adds	r0, #1
 800b244:	d09d      	beq.n	800b182 <_printf_i+0x15a>
 800b246:	3501      	adds	r5, #1
 800b248:	68e3      	ldr	r3, [r4, #12]
 800b24a:	9903      	ldr	r1, [sp, #12]
 800b24c:	1a5b      	subs	r3, r3, r1
 800b24e:	42ab      	cmp	r3, r5
 800b250:	dcf2      	bgt.n	800b238 <_printf_i+0x210>
 800b252:	e7eb      	b.n	800b22c <_printf_i+0x204>
 800b254:	2500      	movs	r5, #0
 800b256:	f104 0619 	add.w	r6, r4, #25
 800b25a:	e7f5      	b.n	800b248 <_printf_i+0x220>
 800b25c:	0800d6aa 	.word	0x0800d6aa
 800b260:	0800d6bb 	.word	0x0800d6bb

0800b264 <std>:
 800b264:	2300      	movs	r3, #0
 800b266:	b510      	push	{r4, lr}
 800b268:	4604      	mov	r4, r0
 800b26a:	e9c0 3300 	strd	r3, r3, [r0]
 800b26e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b272:	6083      	str	r3, [r0, #8]
 800b274:	8181      	strh	r1, [r0, #12]
 800b276:	6643      	str	r3, [r0, #100]	@ 0x64
 800b278:	81c2      	strh	r2, [r0, #14]
 800b27a:	6183      	str	r3, [r0, #24]
 800b27c:	4619      	mov	r1, r3
 800b27e:	2208      	movs	r2, #8
 800b280:	305c      	adds	r0, #92	@ 0x5c
 800b282:	f000 f92a 	bl	800b4da <memset>
 800b286:	4b0d      	ldr	r3, [pc, #52]	@ (800b2bc <std+0x58>)
 800b288:	6263      	str	r3, [r4, #36]	@ 0x24
 800b28a:	4b0d      	ldr	r3, [pc, #52]	@ (800b2c0 <std+0x5c>)
 800b28c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b28e:	4b0d      	ldr	r3, [pc, #52]	@ (800b2c4 <std+0x60>)
 800b290:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b292:	4b0d      	ldr	r3, [pc, #52]	@ (800b2c8 <std+0x64>)
 800b294:	6323      	str	r3, [r4, #48]	@ 0x30
 800b296:	4b0d      	ldr	r3, [pc, #52]	@ (800b2cc <std+0x68>)
 800b298:	6224      	str	r4, [r4, #32]
 800b29a:	429c      	cmp	r4, r3
 800b29c:	d006      	beq.n	800b2ac <std+0x48>
 800b29e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b2a2:	4294      	cmp	r4, r2
 800b2a4:	d002      	beq.n	800b2ac <std+0x48>
 800b2a6:	33d0      	adds	r3, #208	@ 0xd0
 800b2a8:	429c      	cmp	r4, r3
 800b2aa:	d105      	bne.n	800b2b8 <std+0x54>
 800b2ac:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b2b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b2b4:	f000 b98e 	b.w	800b5d4 <__retarget_lock_init_recursive>
 800b2b8:	bd10      	pop	{r4, pc}
 800b2ba:	bf00      	nop
 800b2bc:	0800b455 	.word	0x0800b455
 800b2c0:	0800b477 	.word	0x0800b477
 800b2c4:	0800b4af 	.word	0x0800b4af
 800b2c8:	0800b4d3 	.word	0x0800b4d3
 800b2cc:	240005e0 	.word	0x240005e0

0800b2d0 <stdio_exit_handler>:
 800b2d0:	4a02      	ldr	r2, [pc, #8]	@ (800b2dc <stdio_exit_handler+0xc>)
 800b2d2:	4903      	ldr	r1, [pc, #12]	@ (800b2e0 <stdio_exit_handler+0x10>)
 800b2d4:	4803      	ldr	r0, [pc, #12]	@ (800b2e4 <stdio_exit_handler+0x14>)
 800b2d6:	f000 b869 	b.w	800b3ac <_fwalk_sglue>
 800b2da:	bf00      	nop
 800b2dc:	24000014 	.word	0x24000014
 800b2e0:	0800ce71 	.word	0x0800ce71
 800b2e4:	24000024 	.word	0x24000024

0800b2e8 <cleanup_stdio>:
 800b2e8:	6841      	ldr	r1, [r0, #4]
 800b2ea:	4b0c      	ldr	r3, [pc, #48]	@ (800b31c <cleanup_stdio+0x34>)
 800b2ec:	4299      	cmp	r1, r3
 800b2ee:	b510      	push	{r4, lr}
 800b2f0:	4604      	mov	r4, r0
 800b2f2:	d001      	beq.n	800b2f8 <cleanup_stdio+0x10>
 800b2f4:	f001 fdbc 	bl	800ce70 <_fflush_r>
 800b2f8:	68a1      	ldr	r1, [r4, #8]
 800b2fa:	4b09      	ldr	r3, [pc, #36]	@ (800b320 <cleanup_stdio+0x38>)
 800b2fc:	4299      	cmp	r1, r3
 800b2fe:	d002      	beq.n	800b306 <cleanup_stdio+0x1e>
 800b300:	4620      	mov	r0, r4
 800b302:	f001 fdb5 	bl	800ce70 <_fflush_r>
 800b306:	68e1      	ldr	r1, [r4, #12]
 800b308:	4b06      	ldr	r3, [pc, #24]	@ (800b324 <cleanup_stdio+0x3c>)
 800b30a:	4299      	cmp	r1, r3
 800b30c:	d004      	beq.n	800b318 <cleanup_stdio+0x30>
 800b30e:	4620      	mov	r0, r4
 800b310:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b314:	f001 bdac 	b.w	800ce70 <_fflush_r>
 800b318:	bd10      	pop	{r4, pc}
 800b31a:	bf00      	nop
 800b31c:	240005e0 	.word	0x240005e0
 800b320:	24000648 	.word	0x24000648
 800b324:	240006b0 	.word	0x240006b0

0800b328 <global_stdio_init.part.0>:
 800b328:	b510      	push	{r4, lr}
 800b32a:	4b0b      	ldr	r3, [pc, #44]	@ (800b358 <global_stdio_init.part.0+0x30>)
 800b32c:	4c0b      	ldr	r4, [pc, #44]	@ (800b35c <global_stdio_init.part.0+0x34>)
 800b32e:	4a0c      	ldr	r2, [pc, #48]	@ (800b360 <global_stdio_init.part.0+0x38>)
 800b330:	601a      	str	r2, [r3, #0]
 800b332:	4620      	mov	r0, r4
 800b334:	2200      	movs	r2, #0
 800b336:	2104      	movs	r1, #4
 800b338:	f7ff ff94 	bl	800b264 <std>
 800b33c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b340:	2201      	movs	r2, #1
 800b342:	2109      	movs	r1, #9
 800b344:	f7ff ff8e 	bl	800b264 <std>
 800b348:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b34c:	2202      	movs	r2, #2
 800b34e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b352:	2112      	movs	r1, #18
 800b354:	f7ff bf86 	b.w	800b264 <std>
 800b358:	24000718 	.word	0x24000718
 800b35c:	240005e0 	.word	0x240005e0
 800b360:	0800b2d1 	.word	0x0800b2d1

0800b364 <__sfp_lock_acquire>:
 800b364:	4801      	ldr	r0, [pc, #4]	@ (800b36c <__sfp_lock_acquire+0x8>)
 800b366:	f000 b936 	b.w	800b5d6 <__retarget_lock_acquire_recursive>
 800b36a:	bf00      	nop
 800b36c:	24000721 	.word	0x24000721

0800b370 <__sfp_lock_release>:
 800b370:	4801      	ldr	r0, [pc, #4]	@ (800b378 <__sfp_lock_release+0x8>)
 800b372:	f000 b931 	b.w	800b5d8 <__retarget_lock_release_recursive>
 800b376:	bf00      	nop
 800b378:	24000721 	.word	0x24000721

0800b37c <__sinit>:
 800b37c:	b510      	push	{r4, lr}
 800b37e:	4604      	mov	r4, r0
 800b380:	f7ff fff0 	bl	800b364 <__sfp_lock_acquire>
 800b384:	6a23      	ldr	r3, [r4, #32]
 800b386:	b11b      	cbz	r3, 800b390 <__sinit+0x14>
 800b388:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b38c:	f7ff bff0 	b.w	800b370 <__sfp_lock_release>
 800b390:	4b04      	ldr	r3, [pc, #16]	@ (800b3a4 <__sinit+0x28>)
 800b392:	6223      	str	r3, [r4, #32]
 800b394:	4b04      	ldr	r3, [pc, #16]	@ (800b3a8 <__sinit+0x2c>)
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	2b00      	cmp	r3, #0
 800b39a:	d1f5      	bne.n	800b388 <__sinit+0xc>
 800b39c:	f7ff ffc4 	bl	800b328 <global_stdio_init.part.0>
 800b3a0:	e7f2      	b.n	800b388 <__sinit+0xc>
 800b3a2:	bf00      	nop
 800b3a4:	0800b2e9 	.word	0x0800b2e9
 800b3a8:	24000718 	.word	0x24000718

0800b3ac <_fwalk_sglue>:
 800b3ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b3b0:	4607      	mov	r7, r0
 800b3b2:	4688      	mov	r8, r1
 800b3b4:	4614      	mov	r4, r2
 800b3b6:	2600      	movs	r6, #0
 800b3b8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b3bc:	f1b9 0901 	subs.w	r9, r9, #1
 800b3c0:	d505      	bpl.n	800b3ce <_fwalk_sglue+0x22>
 800b3c2:	6824      	ldr	r4, [r4, #0]
 800b3c4:	2c00      	cmp	r4, #0
 800b3c6:	d1f7      	bne.n	800b3b8 <_fwalk_sglue+0xc>
 800b3c8:	4630      	mov	r0, r6
 800b3ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b3ce:	89ab      	ldrh	r3, [r5, #12]
 800b3d0:	2b01      	cmp	r3, #1
 800b3d2:	d907      	bls.n	800b3e4 <_fwalk_sglue+0x38>
 800b3d4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b3d8:	3301      	adds	r3, #1
 800b3da:	d003      	beq.n	800b3e4 <_fwalk_sglue+0x38>
 800b3dc:	4629      	mov	r1, r5
 800b3de:	4638      	mov	r0, r7
 800b3e0:	47c0      	blx	r8
 800b3e2:	4306      	orrs	r6, r0
 800b3e4:	3568      	adds	r5, #104	@ 0x68
 800b3e6:	e7e9      	b.n	800b3bc <_fwalk_sglue+0x10>

0800b3e8 <sniprintf>:
 800b3e8:	b40c      	push	{r2, r3}
 800b3ea:	b530      	push	{r4, r5, lr}
 800b3ec:	4b18      	ldr	r3, [pc, #96]	@ (800b450 <sniprintf+0x68>)
 800b3ee:	1e0c      	subs	r4, r1, #0
 800b3f0:	681d      	ldr	r5, [r3, #0]
 800b3f2:	b09d      	sub	sp, #116	@ 0x74
 800b3f4:	da08      	bge.n	800b408 <sniprintf+0x20>
 800b3f6:	238b      	movs	r3, #139	@ 0x8b
 800b3f8:	602b      	str	r3, [r5, #0]
 800b3fa:	f04f 30ff 	mov.w	r0, #4294967295
 800b3fe:	b01d      	add	sp, #116	@ 0x74
 800b400:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b404:	b002      	add	sp, #8
 800b406:	4770      	bx	lr
 800b408:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800b40c:	f8ad 3014 	strh.w	r3, [sp, #20]
 800b410:	f04f 0300 	mov.w	r3, #0
 800b414:	931b      	str	r3, [sp, #108]	@ 0x6c
 800b416:	bf14      	ite	ne
 800b418:	f104 33ff 	addne.w	r3, r4, #4294967295
 800b41c:	4623      	moveq	r3, r4
 800b41e:	9304      	str	r3, [sp, #16]
 800b420:	9307      	str	r3, [sp, #28]
 800b422:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b426:	9002      	str	r0, [sp, #8]
 800b428:	9006      	str	r0, [sp, #24]
 800b42a:	f8ad 3016 	strh.w	r3, [sp, #22]
 800b42e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800b430:	ab21      	add	r3, sp, #132	@ 0x84
 800b432:	a902      	add	r1, sp, #8
 800b434:	4628      	mov	r0, r5
 800b436:	9301      	str	r3, [sp, #4]
 800b438:	f001 fb9a 	bl	800cb70 <_svfiprintf_r>
 800b43c:	1c43      	adds	r3, r0, #1
 800b43e:	bfbc      	itt	lt
 800b440:	238b      	movlt	r3, #139	@ 0x8b
 800b442:	602b      	strlt	r3, [r5, #0]
 800b444:	2c00      	cmp	r4, #0
 800b446:	d0da      	beq.n	800b3fe <sniprintf+0x16>
 800b448:	9b02      	ldr	r3, [sp, #8]
 800b44a:	2200      	movs	r2, #0
 800b44c:	701a      	strb	r2, [r3, #0]
 800b44e:	e7d6      	b.n	800b3fe <sniprintf+0x16>
 800b450:	24000020 	.word	0x24000020

0800b454 <__sread>:
 800b454:	b510      	push	{r4, lr}
 800b456:	460c      	mov	r4, r1
 800b458:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b45c:	f000 f86c 	bl	800b538 <_read_r>
 800b460:	2800      	cmp	r0, #0
 800b462:	bfab      	itete	ge
 800b464:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b466:	89a3      	ldrhlt	r3, [r4, #12]
 800b468:	181b      	addge	r3, r3, r0
 800b46a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b46e:	bfac      	ite	ge
 800b470:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b472:	81a3      	strhlt	r3, [r4, #12]
 800b474:	bd10      	pop	{r4, pc}

0800b476 <__swrite>:
 800b476:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b47a:	461f      	mov	r7, r3
 800b47c:	898b      	ldrh	r3, [r1, #12]
 800b47e:	05db      	lsls	r3, r3, #23
 800b480:	4605      	mov	r5, r0
 800b482:	460c      	mov	r4, r1
 800b484:	4616      	mov	r6, r2
 800b486:	d505      	bpl.n	800b494 <__swrite+0x1e>
 800b488:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b48c:	2302      	movs	r3, #2
 800b48e:	2200      	movs	r2, #0
 800b490:	f000 f840 	bl	800b514 <_lseek_r>
 800b494:	89a3      	ldrh	r3, [r4, #12]
 800b496:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b49a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b49e:	81a3      	strh	r3, [r4, #12]
 800b4a0:	4632      	mov	r2, r6
 800b4a2:	463b      	mov	r3, r7
 800b4a4:	4628      	mov	r0, r5
 800b4a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b4aa:	f000 b857 	b.w	800b55c <_write_r>

0800b4ae <__sseek>:
 800b4ae:	b510      	push	{r4, lr}
 800b4b0:	460c      	mov	r4, r1
 800b4b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b4b6:	f000 f82d 	bl	800b514 <_lseek_r>
 800b4ba:	1c43      	adds	r3, r0, #1
 800b4bc:	89a3      	ldrh	r3, [r4, #12]
 800b4be:	bf15      	itete	ne
 800b4c0:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b4c2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b4c6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b4ca:	81a3      	strheq	r3, [r4, #12]
 800b4cc:	bf18      	it	ne
 800b4ce:	81a3      	strhne	r3, [r4, #12]
 800b4d0:	bd10      	pop	{r4, pc}

0800b4d2 <__sclose>:
 800b4d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b4d6:	f000 b80d 	b.w	800b4f4 <_close_r>

0800b4da <memset>:
 800b4da:	4402      	add	r2, r0
 800b4dc:	4603      	mov	r3, r0
 800b4de:	4293      	cmp	r3, r2
 800b4e0:	d100      	bne.n	800b4e4 <memset+0xa>
 800b4e2:	4770      	bx	lr
 800b4e4:	f803 1b01 	strb.w	r1, [r3], #1
 800b4e8:	e7f9      	b.n	800b4de <memset+0x4>
	...

0800b4ec <_localeconv_r>:
 800b4ec:	4800      	ldr	r0, [pc, #0]	@ (800b4f0 <_localeconv_r+0x4>)
 800b4ee:	4770      	bx	lr
 800b4f0:	24000160 	.word	0x24000160

0800b4f4 <_close_r>:
 800b4f4:	b538      	push	{r3, r4, r5, lr}
 800b4f6:	4d06      	ldr	r5, [pc, #24]	@ (800b510 <_close_r+0x1c>)
 800b4f8:	2300      	movs	r3, #0
 800b4fa:	4604      	mov	r4, r0
 800b4fc:	4608      	mov	r0, r1
 800b4fe:	602b      	str	r3, [r5, #0]
 800b500:	f7f6 fa17 	bl	8001932 <_close>
 800b504:	1c43      	adds	r3, r0, #1
 800b506:	d102      	bne.n	800b50e <_close_r+0x1a>
 800b508:	682b      	ldr	r3, [r5, #0]
 800b50a:	b103      	cbz	r3, 800b50e <_close_r+0x1a>
 800b50c:	6023      	str	r3, [r4, #0]
 800b50e:	bd38      	pop	{r3, r4, r5, pc}
 800b510:	2400071c 	.word	0x2400071c

0800b514 <_lseek_r>:
 800b514:	b538      	push	{r3, r4, r5, lr}
 800b516:	4d07      	ldr	r5, [pc, #28]	@ (800b534 <_lseek_r+0x20>)
 800b518:	4604      	mov	r4, r0
 800b51a:	4608      	mov	r0, r1
 800b51c:	4611      	mov	r1, r2
 800b51e:	2200      	movs	r2, #0
 800b520:	602a      	str	r2, [r5, #0]
 800b522:	461a      	mov	r2, r3
 800b524:	f7f6 fa2c 	bl	8001980 <_lseek>
 800b528:	1c43      	adds	r3, r0, #1
 800b52a:	d102      	bne.n	800b532 <_lseek_r+0x1e>
 800b52c:	682b      	ldr	r3, [r5, #0]
 800b52e:	b103      	cbz	r3, 800b532 <_lseek_r+0x1e>
 800b530:	6023      	str	r3, [r4, #0]
 800b532:	bd38      	pop	{r3, r4, r5, pc}
 800b534:	2400071c 	.word	0x2400071c

0800b538 <_read_r>:
 800b538:	b538      	push	{r3, r4, r5, lr}
 800b53a:	4d07      	ldr	r5, [pc, #28]	@ (800b558 <_read_r+0x20>)
 800b53c:	4604      	mov	r4, r0
 800b53e:	4608      	mov	r0, r1
 800b540:	4611      	mov	r1, r2
 800b542:	2200      	movs	r2, #0
 800b544:	602a      	str	r2, [r5, #0]
 800b546:	461a      	mov	r2, r3
 800b548:	f7f6 f9ba 	bl	80018c0 <_read>
 800b54c:	1c43      	adds	r3, r0, #1
 800b54e:	d102      	bne.n	800b556 <_read_r+0x1e>
 800b550:	682b      	ldr	r3, [r5, #0]
 800b552:	b103      	cbz	r3, 800b556 <_read_r+0x1e>
 800b554:	6023      	str	r3, [r4, #0]
 800b556:	bd38      	pop	{r3, r4, r5, pc}
 800b558:	2400071c 	.word	0x2400071c

0800b55c <_write_r>:
 800b55c:	b538      	push	{r3, r4, r5, lr}
 800b55e:	4d07      	ldr	r5, [pc, #28]	@ (800b57c <_write_r+0x20>)
 800b560:	4604      	mov	r4, r0
 800b562:	4608      	mov	r0, r1
 800b564:	4611      	mov	r1, r2
 800b566:	2200      	movs	r2, #0
 800b568:	602a      	str	r2, [r5, #0]
 800b56a:	461a      	mov	r2, r3
 800b56c:	f7f6 f9c5 	bl	80018fa <_write>
 800b570:	1c43      	adds	r3, r0, #1
 800b572:	d102      	bne.n	800b57a <_write_r+0x1e>
 800b574:	682b      	ldr	r3, [r5, #0]
 800b576:	b103      	cbz	r3, 800b57a <_write_r+0x1e>
 800b578:	6023      	str	r3, [r4, #0]
 800b57a:	bd38      	pop	{r3, r4, r5, pc}
 800b57c:	2400071c 	.word	0x2400071c

0800b580 <__errno>:
 800b580:	4b01      	ldr	r3, [pc, #4]	@ (800b588 <__errno+0x8>)
 800b582:	6818      	ldr	r0, [r3, #0]
 800b584:	4770      	bx	lr
 800b586:	bf00      	nop
 800b588:	24000020 	.word	0x24000020

0800b58c <__libc_init_array>:
 800b58c:	b570      	push	{r4, r5, r6, lr}
 800b58e:	4d0d      	ldr	r5, [pc, #52]	@ (800b5c4 <__libc_init_array+0x38>)
 800b590:	4c0d      	ldr	r4, [pc, #52]	@ (800b5c8 <__libc_init_array+0x3c>)
 800b592:	1b64      	subs	r4, r4, r5
 800b594:	10a4      	asrs	r4, r4, #2
 800b596:	2600      	movs	r6, #0
 800b598:	42a6      	cmp	r6, r4
 800b59a:	d109      	bne.n	800b5b0 <__libc_init_array+0x24>
 800b59c:	4d0b      	ldr	r5, [pc, #44]	@ (800b5cc <__libc_init_array+0x40>)
 800b59e:	4c0c      	ldr	r4, [pc, #48]	@ (800b5d0 <__libc_init_array+0x44>)
 800b5a0:	f001 fff6 	bl	800d590 <_init>
 800b5a4:	1b64      	subs	r4, r4, r5
 800b5a6:	10a4      	asrs	r4, r4, #2
 800b5a8:	2600      	movs	r6, #0
 800b5aa:	42a6      	cmp	r6, r4
 800b5ac:	d105      	bne.n	800b5ba <__libc_init_array+0x2e>
 800b5ae:	bd70      	pop	{r4, r5, r6, pc}
 800b5b0:	f855 3b04 	ldr.w	r3, [r5], #4
 800b5b4:	4798      	blx	r3
 800b5b6:	3601      	adds	r6, #1
 800b5b8:	e7ee      	b.n	800b598 <__libc_init_array+0xc>
 800b5ba:	f855 3b04 	ldr.w	r3, [r5], #4
 800b5be:	4798      	blx	r3
 800b5c0:	3601      	adds	r6, #1
 800b5c2:	e7f2      	b.n	800b5aa <__libc_init_array+0x1e>
 800b5c4:	0800da14 	.word	0x0800da14
 800b5c8:	0800da14 	.word	0x0800da14
 800b5cc:	0800da14 	.word	0x0800da14
 800b5d0:	0800da18 	.word	0x0800da18

0800b5d4 <__retarget_lock_init_recursive>:
 800b5d4:	4770      	bx	lr

0800b5d6 <__retarget_lock_acquire_recursive>:
 800b5d6:	4770      	bx	lr

0800b5d8 <__retarget_lock_release_recursive>:
 800b5d8:	4770      	bx	lr

0800b5da <memcpy>:
 800b5da:	440a      	add	r2, r1
 800b5dc:	4291      	cmp	r1, r2
 800b5de:	f100 33ff 	add.w	r3, r0, #4294967295
 800b5e2:	d100      	bne.n	800b5e6 <memcpy+0xc>
 800b5e4:	4770      	bx	lr
 800b5e6:	b510      	push	{r4, lr}
 800b5e8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b5ec:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b5f0:	4291      	cmp	r1, r2
 800b5f2:	d1f9      	bne.n	800b5e8 <memcpy+0xe>
 800b5f4:	bd10      	pop	{r4, pc}

0800b5f6 <quorem>:
 800b5f6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5fa:	6903      	ldr	r3, [r0, #16]
 800b5fc:	690c      	ldr	r4, [r1, #16]
 800b5fe:	42a3      	cmp	r3, r4
 800b600:	4607      	mov	r7, r0
 800b602:	db7e      	blt.n	800b702 <quorem+0x10c>
 800b604:	3c01      	subs	r4, #1
 800b606:	f101 0814 	add.w	r8, r1, #20
 800b60a:	00a3      	lsls	r3, r4, #2
 800b60c:	f100 0514 	add.w	r5, r0, #20
 800b610:	9300      	str	r3, [sp, #0]
 800b612:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b616:	9301      	str	r3, [sp, #4]
 800b618:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b61c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b620:	3301      	adds	r3, #1
 800b622:	429a      	cmp	r2, r3
 800b624:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b628:	fbb2 f6f3 	udiv	r6, r2, r3
 800b62c:	d32e      	bcc.n	800b68c <quorem+0x96>
 800b62e:	f04f 0a00 	mov.w	sl, #0
 800b632:	46c4      	mov	ip, r8
 800b634:	46ae      	mov	lr, r5
 800b636:	46d3      	mov	fp, sl
 800b638:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b63c:	b298      	uxth	r0, r3
 800b63e:	fb06 a000 	mla	r0, r6, r0, sl
 800b642:	0c02      	lsrs	r2, r0, #16
 800b644:	0c1b      	lsrs	r3, r3, #16
 800b646:	fb06 2303 	mla	r3, r6, r3, r2
 800b64a:	f8de 2000 	ldr.w	r2, [lr]
 800b64e:	b280      	uxth	r0, r0
 800b650:	b292      	uxth	r2, r2
 800b652:	1a12      	subs	r2, r2, r0
 800b654:	445a      	add	r2, fp
 800b656:	f8de 0000 	ldr.w	r0, [lr]
 800b65a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b65e:	b29b      	uxth	r3, r3
 800b660:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800b664:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800b668:	b292      	uxth	r2, r2
 800b66a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800b66e:	45e1      	cmp	r9, ip
 800b670:	f84e 2b04 	str.w	r2, [lr], #4
 800b674:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800b678:	d2de      	bcs.n	800b638 <quorem+0x42>
 800b67a:	9b00      	ldr	r3, [sp, #0]
 800b67c:	58eb      	ldr	r3, [r5, r3]
 800b67e:	b92b      	cbnz	r3, 800b68c <quorem+0x96>
 800b680:	9b01      	ldr	r3, [sp, #4]
 800b682:	3b04      	subs	r3, #4
 800b684:	429d      	cmp	r5, r3
 800b686:	461a      	mov	r2, r3
 800b688:	d32f      	bcc.n	800b6ea <quorem+0xf4>
 800b68a:	613c      	str	r4, [r7, #16]
 800b68c:	4638      	mov	r0, r7
 800b68e:	f001 f90b 	bl	800c8a8 <__mcmp>
 800b692:	2800      	cmp	r0, #0
 800b694:	db25      	blt.n	800b6e2 <quorem+0xec>
 800b696:	4629      	mov	r1, r5
 800b698:	2000      	movs	r0, #0
 800b69a:	f858 2b04 	ldr.w	r2, [r8], #4
 800b69e:	f8d1 c000 	ldr.w	ip, [r1]
 800b6a2:	fa1f fe82 	uxth.w	lr, r2
 800b6a6:	fa1f f38c 	uxth.w	r3, ip
 800b6aa:	eba3 030e 	sub.w	r3, r3, lr
 800b6ae:	4403      	add	r3, r0
 800b6b0:	0c12      	lsrs	r2, r2, #16
 800b6b2:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800b6b6:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800b6ba:	b29b      	uxth	r3, r3
 800b6bc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b6c0:	45c1      	cmp	r9, r8
 800b6c2:	f841 3b04 	str.w	r3, [r1], #4
 800b6c6:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b6ca:	d2e6      	bcs.n	800b69a <quorem+0xa4>
 800b6cc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b6d0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b6d4:	b922      	cbnz	r2, 800b6e0 <quorem+0xea>
 800b6d6:	3b04      	subs	r3, #4
 800b6d8:	429d      	cmp	r5, r3
 800b6da:	461a      	mov	r2, r3
 800b6dc:	d30b      	bcc.n	800b6f6 <quorem+0x100>
 800b6de:	613c      	str	r4, [r7, #16]
 800b6e0:	3601      	adds	r6, #1
 800b6e2:	4630      	mov	r0, r6
 800b6e4:	b003      	add	sp, #12
 800b6e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6ea:	6812      	ldr	r2, [r2, #0]
 800b6ec:	3b04      	subs	r3, #4
 800b6ee:	2a00      	cmp	r2, #0
 800b6f0:	d1cb      	bne.n	800b68a <quorem+0x94>
 800b6f2:	3c01      	subs	r4, #1
 800b6f4:	e7c6      	b.n	800b684 <quorem+0x8e>
 800b6f6:	6812      	ldr	r2, [r2, #0]
 800b6f8:	3b04      	subs	r3, #4
 800b6fa:	2a00      	cmp	r2, #0
 800b6fc:	d1ef      	bne.n	800b6de <quorem+0xe8>
 800b6fe:	3c01      	subs	r4, #1
 800b700:	e7ea      	b.n	800b6d8 <quorem+0xe2>
 800b702:	2000      	movs	r0, #0
 800b704:	e7ee      	b.n	800b6e4 <quorem+0xee>
	...

0800b708 <_dtoa_r>:
 800b708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b70c:	ed2d 8b02 	vpush	{d8}
 800b710:	69c7      	ldr	r7, [r0, #28]
 800b712:	b091      	sub	sp, #68	@ 0x44
 800b714:	ed8d 0b02 	vstr	d0, [sp, #8]
 800b718:	ec55 4b10 	vmov	r4, r5, d0
 800b71c:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 800b71e:	9107      	str	r1, [sp, #28]
 800b720:	4681      	mov	r9, r0
 800b722:	9209      	str	r2, [sp, #36]	@ 0x24
 800b724:	930d      	str	r3, [sp, #52]	@ 0x34
 800b726:	b97f      	cbnz	r7, 800b748 <_dtoa_r+0x40>
 800b728:	2010      	movs	r0, #16
 800b72a:	f000 fd95 	bl	800c258 <malloc>
 800b72e:	4602      	mov	r2, r0
 800b730:	f8c9 001c 	str.w	r0, [r9, #28]
 800b734:	b920      	cbnz	r0, 800b740 <_dtoa_r+0x38>
 800b736:	4ba0      	ldr	r3, [pc, #640]	@ (800b9b8 <_dtoa_r+0x2b0>)
 800b738:	21ef      	movs	r1, #239	@ 0xef
 800b73a:	48a0      	ldr	r0, [pc, #640]	@ (800b9bc <_dtoa_r+0x2b4>)
 800b73c:	f001 fbea 	bl	800cf14 <__assert_func>
 800b740:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800b744:	6007      	str	r7, [r0, #0]
 800b746:	60c7      	str	r7, [r0, #12]
 800b748:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800b74c:	6819      	ldr	r1, [r3, #0]
 800b74e:	b159      	cbz	r1, 800b768 <_dtoa_r+0x60>
 800b750:	685a      	ldr	r2, [r3, #4]
 800b752:	604a      	str	r2, [r1, #4]
 800b754:	2301      	movs	r3, #1
 800b756:	4093      	lsls	r3, r2
 800b758:	608b      	str	r3, [r1, #8]
 800b75a:	4648      	mov	r0, r9
 800b75c:	f000 fe72 	bl	800c444 <_Bfree>
 800b760:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800b764:	2200      	movs	r2, #0
 800b766:	601a      	str	r2, [r3, #0]
 800b768:	1e2b      	subs	r3, r5, #0
 800b76a:	bfbb      	ittet	lt
 800b76c:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800b770:	9303      	strlt	r3, [sp, #12]
 800b772:	2300      	movge	r3, #0
 800b774:	2201      	movlt	r2, #1
 800b776:	bfac      	ite	ge
 800b778:	6033      	strge	r3, [r6, #0]
 800b77a:	6032      	strlt	r2, [r6, #0]
 800b77c:	4b90      	ldr	r3, [pc, #576]	@ (800b9c0 <_dtoa_r+0x2b8>)
 800b77e:	9e03      	ldr	r6, [sp, #12]
 800b780:	43b3      	bics	r3, r6
 800b782:	d110      	bne.n	800b7a6 <_dtoa_r+0x9e>
 800b784:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b786:	f242 730f 	movw	r3, #9999	@ 0x270f
 800b78a:	6013      	str	r3, [r2, #0]
 800b78c:	f3c6 0313 	ubfx	r3, r6, #0, #20
 800b790:	4323      	orrs	r3, r4
 800b792:	f000 84e6 	beq.w	800c162 <_dtoa_r+0xa5a>
 800b796:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800b798:	4f8a      	ldr	r7, [pc, #552]	@ (800b9c4 <_dtoa_r+0x2bc>)
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	f000 84e8 	beq.w	800c170 <_dtoa_r+0xa68>
 800b7a0:	1cfb      	adds	r3, r7, #3
 800b7a2:	f000 bce3 	b.w	800c16c <_dtoa_r+0xa64>
 800b7a6:	ed9d 8b02 	vldr	d8, [sp, #8]
 800b7aa:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800b7ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b7b2:	d10a      	bne.n	800b7ca <_dtoa_r+0xc2>
 800b7b4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b7b6:	2301      	movs	r3, #1
 800b7b8:	6013      	str	r3, [r2, #0]
 800b7ba:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800b7bc:	b113      	cbz	r3, 800b7c4 <_dtoa_r+0xbc>
 800b7be:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800b7c0:	4b81      	ldr	r3, [pc, #516]	@ (800b9c8 <_dtoa_r+0x2c0>)
 800b7c2:	6013      	str	r3, [r2, #0]
 800b7c4:	4f81      	ldr	r7, [pc, #516]	@ (800b9cc <_dtoa_r+0x2c4>)
 800b7c6:	f000 bcd3 	b.w	800c170 <_dtoa_r+0xa68>
 800b7ca:	aa0e      	add	r2, sp, #56	@ 0x38
 800b7cc:	a90f      	add	r1, sp, #60	@ 0x3c
 800b7ce:	4648      	mov	r0, r9
 800b7d0:	eeb0 0b48 	vmov.f64	d0, d8
 800b7d4:	f001 f918 	bl	800ca08 <__d2b>
 800b7d8:	f3c6 530a 	ubfx	r3, r6, #20, #11
 800b7dc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b7de:	9001      	str	r0, [sp, #4]
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d045      	beq.n	800b870 <_dtoa_r+0x168>
 800b7e4:	eeb0 7b48 	vmov.f64	d7, d8
 800b7e8:	ee18 1a90 	vmov	r1, s17
 800b7ec:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800b7f0:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 800b7f4:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800b7f8:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800b7fc:	2500      	movs	r5, #0
 800b7fe:	ee07 1a90 	vmov	s15, r1
 800b802:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 800b806:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800b9a0 <_dtoa_r+0x298>
 800b80a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800b80e:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 800b9a8 <_dtoa_r+0x2a0>
 800b812:	eea7 6b05 	vfma.f64	d6, d7, d5
 800b816:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800b9b0 <_dtoa_r+0x2a8>
 800b81a:	ee07 3a90 	vmov	s15, r3
 800b81e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800b822:	eeb0 7b46 	vmov.f64	d7, d6
 800b826:	eea4 7b05 	vfma.f64	d7, d4, d5
 800b82a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800b82e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800b832:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b836:	ee16 8a90 	vmov	r8, s13
 800b83a:	d508      	bpl.n	800b84e <_dtoa_r+0x146>
 800b83c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800b840:	eeb4 6b47 	vcmp.f64	d6, d7
 800b844:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b848:	bf18      	it	ne
 800b84a:	f108 38ff 	addne.w	r8, r8, #4294967295
 800b84e:	f1b8 0f16 	cmp.w	r8, #22
 800b852:	d82b      	bhi.n	800b8ac <_dtoa_r+0x1a4>
 800b854:	495e      	ldr	r1, [pc, #376]	@ (800b9d0 <_dtoa_r+0x2c8>)
 800b856:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 800b85a:	ed91 7b00 	vldr	d7, [r1]
 800b85e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800b862:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b866:	d501      	bpl.n	800b86c <_dtoa_r+0x164>
 800b868:	f108 38ff 	add.w	r8, r8, #4294967295
 800b86c:	2100      	movs	r1, #0
 800b86e:	e01e      	b.n	800b8ae <_dtoa_r+0x1a6>
 800b870:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b872:	4413      	add	r3, r2
 800b874:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 800b878:	2920      	cmp	r1, #32
 800b87a:	bfc1      	itttt	gt
 800b87c:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 800b880:	408e      	lslgt	r6, r1
 800b882:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 800b886:	fa24 f101 	lsrgt.w	r1, r4, r1
 800b88a:	bfd6      	itet	le
 800b88c:	f1c1 0120 	rsble	r1, r1, #32
 800b890:	4331      	orrgt	r1, r6
 800b892:	fa04 f101 	lslle.w	r1, r4, r1
 800b896:	ee07 1a90 	vmov	s15, r1
 800b89a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800b89e:	3b01      	subs	r3, #1
 800b8a0:	ee17 1a90 	vmov	r1, s15
 800b8a4:	2501      	movs	r5, #1
 800b8a6:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 800b8aa:	e7a8      	b.n	800b7fe <_dtoa_r+0xf6>
 800b8ac:	2101      	movs	r1, #1
 800b8ae:	1ad2      	subs	r2, r2, r3
 800b8b0:	1e53      	subs	r3, r2, #1
 800b8b2:	9306      	str	r3, [sp, #24]
 800b8b4:	bf45      	ittet	mi
 800b8b6:	f1c2 0301 	rsbmi	r3, r2, #1
 800b8ba:	9304      	strmi	r3, [sp, #16]
 800b8bc:	2300      	movpl	r3, #0
 800b8be:	2300      	movmi	r3, #0
 800b8c0:	bf4c      	ite	mi
 800b8c2:	9306      	strmi	r3, [sp, #24]
 800b8c4:	9304      	strpl	r3, [sp, #16]
 800b8c6:	f1b8 0f00 	cmp.w	r8, #0
 800b8ca:	910c      	str	r1, [sp, #48]	@ 0x30
 800b8cc:	db18      	blt.n	800b900 <_dtoa_r+0x1f8>
 800b8ce:	9b06      	ldr	r3, [sp, #24]
 800b8d0:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800b8d4:	4443      	add	r3, r8
 800b8d6:	9306      	str	r3, [sp, #24]
 800b8d8:	2300      	movs	r3, #0
 800b8da:	9a07      	ldr	r2, [sp, #28]
 800b8dc:	2a09      	cmp	r2, #9
 800b8de:	d845      	bhi.n	800b96c <_dtoa_r+0x264>
 800b8e0:	2a05      	cmp	r2, #5
 800b8e2:	bfc4      	itt	gt
 800b8e4:	3a04      	subgt	r2, #4
 800b8e6:	9207      	strgt	r2, [sp, #28]
 800b8e8:	9a07      	ldr	r2, [sp, #28]
 800b8ea:	f1a2 0202 	sub.w	r2, r2, #2
 800b8ee:	bfcc      	ite	gt
 800b8f0:	2400      	movgt	r4, #0
 800b8f2:	2401      	movle	r4, #1
 800b8f4:	2a03      	cmp	r2, #3
 800b8f6:	d844      	bhi.n	800b982 <_dtoa_r+0x27a>
 800b8f8:	e8df f002 	tbb	[pc, r2]
 800b8fc:	0b173634 	.word	0x0b173634
 800b900:	9b04      	ldr	r3, [sp, #16]
 800b902:	2200      	movs	r2, #0
 800b904:	eba3 0308 	sub.w	r3, r3, r8
 800b908:	9304      	str	r3, [sp, #16]
 800b90a:	920a      	str	r2, [sp, #40]	@ 0x28
 800b90c:	f1c8 0300 	rsb	r3, r8, #0
 800b910:	e7e3      	b.n	800b8da <_dtoa_r+0x1d2>
 800b912:	2201      	movs	r2, #1
 800b914:	9208      	str	r2, [sp, #32]
 800b916:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b918:	eb08 0b02 	add.w	fp, r8, r2
 800b91c:	f10b 0a01 	add.w	sl, fp, #1
 800b920:	4652      	mov	r2, sl
 800b922:	2a01      	cmp	r2, #1
 800b924:	bfb8      	it	lt
 800b926:	2201      	movlt	r2, #1
 800b928:	e006      	b.n	800b938 <_dtoa_r+0x230>
 800b92a:	2201      	movs	r2, #1
 800b92c:	9208      	str	r2, [sp, #32]
 800b92e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b930:	2a00      	cmp	r2, #0
 800b932:	dd29      	ble.n	800b988 <_dtoa_r+0x280>
 800b934:	4693      	mov	fp, r2
 800b936:	4692      	mov	sl, r2
 800b938:	f8d9 701c 	ldr.w	r7, [r9, #28]
 800b93c:	2100      	movs	r1, #0
 800b93e:	2004      	movs	r0, #4
 800b940:	f100 0614 	add.w	r6, r0, #20
 800b944:	4296      	cmp	r6, r2
 800b946:	d926      	bls.n	800b996 <_dtoa_r+0x28e>
 800b948:	6079      	str	r1, [r7, #4]
 800b94a:	4648      	mov	r0, r9
 800b94c:	9305      	str	r3, [sp, #20]
 800b94e:	f000 fd39 	bl	800c3c4 <_Balloc>
 800b952:	9b05      	ldr	r3, [sp, #20]
 800b954:	4607      	mov	r7, r0
 800b956:	2800      	cmp	r0, #0
 800b958:	d13e      	bne.n	800b9d8 <_dtoa_r+0x2d0>
 800b95a:	4b1e      	ldr	r3, [pc, #120]	@ (800b9d4 <_dtoa_r+0x2cc>)
 800b95c:	4602      	mov	r2, r0
 800b95e:	f240 11af 	movw	r1, #431	@ 0x1af
 800b962:	e6ea      	b.n	800b73a <_dtoa_r+0x32>
 800b964:	2200      	movs	r2, #0
 800b966:	e7e1      	b.n	800b92c <_dtoa_r+0x224>
 800b968:	2200      	movs	r2, #0
 800b96a:	e7d3      	b.n	800b914 <_dtoa_r+0x20c>
 800b96c:	2401      	movs	r4, #1
 800b96e:	2200      	movs	r2, #0
 800b970:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800b974:	f04f 3bff 	mov.w	fp, #4294967295
 800b978:	2100      	movs	r1, #0
 800b97a:	46da      	mov	sl, fp
 800b97c:	2212      	movs	r2, #18
 800b97e:	9109      	str	r1, [sp, #36]	@ 0x24
 800b980:	e7da      	b.n	800b938 <_dtoa_r+0x230>
 800b982:	2201      	movs	r2, #1
 800b984:	9208      	str	r2, [sp, #32]
 800b986:	e7f5      	b.n	800b974 <_dtoa_r+0x26c>
 800b988:	f04f 0b01 	mov.w	fp, #1
 800b98c:	46da      	mov	sl, fp
 800b98e:	465a      	mov	r2, fp
 800b990:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 800b994:	e7d0      	b.n	800b938 <_dtoa_r+0x230>
 800b996:	3101      	adds	r1, #1
 800b998:	0040      	lsls	r0, r0, #1
 800b99a:	e7d1      	b.n	800b940 <_dtoa_r+0x238>
 800b99c:	f3af 8000 	nop.w
 800b9a0:	636f4361 	.word	0x636f4361
 800b9a4:	3fd287a7 	.word	0x3fd287a7
 800b9a8:	8b60c8b3 	.word	0x8b60c8b3
 800b9ac:	3fc68a28 	.word	0x3fc68a28
 800b9b0:	509f79fb 	.word	0x509f79fb
 800b9b4:	3fd34413 	.word	0x3fd34413
 800b9b8:	0800d6d9 	.word	0x0800d6d9
 800b9bc:	0800d6f0 	.word	0x0800d6f0
 800b9c0:	7ff00000 	.word	0x7ff00000
 800b9c4:	0800d6d5 	.word	0x0800d6d5
 800b9c8:	0800d6a9 	.word	0x0800d6a9
 800b9cc:	0800d6a8 	.word	0x0800d6a8
 800b9d0:	0800d840 	.word	0x0800d840
 800b9d4:	0800d748 	.word	0x0800d748
 800b9d8:	f8d9 201c 	ldr.w	r2, [r9, #28]
 800b9dc:	f1ba 0f0e 	cmp.w	sl, #14
 800b9e0:	6010      	str	r0, [r2, #0]
 800b9e2:	d86e      	bhi.n	800bac2 <_dtoa_r+0x3ba>
 800b9e4:	2c00      	cmp	r4, #0
 800b9e6:	d06c      	beq.n	800bac2 <_dtoa_r+0x3ba>
 800b9e8:	f1b8 0f00 	cmp.w	r8, #0
 800b9ec:	f340 80b4 	ble.w	800bb58 <_dtoa_r+0x450>
 800b9f0:	4ac8      	ldr	r2, [pc, #800]	@ (800bd14 <_dtoa_r+0x60c>)
 800b9f2:	f008 010f 	and.w	r1, r8, #15
 800b9f6:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800b9fa:	f418 7f80 	tst.w	r8, #256	@ 0x100
 800b9fe:	ed92 7b00 	vldr	d7, [r2]
 800ba02:	ea4f 1128 	mov.w	r1, r8, asr #4
 800ba06:	f000 809b 	beq.w	800bb40 <_dtoa_r+0x438>
 800ba0a:	4ac3      	ldr	r2, [pc, #780]	@ (800bd18 <_dtoa_r+0x610>)
 800ba0c:	ed92 6b08 	vldr	d6, [r2, #32]
 800ba10:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800ba14:	ed8d 6b02 	vstr	d6, [sp, #8]
 800ba18:	f001 010f 	and.w	r1, r1, #15
 800ba1c:	2203      	movs	r2, #3
 800ba1e:	48be      	ldr	r0, [pc, #760]	@ (800bd18 <_dtoa_r+0x610>)
 800ba20:	2900      	cmp	r1, #0
 800ba22:	f040 808f 	bne.w	800bb44 <_dtoa_r+0x43c>
 800ba26:	ed9d 6b02 	vldr	d6, [sp, #8]
 800ba2a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800ba2e:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ba32:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800ba34:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ba38:	2900      	cmp	r1, #0
 800ba3a:	f000 80b3 	beq.w	800bba4 <_dtoa_r+0x49c>
 800ba3e:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800ba42:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800ba46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba4a:	f140 80ab 	bpl.w	800bba4 <_dtoa_r+0x49c>
 800ba4e:	f1ba 0f00 	cmp.w	sl, #0
 800ba52:	f000 80a7 	beq.w	800bba4 <_dtoa_r+0x49c>
 800ba56:	f1bb 0f00 	cmp.w	fp, #0
 800ba5a:	dd30      	ble.n	800babe <_dtoa_r+0x3b6>
 800ba5c:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 800ba60:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ba64:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ba68:	f108 31ff 	add.w	r1, r8, #4294967295
 800ba6c:	9105      	str	r1, [sp, #20]
 800ba6e:	3201      	adds	r2, #1
 800ba70:	465c      	mov	r4, fp
 800ba72:	ed9d 6b02 	vldr	d6, [sp, #8]
 800ba76:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 800ba7a:	ee07 2a90 	vmov	s15, r2
 800ba7e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800ba82:	eea7 5b06 	vfma.f64	d5, d7, d6
 800ba86:	ee15 2a90 	vmov	r2, s11
 800ba8a:	ec51 0b15 	vmov	r0, r1, d5
 800ba8e:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 800ba92:	2c00      	cmp	r4, #0
 800ba94:	f040 808a 	bne.w	800bbac <_dtoa_r+0x4a4>
 800ba98:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800ba9c:	ee36 6b47 	vsub.f64	d6, d6, d7
 800baa0:	ec41 0b17 	vmov	d7, r0, r1
 800baa4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800baa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800baac:	f300 826a 	bgt.w	800bf84 <_dtoa_r+0x87c>
 800bab0:	eeb1 7b47 	vneg.f64	d7, d7
 800bab4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800bab8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800babc:	d423      	bmi.n	800bb06 <_dtoa_r+0x3fe>
 800babe:	ed8d 8b02 	vstr	d8, [sp, #8]
 800bac2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800bac4:	2a00      	cmp	r2, #0
 800bac6:	f2c0 8129 	blt.w	800bd1c <_dtoa_r+0x614>
 800baca:	f1b8 0f0e 	cmp.w	r8, #14
 800bace:	f300 8125 	bgt.w	800bd1c <_dtoa_r+0x614>
 800bad2:	4b90      	ldr	r3, [pc, #576]	@ (800bd14 <_dtoa_r+0x60c>)
 800bad4:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800bad8:	ed93 6b00 	vldr	d6, [r3]
 800badc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bade:	2b00      	cmp	r3, #0
 800bae0:	f280 80c8 	bge.w	800bc74 <_dtoa_r+0x56c>
 800bae4:	f1ba 0f00 	cmp.w	sl, #0
 800bae8:	f300 80c4 	bgt.w	800bc74 <_dtoa_r+0x56c>
 800baec:	d10b      	bne.n	800bb06 <_dtoa_r+0x3fe>
 800baee:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800baf2:	ee26 6b07 	vmul.f64	d6, d6, d7
 800baf6:	ed9d 7b02 	vldr	d7, [sp, #8]
 800bafa:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800bafe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb02:	f2c0 823c 	blt.w	800bf7e <_dtoa_r+0x876>
 800bb06:	2400      	movs	r4, #0
 800bb08:	4625      	mov	r5, r4
 800bb0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bb0c:	43db      	mvns	r3, r3
 800bb0e:	9305      	str	r3, [sp, #20]
 800bb10:	463e      	mov	r6, r7
 800bb12:	f04f 0800 	mov.w	r8, #0
 800bb16:	4621      	mov	r1, r4
 800bb18:	4648      	mov	r0, r9
 800bb1a:	f000 fc93 	bl	800c444 <_Bfree>
 800bb1e:	2d00      	cmp	r5, #0
 800bb20:	f000 80a2 	beq.w	800bc68 <_dtoa_r+0x560>
 800bb24:	f1b8 0f00 	cmp.w	r8, #0
 800bb28:	d005      	beq.n	800bb36 <_dtoa_r+0x42e>
 800bb2a:	45a8      	cmp	r8, r5
 800bb2c:	d003      	beq.n	800bb36 <_dtoa_r+0x42e>
 800bb2e:	4641      	mov	r1, r8
 800bb30:	4648      	mov	r0, r9
 800bb32:	f000 fc87 	bl	800c444 <_Bfree>
 800bb36:	4629      	mov	r1, r5
 800bb38:	4648      	mov	r0, r9
 800bb3a:	f000 fc83 	bl	800c444 <_Bfree>
 800bb3e:	e093      	b.n	800bc68 <_dtoa_r+0x560>
 800bb40:	2202      	movs	r2, #2
 800bb42:	e76c      	b.n	800ba1e <_dtoa_r+0x316>
 800bb44:	07cc      	lsls	r4, r1, #31
 800bb46:	d504      	bpl.n	800bb52 <_dtoa_r+0x44a>
 800bb48:	ed90 6b00 	vldr	d6, [r0]
 800bb4c:	3201      	adds	r2, #1
 800bb4e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800bb52:	1049      	asrs	r1, r1, #1
 800bb54:	3008      	adds	r0, #8
 800bb56:	e763      	b.n	800ba20 <_dtoa_r+0x318>
 800bb58:	d022      	beq.n	800bba0 <_dtoa_r+0x498>
 800bb5a:	f1c8 0100 	rsb	r1, r8, #0
 800bb5e:	4a6d      	ldr	r2, [pc, #436]	@ (800bd14 <_dtoa_r+0x60c>)
 800bb60:	f001 000f 	and.w	r0, r1, #15
 800bb64:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800bb68:	ed92 7b00 	vldr	d7, [r2]
 800bb6c:	ee28 7b07 	vmul.f64	d7, d8, d7
 800bb70:	ed8d 7b02 	vstr	d7, [sp, #8]
 800bb74:	4868      	ldr	r0, [pc, #416]	@ (800bd18 <_dtoa_r+0x610>)
 800bb76:	1109      	asrs	r1, r1, #4
 800bb78:	2400      	movs	r4, #0
 800bb7a:	2202      	movs	r2, #2
 800bb7c:	b929      	cbnz	r1, 800bb8a <_dtoa_r+0x482>
 800bb7e:	2c00      	cmp	r4, #0
 800bb80:	f43f af57 	beq.w	800ba32 <_dtoa_r+0x32a>
 800bb84:	ed8d 7b02 	vstr	d7, [sp, #8]
 800bb88:	e753      	b.n	800ba32 <_dtoa_r+0x32a>
 800bb8a:	07ce      	lsls	r6, r1, #31
 800bb8c:	d505      	bpl.n	800bb9a <_dtoa_r+0x492>
 800bb8e:	ed90 6b00 	vldr	d6, [r0]
 800bb92:	3201      	adds	r2, #1
 800bb94:	2401      	movs	r4, #1
 800bb96:	ee27 7b06 	vmul.f64	d7, d7, d6
 800bb9a:	1049      	asrs	r1, r1, #1
 800bb9c:	3008      	adds	r0, #8
 800bb9e:	e7ed      	b.n	800bb7c <_dtoa_r+0x474>
 800bba0:	2202      	movs	r2, #2
 800bba2:	e746      	b.n	800ba32 <_dtoa_r+0x32a>
 800bba4:	f8cd 8014 	str.w	r8, [sp, #20]
 800bba8:	4654      	mov	r4, sl
 800bbaa:	e762      	b.n	800ba72 <_dtoa_r+0x36a>
 800bbac:	4a59      	ldr	r2, [pc, #356]	@ (800bd14 <_dtoa_r+0x60c>)
 800bbae:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800bbb2:	ed12 4b02 	vldr	d4, [r2, #-8]
 800bbb6:	9a08      	ldr	r2, [sp, #32]
 800bbb8:	ec41 0b17 	vmov	d7, r0, r1
 800bbbc:	443c      	add	r4, r7
 800bbbe:	b34a      	cbz	r2, 800bc14 <_dtoa_r+0x50c>
 800bbc0:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 800bbc4:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 800bbc8:	463e      	mov	r6, r7
 800bbca:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800bbce:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800bbd2:	ee35 7b47 	vsub.f64	d7, d5, d7
 800bbd6:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800bbda:	ee14 2a90 	vmov	r2, s9
 800bbde:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800bbe2:	3230      	adds	r2, #48	@ 0x30
 800bbe4:	ee36 6b45 	vsub.f64	d6, d6, d5
 800bbe8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800bbec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bbf0:	f806 2b01 	strb.w	r2, [r6], #1
 800bbf4:	d438      	bmi.n	800bc68 <_dtoa_r+0x560>
 800bbf6:	ee32 5b46 	vsub.f64	d5, d2, d6
 800bbfa:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800bbfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc02:	d46e      	bmi.n	800bce2 <_dtoa_r+0x5da>
 800bc04:	42a6      	cmp	r6, r4
 800bc06:	f43f af5a 	beq.w	800babe <_dtoa_r+0x3b6>
 800bc0a:	ee27 7b03 	vmul.f64	d7, d7, d3
 800bc0e:	ee26 6b03 	vmul.f64	d6, d6, d3
 800bc12:	e7e0      	b.n	800bbd6 <_dtoa_r+0x4ce>
 800bc14:	4621      	mov	r1, r4
 800bc16:	463e      	mov	r6, r7
 800bc18:	ee27 7b04 	vmul.f64	d7, d7, d4
 800bc1c:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800bc20:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800bc24:	ee14 2a90 	vmov	r2, s9
 800bc28:	3230      	adds	r2, #48	@ 0x30
 800bc2a:	f806 2b01 	strb.w	r2, [r6], #1
 800bc2e:	42a6      	cmp	r6, r4
 800bc30:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800bc34:	ee36 6b45 	vsub.f64	d6, d6, d5
 800bc38:	d119      	bne.n	800bc6e <_dtoa_r+0x566>
 800bc3a:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 800bc3e:	ee37 4b05 	vadd.f64	d4, d7, d5
 800bc42:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800bc46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc4a:	dc4a      	bgt.n	800bce2 <_dtoa_r+0x5da>
 800bc4c:	ee35 5b47 	vsub.f64	d5, d5, d7
 800bc50:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800bc54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc58:	f57f af31 	bpl.w	800babe <_dtoa_r+0x3b6>
 800bc5c:	460e      	mov	r6, r1
 800bc5e:	3901      	subs	r1, #1
 800bc60:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800bc64:	2b30      	cmp	r3, #48	@ 0x30
 800bc66:	d0f9      	beq.n	800bc5c <_dtoa_r+0x554>
 800bc68:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800bc6c:	e027      	b.n	800bcbe <_dtoa_r+0x5b6>
 800bc6e:	ee26 6b03 	vmul.f64	d6, d6, d3
 800bc72:	e7d5      	b.n	800bc20 <_dtoa_r+0x518>
 800bc74:	ed9d 7b02 	vldr	d7, [sp, #8]
 800bc78:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 800bc7c:	463e      	mov	r6, r7
 800bc7e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800bc82:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800bc86:	ee15 3a10 	vmov	r3, s10
 800bc8a:	3330      	adds	r3, #48	@ 0x30
 800bc8c:	f806 3b01 	strb.w	r3, [r6], #1
 800bc90:	1bf3      	subs	r3, r6, r7
 800bc92:	459a      	cmp	sl, r3
 800bc94:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800bc98:	eea3 7b46 	vfms.f64	d7, d3, d6
 800bc9c:	d132      	bne.n	800bd04 <_dtoa_r+0x5fc>
 800bc9e:	ee37 7b07 	vadd.f64	d7, d7, d7
 800bca2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800bca6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bcaa:	dc18      	bgt.n	800bcde <_dtoa_r+0x5d6>
 800bcac:	eeb4 7b46 	vcmp.f64	d7, d6
 800bcb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bcb4:	d103      	bne.n	800bcbe <_dtoa_r+0x5b6>
 800bcb6:	ee15 3a10 	vmov	r3, s10
 800bcba:	07db      	lsls	r3, r3, #31
 800bcbc:	d40f      	bmi.n	800bcde <_dtoa_r+0x5d6>
 800bcbe:	9901      	ldr	r1, [sp, #4]
 800bcc0:	4648      	mov	r0, r9
 800bcc2:	f000 fbbf 	bl	800c444 <_Bfree>
 800bcc6:	2300      	movs	r3, #0
 800bcc8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800bcca:	7033      	strb	r3, [r6, #0]
 800bccc:	f108 0301 	add.w	r3, r8, #1
 800bcd0:	6013      	str	r3, [r2, #0]
 800bcd2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	f000 824b 	beq.w	800c170 <_dtoa_r+0xa68>
 800bcda:	601e      	str	r6, [r3, #0]
 800bcdc:	e248      	b.n	800c170 <_dtoa_r+0xa68>
 800bcde:	f8cd 8014 	str.w	r8, [sp, #20]
 800bce2:	4633      	mov	r3, r6
 800bce4:	461e      	mov	r6, r3
 800bce6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bcea:	2a39      	cmp	r2, #57	@ 0x39
 800bcec:	d106      	bne.n	800bcfc <_dtoa_r+0x5f4>
 800bcee:	429f      	cmp	r7, r3
 800bcf0:	d1f8      	bne.n	800bce4 <_dtoa_r+0x5dc>
 800bcf2:	9a05      	ldr	r2, [sp, #20]
 800bcf4:	3201      	adds	r2, #1
 800bcf6:	9205      	str	r2, [sp, #20]
 800bcf8:	2230      	movs	r2, #48	@ 0x30
 800bcfa:	703a      	strb	r2, [r7, #0]
 800bcfc:	781a      	ldrb	r2, [r3, #0]
 800bcfe:	3201      	adds	r2, #1
 800bd00:	701a      	strb	r2, [r3, #0]
 800bd02:	e7b1      	b.n	800bc68 <_dtoa_r+0x560>
 800bd04:	ee27 7b04 	vmul.f64	d7, d7, d4
 800bd08:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800bd0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd10:	d1b5      	bne.n	800bc7e <_dtoa_r+0x576>
 800bd12:	e7d4      	b.n	800bcbe <_dtoa_r+0x5b6>
 800bd14:	0800d840 	.word	0x0800d840
 800bd18:	0800d818 	.word	0x0800d818
 800bd1c:	9908      	ldr	r1, [sp, #32]
 800bd1e:	2900      	cmp	r1, #0
 800bd20:	f000 80e9 	beq.w	800bef6 <_dtoa_r+0x7ee>
 800bd24:	9907      	ldr	r1, [sp, #28]
 800bd26:	2901      	cmp	r1, #1
 800bd28:	f300 80cb 	bgt.w	800bec2 <_dtoa_r+0x7ba>
 800bd2c:	2d00      	cmp	r5, #0
 800bd2e:	f000 80c4 	beq.w	800beba <_dtoa_r+0x7b2>
 800bd32:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800bd36:	9e04      	ldr	r6, [sp, #16]
 800bd38:	461c      	mov	r4, r3
 800bd3a:	9305      	str	r3, [sp, #20]
 800bd3c:	9b04      	ldr	r3, [sp, #16]
 800bd3e:	4413      	add	r3, r2
 800bd40:	9304      	str	r3, [sp, #16]
 800bd42:	9b06      	ldr	r3, [sp, #24]
 800bd44:	2101      	movs	r1, #1
 800bd46:	4413      	add	r3, r2
 800bd48:	4648      	mov	r0, r9
 800bd4a:	9306      	str	r3, [sp, #24]
 800bd4c:	f000 fc2e 	bl	800c5ac <__i2b>
 800bd50:	9b05      	ldr	r3, [sp, #20]
 800bd52:	4605      	mov	r5, r0
 800bd54:	b166      	cbz	r6, 800bd70 <_dtoa_r+0x668>
 800bd56:	9a06      	ldr	r2, [sp, #24]
 800bd58:	2a00      	cmp	r2, #0
 800bd5a:	dd09      	ble.n	800bd70 <_dtoa_r+0x668>
 800bd5c:	42b2      	cmp	r2, r6
 800bd5e:	9904      	ldr	r1, [sp, #16]
 800bd60:	bfa8      	it	ge
 800bd62:	4632      	movge	r2, r6
 800bd64:	1a89      	subs	r1, r1, r2
 800bd66:	9104      	str	r1, [sp, #16]
 800bd68:	9906      	ldr	r1, [sp, #24]
 800bd6a:	1ab6      	subs	r6, r6, r2
 800bd6c:	1a8a      	subs	r2, r1, r2
 800bd6e:	9206      	str	r2, [sp, #24]
 800bd70:	b30b      	cbz	r3, 800bdb6 <_dtoa_r+0x6ae>
 800bd72:	9a08      	ldr	r2, [sp, #32]
 800bd74:	2a00      	cmp	r2, #0
 800bd76:	f000 80c5 	beq.w	800bf04 <_dtoa_r+0x7fc>
 800bd7a:	2c00      	cmp	r4, #0
 800bd7c:	f000 80bf 	beq.w	800befe <_dtoa_r+0x7f6>
 800bd80:	4629      	mov	r1, r5
 800bd82:	4622      	mov	r2, r4
 800bd84:	4648      	mov	r0, r9
 800bd86:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bd88:	f000 fcc8 	bl	800c71c <__pow5mult>
 800bd8c:	9a01      	ldr	r2, [sp, #4]
 800bd8e:	4601      	mov	r1, r0
 800bd90:	4605      	mov	r5, r0
 800bd92:	4648      	mov	r0, r9
 800bd94:	f000 fc20 	bl	800c5d8 <__multiply>
 800bd98:	9901      	ldr	r1, [sp, #4]
 800bd9a:	9005      	str	r0, [sp, #20]
 800bd9c:	4648      	mov	r0, r9
 800bd9e:	f000 fb51 	bl	800c444 <_Bfree>
 800bda2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bda4:	1b1b      	subs	r3, r3, r4
 800bda6:	f000 80b0 	beq.w	800bf0a <_dtoa_r+0x802>
 800bdaa:	9905      	ldr	r1, [sp, #20]
 800bdac:	461a      	mov	r2, r3
 800bdae:	4648      	mov	r0, r9
 800bdb0:	f000 fcb4 	bl	800c71c <__pow5mult>
 800bdb4:	9001      	str	r0, [sp, #4]
 800bdb6:	2101      	movs	r1, #1
 800bdb8:	4648      	mov	r0, r9
 800bdba:	f000 fbf7 	bl	800c5ac <__i2b>
 800bdbe:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bdc0:	4604      	mov	r4, r0
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	f000 81da 	beq.w	800c17c <_dtoa_r+0xa74>
 800bdc8:	461a      	mov	r2, r3
 800bdca:	4601      	mov	r1, r0
 800bdcc:	4648      	mov	r0, r9
 800bdce:	f000 fca5 	bl	800c71c <__pow5mult>
 800bdd2:	9b07      	ldr	r3, [sp, #28]
 800bdd4:	2b01      	cmp	r3, #1
 800bdd6:	4604      	mov	r4, r0
 800bdd8:	f300 80a0 	bgt.w	800bf1c <_dtoa_r+0x814>
 800bddc:	9b02      	ldr	r3, [sp, #8]
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	f040 8096 	bne.w	800bf10 <_dtoa_r+0x808>
 800bde4:	9b03      	ldr	r3, [sp, #12]
 800bde6:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800bdea:	2a00      	cmp	r2, #0
 800bdec:	f040 8092 	bne.w	800bf14 <_dtoa_r+0x80c>
 800bdf0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800bdf4:	0d12      	lsrs	r2, r2, #20
 800bdf6:	0512      	lsls	r2, r2, #20
 800bdf8:	2a00      	cmp	r2, #0
 800bdfa:	f000 808d 	beq.w	800bf18 <_dtoa_r+0x810>
 800bdfe:	9b04      	ldr	r3, [sp, #16]
 800be00:	3301      	adds	r3, #1
 800be02:	9304      	str	r3, [sp, #16]
 800be04:	9b06      	ldr	r3, [sp, #24]
 800be06:	3301      	adds	r3, #1
 800be08:	9306      	str	r3, [sp, #24]
 800be0a:	2301      	movs	r3, #1
 800be0c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800be0e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800be10:	2b00      	cmp	r3, #0
 800be12:	f000 81b9 	beq.w	800c188 <_dtoa_r+0xa80>
 800be16:	6922      	ldr	r2, [r4, #16]
 800be18:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800be1c:	6910      	ldr	r0, [r2, #16]
 800be1e:	f000 fb79 	bl	800c514 <__hi0bits>
 800be22:	f1c0 0020 	rsb	r0, r0, #32
 800be26:	9b06      	ldr	r3, [sp, #24]
 800be28:	4418      	add	r0, r3
 800be2a:	f010 001f 	ands.w	r0, r0, #31
 800be2e:	f000 8081 	beq.w	800bf34 <_dtoa_r+0x82c>
 800be32:	f1c0 0220 	rsb	r2, r0, #32
 800be36:	2a04      	cmp	r2, #4
 800be38:	dd73      	ble.n	800bf22 <_dtoa_r+0x81a>
 800be3a:	9b04      	ldr	r3, [sp, #16]
 800be3c:	f1c0 001c 	rsb	r0, r0, #28
 800be40:	4403      	add	r3, r0
 800be42:	9304      	str	r3, [sp, #16]
 800be44:	9b06      	ldr	r3, [sp, #24]
 800be46:	4406      	add	r6, r0
 800be48:	4403      	add	r3, r0
 800be4a:	9306      	str	r3, [sp, #24]
 800be4c:	9b04      	ldr	r3, [sp, #16]
 800be4e:	2b00      	cmp	r3, #0
 800be50:	dd05      	ble.n	800be5e <_dtoa_r+0x756>
 800be52:	9901      	ldr	r1, [sp, #4]
 800be54:	461a      	mov	r2, r3
 800be56:	4648      	mov	r0, r9
 800be58:	f000 fcba 	bl	800c7d0 <__lshift>
 800be5c:	9001      	str	r0, [sp, #4]
 800be5e:	9b06      	ldr	r3, [sp, #24]
 800be60:	2b00      	cmp	r3, #0
 800be62:	dd05      	ble.n	800be70 <_dtoa_r+0x768>
 800be64:	4621      	mov	r1, r4
 800be66:	461a      	mov	r2, r3
 800be68:	4648      	mov	r0, r9
 800be6a:	f000 fcb1 	bl	800c7d0 <__lshift>
 800be6e:	4604      	mov	r4, r0
 800be70:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800be72:	2b00      	cmp	r3, #0
 800be74:	d060      	beq.n	800bf38 <_dtoa_r+0x830>
 800be76:	9801      	ldr	r0, [sp, #4]
 800be78:	4621      	mov	r1, r4
 800be7a:	f000 fd15 	bl	800c8a8 <__mcmp>
 800be7e:	2800      	cmp	r0, #0
 800be80:	da5a      	bge.n	800bf38 <_dtoa_r+0x830>
 800be82:	f108 33ff 	add.w	r3, r8, #4294967295
 800be86:	9305      	str	r3, [sp, #20]
 800be88:	9901      	ldr	r1, [sp, #4]
 800be8a:	2300      	movs	r3, #0
 800be8c:	220a      	movs	r2, #10
 800be8e:	4648      	mov	r0, r9
 800be90:	f000 fafa 	bl	800c488 <__multadd>
 800be94:	9b08      	ldr	r3, [sp, #32]
 800be96:	9001      	str	r0, [sp, #4]
 800be98:	2b00      	cmp	r3, #0
 800be9a:	f000 8177 	beq.w	800c18c <_dtoa_r+0xa84>
 800be9e:	4629      	mov	r1, r5
 800bea0:	2300      	movs	r3, #0
 800bea2:	220a      	movs	r2, #10
 800bea4:	4648      	mov	r0, r9
 800bea6:	f000 faef 	bl	800c488 <__multadd>
 800beaa:	f1bb 0f00 	cmp.w	fp, #0
 800beae:	4605      	mov	r5, r0
 800beb0:	dc6e      	bgt.n	800bf90 <_dtoa_r+0x888>
 800beb2:	9b07      	ldr	r3, [sp, #28]
 800beb4:	2b02      	cmp	r3, #2
 800beb6:	dc48      	bgt.n	800bf4a <_dtoa_r+0x842>
 800beb8:	e06a      	b.n	800bf90 <_dtoa_r+0x888>
 800beba:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bebc:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800bec0:	e739      	b.n	800bd36 <_dtoa_r+0x62e>
 800bec2:	f10a 34ff 	add.w	r4, sl, #4294967295
 800bec6:	42a3      	cmp	r3, r4
 800bec8:	db07      	blt.n	800beda <_dtoa_r+0x7d2>
 800beca:	f1ba 0f00 	cmp.w	sl, #0
 800bece:	eba3 0404 	sub.w	r4, r3, r4
 800bed2:	db0b      	blt.n	800beec <_dtoa_r+0x7e4>
 800bed4:	9e04      	ldr	r6, [sp, #16]
 800bed6:	4652      	mov	r2, sl
 800bed8:	e72f      	b.n	800bd3a <_dtoa_r+0x632>
 800beda:	1ae2      	subs	r2, r4, r3
 800bedc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bede:	9e04      	ldr	r6, [sp, #16]
 800bee0:	4413      	add	r3, r2
 800bee2:	930a      	str	r3, [sp, #40]	@ 0x28
 800bee4:	4652      	mov	r2, sl
 800bee6:	4623      	mov	r3, r4
 800bee8:	2400      	movs	r4, #0
 800beea:	e726      	b.n	800bd3a <_dtoa_r+0x632>
 800beec:	9a04      	ldr	r2, [sp, #16]
 800beee:	eba2 060a 	sub.w	r6, r2, sl
 800bef2:	2200      	movs	r2, #0
 800bef4:	e721      	b.n	800bd3a <_dtoa_r+0x632>
 800bef6:	9e04      	ldr	r6, [sp, #16]
 800bef8:	9d08      	ldr	r5, [sp, #32]
 800befa:	461c      	mov	r4, r3
 800befc:	e72a      	b.n	800bd54 <_dtoa_r+0x64c>
 800befe:	9a01      	ldr	r2, [sp, #4]
 800bf00:	9205      	str	r2, [sp, #20]
 800bf02:	e752      	b.n	800bdaa <_dtoa_r+0x6a2>
 800bf04:	9901      	ldr	r1, [sp, #4]
 800bf06:	461a      	mov	r2, r3
 800bf08:	e751      	b.n	800bdae <_dtoa_r+0x6a6>
 800bf0a:	9b05      	ldr	r3, [sp, #20]
 800bf0c:	9301      	str	r3, [sp, #4]
 800bf0e:	e752      	b.n	800bdb6 <_dtoa_r+0x6ae>
 800bf10:	2300      	movs	r3, #0
 800bf12:	e77b      	b.n	800be0c <_dtoa_r+0x704>
 800bf14:	9b02      	ldr	r3, [sp, #8]
 800bf16:	e779      	b.n	800be0c <_dtoa_r+0x704>
 800bf18:	920b      	str	r2, [sp, #44]	@ 0x2c
 800bf1a:	e778      	b.n	800be0e <_dtoa_r+0x706>
 800bf1c:	2300      	movs	r3, #0
 800bf1e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bf20:	e779      	b.n	800be16 <_dtoa_r+0x70e>
 800bf22:	d093      	beq.n	800be4c <_dtoa_r+0x744>
 800bf24:	9b04      	ldr	r3, [sp, #16]
 800bf26:	321c      	adds	r2, #28
 800bf28:	4413      	add	r3, r2
 800bf2a:	9304      	str	r3, [sp, #16]
 800bf2c:	9b06      	ldr	r3, [sp, #24]
 800bf2e:	4416      	add	r6, r2
 800bf30:	4413      	add	r3, r2
 800bf32:	e78a      	b.n	800be4a <_dtoa_r+0x742>
 800bf34:	4602      	mov	r2, r0
 800bf36:	e7f5      	b.n	800bf24 <_dtoa_r+0x81c>
 800bf38:	f1ba 0f00 	cmp.w	sl, #0
 800bf3c:	f8cd 8014 	str.w	r8, [sp, #20]
 800bf40:	46d3      	mov	fp, sl
 800bf42:	dc21      	bgt.n	800bf88 <_dtoa_r+0x880>
 800bf44:	9b07      	ldr	r3, [sp, #28]
 800bf46:	2b02      	cmp	r3, #2
 800bf48:	dd1e      	ble.n	800bf88 <_dtoa_r+0x880>
 800bf4a:	f1bb 0f00 	cmp.w	fp, #0
 800bf4e:	f47f addc 	bne.w	800bb0a <_dtoa_r+0x402>
 800bf52:	4621      	mov	r1, r4
 800bf54:	465b      	mov	r3, fp
 800bf56:	2205      	movs	r2, #5
 800bf58:	4648      	mov	r0, r9
 800bf5a:	f000 fa95 	bl	800c488 <__multadd>
 800bf5e:	4601      	mov	r1, r0
 800bf60:	4604      	mov	r4, r0
 800bf62:	9801      	ldr	r0, [sp, #4]
 800bf64:	f000 fca0 	bl	800c8a8 <__mcmp>
 800bf68:	2800      	cmp	r0, #0
 800bf6a:	f77f adce 	ble.w	800bb0a <_dtoa_r+0x402>
 800bf6e:	463e      	mov	r6, r7
 800bf70:	2331      	movs	r3, #49	@ 0x31
 800bf72:	f806 3b01 	strb.w	r3, [r6], #1
 800bf76:	9b05      	ldr	r3, [sp, #20]
 800bf78:	3301      	adds	r3, #1
 800bf7a:	9305      	str	r3, [sp, #20]
 800bf7c:	e5c9      	b.n	800bb12 <_dtoa_r+0x40a>
 800bf7e:	f8cd 8014 	str.w	r8, [sp, #20]
 800bf82:	4654      	mov	r4, sl
 800bf84:	4625      	mov	r5, r4
 800bf86:	e7f2      	b.n	800bf6e <_dtoa_r+0x866>
 800bf88:	9b08      	ldr	r3, [sp, #32]
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	f000 8102 	beq.w	800c194 <_dtoa_r+0xa8c>
 800bf90:	2e00      	cmp	r6, #0
 800bf92:	dd05      	ble.n	800bfa0 <_dtoa_r+0x898>
 800bf94:	4629      	mov	r1, r5
 800bf96:	4632      	mov	r2, r6
 800bf98:	4648      	mov	r0, r9
 800bf9a:	f000 fc19 	bl	800c7d0 <__lshift>
 800bf9e:	4605      	mov	r5, r0
 800bfa0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	d058      	beq.n	800c058 <_dtoa_r+0x950>
 800bfa6:	6869      	ldr	r1, [r5, #4]
 800bfa8:	4648      	mov	r0, r9
 800bfaa:	f000 fa0b 	bl	800c3c4 <_Balloc>
 800bfae:	4606      	mov	r6, r0
 800bfb0:	b928      	cbnz	r0, 800bfbe <_dtoa_r+0x8b6>
 800bfb2:	4b82      	ldr	r3, [pc, #520]	@ (800c1bc <_dtoa_r+0xab4>)
 800bfb4:	4602      	mov	r2, r0
 800bfb6:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800bfba:	f7ff bbbe 	b.w	800b73a <_dtoa_r+0x32>
 800bfbe:	692a      	ldr	r2, [r5, #16]
 800bfc0:	3202      	adds	r2, #2
 800bfc2:	0092      	lsls	r2, r2, #2
 800bfc4:	f105 010c 	add.w	r1, r5, #12
 800bfc8:	300c      	adds	r0, #12
 800bfca:	f7ff fb06 	bl	800b5da <memcpy>
 800bfce:	2201      	movs	r2, #1
 800bfd0:	4631      	mov	r1, r6
 800bfd2:	4648      	mov	r0, r9
 800bfd4:	f000 fbfc 	bl	800c7d0 <__lshift>
 800bfd8:	1c7b      	adds	r3, r7, #1
 800bfda:	9304      	str	r3, [sp, #16]
 800bfdc:	eb07 030b 	add.w	r3, r7, fp
 800bfe0:	9309      	str	r3, [sp, #36]	@ 0x24
 800bfe2:	9b02      	ldr	r3, [sp, #8]
 800bfe4:	f003 0301 	and.w	r3, r3, #1
 800bfe8:	46a8      	mov	r8, r5
 800bfea:	9308      	str	r3, [sp, #32]
 800bfec:	4605      	mov	r5, r0
 800bfee:	9b04      	ldr	r3, [sp, #16]
 800bff0:	9801      	ldr	r0, [sp, #4]
 800bff2:	4621      	mov	r1, r4
 800bff4:	f103 3bff 	add.w	fp, r3, #4294967295
 800bff8:	f7ff fafd 	bl	800b5f6 <quorem>
 800bffc:	4641      	mov	r1, r8
 800bffe:	9002      	str	r0, [sp, #8]
 800c000:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800c004:	9801      	ldr	r0, [sp, #4]
 800c006:	f000 fc4f 	bl	800c8a8 <__mcmp>
 800c00a:	462a      	mov	r2, r5
 800c00c:	9006      	str	r0, [sp, #24]
 800c00e:	4621      	mov	r1, r4
 800c010:	4648      	mov	r0, r9
 800c012:	f000 fc65 	bl	800c8e0 <__mdiff>
 800c016:	68c2      	ldr	r2, [r0, #12]
 800c018:	4606      	mov	r6, r0
 800c01a:	b9fa      	cbnz	r2, 800c05c <_dtoa_r+0x954>
 800c01c:	4601      	mov	r1, r0
 800c01e:	9801      	ldr	r0, [sp, #4]
 800c020:	f000 fc42 	bl	800c8a8 <__mcmp>
 800c024:	4602      	mov	r2, r0
 800c026:	4631      	mov	r1, r6
 800c028:	4648      	mov	r0, r9
 800c02a:	920a      	str	r2, [sp, #40]	@ 0x28
 800c02c:	f000 fa0a 	bl	800c444 <_Bfree>
 800c030:	9b07      	ldr	r3, [sp, #28]
 800c032:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c034:	9e04      	ldr	r6, [sp, #16]
 800c036:	ea42 0103 	orr.w	r1, r2, r3
 800c03a:	9b08      	ldr	r3, [sp, #32]
 800c03c:	4319      	orrs	r1, r3
 800c03e:	d10f      	bne.n	800c060 <_dtoa_r+0x958>
 800c040:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800c044:	d028      	beq.n	800c098 <_dtoa_r+0x990>
 800c046:	9b06      	ldr	r3, [sp, #24]
 800c048:	2b00      	cmp	r3, #0
 800c04a:	dd02      	ble.n	800c052 <_dtoa_r+0x94a>
 800c04c:	9b02      	ldr	r3, [sp, #8]
 800c04e:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 800c052:	f88b a000 	strb.w	sl, [fp]
 800c056:	e55e      	b.n	800bb16 <_dtoa_r+0x40e>
 800c058:	4628      	mov	r0, r5
 800c05a:	e7bd      	b.n	800bfd8 <_dtoa_r+0x8d0>
 800c05c:	2201      	movs	r2, #1
 800c05e:	e7e2      	b.n	800c026 <_dtoa_r+0x91e>
 800c060:	9b06      	ldr	r3, [sp, #24]
 800c062:	2b00      	cmp	r3, #0
 800c064:	db04      	blt.n	800c070 <_dtoa_r+0x968>
 800c066:	9907      	ldr	r1, [sp, #28]
 800c068:	430b      	orrs	r3, r1
 800c06a:	9908      	ldr	r1, [sp, #32]
 800c06c:	430b      	orrs	r3, r1
 800c06e:	d120      	bne.n	800c0b2 <_dtoa_r+0x9aa>
 800c070:	2a00      	cmp	r2, #0
 800c072:	ddee      	ble.n	800c052 <_dtoa_r+0x94a>
 800c074:	9901      	ldr	r1, [sp, #4]
 800c076:	2201      	movs	r2, #1
 800c078:	4648      	mov	r0, r9
 800c07a:	f000 fba9 	bl	800c7d0 <__lshift>
 800c07e:	4621      	mov	r1, r4
 800c080:	9001      	str	r0, [sp, #4]
 800c082:	f000 fc11 	bl	800c8a8 <__mcmp>
 800c086:	2800      	cmp	r0, #0
 800c088:	dc03      	bgt.n	800c092 <_dtoa_r+0x98a>
 800c08a:	d1e2      	bne.n	800c052 <_dtoa_r+0x94a>
 800c08c:	f01a 0f01 	tst.w	sl, #1
 800c090:	d0df      	beq.n	800c052 <_dtoa_r+0x94a>
 800c092:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800c096:	d1d9      	bne.n	800c04c <_dtoa_r+0x944>
 800c098:	2339      	movs	r3, #57	@ 0x39
 800c09a:	f88b 3000 	strb.w	r3, [fp]
 800c09e:	4633      	mov	r3, r6
 800c0a0:	461e      	mov	r6, r3
 800c0a2:	3b01      	subs	r3, #1
 800c0a4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800c0a8:	2a39      	cmp	r2, #57	@ 0x39
 800c0aa:	d052      	beq.n	800c152 <_dtoa_r+0xa4a>
 800c0ac:	3201      	adds	r2, #1
 800c0ae:	701a      	strb	r2, [r3, #0]
 800c0b0:	e531      	b.n	800bb16 <_dtoa_r+0x40e>
 800c0b2:	2a00      	cmp	r2, #0
 800c0b4:	dd07      	ble.n	800c0c6 <_dtoa_r+0x9be>
 800c0b6:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800c0ba:	d0ed      	beq.n	800c098 <_dtoa_r+0x990>
 800c0bc:	f10a 0301 	add.w	r3, sl, #1
 800c0c0:	f88b 3000 	strb.w	r3, [fp]
 800c0c4:	e527      	b.n	800bb16 <_dtoa_r+0x40e>
 800c0c6:	9b04      	ldr	r3, [sp, #16]
 800c0c8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c0ca:	f803 ac01 	strb.w	sl, [r3, #-1]
 800c0ce:	4293      	cmp	r3, r2
 800c0d0:	d029      	beq.n	800c126 <_dtoa_r+0xa1e>
 800c0d2:	9901      	ldr	r1, [sp, #4]
 800c0d4:	2300      	movs	r3, #0
 800c0d6:	220a      	movs	r2, #10
 800c0d8:	4648      	mov	r0, r9
 800c0da:	f000 f9d5 	bl	800c488 <__multadd>
 800c0de:	45a8      	cmp	r8, r5
 800c0e0:	9001      	str	r0, [sp, #4]
 800c0e2:	f04f 0300 	mov.w	r3, #0
 800c0e6:	f04f 020a 	mov.w	r2, #10
 800c0ea:	4641      	mov	r1, r8
 800c0ec:	4648      	mov	r0, r9
 800c0ee:	d107      	bne.n	800c100 <_dtoa_r+0x9f8>
 800c0f0:	f000 f9ca 	bl	800c488 <__multadd>
 800c0f4:	4680      	mov	r8, r0
 800c0f6:	4605      	mov	r5, r0
 800c0f8:	9b04      	ldr	r3, [sp, #16]
 800c0fa:	3301      	adds	r3, #1
 800c0fc:	9304      	str	r3, [sp, #16]
 800c0fe:	e776      	b.n	800bfee <_dtoa_r+0x8e6>
 800c100:	f000 f9c2 	bl	800c488 <__multadd>
 800c104:	4629      	mov	r1, r5
 800c106:	4680      	mov	r8, r0
 800c108:	2300      	movs	r3, #0
 800c10a:	220a      	movs	r2, #10
 800c10c:	4648      	mov	r0, r9
 800c10e:	f000 f9bb 	bl	800c488 <__multadd>
 800c112:	4605      	mov	r5, r0
 800c114:	e7f0      	b.n	800c0f8 <_dtoa_r+0x9f0>
 800c116:	f1bb 0f00 	cmp.w	fp, #0
 800c11a:	bfcc      	ite	gt
 800c11c:	465e      	movgt	r6, fp
 800c11e:	2601      	movle	r6, #1
 800c120:	443e      	add	r6, r7
 800c122:	f04f 0800 	mov.w	r8, #0
 800c126:	9901      	ldr	r1, [sp, #4]
 800c128:	2201      	movs	r2, #1
 800c12a:	4648      	mov	r0, r9
 800c12c:	f000 fb50 	bl	800c7d0 <__lshift>
 800c130:	4621      	mov	r1, r4
 800c132:	9001      	str	r0, [sp, #4]
 800c134:	f000 fbb8 	bl	800c8a8 <__mcmp>
 800c138:	2800      	cmp	r0, #0
 800c13a:	dcb0      	bgt.n	800c09e <_dtoa_r+0x996>
 800c13c:	d102      	bne.n	800c144 <_dtoa_r+0xa3c>
 800c13e:	f01a 0f01 	tst.w	sl, #1
 800c142:	d1ac      	bne.n	800c09e <_dtoa_r+0x996>
 800c144:	4633      	mov	r3, r6
 800c146:	461e      	mov	r6, r3
 800c148:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c14c:	2a30      	cmp	r2, #48	@ 0x30
 800c14e:	d0fa      	beq.n	800c146 <_dtoa_r+0xa3e>
 800c150:	e4e1      	b.n	800bb16 <_dtoa_r+0x40e>
 800c152:	429f      	cmp	r7, r3
 800c154:	d1a4      	bne.n	800c0a0 <_dtoa_r+0x998>
 800c156:	9b05      	ldr	r3, [sp, #20]
 800c158:	3301      	adds	r3, #1
 800c15a:	9305      	str	r3, [sp, #20]
 800c15c:	2331      	movs	r3, #49	@ 0x31
 800c15e:	703b      	strb	r3, [r7, #0]
 800c160:	e4d9      	b.n	800bb16 <_dtoa_r+0x40e>
 800c162:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800c164:	4f16      	ldr	r7, [pc, #88]	@ (800c1c0 <_dtoa_r+0xab8>)
 800c166:	b11b      	cbz	r3, 800c170 <_dtoa_r+0xa68>
 800c168:	f107 0308 	add.w	r3, r7, #8
 800c16c:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800c16e:	6013      	str	r3, [r2, #0]
 800c170:	4638      	mov	r0, r7
 800c172:	b011      	add	sp, #68	@ 0x44
 800c174:	ecbd 8b02 	vpop	{d8}
 800c178:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c17c:	9b07      	ldr	r3, [sp, #28]
 800c17e:	2b01      	cmp	r3, #1
 800c180:	f77f ae2c 	ble.w	800bddc <_dtoa_r+0x6d4>
 800c184:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c186:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c188:	2001      	movs	r0, #1
 800c18a:	e64c      	b.n	800be26 <_dtoa_r+0x71e>
 800c18c:	f1bb 0f00 	cmp.w	fp, #0
 800c190:	f77f aed8 	ble.w	800bf44 <_dtoa_r+0x83c>
 800c194:	463e      	mov	r6, r7
 800c196:	9801      	ldr	r0, [sp, #4]
 800c198:	4621      	mov	r1, r4
 800c19a:	f7ff fa2c 	bl	800b5f6 <quorem>
 800c19e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800c1a2:	f806 ab01 	strb.w	sl, [r6], #1
 800c1a6:	1bf2      	subs	r2, r6, r7
 800c1a8:	4593      	cmp	fp, r2
 800c1aa:	ddb4      	ble.n	800c116 <_dtoa_r+0xa0e>
 800c1ac:	9901      	ldr	r1, [sp, #4]
 800c1ae:	2300      	movs	r3, #0
 800c1b0:	220a      	movs	r2, #10
 800c1b2:	4648      	mov	r0, r9
 800c1b4:	f000 f968 	bl	800c488 <__multadd>
 800c1b8:	9001      	str	r0, [sp, #4]
 800c1ba:	e7ec      	b.n	800c196 <_dtoa_r+0xa8e>
 800c1bc:	0800d748 	.word	0x0800d748
 800c1c0:	0800d6cc 	.word	0x0800d6cc

0800c1c4 <_free_r>:
 800c1c4:	b538      	push	{r3, r4, r5, lr}
 800c1c6:	4605      	mov	r5, r0
 800c1c8:	2900      	cmp	r1, #0
 800c1ca:	d041      	beq.n	800c250 <_free_r+0x8c>
 800c1cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c1d0:	1f0c      	subs	r4, r1, #4
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	bfb8      	it	lt
 800c1d6:	18e4      	addlt	r4, r4, r3
 800c1d8:	f000 f8e8 	bl	800c3ac <__malloc_lock>
 800c1dc:	4a1d      	ldr	r2, [pc, #116]	@ (800c254 <_free_r+0x90>)
 800c1de:	6813      	ldr	r3, [r2, #0]
 800c1e0:	b933      	cbnz	r3, 800c1f0 <_free_r+0x2c>
 800c1e2:	6063      	str	r3, [r4, #4]
 800c1e4:	6014      	str	r4, [r2, #0]
 800c1e6:	4628      	mov	r0, r5
 800c1e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c1ec:	f000 b8e4 	b.w	800c3b8 <__malloc_unlock>
 800c1f0:	42a3      	cmp	r3, r4
 800c1f2:	d908      	bls.n	800c206 <_free_r+0x42>
 800c1f4:	6820      	ldr	r0, [r4, #0]
 800c1f6:	1821      	adds	r1, r4, r0
 800c1f8:	428b      	cmp	r3, r1
 800c1fa:	bf01      	itttt	eq
 800c1fc:	6819      	ldreq	r1, [r3, #0]
 800c1fe:	685b      	ldreq	r3, [r3, #4]
 800c200:	1809      	addeq	r1, r1, r0
 800c202:	6021      	streq	r1, [r4, #0]
 800c204:	e7ed      	b.n	800c1e2 <_free_r+0x1e>
 800c206:	461a      	mov	r2, r3
 800c208:	685b      	ldr	r3, [r3, #4]
 800c20a:	b10b      	cbz	r3, 800c210 <_free_r+0x4c>
 800c20c:	42a3      	cmp	r3, r4
 800c20e:	d9fa      	bls.n	800c206 <_free_r+0x42>
 800c210:	6811      	ldr	r1, [r2, #0]
 800c212:	1850      	adds	r0, r2, r1
 800c214:	42a0      	cmp	r0, r4
 800c216:	d10b      	bne.n	800c230 <_free_r+0x6c>
 800c218:	6820      	ldr	r0, [r4, #0]
 800c21a:	4401      	add	r1, r0
 800c21c:	1850      	adds	r0, r2, r1
 800c21e:	4283      	cmp	r3, r0
 800c220:	6011      	str	r1, [r2, #0]
 800c222:	d1e0      	bne.n	800c1e6 <_free_r+0x22>
 800c224:	6818      	ldr	r0, [r3, #0]
 800c226:	685b      	ldr	r3, [r3, #4]
 800c228:	6053      	str	r3, [r2, #4]
 800c22a:	4408      	add	r0, r1
 800c22c:	6010      	str	r0, [r2, #0]
 800c22e:	e7da      	b.n	800c1e6 <_free_r+0x22>
 800c230:	d902      	bls.n	800c238 <_free_r+0x74>
 800c232:	230c      	movs	r3, #12
 800c234:	602b      	str	r3, [r5, #0]
 800c236:	e7d6      	b.n	800c1e6 <_free_r+0x22>
 800c238:	6820      	ldr	r0, [r4, #0]
 800c23a:	1821      	adds	r1, r4, r0
 800c23c:	428b      	cmp	r3, r1
 800c23e:	bf04      	itt	eq
 800c240:	6819      	ldreq	r1, [r3, #0]
 800c242:	685b      	ldreq	r3, [r3, #4]
 800c244:	6063      	str	r3, [r4, #4]
 800c246:	bf04      	itt	eq
 800c248:	1809      	addeq	r1, r1, r0
 800c24a:	6021      	streq	r1, [r4, #0]
 800c24c:	6054      	str	r4, [r2, #4]
 800c24e:	e7ca      	b.n	800c1e6 <_free_r+0x22>
 800c250:	bd38      	pop	{r3, r4, r5, pc}
 800c252:	bf00      	nop
 800c254:	24000728 	.word	0x24000728

0800c258 <malloc>:
 800c258:	4b02      	ldr	r3, [pc, #8]	@ (800c264 <malloc+0xc>)
 800c25a:	4601      	mov	r1, r0
 800c25c:	6818      	ldr	r0, [r3, #0]
 800c25e:	f000 b825 	b.w	800c2ac <_malloc_r>
 800c262:	bf00      	nop
 800c264:	24000020 	.word	0x24000020

0800c268 <sbrk_aligned>:
 800c268:	b570      	push	{r4, r5, r6, lr}
 800c26a:	4e0f      	ldr	r6, [pc, #60]	@ (800c2a8 <sbrk_aligned+0x40>)
 800c26c:	460c      	mov	r4, r1
 800c26e:	6831      	ldr	r1, [r6, #0]
 800c270:	4605      	mov	r5, r0
 800c272:	b911      	cbnz	r1, 800c27a <sbrk_aligned+0x12>
 800c274:	f000 fe3e 	bl	800cef4 <_sbrk_r>
 800c278:	6030      	str	r0, [r6, #0]
 800c27a:	4621      	mov	r1, r4
 800c27c:	4628      	mov	r0, r5
 800c27e:	f000 fe39 	bl	800cef4 <_sbrk_r>
 800c282:	1c43      	adds	r3, r0, #1
 800c284:	d103      	bne.n	800c28e <sbrk_aligned+0x26>
 800c286:	f04f 34ff 	mov.w	r4, #4294967295
 800c28a:	4620      	mov	r0, r4
 800c28c:	bd70      	pop	{r4, r5, r6, pc}
 800c28e:	1cc4      	adds	r4, r0, #3
 800c290:	f024 0403 	bic.w	r4, r4, #3
 800c294:	42a0      	cmp	r0, r4
 800c296:	d0f8      	beq.n	800c28a <sbrk_aligned+0x22>
 800c298:	1a21      	subs	r1, r4, r0
 800c29a:	4628      	mov	r0, r5
 800c29c:	f000 fe2a 	bl	800cef4 <_sbrk_r>
 800c2a0:	3001      	adds	r0, #1
 800c2a2:	d1f2      	bne.n	800c28a <sbrk_aligned+0x22>
 800c2a4:	e7ef      	b.n	800c286 <sbrk_aligned+0x1e>
 800c2a6:	bf00      	nop
 800c2a8:	24000724 	.word	0x24000724

0800c2ac <_malloc_r>:
 800c2ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c2b0:	1ccd      	adds	r5, r1, #3
 800c2b2:	f025 0503 	bic.w	r5, r5, #3
 800c2b6:	3508      	adds	r5, #8
 800c2b8:	2d0c      	cmp	r5, #12
 800c2ba:	bf38      	it	cc
 800c2bc:	250c      	movcc	r5, #12
 800c2be:	2d00      	cmp	r5, #0
 800c2c0:	4606      	mov	r6, r0
 800c2c2:	db01      	blt.n	800c2c8 <_malloc_r+0x1c>
 800c2c4:	42a9      	cmp	r1, r5
 800c2c6:	d904      	bls.n	800c2d2 <_malloc_r+0x26>
 800c2c8:	230c      	movs	r3, #12
 800c2ca:	6033      	str	r3, [r6, #0]
 800c2cc:	2000      	movs	r0, #0
 800c2ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c2d2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c3a8 <_malloc_r+0xfc>
 800c2d6:	f000 f869 	bl	800c3ac <__malloc_lock>
 800c2da:	f8d8 3000 	ldr.w	r3, [r8]
 800c2de:	461c      	mov	r4, r3
 800c2e0:	bb44      	cbnz	r4, 800c334 <_malloc_r+0x88>
 800c2e2:	4629      	mov	r1, r5
 800c2e4:	4630      	mov	r0, r6
 800c2e6:	f7ff ffbf 	bl	800c268 <sbrk_aligned>
 800c2ea:	1c43      	adds	r3, r0, #1
 800c2ec:	4604      	mov	r4, r0
 800c2ee:	d158      	bne.n	800c3a2 <_malloc_r+0xf6>
 800c2f0:	f8d8 4000 	ldr.w	r4, [r8]
 800c2f4:	4627      	mov	r7, r4
 800c2f6:	2f00      	cmp	r7, #0
 800c2f8:	d143      	bne.n	800c382 <_malloc_r+0xd6>
 800c2fa:	2c00      	cmp	r4, #0
 800c2fc:	d04b      	beq.n	800c396 <_malloc_r+0xea>
 800c2fe:	6823      	ldr	r3, [r4, #0]
 800c300:	4639      	mov	r1, r7
 800c302:	4630      	mov	r0, r6
 800c304:	eb04 0903 	add.w	r9, r4, r3
 800c308:	f000 fdf4 	bl	800cef4 <_sbrk_r>
 800c30c:	4581      	cmp	r9, r0
 800c30e:	d142      	bne.n	800c396 <_malloc_r+0xea>
 800c310:	6821      	ldr	r1, [r4, #0]
 800c312:	1a6d      	subs	r5, r5, r1
 800c314:	4629      	mov	r1, r5
 800c316:	4630      	mov	r0, r6
 800c318:	f7ff ffa6 	bl	800c268 <sbrk_aligned>
 800c31c:	3001      	adds	r0, #1
 800c31e:	d03a      	beq.n	800c396 <_malloc_r+0xea>
 800c320:	6823      	ldr	r3, [r4, #0]
 800c322:	442b      	add	r3, r5
 800c324:	6023      	str	r3, [r4, #0]
 800c326:	f8d8 3000 	ldr.w	r3, [r8]
 800c32a:	685a      	ldr	r2, [r3, #4]
 800c32c:	bb62      	cbnz	r2, 800c388 <_malloc_r+0xdc>
 800c32e:	f8c8 7000 	str.w	r7, [r8]
 800c332:	e00f      	b.n	800c354 <_malloc_r+0xa8>
 800c334:	6822      	ldr	r2, [r4, #0]
 800c336:	1b52      	subs	r2, r2, r5
 800c338:	d420      	bmi.n	800c37c <_malloc_r+0xd0>
 800c33a:	2a0b      	cmp	r2, #11
 800c33c:	d917      	bls.n	800c36e <_malloc_r+0xc2>
 800c33e:	1961      	adds	r1, r4, r5
 800c340:	42a3      	cmp	r3, r4
 800c342:	6025      	str	r5, [r4, #0]
 800c344:	bf18      	it	ne
 800c346:	6059      	strne	r1, [r3, #4]
 800c348:	6863      	ldr	r3, [r4, #4]
 800c34a:	bf08      	it	eq
 800c34c:	f8c8 1000 	streq.w	r1, [r8]
 800c350:	5162      	str	r2, [r4, r5]
 800c352:	604b      	str	r3, [r1, #4]
 800c354:	4630      	mov	r0, r6
 800c356:	f000 f82f 	bl	800c3b8 <__malloc_unlock>
 800c35a:	f104 000b 	add.w	r0, r4, #11
 800c35e:	1d23      	adds	r3, r4, #4
 800c360:	f020 0007 	bic.w	r0, r0, #7
 800c364:	1ac2      	subs	r2, r0, r3
 800c366:	bf1c      	itt	ne
 800c368:	1a1b      	subne	r3, r3, r0
 800c36a:	50a3      	strne	r3, [r4, r2]
 800c36c:	e7af      	b.n	800c2ce <_malloc_r+0x22>
 800c36e:	6862      	ldr	r2, [r4, #4]
 800c370:	42a3      	cmp	r3, r4
 800c372:	bf0c      	ite	eq
 800c374:	f8c8 2000 	streq.w	r2, [r8]
 800c378:	605a      	strne	r2, [r3, #4]
 800c37a:	e7eb      	b.n	800c354 <_malloc_r+0xa8>
 800c37c:	4623      	mov	r3, r4
 800c37e:	6864      	ldr	r4, [r4, #4]
 800c380:	e7ae      	b.n	800c2e0 <_malloc_r+0x34>
 800c382:	463c      	mov	r4, r7
 800c384:	687f      	ldr	r7, [r7, #4]
 800c386:	e7b6      	b.n	800c2f6 <_malloc_r+0x4a>
 800c388:	461a      	mov	r2, r3
 800c38a:	685b      	ldr	r3, [r3, #4]
 800c38c:	42a3      	cmp	r3, r4
 800c38e:	d1fb      	bne.n	800c388 <_malloc_r+0xdc>
 800c390:	2300      	movs	r3, #0
 800c392:	6053      	str	r3, [r2, #4]
 800c394:	e7de      	b.n	800c354 <_malloc_r+0xa8>
 800c396:	230c      	movs	r3, #12
 800c398:	6033      	str	r3, [r6, #0]
 800c39a:	4630      	mov	r0, r6
 800c39c:	f000 f80c 	bl	800c3b8 <__malloc_unlock>
 800c3a0:	e794      	b.n	800c2cc <_malloc_r+0x20>
 800c3a2:	6005      	str	r5, [r0, #0]
 800c3a4:	e7d6      	b.n	800c354 <_malloc_r+0xa8>
 800c3a6:	bf00      	nop
 800c3a8:	24000728 	.word	0x24000728

0800c3ac <__malloc_lock>:
 800c3ac:	4801      	ldr	r0, [pc, #4]	@ (800c3b4 <__malloc_lock+0x8>)
 800c3ae:	f7ff b912 	b.w	800b5d6 <__retarget_lock_acquire_recursive>
 800c3b2:	bf00      	nop
 800c3b4:	24000720 	.word	0x24000720

0800c3b8 <__malloc_unlock>:
 800c3b8:	4801      	ldr	r0, [pc, #4]	@ (800c3c0 <__malloc_unlock+0x8>)
 800c3ba:	f7ff b90d 	b.w	800b5d8 <__retarget_lock_release_recursive>
 800c3be:	bf00      	nop
 800c3c0:	24000720 	.word	0x24000720

0800c3c4 <_Balloc>:
 800c3c4:	b570      	push	{r4, r5, r6, lr}
 800c3c6:	69c6      	ldr	r6, [r0, #28]
 800c3c8:	4604      	mov	r4, r0
 800c3ca:	460d      	mov	r5, r1
 800c3cc:	b976      	cbnz	r6, 800c3ec <_Balloc+0x28>
 800c3ce:	2010      	movs	r0, #16
 800c3d0:	f7ff ff42 	bl	800c258 <malloc>
 800c3d4:	4602      	mov	r2, r0
 800c3d6:	61e0      	str	r0, [r4, #28]
 800c3d8:	b920      	cbnz	r0, 800c3e4 <_Balloc+0x20>
 800c3da:	4b18      	ldr	r3, [pc, #96]	@ (800c43c <_Balloc+0x78>)
 800c3dc:	4818      	ldr	r0, [pc, #96]	@ (800c440 <_Balloc+0x7c>)
 800c3de:	216b      	movs	r1, #107	@ 0x6b
 800c3e0:	f000 fd98 	bl	800cf14 <__assert_func>
 800c3e4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c3e8:	6006      	str	r6, [r0, #0]
 800c3ea:	60c6      	str	r6, [r0, #12]
 800c3ec:	69e6      	ldr	r6, [r4, #28]
 800c3ee:	68f3      	ldr	r3, [r6, #12]
 800c3f0:	b183      	cbz	r3, 800c414 <_Balloc+0x50>
 800c3f2:	69e3      	ldr	r3, [r4, #28]
 800c3f4:	68db      	ldr	r3, [r3, #12]
 800c3f6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c3fa:	b9b8      	cbnz	r0, 800c42c <_Balloc+0x68>
 800c3fc:	2101      	movs	r1, #1
 800c3fe:	fa01 f605 	lsl.w	r6, r1, r5
 800c402:	1d72      	adds	r2, r6, #5
 800c404:	0092      	lsls	r2, r2, #2
 800c406:	4620      	mov	r0, r4
 800c408:	f000 fda2 	bl	800cf50 <_calloc_r>
 800c40c:	b160      	cbz	r0, 800c428 <_Balloc+0x64>
 800c40e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c412:	e00e      	b.n	800c432 <_Balloc+0x6e>
 800c414:	2221      	movs	r2, #33	@ 0x21
 800c416:	2104      	movs	r1, #4
 800c418:	4620      	mov	r0, r4
 800c41a:	f000 fd99 	bl	800cf50 <_calloc_r>
 800c41e:	69e3      	ldr	r3, [r4, #28]
 800c420:	60f0      	str	r0, [r6, #12]
 800c422:	68db      	ldr	r3, [r3, #12]
 800c424:	2b00      	cmp	r3, #0
 800c426:	d1e4      	bne.n	800c3f2 <_Balloc+0x2e>
 800c428:	2000      	movs	r0, #0
 800c42a:	bd70      	pop	{r4, r5, r6, pc}
 800c42c:	6802      	ldr	r2, [r0, #0]
 800c42e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c432:	2300      	movs	r3, #0
 800c434:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c438:	e7f7      	b.n	800c42a <_Balloc+0x66>
 800c43a:	bf00      	nop
 800c43c:	0800d6d9 	.word	0x0800d6d9
 800c440:	0800d759 	.word	0x0800d759

0800c444 <_Bfree>:
 800c444:	b570      	push	{r4, r5, r6, lr}
 800c446:	69c6      	ldr	r6, [r0, #28]
 800c448:	4605      	mov	r5, r0
 800c44a:	460c      	mov	r4, r1
 800c44c:	b976      	cbnz	r6, 800c46c <_Bfree+0x28>
 800c44e:	2010      	movs	r0, #16
 800c450:	f7ff ff02 	bl	800c258 <malloc>
 800c454:	4602      	mov	r2, r0
 800c456:	61e8      	str	r0, [r5, #28]
 800c458:	b920      	cbnz	r0, 800c464 <_Bfree+0x20>
 800c45a:	4b09      	ldr	r3, [pc, #36]	@ (800c480 <_Bfree+0x3c>)
 800c45c:	4809      	ldr	r0, [pc, #36]	@ (800c484 <_Bfree+0x40>)
 800c45e:	218f      	movs	r1, #143	@ 0x8f
 800c460:	f000 fd58 	bl	800cf14 <__assert_func>
 800c464:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c468:	6006      	str	r6, [r0, #0]
 800c46a:	60c6      	str	r6, [r0, #12]
 800c46c:	b13c      	cbz	r4, 800c47e <_Bfree+0x3a>
 800c46e:	69eb      	ldr	r3, [r5, #28]
 800c470:	6862      	ldr	r2, [r4, #4]
 800c472:	68db      	ldr	r3, [r3, #12]
 800c474:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c478:	6021      	str	r1, [r4, #0]
 800c47a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c47e:	bd70      	pop	{r4, r5, r6, pc}
 800c480:	0800d6d9 	.word	0x0800d6d9
 800c484:	0800d759 	.word	0x0800d759

0800c488 <__multadd>:
 800c488:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c48c:	690d      	ldr	r5, [r1, #16]
 800c48e:	4607      	mov	r7, r0
 800c490:	460c      	mov	r4, r1
 800c492:	461e      	mov	r6, r3
 800c494:	f101 0c14 	add.w	ip, r1, #20
 800c498:	2000      	movs	r0, #0
 800c49a:	f8dc 3000 	ldr.w	r3, [ip]
 800c49e:	b299      	uxth	r1, r3
 800c4a0:	fb02 6101 	mla	r1, r2, r1, r6
 800c4a4:	0c1e      	lsrs	r6, r3, #16
 800c4a6:	0c0b      	lsrs	r3, r1, #16
 800c4a8:	fb02 3306 	mla	r3, r2, r6, r3
 800c4ac:	b289      	uxth	r1, r1
 800c4ae:	3001      	adds	r0, #1
 800c4b0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c4b4:	4285      	cmp	r5, r0
 800c4b6:	f84c 1b04 	str.w	r1, [ip], #4
 800c4ba:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c4be:	dcec      	bgt.n	800c49a <__multadd+0x12>
 800c4c0:	b30e      	cbz	r6, 800c506 <__multadd+0x7e>
 800c4c2:	68a3      	ldr	r3, [r4, #8]
 800c4c4:	42ab      	cmp	r3, r5
 800c4c6:	dc19      	bgt.n	800c4fc <__multadd+0x74>
 800c4c8:	6861      	ldr	r1, [r4, #4]
 800c4ca:	4638      	mov	r0, r7
 800c4cc:	3101      	adds	r1, #1
 800c4ce:	f7ff ff79 	bl	800c3c4 <_Balloc>
 800c4d2:	4680      	mov	r8, r0
 800c4d4:	b928      	cbnz	r0, 800c4e2 <__multadd+0x5a>
 800c4d6:	4602      	mov	r2, r0
 800c4d8:	4b0c      	ldr	r3, [pc, #48]	@ (800c50c <__multadd+0x84>)
 800c4da:	480d      	ldr	r0, [pc, #52]	@ (800c510 <__multadd+0x88>)
 800c4dc:	21ba      	movs	r1, #186	@ 0xba
 800c4de:	f000 fd19 	bl	800cf14 <__assert_func>
 800c4e2:	6922      	ldr	r2, [r4, #16]
 800c4e4:	3202      	adds	r2, #2
 800c4e6:	f104 010c 	add.w	r1, r4, #12
 800c4ea:	0092      	lsls	r2, r2, #2
 800c4ec:	300c      	adds	r0, #12
 800c4ee:	f7ff f874 	bl	800b5da <memcpy>
 800c4f2:	4621      	mov	r1, r4
 800c4f4:	4638      	mov	r0, r7
 800c4f6:	f7ff ffa5 	bl	800c444 <_Bfree>
 800c4fa:	4644      	mov	r4, r8
 800c4fc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c500:	3501      	adds	r5, #1
 800c502:	615e      	str	r6, [r3, #20]
 800c504:	6125      	str	r5, [r4, #16]
 800c506:	4620      	mov	r0, r4
 800c508:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c50c:	0800d748 	.word	0x0800d748
 800c510:	0800d759 	.word	0x0800d759

0800c514 <__hi0bits>:
 800c514:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800c518:	4603      	mov	r3, r0
 800c51a:	bf36      	itet	cc
 800c51c:	0403      	lslcc	r3, r0, #16
 800c51e:	2000      	movcs	r0, #0
 800c520:	2010      	movcc	r0, #16
 800c522:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c526:	bf3c      	itt	cc
 800c528:	021b      	lslcc	r3, r3, #8
 800c52a:	3008      	addcc	r0, #8
 800c52c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c530:	bf3c      	itt	cc
 800c532:	011b      	lslcc	r3, r3, #4
 800c534:	3004      	addcc	r0, #4
 800c536:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c53a:	bf3c      	itt	cc
 800c53c:	009b      	lslcc	r3, r3, #2
 800c53e:	3002      	addcc	r0, #2
 800c540:	2b00      	cmp	r3, #0
 800c542:	db05      	blt.n	800c550 <__hi0bits+0x3c>
 800c544:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800c548:	f100 0001 	add.w	r0, r0, #1
 800c54c:	bf08      	it	eq
 800c54e:	2020      	moveq	r0, #32
 800c550:	4770      	bx	lr

0800c552 <__lo0bits>:
 800c552:	6803      	ldr	r3, [r0, #0]
 800c554:	4602      	mov	r2, r0
 800c556:	f013 0007 	ands.w	r0, r3, #7
 800c55a:	d00b      	beq.n	800c574 <__lo0bits+0x22>
 800c55c:	07d9      	lsls	r1, r3, #31
 800c55e:	d421      	bmi.n	800c5a4 <__lo0bits+0x52>
 800c560:	0798      	lsls	r0, r3, #30
 800c562:	bf49      	itett	mi
 800c564:	085b      	lsrmi	r3, r3, #1
 800c566:	089b      	lsrpl	r3, r3, #2
 800c568:	2001      	movmi	r0, #1
 800c56a:	6013      	strmi	r3, [r2, #0]
 800c56c:	bf5c      	itt	pl
 800c56e:	6013      	strpl	r3, [r2, #0]
 800c570:	2002      	movpl	r0, #2
 800c572:	4770      	bx	lr
 800c574:	b299      	uxth	r1, r3
 800c576:	b909      	cbnz	r1, 800c57c <__lo0bits+0x2a>
 800c578:	0c1b      	lsrs	r3, r3, #16
 800c57a:	2010      	movs	r0, #16
 800c57c:	b2d9      	uxtb	r1, r3
 800c57e:	b909      	cbnz	r1, 800c584 <__lo0bits+0x32>
 800c580:	3008      	adds	r0, #8
 800c582:	0a1b      	lsrs	r3, r3, #8
 800c584:	0719      	lsls	r1, r3, #28
 800c586:	bf04      	itt	eq
 800c588:	091b      	lsreq	r3, r3, #4
 800c58a:	3004      	addeq	r0, #4
 800c58c:	0799      	lsls	r1, r3, #30
 800c58e:	bf04      	itt	eq
 800c590:	089b      	lsreq	r3, r3, #2
 800c592:	3002      	addeq	r0, #2
 800c594:	07d9      	lsls	r1, r3, #31
 800c596:	d403      	bmi.n	800c5a0 <__lo0bits+0x4e>
 800c598:	085b      	lsrs	r3, r3, #1
 800c59a:	f100 0001 	add.w	r0, r0, #1
 800c59e:	d003      	beq.n	800c5a8 <__lo0bits+0x56>
 800c5a0:	6013      	str	r3, [r2, #0]
 800c5a2:	4770      	bx	lr
 800c5a4:	2000      	movs	r0, #0
 800c5a6:	4770      	bx	lr
 800c5a8:	2020      	movs	r0, #32
 800c5aa:	4770      	bx	lr

0800c5ac <__i2b>:
 800c5ac:	b510      	push	{r4, lr}
 800c5ae:	460c      	mov	r4, r1
 800c5b0:	2101      	movs	r1, #1
 800c5b2:	f7ff ff07 	bl	800c3c4 <_Balloc>
 800c5b6:	4602      	mov	r2, r0
 800c5b8:	b928      	cbnz	r0, 800c5c6 <__i2b+0x1a>
 800c5ba:	4b05      	ldr	r3, [pc, #20]	@ (800c5d0 <__i2b+0x24>)
 800c5bc:	4805      	ldr	r0, [pc, #20]	@ (800c5d4 <__i2b+0x28>)
 800c5be:	f240 1145 	movw	r1, #325	@ 0x145
 800c5c2:	f000 fca7 	bl	800cf14 <__assert_func>
 800c5c6:	2301      	movs	r3, #1
 800c5c8:	6144      	str	r4, [r0, #20]
 800c5ca:	6103      	str	r3, [r0, #16]
 800c5cc:	bd10      	pop	{r4, pc}
 800c5ce:	bf00      	nop
 800c5d0:	0800d748 	.word	0x0800d748
 800c5d4:	0800d759 	.word	0x0800d759

0800c5d8 <__multiply>:
 800c5d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5dc:	4617      	mov	r7, r2
 800c5de:	690a      	ldr	r2, [r1, #16]
 800c5e0:	693b      	ldr	r3, [r7, #16]
 800c5e2:	429a      	cmp	r2, r3
 800c5e4:	bfa8      	it	ge
 800c5e6:	463b      	movge	r3, r7
 800c5e8:	4689      	mov	r9, r1
 800c5ea:	bfa4      	itt	ge
 800c5ec:	460f      	movge	r7, r1
 800c5ee:	4699      	movge	r9, r3
 800c5f0:	693d      	ldr	r5, [r7, #16]
 800c5f2:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c5f6:	68bb      	ldr	r3, [r7, #8]
 800c5f8:	6879      	ldr	r1, [r7, #4]
 800c5fa:	eb05 060a 	add.w	r6, r5, sl
 800c5fe:	42b3      	cmp	r3, r6
 800c600:	b085      	sub	sp, #20
 800c602:	bfb8      	it	lt
 800c604:	3101      	addlt	r1, #1
 800c606:	f7ff fedd 	bl	800c3c4 <_Balloc>
 800c60a:	b930      	cbnz	r0, 800c61a <__multiply+0x42>
 800c60c:	4602      	mov	r2, r0
 800c60e:	4b41      	ldr	r3, [pc, #260]	@ (800c714 <__multiply+0x13c>)
 800c610:	4841      	ldr	r0, [pc, #260]	@ (800c718 <__multiply+0x140>)
 800c612:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800c616:	f000 fc7d 	bl	800cf14 <__assert_func>
 800c61a:	f100 0414 	add.w	r4, r0, #20
 800c61e:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800c622:	4623      	mov	r3, r4
 800c624:	2200      	movs	r2, #0
 800c626:	4573      	cmp	r3, lr
 800c628:	d320      	bcc.n	800c66c <__multiply+0x94>
 800c62a:	f107 0814 	add.w	r8, r7, #20
 800c62e:	f109 0114 	add.w	r1, r9, #20
 800c632:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800c636:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800c63a:	9302      	str	r3, [sp, #8]
 800c63c:	1beb      	subs	r3, r5, r7
 800c63e:	3b15      	subs	r3, #21
 800c640:	f023 0303 	bic.w	r3, r3, #3
 800c644:	3304      	adds	r3, #4
 800c646:	3715      	adds	r7, #21
 800c648:	42bd      	cmp	r5, r7
 800c64a:	bf38      	it	cc
 800c64c:	2304      	movcc	r3, #4
 800c64e:	9301      	str	r3, [sp, #4]
 800c650:	9b02      	ldr	r3, [sp, #8]
 800c652:	9103      	str	r1, [sp, #12]
 800c654:	428b      	cmp	r3, r1
 800c656:	d80c      	bhi.n	800c672 <__multiply+0x9a>
 800c658:	2e00      	cmp	r6, #0
 800c65a:	dd03      	ble.n	800c664 <__multiply+0x8c>
 800c65c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800c660:	2b00      	cmp	r3, #0
 800c662:	d055      	beq.n	800c710 <__multiply+0x138>
 800c664:	6106      	str	r6, [r0, #16]
 800c666:	b005      	add	sp, #20
 800c668:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c66c:	f843 2b04 	str.w	r2, [r3], #4
 800c670:	e7d9      	b.n	800c626 <__multiply+0x4e>
 800c672:	f8b1 a000 	ldrh.w	sl, [r1]
 800c676:	f1ba 0f00 	cmp.w	sl, #0
 800c67a:	d01f      	beq.n	800c6bc <__multiply+0xe4>
 800c67c:	46c4      	mov	ip, r8
 800c67e:	46a1      	mov	r9, r4
 800c680:	2700      	movs	r7, #0
 800c682:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c686:	f8d9 3000 	ldr.w	r3, [r9]
 800c68a:	fa1f fb82 	uxth.w	fp, r2
 800c68e:	b29b      	uxth	r3, r3
 800c690:	fb0a 330b 	mla	r3, sl, fp, r3
 800c694:	443b      	add	r3, r7
 800c696:	f8d9 7000 	ldr.w	r7, [r9]
 800c69a:	0c12      	lsrs	r2, r2, #16
 800c69c:	0c3f      	lsrs	r7, r7, #16
 800c69e:	fb0a 7202 	mla	r2, sl, r2, r7
 800c6a2:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800c6a6:	b29b      	uxth	r3, r3
 800c6a8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c6ac:	4565      	cmp	r5, ip
 800c6ae:	f849 3b04 	str.w	r3, [r9], #4
 800c6b2:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800c6b6:	d8e4      	bhi.n	800c682 <__multiply+0xaa>
 800c6b8:	9b01      	ldr	r3, [sp, #4]
 800c6ba:	50e7      	str	r7, [r4, r3]
 800c6bc:	9b03      	ldr	r3, [sp, #12]
 800c6be:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800c6c2:	3104      	adds	r1, #4
 800c6c4:	f1b9 0f00 	cmp.w	r9, #0
 800c6c8:	d020      	beq.n	800c70c <__multiply+0x134>
 800c6ca:	6823      	ldr	r3, [r4, #0]
 800c6cc:	4647      	mov	r7, r8
 800c6ce:	46a4      	mov	ip, r4
 800c6d0:	f04f 0a00 	mov.w	sl, #0
 800c6d4:	f8b7 b000 	ldrh.w	fp, [r7]
 800c6d8:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800c6dc:	fb09 220b 	mla	r2, r9, fp, r2
 800c6e0:	4452      	add	r2, sl
 800c6e2:	b29b      	uxth	r3, r3
 800c6e4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c6e8:	f84c 3b04 	str.w	r3, [ip], #4
 800c6ec:	f857 3b04 	ldr.w	r3, [r7], #4
 800c6f0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c6f4:	f8bc 3000 	ldrh.w	r3, [ip]
 800c6f8:	fb09 330a 	mla	r3, r9, sl, r3
 800c6fc:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800c700:	42bd      	cmp	r5, r7
 800c702:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c706:	d8e5      	bhi.n	800c6d4 <__multiply+0xfc>
 800c708:	9a01      	ldr	r2, [sp, #4]
 800c70a:	50a3      	str	r3, [r4, r2]
 800c70c:	3404      	adds	r4, #4
 800c70e:	e79f      	b.n	800c650 <__multiply+0x78>
 800c710:	3e01      	subs	r6, #1
 800c712:	e7a1      	b.n	800c658 <__multiply+0x80>
 800c714:	0800d748 	.word	0x0800d748
 800c718:	0800d759 	.word	0x0800d759

0800c71c <__pow5mult>:
 800c71c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c720:	4615      	mov	r5, r2
 800c722:	f012 0203 	ands.w	r2, r2, #3
 800c726:	4607      	mov	r7, r0
 800c728:	460e      	mov	r6, r1
 800c72a:	d007      	beq.n	800c73c <__pow5mult+0x20>
 800c72c:	4c25      	ldr	r4, [pc, #148]	@ (800c7c4 <__pow5mult+0xa8>)
 800c72e:	3a01      	subs	r2, #1
 800c730:	2300      	movs	r3, #0
 800c732:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c736:	f7ff fea7 	bl	800c488 <__multadd>
 800c73a:	4606      	mov	r6, r0
 800c73c:	10ad      	asrs	r5, r5, #2
 800c73e:	d03d      	beq.n	800c7bc <__pow5mult+0xa0>
 800c740:	69fc      	ldr	r4, [r7, #28]
 800c742:	b97c      	cbnz	r4, 800c764 <__pow5mult+0x48>
 800c744:	2010      	movs	r0, #16
 800c746:	f7ff fd87 	bl	800c258 <malloc>
 800c74a:	4602      	mov	r2, r0
 800c74c:	61f8      	str	r0, [r7, #28]
 800c74e:	b928      	cbnz	r0, 800c75c <__pow5mult+0x40>
 800c750:	4b1d      	ldr	r3, [pc, #116]	@ (800c7c8 <__pow5mult+0xac>)
 800c752:	481e      	ldr	r0, [pc, #120]	@ (800c7cc <__pow5mult+0xb0>)
 800c754:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800c758:	f000 fbdc 	bl	800cf14 <__assert_func>
 800c75c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c760:	6004      	str	r4, [r0, #0]
 800c762:	60c4      	str	r4, [r0, #12]
 800c764:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800c768:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c76c:	b94c      	cbnz	r4, 800c782 <__pow5mult+0x66>
 800c76e:	f240 2171 	movw	r1, #625	@ 0x271
 800c772:	4638      	mov	r0, r7
 800c774:	f7ff ff1a 	bl	800c5ac <__i2b>
 800c778:	2300      	movs	r3, #0
 800c77a:	f8c8 0008 	str.w	r0, [r8, #8]
 800c77e:	4604      	mov	r4, r0
 800c780:	6003      	str	r3, [r0, #0]
 800c782:	f04f 0900 	mov.w	r9, #0
 800c786:	07eb      	lsls	r3, r5, #31
 800c788:	d50a      	bpl.n	800c7a0 <__pow5mult+0x84>
 800c78a:	4631      	mov	r1, r6
 800c78c:	4622      	mov	r2, r4
 800c78e:	4638      	mov	r0, r7
 800c790:	f7ff ff22 	bl	800c5d8 <__multiply>
 800c794:	4631      	mov	r1, r6
 800c796:	4680      	mov	r8, r0
 800c798:	4638      	mov	r0, r7
 800c79a:	f7ff fe53 	bl	800c444 <_Bfree>
 800c79e:	4646      	mov	r6, r8
 800c7a0:	106d      	asrs	r5, r5, #1
 800c7a2:	d00b      	beq.n	800c7bc <__pow5mult+0xa0>
 800c7a4:	6820      	ldr	r0, [r4, #0]
 800c7a6:	b938      	cbnz	r0, 800c7b8 <__pow5mult+0x9c>
 800c7a8:	4622      	mov	r2, r4
 800c7aa:	4621      	mov	r1, r4
 800c7ac:	4638      	mov	r0, r7
 800c7ae:	f7ff ff13 	bl	800c5d8 <__multiply>
 800c7b2:	6020      	str	r0, [r4, #0]
 800c7b4:	f8c0 9000 	str.w	r9, [r0]
 800c7b8:	4604      	mov	r4, r0
 800c7ba:	e7e4      	b.n	800c786 <__pow5mult+0x6a>
 800c7bc:	4630      	mov	r0, r6
 800c7be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c7c2:	bf00      	nop
 800c7c4:	0800d80c 	.word	0x0800d80c
 800c7c8:	0800d6d9 	.word	0x0800d6d9
 800c7cc:	0800d759 	.word	0x0800d759

0800c7d0 <__lshift>:
 800c7d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c7d4:	460c      	mov	r4, r1
 800c7d6:	6849      	ldr	r1, [r1, #4]
 800c7d8:	6923      	ldr	r3, [r4, #16]
 800c7da:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c7de:	68a3      	ldr	r3, [r4, #8]
 800c7e0:	4607      	mov	r7, r0
 800c7e2:	4691      	mov	r9, r2
 800c7e4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c7e8:	f108 0601 	add.w	r6, r8, #1
 800c7ec:	42b3      	cmp	r3, r6
 800c7ee:	db0b      	blt.n	800c808 <__lshift+0x38>
 800c7f0:	4638      	mov	r0, r7
 800c7f2:	f7ff fde7 	bl	800c3c4 <_Balloc>
 800c7f6:	4605      	mov	r5, r0
 800c7f8:	b948      	cbnz	r0, 800c80e <__lshift+0x3e>
 800c7fa:	4602      	mov	r2, r0
 800c7fc:	4b28      	ldr	r3, [pc, #160]	@ (800c8a0 <__lshift+0xd0>)
 800c7fe:	4829      	ldr	r0, [pc, #164]	@ (800c8a4 <__lshift+0xd4>)
 800c800:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800c804:	f000 fb86 	bl	800cf14 <__assert_func>
 800c808:	3101      	adds	r1, #1
 800c80a:	005b      	lsls	r3, r3, #1
 800c80c:	e7ee      	b.n	800c7ec <__lshift+0x1c>
 800c80e:	2300      	movs	r3, #0
 800c810:	f100 0114 	add.w	r1, r0, #20
 800c814:	f100 0210 	add.w	r2, r0, #16
 800c818:	4618      	mov	r0, r3
 800c81a:	4553      	cmp	r3, sl
 800c81c:	db33      	blt.n	800c886 <__lshift+0xb6>
 800c81e:	6920      	ldr	r0, [r4, #16]
 800c820:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c824:	f104 0314 	add.w	r3, r4, #20
 800c828:	f019 091f 	ands.w	r9, r9, #31
 800c82c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c830:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c834:	d02b      	beq.n	800c88e <__lshift+0xbe>
 800c836:	f1c9 0e20 	rsb	lr, r9, #32
 800c83a:	468a      	mov	sl, r1
 800c83c:	2200      	movs	r2, #0
 800c83e:	6818      	ldr	r0, [r3, #0]
 800c840:	fa00 f009 	lsl.w	r0, r0, r9
 800c844:	4310      	orrs	r0, r2
 800c846:	f84a 0b04 	str.w	r0, [sl], #4
 800c84a:	f853 2b04 	ldr.w	r2, [r3], #4
 800c84e:	459c      	cmp	ip, r3
 800c850:	fa22 f20e 	lsr.w	r2, r2, lr
 800c854:	d8f3      	bhi.n	800c83e <__lshift+0x6e>
 800c856:	ebac 0304 	sub.w	r3, ip, r4
 800c85a:	3b15      	subs	r3, #21
 800c85c:	f023 0303 	bic.w	r3, r3, #3
 800c860:	3304      	adds	r3, #4
 800c862:	f104 0015 	add.w	r0, r4, #21
 800c866:	4560      	cmp	r0, ip
 800c868:	bf88      	it	hi
 800c86a:	2304      	movhi	r3, #4
 800c86c:	50ca      	str	r2, [r1, r3]
 800c86e:	b10a      	cbz	r2, 800c874 <__lshift+0xa4>
 800c870:	f108 0602 	add.w	r6, r8, #2
 800c874:	3e01      	subs	r6, #1
 800c876:	4638      	mov	r0, r7
 800c878:	612e      	str	r6, [r5, #16]
 800c87a:	4621      	mov	r1, r4
 800c87c:	f7ff fde2 	bl	800c444 <_Bfree>
 800c880:	4628      	mov	r0, r5
 800c882:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c886:	f842 0f04 	str.w	r0, [r2, #4]!
 800c88a:	3301      	adds	r3, #1
 800c88c:	e7c5      	b.n	800c81a <__lshift+0x4a>
 800c88e:	3904      	subs	r1, #4
 800c890:	f853 2b04 	ldr.w	r2, [r3], #4
 800c894:	f841 2f04 	str.w	r2, [r1, #4]!
 800c898:	459c      	cmp	ip, r3
 800c89a:	d8f9      	bhi.n	800c890 <__lshift+0xc0>
 800c89c:	e7ea      	b.n	800c874 <__lshift+0xa4>
 800c89e:	bf00      	nop
 800c8a0:	0800d748 	.word	0x0800d748
 800c8a4:	0800d759 	.word	0x0800d759

0800c8a8 <__mcmp>:
 800c8a8:	690a      	ldr	r2, [r1, #16]
 800c8aa:	4603      	mov	r3, r0
 800c8ac:	6900      	ldr	r0, [r0, #16]
 800c8ae:	1a80      	subs	r0, r0, r2
 800c8b0:	b530      	push	{r4, r5, lr}
 800c8b2:	d10e      	bne.n	800c8d2 <__mcmp+0x2a>
 800c8b4:	3314      	adds	r3, #20
 800c8b6:	3114      	adds	r1, #20
 800c8b8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c8bc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c8c0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c8c4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c8c8:	4295      	cmp	r5, r2
 800c8ca:	d003      	beq.n	800c8d4 <__mcmp+0x2c>
 800c8cc:	d205      	bcs.n	800c8da <__mcmp+0x32>
 800c8ce:	f04f 30ff 	mov.w	r0, #4294967295
 800c8d2:	bd30      	pop	{r4, r5, pc}
 800c8d4:	42a3      	cmp	r3, r4
 800c8d6:	d3f3      	bcc.n	800c8c0 <__mcmp+0x18>
 800c8d8:	e7fb      	b.n	800c8d2 <__mcmp+0x2a>
 800c8da:	2001      	movs	r0, #1
 800c8dc:	e7f9      	b.n	800c8d2 <__mcmp+0x2a>
	...

0800c8e0 <__mdiff>:
 800c8e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8e4:	4689      	mov	r9, r1
 800c8e6:	4606      	mov	r6, r0
 800c8e8:	4611      	mov	r1, r2
 800c8ea:	4648      	mov	r0, r9
 800c8ec:	4614      	mov	r4, r2
 800c8ee:	f7ff ffdb 	bl	800c8a8 <__mcmp>
 800c8f2:	1e05      	subs	r5, r0, #0
 800c8f4:	d112      	bne.n	800c91c <__mdiff+0x3c>
 800c8f6:	4629      	mov	r1, r5
 800c8f8:	4630      	mov	r0, r6
 800c8fa:	f7ff fd63 	bl	800c3c4 <_Balloc>
 800c8fe:	4602      	mov	r2, r0
 800c900:	b928      	cbnz	r0, 800c90e <__mdiff+0x2e>
 800c902:	4b3f      	ldr	r3, [pc, #252]	@ (800ca00 <__mdiff+0x120>)
 800c904:	f240 2137 	movw	r1, #567	@ 0x237
 800c908:	483e      	ldr	r0, [pc, #248]	@ (800ca04 <__mdiff+0x124>)
 800c90a:	f000 fb03 	bl	800cf14 <__assert_func>
 800c90e:	2301      	movs	r3, #1
 800c910:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c914:	4610      	mov	r0, r2
 800c916:	b003      	add	sp, #12
 800c918:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c91c:	bfbc      	itt	lt
 800c91e:	464b      	movlt	r3, r9
 800c920:	46a1      	movlt	r9, r4
 800c922:	4630      	mov	r0, r6
 800c924:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800c928:	bfba      	itte	lt
 800c92a:	461c      	movlt	r4, r3
 800c92c:	2501      	movlt	r5, #1
 800c92e:	2500      	movge	r5, #0
 800c930:	f7ff fd48 	bl	800c3c4 <_Balloc>
 800c934:	4602      	mov	r2, r0
 800c936:	b918      	cbnz	r0, 800c940 <__mdiff+0x60>
 800c938:	4b31      	ldr	r3, [pc, #196]	@ (800ca00 <__mdiff+0x120>)
 800c93a:	f240 2145 	movw	r1, #581	@ 0x245
 800c93e:	e7e3      	b.n	800c908 <__mdiff+0x28>
 800c940:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800c944:	6926      	ldr	r6, [r4, #16]
 800c946:	60c5      	str	r5, [r0, #12]
 800c948:	f109 0310 	add.w	r3, r9, #16
 800c94c:	f109 0514 	add.w	r5, r9, #20
 800c950:	f104 0e14 	add.w	lr, r4, #20
 800c954:	f100 0b14 	add.w	fp, r0, #20
 800c958:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800c95c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800c960:	9301      	str	r3, [sp, #4]
 800c962:	46d9      	mov	r9, fp
 800c964:	f04f 0c00 	mov.w	ip, #0
 800c968:	9b01      	ldr	r3, [sp, #4]
 800c96a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800c96e:	f853 af04 	ldr.w	sl, [r3, #4]!
 800c972:	9301      	str	r3, [sp, #4]
 800c974:	fa1f f38a 	uxth.w	r3, sl
 800c978:	4619      	mov	r1, r3
 800c97a:	b283      	uxth	r3, r0
 800c97c:	1acb      	subs	r3, r1, r3
 800c97e:	0c00      	lsrs	r0, r0, #16
 800c980:	4463      	add	r3, ip
 800c982:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800c986:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800c98a:	b29b      	uxth	r3, r3
 800c98c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800c990:	4576      	cmp	r6, lr
 800c992:	f849 3b04 	str.w	r3, [r9], #4
 800c996:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c99a:	d8e5      	bhi.n	800c968 <__mdiff+0x88>
 800c99c:	1b33      	subs	r3, r6, r4
 800c99e:	3b15      	subs	r3, #21
 800c9a0:	f023 0303 	bic.w	r3, r3, #3
 800c9a4:	3415      	adds	r4, #21
 800c9a6:	3304      	adds	r3, #4
 800c9a8:	42a6      	cmp	r6, r4
 800c9aa:	bf38      	it	cc
 800c9ac:	2304      	movcc	r3, #4
 800c9ae:	441d      	add	r5, r3
 800c9b0:	445b      	add	r3, fp
 800c9b2:	461e      	mov	r6, r3
 800c9b4:	462c      	mov	r4, r5
 800c9b6:	4544      	cmp	r4, r8
 800c9b8:	d30e      	bcc.n	800c9d8 <__mdiff+0xf8>
 800c9ba:	f108 0103 	add.w	r1, r8, #3
 800c9be:	1b49      	subs	r1, r1, r5
 800c9c0:	f021 0103 	bic.w	r1, r1, #3
 800c9c4:	3d03      	subs	r5, #3
 800c9c6:	45a8      	cmp	r8, r5
 800c9c8:	bf38      	it	cc
 800c9ca:	2100      	movcc	r1, #0
 800c9cc:	440b      	add	r3, r1
 800c9ce:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c9d2:	b191      	cbz	r1, 800c9fa <__mdiff+0x11a>
 800c9d4:	6117      	str	r7, [r2, #16]
 800c9d6:	e79d      	b.n	800c914 <__mdiff+0x34>
 800c9d8:	f854 1b04 	ldr.w	r1, [r4], #4
 800c9dc:	46e6      	mov	lr, ip
 800c9de:	0c08      	lsrs	r0, r1, #16
 800c9e0:	fa1c fc81 	uxtah	ip, ip, r1
 800c9e4:	4471      	add	r1, lr
 800c9e6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800c9ea:	b289      	uxth	r1, r1
 800c9ec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800c9f0:	f846 1b04 	str.w	r1, [r6], #4
 800c9f4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c9f8:	e7dd      	b.n	800c9b6 <__mdiff+0xd6>
 800c9fa:	3f01      	subs	r7, #1
 800c9fc:	e7e7      	b.n	800c9ce <__mdiff+0xee>
 800c9fe:	bf00      	nop
 800ca00:	0800d748 	.word	0x0800d748
 800ca04:	0800d759 	.word	0x0800d759

0800ca08 <__d2b>:
 800ca08:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ca0c:	460f      	mov	r7, r1
 800ca0e:	2101      	movs	r1, #1
 800ca10:	ec59 8b10 	vmov	r8, r9, d0
 800ca14:	4616      	mov	r6, r2
 800ca16:	f7ff fcd5 	bl	800c3c4 <_Balloc>
 800ca1a:	4604      	mov	r4, r0
 800ca1c:	b930      	cbnz	r0, 800ca2c <__d2b+0x24>
 800ca1e:	4602      	mov	r2, r0
 800ca20:	4b23      	ldr	r3, [pc, #140]	@ (800cab0 <__d2b+0xa8>)
 800ca22:	4824      	ldr	r0, [pc, #144]	@ (800cab4 <__d2b+0xac>)
 800ca24:	f240 310f 	movw	r1, #783	@ 0x30f
 800ca28:	f000 fa74 	bl	800cf14 <__assert_func>
 800ca2c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ca30:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ca34:	b10d      	cbz	r5, 800ca3a <__d2b+0x32>
 800ca36:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ca3a:	9301      	str	r3, [sp, #4]
 800ca3c:	f1b8 0300 	subs.w	r3, r8, #0
 800ca40:	d023      	beq.n	800ca8a <__d2b+0x82>
 800ca42:	4668      	mov	r0, sp
 800ca44:	9300      	str	r3, [sp, #0]
 800ca46:	f7ff fd84 	bl	800c552 <__lo0bits>
 800ca4a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800ca4e:	b1d0      	cbz	r0, 800ca86 <__d2b+0x7e>
 800ca50:	f1c0 0320 	rsb	r3, r0, #32
 800ca54:	fa02 f303 	lsl.w	r3, r2, r3
 800ca58:	430b      	orrs	r3, r1
 800ca5a:	40c2      	lsrs	r2, r0
 800ca5c:	6163      	str	r3, [r4, #20]
 800ca5e:	9201      	str	r2, [sp, #4]
 800ca60:	9b01      	ldr	r3, [sp, #4]
 800ca62:	61a3      	str	r3, [r4, #24]
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	bf0c      	ite	eq
 800ca68:	2201      	moveq	r2, #1
 800ca6a:	2202      	movne	r2, #2
 800ca6c:	6122      	str	r2, [r4, #16]
 800ca6e:	b1a5      	cbz	r5, 800ca9a <__d2b+0x92>
 800ca70:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800ca74:	4405      	add	r5, r0
 800ca76:	603d      	str	r5, [r7, #0]
 800ca78:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800ca7c:	6030      	str	r0, [r6, #0]
 800ca7e:	4620      	mov	r0, r4
 800ca80:	b003      	add	sp, #12
 800ca82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ca86:	6161      	str	r1, [r4, #20]
 800ca88:	e7ea      	b.n	800ca60 <__d2b+0x58>
 800ca8a:	a801      	add	r0, sp, #4
 800ca8c:	f7ff fd61 	bl	800c552 <__lo0bits>
 800ca90:	9b01      	ldr	r3, [sp, #4]
 800ca92:	6163      	str	r3, [r4, #20]
 800ca94:	3020      	adds	r0, #32
 800ca96:	2201      	movs	r2, #1
 800ca98:	e7e8      	b.n	800ca6c <__d2b+0x64>
 800ca9a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ca9e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800caa2:	6038      	str	r0, [r7, #0]
 800caa4:	6918      	ldr	r0, [r3, #16]
 800caa6:	f7ff fd35 	bl	800c514 <__hi0bits>
 800caaa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800caae:	e7e5      	b.n	800ca7c <__d2b+0x74>
 800cab0:	0800d748 	.word	0x0800d748
 800cab4:	0800d759 	.word	0x0800d759

0800cab8 <__ssputs_r>:
 800cab8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cabc:	688e      	ldr	r6, [r1, #8]
 800cabe:	461f      	mov	r7, r3
 800cac0:	42be      	cmp	r6, r7
 800cac2:	680b      	ldr	r3, [r1, #0]
 800cac4:	4682      	mov	sl, r0
 800cac6:	460c      	mov	r4, r1
 800cac8:	4690      	mov	r8, r2
 800caca:	d82d      	bhi.n	800cb28 <__ssputs_r+0x70>
 800cacc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800cad0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800cad4:	d026      	beq.n	800cb24 <__ssputs_r+0x6c>
 800cad6:	6965      	ldr	r5, [r4, #20]
 800cad8:	6909      	ldr	r1, [r1, #16]
 800cada:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cade:	eba3 0901 	sub.w	r9, r3, r1
 800cae2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cae6:	1c7b      	adds	r3, r7, #1
 800cae8:	444b      	add	r3, r9
 800caea:	106d      	asrs	r5, r5, #1
 800caec:	429d      	cmp	r5, r3
 800caee:	bf38      	it	cc
 800caf0:	461d      	movcc	r5, r3
 800caf2:	0553      	lsls	r3, r2, #21
 800caf4:	d527      	bpl.n	800cb46 <__ssputs_r+0x8e>
 800caf6:	4629      	mov	r1, r5
 800caf8:	f7ff fbd8 	bl	800c2ac <_malloc_r>
 800cafc:	4606      	mov	r6, r0
 800cafe:	b360      	cbz	r0, 800cb5a <__ssputs_r+0xa2>
 800cb00:	6921      	ldr	r1, [r4, #16]
 800cb02:	464a      	mov	r2, r9
 800cb04:	f7fe fd69 	bl	800b5da <memcpy>
 800cb08:	89a3      	ldrh	r3, [r4, #12]
 800cb0a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800cb0e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cb12:	81a3      	strh	r3, [r4, #12]
 800cb14:	6126      	str	r6, [r4, #16]
 800cb16:	6165      	str	r5, [r4, #20]
 800cb18:	444e      	add	r6, r9
 800cb1a:	eba5 0509 	sub.w	r5, r5, r9
 800cb1e:	6026      	str	r6, [r4, #0]
 800cb20:	60a5      	str	r5, [r4, #8]
 800cb22:	463e      	mov	r6, r7
 800cb24:	42be      	cmp	r6, r7
 800cb26:	d900      	bls.n	800cb2a <__ssputs_r+0x72>
 800cb28:	463e      	mov	r6, r7
 800cb2a:	6820      	ldr	r0, [r4, #0]
 800cb2c:	4632      	mov	r2, r6
 800cb2e:	4641      	mov	r1, r8
 800cb30:	f000 f9c6 	bl	800cec0 <memmove>
 800cb34:	68a3      	ldr	r3, [r4, #8]
 800cb36:	1b9b      	subs	r3, r3, r6
 800cb38:	60a3      	str	r3, [r4, #8]
 800cb3a:	6823      	ldr	r3, [r4, #0]
 800cb3c:	4433      	add	r3, r6
 800cb3e:	6023      	str	r3, [r4, #0]
 800cb40:	2000      	movs	r0, #0
 800cb42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cb46:	462a      	mov	r2, r5
 800cb48:	f000 fa28 	bl	800cf9c <_realloc_r>
 800cb4c:	4606      	mov	r6, r0
 800cb4e:	2800      	cmp	r0, #0
 800cb50:	d1e0      	bne.n	800cb14 <__ssputs_r+0x5c>
 800cb52:	6921      	ldr	r1, [r4, #16]
 800cb54:	4650      	mov	r0, sl
 800cb56:	f7ff fb35 	bl	800c1c4 <_free_r>
 800cb5a:	230c      	movs	r3, #12
 800cb5c:	f8ca 3000 	str.w	r3, [sl]
 800cb60:	89a3      	ldrh	r3, [r4, #12]
 800cb62:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cb66:	81a3      	strh	r3, [r4, #12]
 800cb68:	f04f 30ff 	mov.w	r0, #4294967295
 800cb6c:	e7e9      	b.n	800cb42 <__ssputs_r+0x8a>
	...

0800cb70 <_svfiprintf_r>:
 800cb70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb74:	4698      	mov	r8, r3
 800cb76:	898b      	ldrh	r3, [r1, #12]
 800cb78:	061b      	lsls	r3, r3, #24
 800cb7a:	b09d      	sub	sp, #116	@ 0x74
 800cb7c:	4607      	mov	r7, r0
 800cb7e:	460d      	mov	r5, r1
 800cb80:	4614      	mov	r4, r2
 800cb82:	d510      	bpl.n	800cba6 <_svfiprintf_r+0x36>
 800cb84:	690b      	ldr	r3, [r1, #16]
 800cb86:	b973      	cbnz	r3, 800cba6 <_svfiprintf_r+0x36>
 800cb88:	2140      	movs	r1, #64	@ 0x40
 800cb8a:	f7ff fb8f 	bl	800c2ac <_malloc_r>
 800cb8e:	6028      	str	r0, [r5, #0]
 800cb90:	6128      	str	r0, [r5, #16]
 800cb92:	b930      	cbnz	r0, 800cba2 <_svfiprintf_r+0x32>
 800cb94:	230c      	movs	r3, #12
 800cb96:	603b      	str	r3, [r7, #0]
 800cb98:	f04f 30ff 	mov.w	r0, #4294967295
 800cb9c:	b01d      	add	sp, #116	@ 0x74
 800cb9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cba2:	2340      	movs	r3, #64	@ 0x40
 800cba4:	616b      	str	r3, [r5, #20]
 800cba6:	2300      	movs	r3, #0
 800cba8:	9309      	str	r3, [sp, #36]	@ 0x24
 800cbaa:	2320      	movs	r3, #32
 800cbac:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800cbb0:	f8cd 800c 	str.w	r8, [sp, #12]
 800cbb4:	2330      	movs	r3, #48	@ 0x30
 800cbb6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800cd54 <_svfiprintf_r+0x1e4>
 800cbba:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800cbbe:	f04f 0901 	mov.w	r9, #1
 800cbc2:	4623      	mov	r3, r4
 800cbc4:	469a      	mov	sl, r3
 800cbc6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cbca:	b10a      	cbz	r2, 800cbd0 <_svfiprintf_r+0x60>
 800cbcc:	2a25      	cmp	r2, #37	@ 0x25
 800cbce:	d1f9      	bne.n	800cbc4 <_svfiprintf_r+0x54>
 800cbd0:	ebba 0b04 	subs.w	fp, sl, r4
 800cbd4:	d00b      	beq.n	800cbee <_svfiprintf_r+0x7e>
 800cbd6:	465b      	mov	r3, fp
 800cbd8:	4622      	mov	r2, r4
 800cbda:	4629      	mov	r1, r5
 800cbdc:	4638      	mov	r0, r7
 800cbde:	f7ff ff6b 	bl	800cab8 <__ssputs_r>
 800cbe2:	3001      	adds	r0, #1
 800cbe4:	f000 80a7 	beq.w	800cd36 <_svfiprintf_r+0x1c6>
 800cbe8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cbea:	445a      	add	r2, fp
 800cbec:	9209      	str	r2, [sp, #36]	@ 0x24
 800cbee:	f89a 3000 	ldrb.w	r3, [sl]
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	f000 809f 	beq.w	800cd36 <_svfiprintf_r+0x1c6>
 800cbf8:	2300      	movs	r3, #0
 800cbfa:	f04f 32ff 	mov.w	r2, #4294967295
 800cbfe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cc02:	f10a 0a01 	add.w	sl, sl, #1
 800cc06:	9304      	str	r3, [sp, #16]
 800cc08:	9307      	str	r3, [sp, #28]
 800cc0a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800cc0e:	931a      	str	r3, [sp, #104]	@ 0x68
 800cc10:	4654      	mov	r4, sl
 800cc12:	2205      	movs	r2, #5
 800cc14:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cc18:	484e      	ldr	r0, [pc, #312]	@ (800cd54 <_svfiprintf_r+0x1e4>)
 800cc1a:	f7f3 fb61 	bl	80002e0 <memchr>
 800cc1e:	9a04      	ldr	r2, [sp, #16]
 800cc20:	b9d8      	cbnz	r0, 800cc5a <_svfiprintf_r+0xea>
 800cc22:	06d0      	lsls	r0, r2, #27
 800cc24:	bf44      	itt	mi
 800cc26:	2320      	movmi	r3, #32
 800cc28:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cc2c:	0711      	lsls	r1, r2, #28
 800cc2e:	bf44      	itt	mi
 800cc30:	232b      	movmi	r3, #43	@ 0x2b
 800cc32:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cc36:	f89a 3000 	ldrb.w	r3, [sl]
 800cc3a:	2b2a      	cmp	r3, #42	@ 0x2a
 800cc3c:	d015      	beq.n	800cc6a <_svfiprintf_r+0xfa>
 800cc3e:	9a07      	ldr	r2, [sp, #28]
 800cc40:	4654      	mov	r4, sl
 800cc42:	2000      	movs	r0, #0
 800cc44:	f04f 0c0a 	mov.w	ip, #10
 800cc48:	4621      	mov	r1, r4
 800cc4a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cc4e:	3b30      	subs	r3, #48	@ 0x30
 800cc50:	2b09      	cmp	r3, #9
 800cc52:	d94b      	bls.n	800ccec <_svfiprintf_r+0x17c>
 800cc54:	b1b0      	cbz	r0, 800cc84 <_svfiprintf_r+0x114>
 800cc56:	9207      	str	r2, [sp, #28]
 800cc58:	e014      	b.n	800cc84 <_svfiprintf_r+0x114>
 800cc5a:	eba0 0308 	sub.w	r3, r0, r8
 800cc5e:	fa09 f303 	lsl.w	r3, r9, r3
 800cc62:	4313      	orrs	r3, r2
 800cc64:	9304      	str	r3, [sp, #16]
 800cc66:	46a2      	mov	sl, r4
 800cc68:	e7d2      	b.n	800cc10 <_svfiprintf_r+0xa0>
 800cc6a:	9b03      	ldr	r3, [sp, #12]
 800cc6c:	1d19      	adds	r1, r3, #4
 800cc6e:	681b      	ldr	r3, [r3, #0]
 800cc70:	9103      	str	r1, [sp, #12]
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	bfbb      	ittet	lt
 800cc76:	425b      	neglt	r3, r3
 800cc78:	f042 0202 	orrlt.w	r2, r2, #2
 800cc7c:	9307      	strge	r3, [sp, #28]
 800cc7e:	9307      	strlt	r3, [sp, #28]
 800cc80:	bfb8      	it	lt
 800cc82:	9204      	strlt	r2, [sp, #16]
 800cc84:	7823      	ldrb	r3, [r4, #0]
 800cc86:	2b2e      	cmp	r3, #46	@ 0x2e
 800cc88:	d10a      	bne.n	800cca0 <_svfiprintf_r+0x130>
 800cc8a:	7863      	ldrb	r3, [r4, #1]
 800cc8c:	2b2a      	cmp	r3, #42	@ 0x2a
 800cc8e:	d132      	bne.n	800ccf6 <_svfiprintf_r+0x186>
 800cc90:	9b03      	ldr	r3, [sp, #12]
 800cc92:	1d1a      	adds	r2, r3, #4
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	9203      	str	r2, [sp, #12]
 800cc98:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800cc9c:	3402      	adds	r4, #2
 800cc9e:	9305      	str	r3, [sp, #20]
 800cca0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800cd64 <_svfiprintf_r+0x1f4>
 800cca4:	7821      	ldrb	r1, [r4, #0]
 800cca6:	2203      	movs	r2, #3
 800cca8:	4650      	mov	r0, sl
 800ccaa:	f7f3 fb19 	bl	80002e0 <memchr>
 800ccae:	b138      	cbz	r0, 800ccc0 <_svfiprintf_r+0x150>
 800ccb0:	9b04      	ldr	r3, [sp, #16]
 800ccb2:	eba0 000a 	sub.w	r0, r0, sl
 800ccb6:	2240      	movs	r2, #64	@ 0x40
 800ccb8:	4082      	lsls	r2, r0
 800ccba:	4313      	orrs	r3, r2
 800ccbc:	3401      	adds	r4, #1
 800ccbe:	9304      	str	r3, [sp, #16]
 800ccc0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ccc4:	4824      	ldr	r0, [pc, #144]	@ (800cd58 <_svfiprintf_r+0x1e8>)
 800ccc6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ccca:	2206      	movs	r2, #6
 800cccc:	f7f3 fb08 	bl	80002e0 <memchr>
 800ccd0:	2800      	cmp	r0, #0
 800ccd2:	d036      	beq.n	800cd42 <_svfiprintf_r+0x1d2>
 800ccd4:	4b21      	ldr	r3, [pc, #132]	@ (800cd5c <_svfiprintf_r+0x1ec>)
 800ccd6:	bb1b      	cbnz	r3, 800cd20 <_svfiprintf_r+0x1b0>
 800ccd8:	9b03      	ldr	r3, [sp, #12]
 800ccda:	3307      	adds	r3, #7
 800ccdc:	f023 0307 	bic.w	r3, r3, #7
 800cce0:	3308      	adds	r3, #8
 800cce2:	9303      	str	r3, [sp, #12]
 800cce4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cce6:	4433      	add	r3, r6
 800cce8:	9309      	str	r3, [sp, #36]	@ 0x24
 800ccea:	e76a      	b.n	800cbc2 <_svfiprintf_r+0x52>
 800ccec:	fb0c 3202 	mla	r2, ip, r2, r3
 800ccf0:	460c      	mov	r4, r1
 800ccf2:	2001      	movs	r0, #1
 800ccf4:	e7a8      	b.n	800cc48 <_svfiprintf_r+0xd8>
 800ccf6:	2300      	movs	r3, #0
 800ccf8:	3401      	adds	r4, #1
 800ccfa:	9305      	str	r3, [sp, #20]
 800ccfc:	4619      	mov	r1, r3
 800ccfe:	f04f 0c0a 	mov.w	ip, #10
 800cd02:	4620      	mov	r0, r4
 800cd04:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cd08:	3a30      	subs	r2, #48	@ 0x30
 800cd0a:	2a09      	cmp	r2, #9
 800cd0c:	d903      	bls.n	800cd16 <_svfiprintf_r+0x1a6>
 800cd0e:	2b00      	cmp	r3, #0
 800cd10:	d0c6      	beq.n	800cca0 <_svfiprintf_r+0x130>
 800cd12:	9105      	str	r1, [sp, #20]
 800cd14:	e7c4      	b.n	800cca0 <_svfiprintf_r+0x130>
 800cd16:	fb0c 2101 	mla	r1, ip, r1, r2
 800cd1a:	4604      	mov	r4, r0
 800cd1c:	2301      	movs	r3, #1
 800cd1e:	e7f0      	b.n	800cd02 <_svfiprintf_r+0x192>
 800cd20:	ab03      	add	r3, sp, #12
 800cd22:	9300      	str	r3, [sp, #0]
 800cd24:	462a      	mov	r2, r5
 800cd26:	4b0e      	ldr	r3, [pc, #56]	@ (800cd60 <_svfiprintf_r+0x1f0>)
 800cd28:	a904      	add	r1, sp, #16
 800cd2a:	4638      	mov	r0, r7
 800cd2c:	f7fd fef4 	bl	800ab18 <_printf_float>
 800cd30:	1c42      	adds	r2, r0, #1
 800cd32:	4606      	mov	r6, r0
 800cd34:	d1d6      	bne.n	800cce4 <_svfiprintf_r+0x174>
 800cd36:	89ab      	ldrh	r3, [r5, #12]
 800cd38:	065b      	lsls	r3, r3, #25
 800cd3a:	f53f af2d 	bmi.w	800cb98 <_svfiprintf_r+0x28>
 800cd3e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cd40:	e72c      	b.n	800cb9c <_svfiprintf_r+0x2c>
 800cd42:	ab03      	add	r3, sp, #12
 800cd44:	9300      	str	r3, [sp, #0]
 800cd46:	462a      	mov	r2, r5
 800cd48:	4b05      	ldr	r3, [pc, #20]	@ (800cd60 <_svfiprintf_r+0x1f0>)
 800cd4a:	a904      	add	r1, sp, #16
 800cd4c:	4638      	mov	r0, r7
 800cd4e:	f7fe f96b 	bl	800b028 <_printf_i>
 800cd52:	e7ed      	b.n	800cd30 <_svfiprintf_r+0x1c0>
 800cd54:	0800d7b2 	.word	0x0800d7b2
 800cd58:	0800d7bc 	.word	0x0800d7bc
 800cd5c:	0800ab19 	.word	0x0800ab19
 800cd60:	0800cab9 	.word	0x0800cab9
 800cd64:	0800d7b8 	.word	0x0800d7b8

0800cd68 <__sflush_r>:
 800cd68:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800cd6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd70:	0716      	lsls	r6, r2, #28
 800cd72:	4605      	mov	r5, r0
 800cd74:	460c      	mov	r4, r1
 800cd76:	d454      	bmi.n	800ce22 <__sflush_r+0xba>
 800cd78:	684b      	ldr	r3, [r1, #4]
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	dc02      	bgt.n	800cd84 <__sflush_r+0x1c>
 800cd7e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	dd48      	ble.n	800ce16 <__sflush_r+0xae>
 800cd84:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800cd86:	2e00      	cmp	r6, #0
 800cd88:	d045      	beq.n	800ce16 <__sflush_r+0xae>
 800cd8a:	2300      	movs	r3, #0
 800cd8c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800cd90:	682f      	ldr	r7, [r5, #0]
 800cd92:	6a21      	ldr	r1, [r4, #32]
 800cd94:	602b      	str	r3, [r5, #0]
 800cd96:	d030      	beq.n	800cdfa <__sflush_r+0x92>
 800cd98:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800cd9a:	89a3      	ldrh	r3, [r4, #12]
 800cd9c:	0759      	lsls	r1, r3, #29
 800cd9e:	d505      	bpl.n	800cdac <__sflush_r+0x44>
 800cda0:	6863      	ldr	r3, [r4, #4]
 800cda2:	1ad2      	subs	r2, r2, r3
 800cda4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800cda6:	b10b      	cbz	r3, 800cdac <__sflush_r+0x44>
 800cda8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800cdaa:	1ad2      	subs	r2, r2, r3
 800cdac:	2300      	movs	r3, #0
 800cdae:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800cdb0:	6a21      	ldr	r1, [r4, #32]
 800cdb2:	4628      	mov	r0, r5
 800cdb4:	47b0      	blx	r6
 800cdb6:	1c43      	adds	r3, r0, #1
 800cdb8:	89a3      	ldrh	r3, [r4, #12]
 800cdba:	d106      	bne.n	800cdca <__sflush_r+0x62>
 800cdbc:	6829      	ldr	r1, [r5, #0]
 800cdbe:	291d      	cmp	r1, #29
 800cdc0:	d82b      	bhi.n	800ce1a <__sflush_r+0xb2>
 800cdc2:	4a2a      	ldr	r2, [pc, #168]	@ (800ce6c <__sflush_r+0x104>)
 800cdc4:	40ca      	lsrs	r2, r1
 800cdc6:	07d6      	lsls	r6, r2, #31
 800cdc8:	d527      	bpl.n	800ce1a <__sflush_r+0xb2>
 800cdca:	2200      	movs	r2, #0
 800cdcc:	6062      	str	r2, [r4, #4]
 800cdce:	04d9      	lsls	r1, r3, #19
 800cdd0:	6922      	ldr	r2, [r4, #16]
 800cdd2:	6022      	str	r2, [r4, #0]
 800cdd4:	d504      	bpl.n	800cde0 <__sflush_r+0x78>
 800cdd6:	1c42      	adds	r2, r0, #1
 800cdd8:	d101      	bne.n	800cdde <__sflush_r+0x76>
 800cdda:	682b      	ldr	r3, [r5, #0]
 800cddc:	b903      	cbnz	r3, 800cde0 <__sflush_r+0x78>
 800cdde:	6560      	str	r0, [r4, #84]	@ 0x54
 800cde0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cde2:	602f      	str	r7, [r5, #0]
 800cde4:	b1b9      	cbz	r1, 800ce16 <__sflush_r+0xae>
 800cde6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800cdea:	4299      	cmp	r1, r3
 800cdec:	d002      	beq.n	800cdf4 <__sflush_r+0x8c>
 800cdee:	4628      	mov	r0, r5
 800cdf0:	f7ff f9e8 	bl	800c1c4 <_free_r>
 800cdf4:	2300      	movs	r3, #0
 800cdf6:	6363      	str	r3, [r4, #52]	@ 0x34
 800cdf8:	e00d      	b.n	800ce16 <__sflush_r+0xae>
 800cdfa:	2301      	movs	r3, #1
 800cdfc:	4628      	mov	r0, r5
 800cdfe:	47b0      	blx	r6
 800ce00:	4602      	mov	r2, r0
 800ce02:	1c50      	adds	r0, r2, #1
 800ce04:	d1c9      	bne.n	800cd9a <__sflush_r+0x32>
 800ce06:	682b      	ldr	r3, [r5, #0]
 800ce08:	2b00      	cmp	r3, #0
 800ce0a:	d0c6      	beq.n	800cd9a <__sflush_r+0x32>
 800ce0c:	2b1d      	cmp	r3, #29
 800ce0e:	d001      	beq.n	800ce14 <__sflush_r+0xac>
 800ce10:	2b16      	cmp	r3, #22
 800ce12:	d11e      	bne.n	800ce52 <__sflush_r+0xea>
 800ce14:	602f      	str	r7, [r5, #0]
 800ce16:	2000      	movs	r0, #0
 800ce18:	e022      	b.n	800ce60 <__sflush_r+0xf8>
 800ce1a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ce1e:	b21b      	sxth	r3, r3
 800ce20:	e01b      	b.n	800ce5a <__sflush_r+0xf2>
 800ce22:	690f      	ldr	r7, [r1, #16]
 800ce24:	2f00      	cmp	r7, #0
 800ce26:	d0f6      	beq.n	800ce16 <__sflush_r+0xae>
 800ce28:	0793      	lsls	r3, r2, #30
 800ce2a:	680e      	ldr	r6, [r1, #0]
 800ce2c:	bf08      	it	eq
 800ce2e:	694b      	ldreq	r3, [r1, #20]
 800ce30:	600f      	str	r7, [r1, #0]
 800ce32:	bf18      	it	ne
 800ce34:	2300      	movne	r3, #0
 800ce36:	eba6 0807 	sub.w	r8, r6, r7
 800ce3a:	608b      	str	r3, [r1, #8]
 800ce3c:	f1b8 0f00 	cmp.w	r8, #0
 800ce40:	dde9      	ble.n	800ce16 <__sflush_r+0xae>
 800ce42:	6a21      	ldr	r1, [r4, #32]
 800ce44:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800ce46:	4643      	mov	r3, r8
 800ce48:	463a      	mov	r2, r7
 800ce4a:	4628      	mov	r0, r5
 800ce4c:	47b0      	blx	r6
 800ce4e:	2800      	cmp	r0, #0
 800ce50:	dc08      	bgt.n	800ce64 <__sflush_r+0xfc>
 800ce52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ce56:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ce5a:	81a3      	strh	r3, [r4, #12]
 800ce5c:	f04f 30ff 	mov.w	r0, #4294967295
 800ce60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ce64:	4407      	add	r7, r0
 800ce66:	eba8 0800 	sub.w	r8, r8, r0
 800ce6a:	e7e7      	b.n	800ce3c <__sflush_r+0xd4>
 800ce6c:	20400001 	.word	0x20400001

0800ce70 <_fflush_r>:
 800ce70:	b538      	push	{r3, r4, r5, lr}
 800ce72:	690b      	ldr	r3, [r1, #16]
 800ce74:	4605      	mov	r5, r0
 800ce76:	460c      	mov	r4, r1
 800ce78:	b913      	cbnz	r3, 800ce80 <_fflush_r+0x10>
 800ce7a:	2500      	movs	r5, #0
 800ce7c:	4628      	mov	r0, r5
 800ce7e:	bd38      	pop	{r3, r4, r5, pc}
 800ce80:	b118      	cbz	r0, 800ce8a <_fflush_r+0x1a>
 800ce82:	6a03      	ldr	r3, [r0, #32]
 800ce84:	b90b      	cbnz	r3, 800ce8a <_fflush_r+0x1a>
 800ce86:	f7fe fa79 	bl	800b37c <__sinit>
 800ce8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	d0f3      	beq.n	800ce7a <_fflush_r+0xa>
 800ce92:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ce94:	07d0      	lsls	r0, r2, #31
 800ce96:	d404      	bmi.n	800cea2 <_fflush_r+0x32>
 800ce98:	0599      	lsls	r1, r3, #22
 800ce9a:	d402      	bmi.n	800cea2 <_fflush_r+0x32>
 800ce9c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ce9e:	f7fe fb9a 	bl	800b5d6 <__retarget_lock_acquire_recursive>
 800cea2:	4628      	mov	r0, r5
 800cea4:	4621      	mov	r1, r4
 800cea6:	f7ff ff5f 	bl	800cd68 <__sflush_r>
 800ceaa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ceac:	07da      	lsls	r2, r3, #31
 800ceae:	4605      	mov	r5, r0
 800ceb0:	d4e4      	bmi.n	800ce7c <_fflush_r+0xc>
 800ceb2:	89a3      	ldrh	r3, [r4, #12]
 800ceb4:	059b      	lsls	r3, r3, #22
 800ceb6:	d4e1      	bmi.n	800ce7c <_fflush_r+0xc>
 800ceb8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ceba:	f7fe fb8d 	bl	800b5d8 <__retarget_lock_release_recursive>
 800cebe:	e7dd      	b.n	800ce7c <_fflush_r+0xc>

0800cec0 <memmove>:
 800cec0:	4288      	cmp	r0, r1
 800cec2:	b510      	push	{r4, lr}
 800cec4:	eb01 0402 	add.w	r4, r1, r2
 800cec8:	d902      	bls.n	800ced0 <memmove+0x10>
 800ceca:	4284      	cmp	r4, r0
 800cecc:	4623      	mov	r3, r4
 800cece:	d807      	bhi.n	800cee0 <memmove+0x20>
 800ced0:	1e43      	subs	r3, r0, #1
 800ced2:	42a1      	cmp	r1, r4
 800ced4:	d008      	beq.n	800cee8 <memmove+0x28>
 800ced6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ceda:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cede:	e7f8      	b.n	800ced2 <memmove+0x12>
 800cee0:	4402      	add	r2, r0
 800cee2:	4601      	mov	r1, r0
 800cee4:	428a      	cmp	r2, r1
 800cee6:	d100      	bne.n	800ceea <memmove+0x2a>
 800cee8:	bd10      	pop	{r4, pc}
 800ceea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ceee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cef2:	e7f7      	b.n	800cee4 <memmove+0x24>

0800cef4 <_sbrk_r>:
 800cef4:	b538      	push	{r3, r4, r5, lr}
 800cef6:	4d06      	ldr	r5, [pc, #24]	@ (800cf10 <_sbrk_r+0x1c>)
 800cef8:	2300      	movs	r3, #0
 800cefa:	4604      	mov	r4, r0
 800cefc:	4608      	mov	r0, r1
 800cefe:	602b      	str	r3, [r5, #0]
 800cf00:	f7f4 fd4c 	bl	800199c <_sbrk>
 800cf04:	1c43      	adds	r3, r0, #1
 800cf06:	d102      	bne.n	800cf0e <_sbrk_r+0x1a>
 800cf08:	682b      	ldr	r3, [r5, #0]
 800cf0a:	b103      	cbz	r3, 800cf0e <_sbrk_r+0x1a>
 800cf0c:	6023      	str	r3, [r4, #0]
 800cf0e:	bd38      	pop	{r3, r4, r5, pc}
 800cf10:	2400071c 	.word	0x2400071c

0800cf14 <__assert_func>:
 800cf14:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cf16:	4614      	mov	r4, r2
 800cf18:	461a      	mov	r2, r3
 800cf1a:	4b09      	ldr	r3, [pc, #36]	@ (800cf40 <__assert_func+0x2c>)
 800cf1c:	681b      	ldr	r3, [r3, #0]
 800cf1e:	4605      	mov	r5, r0
 800cf20:	68d8      	ldr	r0, [r3, #12]
 800cf22:	b14c      	cbz	r4, 800cf38 <__assert_func+0x24>
 800cf24:	4b07      	ldr	r3, [pc, #28]	@ (800cf44 <__assert_func+0x30>)
 800cf26:	9100      	str	r1, [sp, #0]
 800cf28:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cf2c:	4906      	ldr	r1, [pc, #24]	@ (800cf48 <__assert_func+0x34>)
 800cf2e:	462b      	mov	r3, r5
 800cf30:	f000 f870 	bl	800d014 <fiprintf>
 800cf34:	f000 f880 	bl	800d038 <abort>
 800cf38:	4b04      	ldr	r3, [pc, #16]	@ (800cf4c <__assert_func+0x38>)
 800cf3a:	461c      	mov	r4, r3
 800cf3c:	e7f3      	b.n	800cf26 <__assert_func+0x12>
 800cf3e:	bf00      	nop
 800cf40:	24000020 	.word	0x24000020
 800cf44:	0800d7cd 	.word	0x0800d7cd
 800cf48:	0800d7da 	.word	0x0800d7da
 800cf4c:	0800d808 	.word	0x0800d808

0800cf50 <_calloc_r>:
 800cf50:	b570      	push	{r4, r5, r6, lr}
 800cf52:	fba1 5402 	umull	r5, r4, r1, r2
 800cf56:	b934      	cbnz	r4, 800cf66 <_calloc_r+0x16>
 800cf58:	4629      	mov	r1, r5
 800cf5a:	f7ff f9a7 	bl	800c2ac <_malloc_r>
 800cf5e:	4606      	mov	r6, r0
 800cf60:	b928      	cbnz	r0, 800cf6e <_calloc_r+0x1e>
 800cf62:	4630      	mov	r0, r6
 800cf64:	bd70      	pop	{r4, r5, r6, pc}
 800cf66:	220c      	movs	r2, #12
 800cf68:	6002      	str	r2, [r0, #0]
 800cf6a:	2600      	movs	r6, #0
 800cf6c:	e7f9      	b.n	800cf62 <_calloc_r+0x12>
 800cf6e:	462a      	mov	r2, r5
 800cf70:	4621      	mov	r1, r4
 800cf72:	f7fe fab2 	bl	800b4da <memset>
 800cf76:	e7f4      	b.n	800cf62 <_calloc_r+0x12>

0800cf78 <__ascii_mbtowc>:
 800cf78:	b082      	sub	sp, #8
 800cf7a:	b901      	cbnz	r1, 800cf7e <__ascii_mbtowc+0x6>
 800cf7c:	a901      	add	r1, sp, #4
 800cf7e:	b142      	cbz	r2, 800cf92 <__ascii_mbtowc+0x1a>
 800cf80:	b14b      	cbz	r3, 800cf96 <__ascii_mbtowc+0x1e>
 800cf82:	7813      	ldrb	r3, [r2, #0]
 800cf84:	600b      	str	r3, [r1, #0]
 800cf86:	7812      	ldrb	r2, [r2, #0]
 800cf88:	1e10      	subs	r0, r2, #0
 800cf8a:	bf18      	it	ne
 800cf8c:	2001      	movne	r0, #1
 800cf8e:	b002      	add	sp, #8
 800cf90:	4770      	bx	lr
 800cf92:	4610      	mov	r0, r2
 800cf94:	e7fb      	b.n	800cf8e <__ascii_mbtowc+0x16>
 800cf96:	f06f 0001 	mvn.w	r0, #1
 800cf9a:	e7f8      	b.n	800cf8e <__ascii_mbtowc+0x16>

0800cf9c <_realloc_r>:
 800cf9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cfa0:	4607      	mov	r7, r0
 800cfa2:	4614      	mov	r4, r2
 800cfa4:	460d      	mov	r5, r1
 800cfa6:	b921      	cbnz	r1, 800cfb2 <_realloc_r+0x16>
 800cfa8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cfac:	4611      	mov	r1, r2
 800cfae:	f7ff b97d 	b.w	800c2ac <_malloc_r>
 800cfb2:	b92a      	cbnz	r2, 800cfc0 <_realloc_r+0x24>
 800cfb4:	f7ff f906 	bl	800c1c4 <_free_r>
 800cfb8:	4625      	mov	r5, r4
 800cfba:	4628      	mov	r0, r5
 800cfbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cfc0:	f000 f841 	bl	800d046 <_malloc_usable_size_r>
 800cfc4:	4284      	cmp	r4, r0
 800cfc6:	4606      	mov	r6, r0
 800cfc8:	d802      	bhi.n	800cfd0 <_realloc_r+0x34>
 800cfca:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800cfce:	d8f4      	bhi.n	800cfba <_realloc_r+0x1e>
 800cfd0:	4621      	mov	r1, r4
 800cfd2:	4638      	mov	r0, r7
 800cfd4:	f7ff f96a 	bl	800c2ac <_malloc_r>
 800cfd8:	4680      	mov	r8, r0
 800cfda:	b908      	cbnz	r0, 800cfe0 <_realloc_r+0x44>
 800cfdc:	4645      	mov	r5, r8
 800cfde:	e7ec      	b.n	800cfba <_realloc_r+0x1e>
 800cfe0:	42b4      	cmp	r4, r6
 800cfe2:	4622      	mov	r2, r4
 800cfe4:	4629      	mov	r1, r5
 800cfe6:	bf28      	it	cs
 800cfe8:	4632      	movcs	r2, r6
 800cfea:	f7fe faf6 	bl	800b5da <memcpy>
 800cfee:	4629      	mov	r1, r5
 800cff0:	4638      	mov	r0, r7
 800cff2:	f7ff f8e7 	bl	800c1c4 <_free_r>
 800cff6:	e7f1      	b.n	800cfdc <_realloc_r+0x40>

0800cff8 <__ascii_wctomb>:
 800cff8:	4603      	mov	r3, r0
 800cffa:	4608      	mov	r0, r1
 800cffc:	b141      	cbz	r1, 800d010 <__ascii_wctomb+0x18>
 800cffe:	2aff      	cmp	r2, #255	@ 0xff
 800d000:	d904      	bls.n	800d00c <__ascii_wctomb+0x14>
 800d002:	228a      	movs	r2, #138	@ 0x8a
 800d004:	601a      	str	r2, [r3, #0]
 800d006:	f04f 30ff 	mov.w	r0, #4294967295
 800d00a:	4770      	bx	lr
 800d00c:	700a      	strb	r2, [r1, #0]
 800d00e:	2001      	movs	r0, #1
 800d010:	4770      	bx	lr
	...

0800d014 <fiprintf>:
 800d014:	b40e      	push	{r1, r2, r3}
 800d016:	b503      	push	{r0, r1, lr}
 800d018:	4601      	mov	r1, r0
 800d01a:	ab03      	add	r3, sp, #12
 800d01c:	4805      	ldr	r0, [pc, #20]	@ (800d034 <fiprintf+0x20>)
 800d01e:	f853 2b04 	ldr.w	r2, [r3], #4
 800d022:	6800      	ldr	r0, [r0, #0]
 800d024:	9301      	str	r3, [sp, #4]
 800d026:	f000 f83f 	bl	800d0a8 <_vfiprintf_r>
 800d02a:	b002      	add	sp, #8
 800d02c:	f85d eb04 	ldr.w	lr, [sp], #4
 800d030:	b003      	add	sp, #12
 800d032:	4770      	bx	lr
 800d034:	24000020 	.word	0x24000020

0800d038 <abort>:
 800d038:	b508      	push	{r3, lr}
 800d03a:	2006      	movs	r0, #6
 800d03c:	f000 fa08 	bl	800d450 <raise>
 800d040:	2001      	movs	r0, #1
 800d042:	f7f4 fc32 	bl	80018aa <_exit>

0800d046 <_malloc_usable_size_r>:
 800d046:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d04a:	1f18      	subs	r0, r3, #4
 800d04c:	2b00      	cmp	r3, #0
 800d04e:	bfbc      	itt	lt
 800d050:	580b      	ldrlt	r3, [r1, r0]
 800d052:	18c0      	addlt	r0, r0, r3
 800d054:	4770      	bx	lr

0800d056 <__sfputc_r>:
 800d056:	6893      	ldr	r3, [r2, #8]
 800d058:	3b01      	subs	r3, #1
 800d05a:	2b00      	cmp	r3, #0
 800d05c:	b410      	push	{r4}
 800d05e:	6093      	str	r3, [r2, #8]
 800d060:	da08      	bge.n	800d074 <__sfputc_r+0x1e>
 800d062:	6994      	ldr	r4, [r2, #24]
 800d064:	42a3      	cmp	r3, r4
 800d066:	db01      	blt.n	800d06c <__sfputc_r+0x16>
 800d068:	290a      	cmp	r1, #10
 800d06a:	d103      	bne.n	800d074 <__sfputc_r+0x1e>
 800d06c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d070:	f000 b932 	b.w	800d2d8 <__swbuf_r>
 800d074:	6813      	ldr	r3, [r2, #0]
 800d076:	1c58      	adds	r0, r3, #1
 800d078:	6010      	str	r0, [r2, #0]
 800d07a:	7019      	strb	r1, [r3, #0]
 800d07c:	4608      	mov	r0, r1
 800d07e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d082:	4770      	bx	lr

0800d084 <__sfputs_r>:
 800d084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d086:	4606      	mov	r6, r0
 800d088:	460f      	mov	r7, r1
 800d08a:	4614      	mov	r4, r2
 800d08c:	18d5      	adds	r5, r2, r3
 800d08e:	42ac      	cmp	r4, r5
 800d090:	d101      	bne.n	800d096 <__sfputs_r+0x12>
 800d092:	2000      	movs	r0, #0
 800d094:	e007      	b.n	800d0a6 <__sfputs_r+0x22>
 800d096:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d09a:	463a      	mov	r2, r7
 800d09c:	4630      	mov	r0, r6
 800d09e:	f7ff ffda 	bl	800d056 <__sfputc_r>
 800d0a2:	1c43      	adds	r3, r0, #1
 800d0a4:	d1f3      	bne.n	800d08e <__sfputs_r+0xa>
 800d0a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d0a8 <_vfiprintf_r>:
 800d0a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d0ac:	460d      	mov	r5, r1
 800d0ae:	b09d      	sub	sp, #116	@ 0x74
 800d0b0:	4614      	mov	r4, r2
 800d0b2:	4698      	mov	r8, r3
 800d0b4:	4606      	mov	r6, r0
 800d0b6:	b118      	cbz	r0, 800d0c0 <_vfiprintf_r+0x18>
 800d0b8:	6a03      	ldr	r3, [r0, #32]
 800d0ba:	b90b      	cbnz	r3, 800d0c0 <_vfiprintf_r+0x18>
 800d0bc:	f7fe f95e 	bl	800b37c <__sinit>
 800d0c0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d0c2:	07d9      	lsls	r1, r3, #31
 800d0c4:	d405      	bmi.n	800d0d2 <_vfiprintf_r+0x2a>
 800d0c6:	89ab      	ldrh	r3, [r5, #12]
 800d0c8:	059a      	lsls	r2, r3, #22
 800d0ca:	d402      	bmi.n	800d0d2 <_vfiprintf_r+0x2a>
 800d0cc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d0ce:	f7fe fa82 	bl	800b5d6 <__retarget_lock_acquire_recursive>
 800d0d2:	89ab      	ldrh	r3, [r5, #12]
 800d0d4:	071b      	lsls	r3, r3, #28
 800d0d6:	d501      	bpl.n	800d0dc <_vfiprintf_r+0x34>
 800d0d8:	692b      	ldr	r3, [r5, #16]
 800d0da:	b99b      	cbnz	r3, 800d104 <_vfiprintf_r+0x5c>
 800d0dc:	4629      	mov	r1, r5
 800d0de:	4630      	mov	r0, r6
 800d0e0:	f000 f938 	bl	800d354 <__swsetup_r>
 800d0e4:	b170      	cbz	r0, 800d104 <_vfiprintf_r+0x5c>
 800d0e6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d0e8:	07dc      	lsls	r4, r3, #31
 800d0ea:	d504      	bpl.n	800d0f6 <_vfiprintf_r+0x4e>
 800d0ec:	f04f 30ff 	mov.w	r0, #4294967295
 800d0f0:	b01d      	add	sp, #116	@ 0x74
 800d0f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d0f6:	89ab      	ldrh	r3, [r5, #12]
 800d0f8:	0598      	lsls	r0, r3, #22
 800d0fa:	d4f7      	bmi.n	800d0ec <_vfiprintf_r+0x44>
 800d0fc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d0fe:	f7fe fa6b 	bl	800b5d8 <__retarget_lock_release_recursive>
 800d102:	e7f3      	b.n	800d0ec <_vfiprintf_r+0x44>
 800d104:	2300      	movs	r3, #0
 800d106:	9309      	str	r3, [sp, #36]	@ 0x24
 800d108:	2320      	movs	r3, #32
 800d10a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d10e:	f8cd 800c 	str.w	r8, [sp, #12]
 800d112:	2330      	movs	r3, #48	@ 0x30
 800d114:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800d2c4 <_vfiprintf_r+0x21c>
 800d118:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d11c:	f04f 0901 	mov.w	r9, #1
 800d120:	4623      	mov	r3, r4
 800d122:	469a      	mov	sl, r3
 800d124:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d128:	b10a      	cbz	r2, 800d12e <_vfiprintf_r+0x86>
 800d12a:	2a25      	cmp	r2, #37	@ 0x25
 800d12c:	d1f9      	bne.n	800d122 <_vfiprintf_r+0x7a>
 800d12e:	ebba 0b04 	subs.w	fp, sl, r4
 800d132:	d00b      	beq.n	800d14c <_vfiprintf_r+0xa4>
 800d134:	465b      	mov	r3, fp
 800d136:	4622      	mov	r2, r4
 800d138:	4629      	mov	r1, r5
 800d13a:	4630      	mov	r0, r6
 800d13c:	f7ff ffa2 	bl	800d084 <__sfputs_r>
 800d140:	3001      	adds	r0, #1
 800d142:	f000 80a7 	beq.w	800d294 <_vfiprintf_r+0x1ec>
 800d146:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d148:	445a      	add	r2, fp
 800d14a:	9209      	str	r2, [sp, #36]	@ 0x24
 800d14c:	f89a 3000 	ldrb.w	r3, [sl]
 800d150:	2b00      	cmp	r3, #0
 800d152:	f000 809f 	beq.w	800d294 <_vfiprintf_r+0x1ec>
 800d156:	2300      	movs	r3, #0
 800d158:	f04f 32ff 	mov.w	r2, #4294967295
 800d15c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d160:	f10a 0a01 	add.w	sl, sl, #1
 800d164:	9304      	str	r3, [sp, #16]
 800d166:	9307      	str	r3, [sp, #28]
 800d168:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d16c:	931a      	str	r3, [sp, #104]	@ 0x68
 800d16e:	4654      	mov	r4, sl
 800d170:	2205      	movs	r2, #5
 800d172:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d176:	4853      	ldr	r0, [pc, #332]	@ (800d2c4 <_vfiprintf_r+0x21c>)
 800d178:	f7f3 f8b2 	bl	80002e0 <memchr>
 800d17c:	9a04      	ldr	r2, [sp, #16]
 800d17e:	b9d8      	cbnz	r0, 800d1b8 <_vfiprintf_r+0x110>
 800d180:	06d1      	lsls	r1, r2, #27
 800d182:	bf44      	itt	mi
 800d184:	2320      	movmi	r3, #32
 800d186:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d18a:	0713      	lsls	r3, r2, #28
 800d18c:	bf44      	itt	mi
 800d18e:	232b      	movmi	r3, #43	@ 0x2b
 800d190:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d194:	f89a 3000 	ldrb.w	r3, [sl]
 800d198:	2b2a      	cmp	r3, #42	@ 0x2a
 800d19a:	d015      	beq.n	800d1c8 <_vfiprintf_r+0x120>
 800d19c:	9a07      	ldr	r2, [sp, #28]
 800d19e:	4654      	mov	r4, sl
 800d1a0:	2000      	movs	r0, #0
 800d1a2:	f04f 0c0a 	mov.w	ip, #10
 800d1a6:	4621      	mov	r1, r4
 800d1a8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d1ac:	3b30      	subs	r3, #48	@ 0x30
 800d1ae:	2b09      	cmp	r3, #9
 800d1b0:	d94b      	bls.n	800d24a <_vfiprintf_r+0x1a2>
 800d1b2:	b1b0      	cbz	r0, 800d1e2 <_vfiprintf_r+0x13a>
 800d1b4:	9207      	str	r2, [sp, #28]
 800d1b6:	e014      	b.n	800d1e2 <_vfiprintf_r+0x13a>
 800d1b8:	eba0 0308 	sub.w	r3, r0, r8
 800d1bc:	fa09 f303 	lsl.w	r3, r9, r3
 800d1c0:	4313      	orrs	r3, r2
 800d1c2:	9304      	str	r3, [sp, #16]
 800d1c4:	46a2      	mov	sl, r4
 800d1c6:	e7d2      	b.n	800d16e <_vfiprintf_r+0xc6>
 800d1c8:	9b03      	ldr	r3, [sp, #12]
 800d1ca:	1d19      	adds	r1, r3, #4
 800d1cc:	681b      	ldr	r3, [r3, #0]
 800d1ce:	9103      	str	r1, [sp, #12]
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	bfbb      	ittet	lt
 800d1d4:	425b      	neglt	r3, r3
 800d1d6:	f042 0202 	orrlt.w	r2, r2, #2
 800d1da:	9307      	strge	r3, [sp, #28]
 800d1dc:	9307      	strlt	r3, [sp, #28]
 800d1de:	bfb8      	it	lt
 800d1e0:	9204      	strlt	r2, [sp, #16]
 800d1e2:	7823      	ldrb	r3, [r4, #0]
 800d1e4:	2b2e      	cmp	r3, #46	@ 0x2e
 800d1e6:	d10a      	bne.n	800d1fe <_vfiprintf_r+0x156>
 800d1e8:	7863      	ldrb	r3, [r4, #1]
 800d1ea:	2b2a      	cmp	r3, #42	@ 0x2a
 800d1ec:	d132      	bne.n	800d254 <_vfiprintf_r+0x1ac>
 800d1ee:	9b03      	ldr	r3, [sp, #12]
 800d1f0:	1d1a      	adds	r2, r3, #4
 800d1f2:	681b      	ldr	r3, [r3, #0]
 800d1f4:	9203      	str	r2, [sp, #12]
 800d1f6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d1fa:	3402      	adds	r4, #2
 800d1fc:	9305      	str	r3, [sp, #20]
 800d1fe:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800d2d4 <_vfiprintf_r+0x22c>
 800d202:	7821      	ldrb	r1, [r4, #0]
 800d204:	2203      	movs	r2, #3
 800d206:	4650      	mov	r0, sl
 800d208:	f7f3 f86a 	bl	80002e0 <memchr>
 800d20c:	b138      	cbz	r0, 800d21e <_vfiprintf_r+0x176>
 800d20e:	9b04      	ldr	r3, [sp, #16]
 800d210:	eba0 000a 	sub.w	r0, r0, sl
 800d214:	2240      	movs	r2, #64	@ 0x40
 800d216:	4082      	lsls	r2, r0
 800d218:	4313      	orrs	r3, r2
 800d21a:	3401      	adds	r4, #1
 800d21c:	9304      	str	r3, [sp, #16]
 800d21e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d222:	4829      	ldr	r0, [pc, #164]	@ (800d2c8 <_vfiprintf_r+0x220>)
 800d224:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d228:	2206      	movs	r2, #6
 800d22a:	f7f3 f859 	bl	80002e0 <memchr>
 800d22e:	2800      	cmp	r0, #0
 800d230:	d03f      	beq.n	800d2b2 <_vfiprintf_r+0x20a>
 800d232:	4b26      	ldr	r3, [pc, #152]	@ (800d2cc <_vfiprintf_r+0x224>)
 800d234:	bb1b      	cbnz	r3, 800d27e <_vfiprintf_r+0x1d6>
 800d236:	9b03      	ldr	r3, [sp, #12]
 800d238:	3307      	adds	r3, #7
 800d23a:	f023 0307 	bic.w	r3, r3, #7
 800d23e:	3308      	adds	r3, #8
 800d240:	9303      	str	r3, [sp, #12]
 800d242:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d244:	443b      	add	r3, r7
 800d246:	9309      	str	r3, [sp, #36]	@ 0x24
 800d248:	e76a      	b.n	800d120 <_vfiprintf_r+0x78>
 800d24a:	fb0c 3202 	mla	r2, ip, r2, r3
 800d24e:	460c      	mov	r4, r1
 800d250:	2001      	movs	r0, #1
 800d252:	e7a8      	b.n	800d1a6 <_vfiprintf_r+0xfe>
 800d254:	2300      	movs	r3, #0
 800d256:	3401      	adds	r4, #1
 800d258:	9305      	str	r3, [sp, #20]
 800d25a:	4619      	mov	r1, r3
 800d25c:	f04f 0c0a 	mov.w	ip, #10
 800d260:	4620      	mov	r0, r4
 800d262:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d266:	3a30      	subs	r2, #48	@ 0x30
 800d268:	2a09      	cmp	r2, #9
 800d26a:	d903      	bls.n	800d274 <_vfiprintf_r+0x1cc>
 800d26c:	2b00      	cmp	r3, #0
 800d26e:	d0c6      	beq.n	800d1fe <_vfiprintf_r+0x156>
 800d270:	9105      	str	r1, [sp, #20]
 800d272:	e7c4      	b.n	800d1fe <_vfiprintf_r+0x156>
 800d274:	fb0c 2101 	mla	r1, ip, r1, r2
 800d278:	4604      	mov	r4, r0
 800d27a:	2301      	movs	r3, #1
 800d27c:	e7f0      	b.n	800d260 <_vfiprintf_r+0x1b8>
 800d27e:	ab03      	add	r3, sp, #12
 800d280:	9300      	str	r3, [sp, #0]
 800d282:	462a      	mov	r2, r5
 800d284:	4b12      	ldr	r3, [pc, #72]	@ (800d2d0 <_vfiprintf_r+0x228>)
 800d286:	a904      	add	r1, sp, #16
 800d288:	4630      	mov	r0, r6
 800d28a:	f7fd fc45 	bl	800ab18 <_printf_float>
 800d28e:	4607      	mov	r7, r0
 800d290:	1c78      	adds	r0, r7, #1
 800d292:	d1d6      	bne.n	800d242 <_vfiprintf_r+0x19a>
 800d294:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d296:	07d9      	lsls	r1, r3, #31
 800d298:	d405      	bmi.n	800d2a6 <_vfiprintf_r+0x1fe>
 800d29a:	89ab      	ldrh	r3, [r5, #12]
 800d29c:	059a      	lsls	r2, r3, #22
 800d29e:	d402      	bmi.n	800d2a6 <_vfiprintf_r+0x1fe>
 800d2a0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d2a2:	f7fe f999 	bl	800b5d8 <__retarget_lock_release_recursive>
 800d2a6:	89ab      	ldrh	r3, [r5, #12]
 800d2a8:	065b      	lsls	r3, r3, #25
 800d2aa:	f53f af1f 	bmi.w	800d0ec <_vfiprintf_r+0x44>
 800d2ae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d2b0:	e71e      	b.n	800d0f0 <_vfiprintf_r+0x48>
 800d2b2:	ab03      	add	r3, sp, #12
 800d2b4:	9300      	str	r3, [sp, #0]
 800d2b6:	462a      	mov	r2, r5
 800d2b8:	4b05      	ldr	r3, [pc, #20]	@ (800d2d0 <_vfiprintf_r+0x228>)
 800d2ba:	a904      	add	r1, sp, #16
 800d2bc:	4630      	mov	r0, r6
 800d2be:	f7fd feb3 	bl	800b028 <_printf_i>
 800d2c2:	e7e4      	b.n	800d28e <_vfiprintf_r+0x1e6>
 800d2c4:	0800d7b2 	.word	0x0800d7b2
 800d2c8:	0800d7bc 	.word	0x0800d7bc
 800d2cc:	0800ab19 	.word	0x0800ab19
 800d2d0:	0800d085 	.word	0x0800d085
 800d2d4:	0800d7b8 	.word	0x0800d7b8

0800d2d8 <__swbuf_r>:
 800d2d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d2da:	460e      	mov	r6, r1
 800d2dc:	4614      	mov	r4, r2
 800d2de:	4605      	mov	r5, r0
 800d2e0:	b118      	cbz	r0, 800d2ea <__swbuf_r+0x12>
 800d2e2:	6a03      	ldr	r3, [r0, #32]
 800d2e4:	b90b      	cbnz	r3, 800d2ea <__swbuf_r+0x12>
 800d2e6:	f7fe f849 	bl	800b37c <__sinit>
 800d2ea:	69a3      	ldr	r3, [r4, #24]
 800d2ec:	60a3      	str	r3, [r4, #8]
 800d2ee:	89a3      	ldrh	r3, [r4, #12]
 800d2f0:	071a      	lsls	r2, r3, #28
 800d2f2:	d501      	bpl.n	800d2f8 <__swbuf_r+0x20>
 800d2f4:	6923      	ldr	r3, [r4, #16]
 800d2f6:	b943      	cbnz	r3, 800d30a <__swbuf_r+0x32>
 800d2f8:	4621      	mov	r1, r4
 800d2fa:	4628      	mov	r0, r5
 800d2fc:	f000 f82a 	bl	800d354 <__swsetup_r>
 800d300:	b118      	cbz	r0, 800d30a <__swbuf_r+0x32>
 800d302:	f04f 37ff 	mov.w	r7, #4294967295
 800d306:	4638      	mov	r0, r7
 800d308:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d30a:	6823      	ldr	r3, [r4, #0]
 800d30c:	6922      	ldr	r2, [r4, #16]
 800d30e:	1a98      	subs	r0, r3, r2
 800d310:	6963      	ldr	r3, [r4, #20]
 800d312:	b2f6      	uxtb	r6, r6
 800d314:	4283      	cmp	r3, r0
 800d316:	4637      	mov	r7, r6
 800d318:	dc05      	bgt.n	800d326 <__swbuf_r+0x4e>
 800d31a:	4621      	mov	r1, r4
 800d31c:	4628      	mov	r0, r5
 800d31e:	f7ff fda7 	bl	800ce70 <_fflush_r>
 800d322:	2800      	cmp	r0, #0
 800d324:	d1ed      	bne.n	800d302 <__swbuf_r+0x2a>
 800d326:	68a3      	ldr	r3, [r4, #8]
 800d328:	3b01      	subs	r3, #1
 800d32a:	60a3      	str	r3, [r4, #8]
 800d32c:	6823      	ldr	r3, [r4, #0]
 800d32e:	1c5a      	adds	r2, r3, #1
 800d330:	6022      	str	r2, [r4, #0]
 800d332:	701e      	strb	r6, [r3, #0]
 800d334:	6962      	ldr	r2, [r4, #20]
 800d336:	1c43      	adds	r3, r0, #1
 800d338:	429a      	cmp	r2, r3
 800d33a:	d004      	beq.n	800d346 <__swbuf_r+0x6e>
 800d33c:	89a3      	ldrh	r3, [r4, #12]
 800d33e:	07db      	lsls	r3, r3, #31
 800d340:	d5e1      	bpl.n	800d306 <__swbuf_r+0x2e>
 800d342:	2e0a      	cmp	r6, #10
 800d344:	d1df      	bne.n	800d306 <__swbuf_r+0x2e>
 800d346:	4621      	mov	r1, r4
 800d348:	4628      	mov	r0, r5
 800d34a:	f7ff fd91 	bl	800ce70 <_fflush_r>
 800d34e:	2800      	cmp	r0, #0
 800d350:	d0d9      	beq.n	800d306 <__swbuf_r+0x2e>
 800d352:	e7d6      	b.n	800d302 <__swbuf_r+0x2a>

0800d354 <__swsetup_r>:
 800d354:	b538      	push	{r3, r4, r5, lr}
 800d356:	4b29      	ldr	r3, [pc, #164]	@ (800d3fc <__swsetup_r+0xa8>)
 800d358:	4605      	mov	r5, r0
 800d35a:	6818      	ldr	r0, [r3, #0]
 800d35c:	460c      	mov	r4, r1
 800d35e:	b118      	cbz	r0, 800d368 <__swsetup_r+0x14>
 800d360:	6a03      	ldr	r3, [r0, #32]
 800d362:	b90b      	cbnz	r3, 800d368 <__swsetup_r+0x14>
 800d364:	f7fe f80a 	bl	800b37c <__sinit>
 800d368:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d36c:	0719      	lsls	r1, r3, #28
 800d36e:	d422      	bmi.n	800d3b6 <__swsetup_r+0x62>
 800d370:	06da      	lsls	r2, r3, #27
 800d372:	d407      	bmi.n	800d384 <__swsetup_r+0x30>
 800d374:	2209      	movs	r2, #9
 800d376:	602a      	str	r2, [r5, #0]
 800d378:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d37c:	81a3      	strh	r3, [r4, #12]
 800d37e:	f04f 30ff 	mov.w	r0, #4294967295
 800d382:	e033      	b.n	800d3ec <__swsetup_r+0x98>
 800d384:	0758      	lsls	r0, r3, #29
 800d386:	d512      	bpl.n	800d3ae <__swsetup_r+0x5a>
 800d388:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d38a:	b141      	cbz	r1, 800d39e <__swsetup_r+0x4a>
 800d38c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d390:	4299      	cmp	r1, r3
 800d392:	d002      	beq.n	800d39a <__swsetup_r+0x46>
 800d394:	4628      	mov	r0, r5
 800d396:	f7fe ff15 	bl	800c1c4 <_free_r>
 800d39a:	2300      	movs	r3, #0
 800d39c:	6363      	str	r3, [r4, #52]	@ 0x34
 800d39e:	89a3      	ldrh	r3, [r4, #12]
 800d3a0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800d3a4:	81a3      	strh	r3, [r4, #12]
 800d3a6:	2300      	movs	r3, #0
 800d3a8:	6063      	str	r3, [r4, #4]
 800d3aa:	6923      	ldr	r3, [r4, #16]
 800d3ac:	6023      	str	r3, [r4, #0]
 800d3ae:	89a3      	ldrh	r3, [r4, #12]
 800d3b0:	f043 0308 	orr.w	r3, r3, #8
 800d3b4:	81a3      	strh	r3, [r4, #12]
 800d3b6:	6923      	ldr	r3, [r4, #16]
 800d3b8:	b94b      	cbnz	r3, 800d3ce <__swsetup_r+0x7a>
 800d3ba:	89a3      	ldrh	r3, [r4, #12]
 800d3bc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800d3c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d3c4:	d003      	beq.n	800d3ce <__swsetup_r+0x7a>
 800d3c6:	4621      	mov	r1, r4
 800d3c8:	4628      	mov	r0, r5
 800d3ca:	f000 f883 	bl	800d4d4 <__smakebuf_r>
 800d3ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d3d2:	f013 0201 	ands.w	r2, r3, #1
 800d3d6:	d00a      	beq.n	800d3ee <__swsetup_r+0x9a>
 800d3d8:	2200      	movs	r2, #0
 800d3da:	60a2      	str	r2, [r4, #8]
 800d3dc:	6962      	ldr	r2, [r4, #20]
 800d3de:	4252      	negs	r2, r2
 800d3e0:	61a2      	str	r2, [r4, #24]
 800d3e2:	6922      	ldr	r2, [r4, #16]
 800d3e4:	b942      	cbnz	r2, 800d3f8 <__swsetup_r+0xa4>
 800d3e6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800d3ea:	d1c5      	bne.n	800d378 <__swsetup_r+0x24>
 800d3ec:	bd38      	pop	{r3, r4, r5, pc}
 800d3ee:	0799      	lsls	r1, r3, #30
 800d3f0:	bf58      	it	pl
 800d3f2:	6962      	ldrpl	r2, [r4, #20]
 800d3f4:	60a2      	str	r2, [r4, #8]
 800d3f6:	e7f4      	b.n	800d3e2 <__swsetup_r+0x8e>
 800d3f8:	2000      	movs	r0, #0
 800d3fa:	e7f7      	b.n	800d3ec <__swsetup_r+0x98>
 800d3fc:	24000020 	.word	0x24000020

0800d400 <_raise_r>:
 800d400:	291f      	cmp	r1, #31
 800d402:	b538      	push	{r3, r4, r5, lr}
 800d404:	4605      	mov	r5, r0
 800d406:	460c      	mov	r4, r1
 800d408:	d904      	bls.n	800d414 <_raise_r+0x14>
 800d40a:	2316      	movs	r3, #22
 800d40c:	6003      	str	r3, [r0, #0]
 800d40e:	f04f 30ff 	mov.w	r0, #4294967295
 800d412:	bd38      	pop	{r3, r4, r5, pc}
 800d414:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800d416:	b112      	cbz	r2, 800d41e <_raise_r+0x1e>
 800d418:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d41c:	b94b      	cbnz	r3, 800d432 <_raise_r+0x32>
 800d41e:	4628      	mov	r0, r5
 800d420:	f000 f830 	bl	800d484 <_getpid_r>
 800d424:	4622      	mov	r2, r4
 800d426:	4601      	mov	r1, r0
 800d428:	4628      	mov	r0, r5
 800d42a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d42e:	f000 b817 	b.w	800d460 <_kill_r>
 800d432:	2b01      	cmp	r3, #1
 800d434:	d00a      	beq.n	800d44c <_raise_r+0x4c>
 800d436:	1c59      	adds	r1, r3, #1
 800d438:	d103      	bne.n	800d442 <_raise_r+0x42>
 800d43a:	2316      	movs	r3, #22
 800d43c:	6003      	str	r3, [r0, #0]
 800d43e:	2001      	movs	r0, #1
 800d440:	e7e7      	b.n	800d412 <_raise_r+0x12>
 800d442:	2100      	movs	r1, #0
 800d444:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800d448:	4620      	mov	r0, r4
 800d44a:	4798      	blx	r3
 800d44c:	2000      	movs	r0, #0
 800d44e:	e7e0      	b.n	800d412 <_raise_r+0x12>

0800d450 <raise>:
 800d450:	4b02      	ldr	r3, [pc, #8]	@ (800d45c <raise+0xc>)
 800d452:	4601      	mov	r1, r0
 800d454:	6818      	ldr	r0, [r3, #0]
 800d456:	f7ff bfd3 	b.w	800d400 <_raise_r>
 800d45a:	bf00      	nop
 800d45c:	24000020 	.word	0x24000020

0800d460 <_kill_r>:
 800d460:	b538      	push	{r3, r4, r5, lr}
 800d462:	4d07      	ldr	r5, [pc, #28]	@ (800d480 <_kill_r+0x20>)
 800d464:	2300      	movs	r3, #0
 800d466:	4604      	mov	r4, r0
 800d468:	4608      	mov	r0, r1
 800d46a:	4611      	mov	r1, r2
 800d46c:	602b      	str	r3, [r5, #0]
 800d46e:	f7f4 fa0c 	bl	800188a <_kill>
 800d472:	1c43      	adds	r3, r0, #1
 800d474:	d102      	bne.n	800d47c <_kill_r+0x1c>
 800d476:	682b      	ldr	r3, [r5, #0]
 800d478:	b103      	cbz	r3, 800d47c <_kill_r+0x1c>
 800d47a:	6023      	str	r3, [r4, #0]
 800d47c:	bd38      	pop	{r3, r4, r5, pc}
 800d47e:	bf00      	nop
 800d480:	2400071c 	.word	0x2400071c

0800d484 <_getpid_r>:
 800d484:	f7f4 b9f9 	b.w	800187a <_getpid>

0800d488 <__swhatbuf_r>:
 800d488:	b570      	push	{r4, r5, r6, lr}
 800d48a:	460c      	mov	r4, r1
 800d48c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d490:	2900      	cmp	r1, #0
 800d492:	b096      	sub	sp, #88	@ 0x58
 800d494:	4615      	mov	r5, r2
 800d496:	461e      	mov	r6, r3
 800d498:	da0d      	bge.n	800d4b6 <__swhatbuf_r+0x2e>
 800d49a:	89a3      	ldrh	r3, [r4, #12]
 800d49c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d4a0:	f04f 0100 	mov.w	r1, #0
 800d4a4:	bf14      	ite	ne
 800d4a6:	2340      	movne	r3, #64	@ 0x40
 800d4a8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d4ac:	2000      	movs	r0, #0
 800d4ae:	6031      	str	r1, [r6, #0]
 800d4b0:	602b      	str	r3, [r5, #0]
 800d4b2:	b016      	add	sp, #88	@ 0x58
 800d4b4:	bd70      	pop	{r4, r5, r6, pc}
 800d4b6:	466a      	mov	r2, sp
 800d4b8:	f000 f848 	bl	800d54c <_fstat_r>
 800d4bc:	2800      	cmp	r0, #0
 800d4be:	dbec      	blt.n	800d49a <__swhatbuf_r+0x12>
 800d4c0:	9901      	ldr	r1, [sp, #4]
 800d4c2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d4c6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d4ca:	4259      	negs	r1, r3
 800d4cc:	4159      	adcs	r1, r3
 800d4ce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d4d2:	e7eb      	b.n	800d4ac <__swhatbuf_r+0x24>

0800d4d4 <__smakebuf_r>:
 800d4d4:	898b      	ldrh	r3, [r1, #12]
 800d4d6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d4d8:	079d      	lsls	r5, r3, #30
 800d4da:	4606      	mov	r6, r0
 800d4dc:	460c      	mov	r4, r1
 800d4de:	d507      	bpl.n	800d4f0 <__smakebuf_r+0x1c>
 800d4e0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d4e4:	6023      	str	r3, [r4, #0]
 800d4e6:	6123      	str	r3, [r4, #16]
 800d4e8:	2301      	movs	r3, #1
 800d4ea:	6163      	str	r3, [r4, #20]
 800d4ec:	b003      	add	sp, #12
 800d4ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d4f0:	ab01      	add	r3, sp, #4
 800d4f2:	466a      	mov	r2, sp
 800d4f4:	f7ff ffc8 	bl	800d488 <__swhatbuf_r>
 800d4f8:	9f00      	ldr	r7, [sp, #0]
 800d4fa:	4605      	mov	r5, r0
 800d4fc:	4639      	mov	r1, r7
 800d4fe:	4630      	mov	r0, r6
 800d500:	f7fe fed4 	bl	800c2ac <_malloc_r>
 800d504:	b948      	cbnz	r0, 800d51a <__smakebuf_r+0x46>
 800d506:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d50a:	059a      	lsls	r2, r3, #22
 800d50c:	d4ee      	bmi.n	800d4ec <__smakebuf_r+0x18>
 800d50e:	f023 0303 	bic.w	r3, r3, #3
 800d512:	f043 0302 	orr.w	r3, r3, #2
 800d516:	81a3      	strh	r3, [r4, #12]
 800d518:	e7e2      	b.n	800d4e0 <__smakebuf_r+0xc>
 800d51a:	89a3      	ldrh	r3, [r4, #12]
 800d51c:	6020      	str	r0, [r4, #0]
 800d51e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d522:	81a3      	strh	r3, [r4, #12]
 800d524:	9b01      	ldr	r3, [sp, #4]
 800d526:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d52a:	b15b      	cbz	r3, 800d544 <__smakebuf_r+0x70>
 800d52c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d530:	4630      	mov	r0, r6
 800d532:	f000 f81d 	bl	800d570 <_isatty_r>
 800d536:	b128      	cbz	r0, 800d544 <__smakebuf_r+0x70>
 800d538:	89a3      	ldrh	r3, [r4, #12]
 800d53a:	f023 0303 	bic.w	r3, r3, #3
 800d53e:	f043 0301 	orr.w	r3, r3, #1
 800d542:	81a3      	strh	r3, [r4, #12]
 800d544:	89a3      	ldrh	r3, [r4, #12]
 800d546:	431d      	orrs	r5, r3
 800d548:	81a5      	strh	r5, [r4, #12]
 800d54a:	e7cf      	b.n	800d4ec <__smakebuf_r+0x18>

0800d54c <_fstat_r>:
 800d54c:	b538      	push	{r3, r4, r5, lr}
 800d54e:	4d07      	ldr	r5, [pc, #28]	@ (800d56c <_fstat_r+0x20>)
 800d550:	2300      	movs	r3, #0
 800d552:	4604      	mov	r4, r0
 800d554:	4608      	mov	r0, r1
 800d556:	4611      	mov	r1, r2
 800d558:	602b      	str	r3, [r5, #0]
 800d55a:	f7f4 f9f6 	bl	800194a <_fstat>
 800d55e:	1c43      	adds	r3, r0, #1
 800d560:	d102      	bne.n	800d568 <_fstat_r+0x1c>
 800d562:	682b      	ldr	r3, [r5, #0]
 800d564:	b103      	cbz	r3, 800d568 <_fstat_r+0x1c>
 800d566:	6023      	str	r3, [r4, #0]
 800d568:	bd38      	pop	{r3, r4, r5, pc}
 800d56a:	bf00      	nop
 800d56c:	2400071c 	.word	0x2400071c

0800d570 <_isatty_r>:
 800d570:	b538      	push	{r3, r4, r5, lr}
 800d572:	4d06      	ldr	r5, [pc, #24]	@ (800d58c <_isatty_r+0x1c>)
 800d574:	2300      	movs	r3, #0
 800d576:	4604      	mov	r4, r0
 800d578:	4608      	mov	r0, r1
 800d57a:	602b      	str	r3, [r5, #0]
 800d57c:	f7f4 f9f5 	bl	800196a <_isatty>
 800d580:	1c43      	adds	r3, r0, #1
 800d582:	d102      	bne.n	800d58a <_isatty_r+0x1a>
 800d584:	682b      	ldr	r3, [r5, #0]
 800d586:	b103      	cbz	r3, 800d58a <_isatty_r+0x1a>
 800d588:	6023      	str	r3, [r4, #0]
 800d58a:	bd38      	pop	{r3, r4, r5, pc}
 800d58c:	2400071c 	.word	0x2400071c

0800d590 <_init>:
 800d590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d592:	bf00      	nop
 800d594:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d596:	bc08      	pop	{r3}
 800d598:	469e      	mov	lr, r3
 800d59a:	4770      	bx	lr

0800d59c <_fini>:
 800d59c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d59e:	bf00      	nop
 800d5a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d5a2:	bc08      	pop	{r3}
 800d5a4:	469e      	mov	lr, r3
 800d5a6:	4770      	bx	lr
